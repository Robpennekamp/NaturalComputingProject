{"type":"File","start":0,"end":4907,"loc":{"start":{"line":1,"column":0},"end":{"line":121,"column":0}},"program":{"type":"Program","start":0,"end":4907,"loc":{"start":{"line":1,"column":0},"end":{"line":121,"column":0}},"sourceType":"module","body":[{"type":"Identifier","start":995,"end":4879,"loc":{"start":{"line":18,"column":0},"end":{"line":118,"column":1}},"id":{"type":"Identifier","start":1001,"end":1011,"loc":{"start":{"line":18,"column":6},"end":{"line":18,"column":16},"identifierName":"Constraint"},"name":"Constraint","leadingComments":null},"superClass":null,"body":{"type":"ClassBody","start":1012,"end":4879,"loc":{"start":{"line":18,"column":17},"end":{"line":118,"column":1}},"body":[{"type":"ClassMethod","start":1089,"end":1198,"loc":{"start":{"line":23,"column":1},"end":{"line":25,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1093,"end":1108,"loc":{"start":{"line":23,"column":5},"end":{"line":23,"column":20},"identifierName":"CONSTRAINT_TYPE"},"name":"CONSTRAINT_TYPE"},"kind":"get","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":1111,"end":1198,"loc":{"start":{"line":23,"column":23},"end":{"line":25,"column":2}},"body":[{"type":"ThrowStatement","start":1115,"end":1195,"loc":{"start":{"line":24,"column":2},"end":{"line":24,"column":82}},"argument":{"type":"StringLiteral","start":1121,"end":1194,"loc":{"start":{"line":24,"column":8},"end":{"line":24,"column":81}},"extra":{"rawValue":"You need to implement the 'CONSTRAINT_TYPE' getter for this constraint!","raw":"\"You need to implement the 'CONSTRAINT_TYPE' getter for this constraint!\"","parenthesized":true,"parenStart":1120},"value":"You need to implement the 'CONSTRAINT_TYPE' getter for this constraint!"}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* This method is actually implemented in the subclass.\n\t@abstract\n\t","start":1016,"end":1087,"loc":{"start":{"line":20,"column":1},"end":{"line":22,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* Get the parameters of this constraint from the conf object. \n\t@return {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t","start":1202,"end":1376,"loc":{"start":{"line":27,"column":1},"end":{"line":30,"column":3}}}]},{"type":"ClassMethod","start":1378,"end":1417,"loc":{"start":{"line":31,"column":1},"end":{"line":33,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1382,"end":1392,"loc":{"start":{"line":31,"column":5},"end":{"line":31,"column":15},"identifierName":"parameters"},"name":"parameters"},"kind":"get","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":1394,"end":1417,"loc":{"start":{"line":31,"column":17},"end":{"line":33,"column":2}},"body":[{"type":"ReturnStatement","start":1398,"end":1414,"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":18}},"argument":{"type":"MemberExpression","start":1405,"end":1414,"loc":{"start":{"line":32,"column":9},"end":{"line":32,"column":18}},"object":{"type":"ThisExpression","start":1405,"end":1409,"loc":{"start":{"line":32,"column":9},"end":{"line":32,"column":13}}},"property":{"type":"Identifier","start":1410,"end":1414,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":18},"identifierName":"conf"},"name":"conf"},"computed":false}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Get the parameters of this constraint from the conf object. \n\t@return {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t","start":1202,"end":1376,"loc":{"start":{"line":27,"column":1},"end":{"line":30,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* Get a cellid or cellkind-specific parameter for a constraint. \n\t * This function is here to document its functionality, but it is \n\t * always overwritten by the constructor (via \"set CPM\") to point\n\t * to another function. This is normally  @function  paramOfKind,\n\t * which retrieves the parameter from the conf object for the current {@link cellKind}.\n\t * If CPMEvol is used this is instead redirected to @function  paramOfCell,\n\t * which looks whether the parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * @abstract\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":1420,"end":2229,"loc":{"start":{"line":35,"column":1},"end":{"line":48,"column":3}}},{"type":"CommentBlock","value":" eslint-disable no-unused-vars ","start":2231,"end":2266,"loc":{"start":{"line":49,"column":1},"end":{"line":49,"column":36}}}]},{"type":"ClassMethod","start":2268,"end":2439,"loc":{"start":{"line":50,"column":1},"end":{"line":52,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":2268,"end":2281,"loc":{"start":{"line":50,"column":1},"end":{"line":50,"column":14},"identifierName":"cellParameter"},"name":"cellParameter","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":2282,"end":2287,"loc":{"start":{"line":50,"column":15},"end":{"line":50,"column":20},"identifierName":"param"},"name":"param"},{"type":"Identifier","start":2289,"end":2292,"loc":{"start":{"line":50,"column":22},"end":{"line":50,"column":25},"identifierName":"cid"},"name":"cid"}],"body":{"type":"BlockStatement","start":2293,"end":2439,"loc":{"start":{"line":50,"column":26},"end":{"line":52,"column":2}},"body":[{"type":"ThrowStatement","start":2297,"end":2436,"loc":{"start":{"line":51,"column":2},"end":{"line":51,"column":141}},"argument":{"type":"StringLiteral","start":2304,"end":2435,"loc":{"start":{"line":51,"column":9},"end":{"line":51,"column":140}},"extra":{"rawValue":"this is a template function that should never actually be called as it is overwritten to point to paramOfCell() or paramOfKind().","raw":"\"this is a template function that should never actually be called as it is overwritten to point to paramOfCell() or paramOfKind().\"","parenthesized":true,"parenStart":2302},"value":"this is a template function that should never actually be called as it is overwritten to point to paramOfCell() or paramOfKind()."}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Get a cellid or cellkind-specific parameter for a constraint. \n\t * This function is here to document its functionality, but it is \n\t * always overwritten by the constructor (via \"set CPM\") to point\n\t * to another function. This is normally  @function  paramOfKind,\n\t * which retrieves the parameter from the conf object for the current {@link cellKind}.\n\t * If CPMEvol is used this is instead redirected to @function  paramOfCell,\n\t * which looks whether the parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * @abstract\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":1420,"end":2229,"loc":{"start":{"line":35,"column":1},"end":{"line":48,"column":3}}},{"type":"CommentBlock","value":" eslint-disable no-unused-vars ","start":2231,"end":2266,"loc":{"start":{"line":49,"column":1},"end":{"line":49,"column":36}}}],"trailingComments":[{"type":"CommentBlock","value":"*\n\t * Get a cellId specific parameter, only used if CPMEvol is used: \n\t * looks whether the requested parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":2442,"end":2878,"loc":{"start":{"line":54,"column":1},"end":{"line":62,"column":3}}}]},{"type":"ClassMethod","start":2880,"end":3030,"loc":{"start":{"line":63,"column":1},"end":{"line":68,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":2880,"end":2891,"loc":{"start":{"line":63,"column":1},"end":{"line":63,"column":12},"identifierName":"paramOfCell"},"name":"paramOfCell","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":2892,"end":2897,"loc":{"start":{"line":63,"column":13},"end":{"line":63,"column":18},"identifierName":"param"},"name":"param"},{"type":"Identifier","start":2899,"end":2902,"loc":{"start":{"line":63,"column":20},"end":{"line":63,"column":23},"identifierName":"cid"},"name":"cid"}],"body":{"type":"BlockStatement","start":2903,"end":3030,"loc":{"start":{"line":63,"column":24},"end":{"line":68,"column":2}},"body":[{"type":"IfStatement","start":2907,"end":2990,"loc":{"start":{"line":64,"column":2},"end":{"line":66,"column":3}},"test":{"type":"BinaryExpression","start":2911,"end":2949,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":44}},"left":{"type":"MemberExpression","start":2911,"end":2935,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":30}},"object":{"type":"MemberExpression","start":2911,"end":2928,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":23}},"object":{"type":"MemberExpression","start":2911,"end":2923,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":18}},"object":{"type":"MemberExpression","start":2911,"end":2917,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":12}},"object":{"type":"ThisExpression","start":2911,"end":2915,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":10}}},"property":{"type":"Identifier","start":2916,"end":2917,"loc":{"start":{"line":64,"column":11},"end":{"line":64,"column":12},"identifierName":"C"},"name":"C"},"computed":false},"property":{"type":"Identifier","start":2918,"end":2923,"loc":{"start":{"line":64,"column":13},"end":{"line":64,"column":18},"identifierName":"cells"},"name":"cells"},"computed":false},"property":{"type":"Identifier","start":2924,"end":2927,"loc":{"start":{"line":64,"column":19},"end":{"line":64,"column":22},"identifierName":"cid"},"name":"cid"},"computed":true},"property":{"type":"Identifier","start":2929,"end":2934,"loc":{"start":{"line":64,"column":24},"end":{"line":64,"column":29},"identifierName":"param"},"name":"param"},"computed":true},"operator":"!==","right":{"type":"Identifier","start":2940,"end":2949,"loc":{"start":{"line":64,"column":35},"end":{"line":64,"column":44},"identifierName":"undefined"},"name":"undefined"}},"consequent":{"type":"BlockStatement","start":2950,"end":2990,"loc":{"start":{"line":64,"column":45},"end":{"line":66,"column":3}},"body":[{"type":"ReturnStatement","start":2955,"end":2986,"loc":{"start":{"line":65,"column":3},"end":{"line":65,"column":34}},"argument":{"type":"MemberExpression","start":2962,"end":2986,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":34}},"object":{"type":"MemberExpression","start":2962,"end":2979,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":27}},"object":{"type":"MemberExpression","start":2962,"end":2974,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":22}},"object":{"type":"MemberExpression","start":2962,"end":2968,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":16}},"object":{"type":"ThisExpression","start":2962,"end":2966,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":14}}},"property":{"type":"Identifier","start":2967,"end":2968,"loc":{"start":{"line":65,"column":15},"end":{"line":65,"column":16},"identifierName":"C"},"name":"C"},"computed":false},"property":{"type":"Identifier","start":2969,"end":2974,"loc":{"start":{"line":65,"column":17},"end":{"line":65,"column":22},"identifierName":"cells"},"name":"cells"},"computed":false},"property":{"type":"Identifier","start":2975,"end":2978,"loc":{"start":{"line":65,"column":23},"end":{"line":65,"column":26},"identifierName":"cid"},"name":"cid"},"computed":true},"property":{"type":"Identifier","start":2980,"end":2985,"loc":{"start":{"line":65,"column":28},"end":{"line":65,"column":33},"identifierName":"param"},"name":"param"},"computed":true}}],"directives":[]},"alternate":null},{"type":"ReturnStatement","start":2993,"end":3027,"loc":{"start":{"line":67,"column":2},"end":{"line":67,"column":36}},"argument":{"type":"CallExpression","start":3000,"end":3027,"loc":{"start":{"line":67,"column":9},"end":{"line":67,"column":36}},"callee":{"type":"MemberExpression","start":3000,"end":3016,"loc":{"start":{"line":67,"column":9},"end":{"line":67,"column":25}},"object":{"type":"ThisExpression","start":3000,"end":3004,"loc":{"start":{"line":67,"column":9},"end":{"line":67,"column":13}}},"property":{"type":"Identifier","start":3005,"end":3016,"loc":{"start":{"line":67,"column":14},"end":{"line":67,"column":25},"identifierName":"paramOfKind"},"name":"paramOfKind"},"computed":false},"arguments":[{"type":"Identifier","start":3017,"end":3022,"loc":{"start":{"line":67,"column":26},"end":{"line":67,"column":31},"identifierName":"param"},"name":"param"},{"type":"Identifier","start":3023,"end":3026,"loc":{"start":{"line":67,"column":32},"end":{"line":67,"column":35},"identifierName":"cid"},"name":"cid"}]}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"*\n\t * Get a cellId specific parameter, only used if CPMEvol is used: \n\t * looks whether the requested parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":2442,"end":2878,"loc":{"start":{"line":54,"column":1},"end":{"line":62,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* Returns a cellKind specfic variable: \n\t * Assumes that the parameter is indexable by cellkind.\n\t *\n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":3033,"end":3371,"loc":{"start":{"line":70,"column":1},"end":{"line":76,"column":3}}}]},{"type":"ClassMethod","start":3373,"end":3448,"loc":{"start":{"line":77,"column":1},"end":{"line":79,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":3373,"end":3384,"loc":{"start":{"line":77,"column":1},"end":{"line":77,"column":12},"identifierName":"paramOfKind"},"name":"paramOfKind","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":3385,"end":3390,"loc":{"start":{"line":77,"column":13},"end":{"line":77,"column":18},"identifierName":"param"},"name":"param"},{"type":"Identifier","start":3392,"end":3395,"loc":{"start":{"line":77,"column":20},"end":{"line":77,"column":23},"identifierName":"cid"},"name":"cid"}],"body":{"type":"BlockStatement","start":3396,"end":3448,"loc":{"start":{"line":77,"column":24},"end":{"line":79,"column":2}},"body":[{"type":"ReturnStatement","start":3400,"end":3445,"loc":{"start":{"line":78,"column":2},"end":{"line":78,"column":47}},"argument":{"type":"MemberExpression","start":3407,"end":3445,"loc":{"start":{"line":78,"column":9},"end":{"line":78,"column":47}},"object":{"type":"MemberExpression","start":3407,"end":3423,"loc":{"start":{"line":78,"column":9},"end":{"line":78,"column":25}},"object":{"type":"MemberExpression","start":3407,"end":3416,"loc":{"start":{"line":78,"column":9},"end":{"line":78,"column":18}},"object":{"type":"ThisExpression","start":3407,"end":3411,"loc":{"start":{"line":78,"column":9},"end":{"line":78,"column":13}}},"property":{"type":"Identifier","start":3412,"end":3416,"loc":{"start":{"line":78,"column":14},"end":{"line":78,"column":18},"identifierName":"conf"},"name":"conf"},"computed":false},"property":{"type":"Identifier","start":3417,"end":3422,"loc":{"start":{"line":78,"column":19},"end":{"line":78,"column":24},"identifierName":"param"},"name":"param"},"computed":true},"property":{"type":"CallExpression","start":3424,"end":3444,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":46}},"callee":{"type":"MemberExpression","start":3424,"end":3439,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":41}},"object":{"type":"MemberExpression","start":3424,"end":3430,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":32}},"object":{"type":"ThisExpression","start":3424,"end":3428,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":30}}},"property":{"type":"Identifier","start":3429,"end":3430,"loc":{"start":{"line":78,"column":31},"end":{"line":78,"column":32},"identifierName":"C"},"name":"C"},"computed":false},"property":{"type":"Identifier","start":3431,"end":3439,"loc":{"start":{"line":78,"column":33},"end":{"line":78,"column":41},"identifierName":"cellKind"},"name":"cellKind"},"computed":false},"arguments":[{"type":"Identifier","start":3440,"end":3443,"loc":{"start":{"line":78,"column":42},"end":{"line":78,"column":45},"identifierName":"cid"},"name":"cid"}]},"computed":true}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Returns a cellKind specfic variable: \n\t * Assumes that the parameter is indexable by cellkind.\n\t *\n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":3033,"end":3371,"loc":{"start":{"line":70,"column":1},"end":{"line":76,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* The constructor of a constraint takes a configuration object.\n\tThis method is usually overwritten by the actual constraint so that the entries\n\tof this object can be documented.\n\t@param {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t@abstract","start":3452,"end":3751,"loc":{"start":{"line":81,"column":1},"end":{"line":86,"column":12}}}]},{"type":"ClassMethod","start":3753,"end":3862,"loc":{"start":{"line":87,"column":1},"end":{"line":91,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":3753,"end":3764,"loc":{"start":{"line":87,"column":1},"end":{"line":87,"column":12},"identifierName":"constructor"},"name":"constructor","leadingComments":null},"kind":"constructor","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":3766,"end":3770,"loc":{"start":{"line":87,"column":14},"end":{"line":87,"column":18},"identifierName":"conf"},"name":"conf"}],"body":{"type":"BlockStatement","start":3772,"end":3862,"loc":{"start":{"line":87,"column":20},"end":{"line":91,"column":2}},"body":[{"type":"ExpressionStatement","start":3843,"end":3859,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":18}},"expression":{"type":"AssignmentExpression","start":3843,"end":3859,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":18}},"operator":"=","left":{"type":"MemberExpression","start":3843,"end":3852,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":11}},"object":{"type":"ThisExpression","start":3843,"end":3847,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":6}},"leadingComments":null},"property":{"type":"Identifier","start":3848,"end":3852,"loc":{"start":{"line":90,"column":7},"end":{"line":90,"column":11},"identifierName":"conf"},"name":"conf"},"computed":false,"leadingComments":null},"right":{"type":"Identifier","start":3855,"end":3859,"loc":{"start":{"line":90,"column":14},"end":{"line":90,"column":18},"identifierName":"conf"},"name":"conf"},"leadingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Configuration object for this constraint.\n\t\t@type {object}","start":3776,"end":3840,"loc":{"start":{"line":88,"column":2},"end":{"line":89,"column":18}}}]}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* The constructor of a constraint takes a configuration object.\n\tThis method is usually overwritten by the actual constraint so that the entries\n\tof this object can be documented.\n\t@param {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t@abstract","start":3452,"end":3751,"loc":{"start":{"line":81,"column":1},"end":{"line":86,"column":12}}}],"trailingComments":[{"type":"CommentBlock","value":"* This function attaches the relevant CPM to this constraint, so that information\n\tabout this cpm can be requested from the constraint. If the cpm is of type CPMEvol,\n\tthe cellParameter call is redirected to check for CellId-specific parameters.\n\t@todo Check why some constraints overwrite this? Because that disables the automatic\n\tusage of a confChecker() when it is implemented. \n\t@param {CPM} C - the CPM to attach to this constraint.","start":3864,"end":4306,"loc":{"start":{"line":92,"column":1},"end":{"line":97,"column":57}}},{"type":"CommentBlock","value":"eslint-disable","start":4308,"end":4326,"loc":{"start":{"line":98,"column":1},"end":{"line":98,"column":19}}}]},{"type":"ClassMethod","start":4328,"end":4612,"loc":{"start":{"line":99,"column":1},"end":{"line":110,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":4332,"end":4335,"loc":{"start":{"line":99,"column":5},"end":{"line":99,"column":8},"identifierName":"CPM"},"name":"CPM"},"kind":"set","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":4336,"end":4337,"loc":{"start":{"line":99,"column":9},"end":{"line":99,"column":10},"identifierName":"C"},"name":"C"}],"body":{"type":"BlockStatement","start":4338,"end":4612,"loc":{"start":{"line":99,"column":11},"end":{"line":110,"column":2}},"body":[{"type":"ExpressionStatement","start":4399,"end":4409,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":12}},"expression":{"type":"AssignmentExpression","start":4399,"end":4409,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":12}},"operator":"=","left":{"type":"MemberExpression","start":4399,"end":4405,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":8}},"object":{"type":"ThisExpression","start":4399,"end":4403,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":6}},"leadingComments":null},"property":{"type":"Identifier","start":4404,"end":4405,"loc":{"start":{"line":102,"column":7},"end":{"line":102,"column":8},"identifierName":"C"},"name":"C"},"computed":false,"leadingComments":null},"right":{"type":"Identifier","start":4408,"end":4409,"loc":{"start":{"line":102,"column":11},"end":{"line":102,"column":12},"identifierName":"C"},"name":"C"},"leadingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* CPM on which this constraint acts.\n\t\t@type {CPM}","start":4342,"end":4396,"loc":{"start":{"line":100,"column":2},"end":{"line":101,"column":15}}}]},{"type":"ExpressionStatement","start":4412,"end":4449,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":39}},"expression":{"type":"AssignmentExpression","start":4412,"end":4449,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":39}},"operator":"=","left":{"type":"MemberExpression","start":4412,"end":4430,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":20}},"object":{"type":"ThisExpression","start":4412,"end":4416,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":6}}},"property":{"type":"Identifier","start":4417,"end":4430,"loc":{"start":{"line":103,"column":7},"end":{"line":103,"column":20},"identifierName":"cellParameter"},"name":"cellParameter"},"computed":false},"right":{"type":"MemberExpression","start":4433,"end":4449,"loc":{"start":{"line":103,"column":23},"end":{"line":103,"column":39}},"object":{"type":"ThisExpression","start":4433,"end":4437,"loc":{"start":{"line":103,"column":23},"end":{"line":103,"column":27}}},"property":{"type":"Identifier","start":4438,"end":4449,"loc":{"start":{"line":103,"column":28},"end":{"line":103,"column":39},"identifierName":"paramOfKind"},"name":"paramOfKind"},"computed":false}}},{"type":"IfStatement","start":4452,"end":4535,"loc":{"start":{"line":104,"column":2},"end":{"line":106,"column":3}},"test":{"type":"BinaryExpression","start":4456,"end":4488,"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":38}},"left":{"type":"MemberExpression","start":4456,"end":4474,"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":24}},"object":{"type":"MemberExpression","start":4456,"end":4469,"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":19}},"object":{"type":"Identifier","start":4456,"end":4457,"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":7},"identifierName":"C"},"name":"C"},"property":{"type":"Identifier","start":4458,"end":4469,"loc":{"start":{"line":104,"column":8},"end":{"line":104,"column":19},"identifierName":"constructor"},"name":"constructor"},"computed":false},"property":{"type":"Identifier","start":4470,"end":4474,"loc":{"start":{"line":104,"column":20},"end":{"line":104,"column":24},"identifierName":"name"},"name":"name"},"computed":false},"operator":"===","right":{"type":"StringLiteral","start":4479,"end":4488,"loc":{"start":{"line":104,"column":29},"end":{"line":104,"column":38}},"extra":{"rawValue":"CPMEvol","raw":"\"CPMEvol\""},"value":"CPMEvol"}},"consequent":{"type":"BlockStatement","start":4489,"end":4535,"loc":{"start":{"line":104,"column":39},"end":{"line":106,"column":3}},"body":[{"type":"ExpressionStatement","start":4494,"end":4531,"loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":40}},"expression":{"type":"AssignmentExpression","start":4494,"end":4531,"loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":40}},"operator":"=","left":{"type":"MemberExpression","start":4494,"end":4512,"loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":21}},"object":{"type":"ThisExpression","start":4494,"end":4498,"loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":7}}},"property":{"type":"Identifier","start":4499,"end":4512,"loc":{"start":{"line":105,"column":8},"end":{"line":105,"column":21},"identifierName":"cellParameter"},"name":"cellParameter"},"computed":false},"right":{"type":"MemberExpression","start":4515,"end":4531,"loc":{"start":{"line":105,"column":24},"end":{"line":105,"column":40}},"object":{"type":"ThisExpression","start":4515,"end":4519,"loc":{"start":{"line":105,"column":24},"end":{"line":105,"column":28}}},"property":{"type":"Identifier","start":4520,"end":4531,"loc":{"start":{"line":105,"column":29},"end":{"line":105,"column":40},"identifierName":"paramOfCell"},"name":"paramOfCell"},"computed":false}}}],"directives":[]},"alternate":null},{"type":"IfStatement","start":4538,"end":4609,"loc":{"start":{"line":107,"column":2},"end":{"line":109,"column":3}},"test":{"type":"BinaryExpression","start":4542,"end":4580,"loc":{"start":{"line":107,"column":6},"end":{"line":107,"column":44}},"left":{"type":"UnaryExpression","start":4542,"end":4565,"loc":{"start":{"line":107,"column":6},"end":{"line":107,"column":29}},"operator":"typeof","prefix":true,"argument":{"type":"MemberExpression","start":4549,"end":4565,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":29}},"object":{"type":"ThisExpression","start":4549,"end":4553,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":17}}},"property":{"type":"Identifier","start":4554,"end":4565,"loc":{"start":{"line":107,"column":18},"end":{"line":107,"column":29},"identifierName":"confChecker"},"name":"confChecker"},"computed":false},"extra":{"parenthesizedArgument":false}},"operator":"===","right":{"type":"StringLiteral","start":4570,"end":4580,"loc":{"start":{"line":107,"column":34},"end":{"line":107,"column":44}},"extra":{"rawValue":"function","raw":"\"function\""},"value":"function"}},"consequent":{"type":"BlockStatement","start":4582,"end":4609,"loc":{"start":{"line":107,"column":46},"end":{"line":109,"column":3}},"body":[{"type":"ExpressionStatement","start":4587,"end":4605,"loc":{"start":{"line":108,"column":3},"end":{"line":108,"column":21}},"expression":{"type":"CallExpression","start":4587,"end":4605,"loc":{"start":{"line":108,"column":3},"end":{"line":108,"column":21}},"callee":{"type":"MemberExpression","start":4587,"end":4603,"loc":{"start":{"line":108,"column":3},"end":{"line":108,"column":19}},"object":{"type":"ThisExpression","start":4587,"end":4591,"loc":{"start":{"line":108,"column":3},"end":{"line":108,"column":7}}},"property":{"type":"Identifier","start":4592,"end":4603,"loc":{"start":{"line":108,"column":8},"end":{"line":108,"column":19},"identifierName":"confChecker"},"name":"confChecker"},"computed":false},"arguments":[]}}],"directives":[]},"alternate":null}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* This function attaches the relevant CPM to this constraint, so that information\n\tabout this cpm can be requested from the constraint. If the cpm is of type CPMEvol,\n\tthe cellParameter call is redirected to check for CellId-specific parameters.\n\t@todo Check why some constraints overwrite this? Because that disables the automatic\n\tusage of a confChecker() when it is implemented. \n\t@param {CPM} C - the CPM to attach to this constraint.","start":3864,"end":4306,"loc":{"start":{"line":92,"column":1},"end":{"line":97,"column":57}}},{"type":"CommentBlock","value":"eslint-disable","start":4308,"end":4326,"loc":{"start":{"line":98,"column":1},"end":{"line":98,"column":19}}}],"trailingComments":[{"type":"CommentBlock","value":"* The optional confChecker method should verify that all the required conf parameters\n\tare actually present in the conf object and have the right format. It is implemented in\n\tthe subclass that specifies the actual constraint.\n\t@abstract ","start":4614,"end":4856,"loc":{"start":{"line":111,"column":1},"end":{"line":114,"column":13}}}]},{"type":"ClassMethod","start":4858,"end":4876,"loc":{"start":{"line":115,"column":1},"end":{"line":116,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":4858,"end":4869,"loc":{"start":{"line":115,"column":1},"end":{"line":115,"column":12},"identifierName":"confChecker"},"name":"confChecker","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":4872,"end":4876,"loc":{"start":{"line":115,"column":15},"end":{"line":116,"column":2}},"body":[],"directives":[]},"leadingComments":[{"type":"CommentBlock","value":"* The optional confChecker method should verify that all the required conf parameters\n\tare actually present in the conf object and have the right format. It is implemented in\n\tthe subclass that specifies the actual constraint.\n\t@abstract ","start":4614,"end":4856,"loc":{"start":{"line":111,"column":1},"end":{"line":114,"column":13}}}]}]},"leadingComments":[],"name":"_","trailingComments":[]},{"type":"Identifier","start":4881,"end":4906,"loc":{"start":{"line":120,"column":0},"end":{"line":120,"column":25}},"declaration":{"type":"Identifier","start":4896,"end":4906,"loc":{"start":{"line":120,"column":15},"end":{"line":120,"column":25},"identifierName":"Constraint"},"name":"Constraint"},"name":"_","leadingComments":[],"trailingComments":[]},{"type":"ExportDefaultDeclaration","start":4881,"end":4906,"loc":{"start":{"line":120,"column":0},"end":{"line":120,"column":25}},"declaration":{"type":"ClassDeclaration","start":995,"end":4879,"loc":{"start":{"line":18,"column":0},"end":{"line":118,"column":1}},"id":{"type":"Identifier","start":1001,"end":1011,"loc":{"start":{"line":18,"column":6},"end":{"line":18,"column":16},"identifierName":"Constraint"},"name":"Constraint","leadingComments":null},"superClass":null,"body":{"type":"ClassBody","start":1012,"end":4879,"loc":{"start":{"line":18,"column":17},"end":{"line":118,"column":1}},"body":[{"type":"ClassMethod","start":1089,"end":1198,"loc":{"start":{"line":23,"column":1},"end":{"line":25,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1093,"end":1108,"loc":{"start":{"line":23,"column":5},"end":{"line":23,"column":20},"identifierName":"CONSTRAINT_TYPE"},"name":"CONSTRAINT_TYPE"},"kind":"get","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":1111,"end":1198,"loc":{"start":{"line":23,"column":23},"end":{"line":25,"column":2}},"body":[{"type":"ThrowStatement","start":1115,"end":1195,"loc":{"start":{"line":24,"column":2},"end":{"line":24,"column":82}},"argument":{"type":"StringLiteral","start":1121,"end":1194,"loc":{"start":{"line":24,"column":8},"end":{"line":24,"column":81}},"extra":{"rawValue":"You need to implement the 'CONSTRAINT_TYPE' getter for this constraint!","raw":"\"You need to implement the 'CONSTRAINT_TYPE' getter for this constraint!\"","parenthesized":true,"parenStart":1120},"value":"You need to implement the 'CONSTRAINT_TYPE' getter for this constraint!"}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* This method is actually implemented in the subclass.\n\t@abstract\n\t","start":1016,"end":1087,"loc":{"start":{"line":20,"column":1},"end":{"line":22,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* Get the parameters of this constraint from the conf object. \n\t@return {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t","start":1202,"end":1376,"loc":{"start":{"line":27,"column":1},"end":{"line":30,"column":3}}}]},{"type":"ClassMethod","start":1378,"end":1417,"loc":{"start":{"line":31,"column":1},"end":{"line":33,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1382,"end":1392,"loc":{"start":{"line":31,"column":5},"end":{"line":31,"column":15},"identifierName":"parameters"},"name":"parameters"},"kind":"get","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":1394,"end":1417,"loc":{"start":{"line":31,"column":17},"end":{"line":33,"column":2}},"body":[{"type":"ReturnStatement","start":1398,"end":1414,"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":18}},"argument":{"type":"MemberExpression","start":1405,"end":1414,"loc":{"start":{"line":32,"column":9},"end":{"line":32,"column":18}},"object":{"type":"ThisExpression","start":1405,"end":1409,"loc":{"start":{"line":32,"column":9},"end":{"line":32,"column":13}}},"property":{"type":"Identifier","start":1410,"end":1414,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":18},"identifierName":"conf"},"name":"conf"},"computed":false}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Get the parameters of this constraint from the conf object. \n\t@return {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t","start":1202,"end":1376,"loc":{"start":{"line":27,"column":1},"end":{"line":30,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* Get a cellid or cellkind-specific parameter for a constraint. \n\t * This function is here to document its functionality, but it is \n\t * always overwritten by the constructor (via \"set CPM\") to point\n\t * to another function. This is normally  @function  paramOfKind,\n\t * which retrieves the parameter from the conf object for the current {@link cellKind}.\n\t * If CPMEvol is used this is instead redirected to @function  paramOfCell,\n\t * which looks whether the parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * @abstract\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":1420,"end":2229,"loc":{"start":{"line":35,"column":1},"end":{"line":48,"column":3}}},{"type":"CommentBlock","value":" eslint-disable no-unused-vars ","start":2231,"end":2266,"loc":{"start":{"line":49,"column":1},"end":{"line":49,"column":36}}}]},{"type":"ClassMethod","start":2268,"end":2439,"loc":{"start":{"line":50,"column":1},"end":{"line":52,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":2268,"end":2281,"loc":{"start":{"line":50,"column":1},"end":{"line":50,"column":14},"identifierName":"cellParameter"},"name":"cellParameter","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":2282,"end":2287,"loc":{"start":{"line":50,"column":15},"end":{"line":50,"column":20},"identifierName":"param"},"name":"param"},{"type":"Identifier","start":2289,"end":2292,"loc":{"start":{"line":50,"column":22},"end":{"line":50,"column":25},"identifierName":"cid"},"name":"cid"}],"body":{"type":"BlockStatement","start":2293,"end":2439,"loc":{"start":{"line":50,"column":26},"end":{"line":52,"column":2}},"body":[{"type":"ThrowStatement","start":2297,"end":2436,"loc":{"start":{"line":51,"column":2},"end":{"line":51,"column":141}},"argument":{"type":"StringLiteral","start":2304,"end":2435,"loc":{"start":{"line":51,"column":9},"end":{"line":51,"column":140}},"extra":{"rawValue":"this is a template function that should never actually be called as it is overwritten to point to paramOfCell() or paramOfKind().","raw":"\"this is a template function that should never actually be called as it is overwritten to point to paramOfCell() or paramOfKind().\"","parenthesized":true,"parenStart":2302},"value":"this is a template function that should never actually be called as it is overwritten to point to paramOfCell() or paramOfKind()."}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Get a cellid or cellkind-specific parameter for a constraint. \n\t * This function is here to document its functionality, but it is \n\t * always overwritten by the constructor (via \"set CPM\") to point\n\t * to another function. This is normally  @function  paramOfKind,\n\t * which retrieves the parameter from the conf object for the current {@link cellKind}.\n\t * If CPMEvol is used this is instead redirected to @function  paramOfCell,\n\t * which looks whether the parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * @abstract\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":1420,"end":2229,"loc":{"start":{"line":35,"column":1},"end":{"line":48,"column":3}}},{"type":"CommentBlock","value":" eslint-disable no-unused-vars ","start":2231,"end":2266,"loc":{"start":{"line":49,"column":1},"end":{"line":49,"column":36}}}],"trailingComments":[{"type":"CommentBlock","value":"*\n\t * Get a cellId specific parameter, only used if CPMEvol is used: \n\t * looks whether the requested parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":2442,"end":2878,"loc":{"start":{"line":54,"column":1},"end":{"line":62,"column":3}}}]},{"type":"ClassMethod","start":2880,"end":3030,"loc":{"start":{"line":63,"column":1},"end":{"line":68,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":2880,"end":2891,"loc":{"start":{"line":63,"column":1},"end":{"line":63,"column":12},"identifierName":"paramOfCell"},"name":"paramOfCell","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":2892,"end":2897,"loc":{"start":{"line":63,"column":13},"end":{"line":63,"column":18},"identifierName":"param"},"name":"param"},{"type":"Identifier","start":2899,"end":2902,"loc":{"start":{"line":63,"column":20},"end":{"line":63,"column":23},"identifierName":"cid"},"name":"cid"}],"body":{"type":"BlockStatement","start":2903,"end":3030,"loc":{"start":{"line":63,"column":24},"end":{"line":68,"column":2}},"body":[{"type":"IfStatement","start":2907,"end":2990,"loc":{"start":{"line":64,"column":2},"end":{"line":66,"column":3}},"test":{"type":"BinaryExpression","start":2911,"end":2949,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":44}},"left":{"type":"MemberExpression","start":2911,"end":2935,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":30}},"object":{"type":"MemberExpression","start":2911,"end":2928,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":23}},"object":{"type":"MemberExpression","start":2911,"end":2923,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":18}},"object":{"type":"MemberExpression","start":2911,"end":2917,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":12}},"object":{"type":"ThisExpression","start":2911,"end":2915,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":10}}},"property":{"type":"Identifier","start":2916,"end":2917,"loc":{"start":{"line":64,"column":11},"end":{"line":64,"column":12},"identifierName":"C"},"name":"C"},"computed":false},"property":{"type":"Identifier","start":2918,"end":2923,"loc":{"start":{"line":64,"column":13},"end":{"line":64,"column":18},"identifierName":"cells"},"name":"cells"},"computed":false},"property":{"type":"Identifier","start":2924,"end":2927,"loc":{"start":{"line":64,"column":19},"end":{"line":64,"column":22},"identifierName":"cid"},"name":"cid"},"computed":true},"property":{"type":"Identifier","start":2929,"end":2934,"loc":{"start":{"line":64,"column":24},"end":{"line":64,"column":29},"identifierName":"param"},"name":"param"},"computed":true},"operator":"!==","right":{"type":"Identifier","start":2940,"end":2949,"loc":{"start":{"line":64,"column":35},"end":{"line":64,"column":44},"identifierName":"undefined"},"name":"undefined"}},"consequent":{"type":"BlockStatement","start":2950,"end":2990,"loc":{"start":{"line":64,"column":45},"end":{"line":66,"column":3}},"body":[{"type":"ReturnStatement","start":2955,"end":2986,"loc":{"start":{"line":65,"column":3},"end":{"line":65,"column":34}},"argument":{"type":"MemberExpression","start":2962,"end":2986,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":34}},"object":{"type":"MemberExpression","start":2962,"end":2979,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":27}},"object":{"type":"MemberExpression","start":2962,"end":2974,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":22}},"object":{"type":"MemberExpression","start":2962,"end":2968,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":16}},"object":{"type":"ThisExpression","start":2962,"end":2966,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":14}}},"property":{"type":"Identifier","start":2967,"end":2968,"loc":{"start":{"line":65,"column":15},"end":{"line":65,"column":16},"identifierName":"C"},"name":"C"},"computed":false},"property":{"type":"Identifier","start":2969,"end":2974,"loc":{"start":{"line":65,"column":17},"end":{"line":65,"column":22},"identifierName":"cells"},"name":"cells"},"computed":false},"property":{"type":"Identifier","start":2975,"end":2978,"loc":{"start":{"line":65,"column":23},"end":{"line":65,"column":26},"identifierName":"cid"},"name":"cid"},"computed":true},"property":{"type":"Identifier","start":2980,"end":2985,"loc":{"start":{"line":65,"column":28},"end":{"line":65,"column":33},"identifierName":"param"},"name":"param"},"computed":true}}],"directives":[]},"alternate":null},{"type":"ReturnStatement","start":2993,"end":3027,"loc":{"start":{"line":67,"column":2},"end":{"line":67,"column":36}},"argument":{"type":"CallExpression","start":3000,"end":3027,"loc":{"start":{"line":67,"column":9},"end":{"line":67,"column":36}},"callee":{"type":"MemberExpression","start":3000,"end":3016,"loc":{"start":{"line":67,"column":9},"end":{"line":67,"column":25}},"object":{"type":"ThisExpression","start":3000,"end":3004,"loc":{"start":{"line":67,"column":9},"end":{"line":67,"column":13}}},"property":{"type":"Identifier","start":3005,"end":3016,"loc":{"start":{"line":67,"column":14},"end":{"line":67,"column":25},"identifierName":"paramOfKind"},"name":"paramOfKind"},"computed":false},"arguments":[{"type":"Identifier","start":3017,"end":3022,"loc":{"start":{"line":67,"column":26},"end":{"line":67,"column":31},"identifierName":"param"},"name":"param"},{"type":"Identifier","start":3023,"end":3026,"loc":{"start":{"line":67,"column":32},"end":{"line":67,"column":35},"identifierName":"cid"},"name":"cid"}]}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"*\n\t * Get a cellId specific parameter, only used if CPMEvol is used: \n\t * looks whether the requested parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":2442,"end":2878,"loc":{"start":{"line":54,"column":1},"end":{"line":62,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* Returns a cellKind specfic variable: \n\t * Assumes that the parameter is indexable by cellkind.\n\t *\n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":3033,"end":3371,"loc":{"start":{"line":70,"column":1},"end":{"line":76,"column":3}}}]},{"type":"ClassMethod","start":3373,"end":3448,"loc":{"start":{"line":77,"column":1},"end":{"line":79,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":3373,"end":3384,"loc":{"start":{"line":77,"column":1},"end":{"line":77,"column":12},"identifierName":"paramOfKind"},"name":"paramOfKind","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":3385,"end":3390,"loc":{"start":{"line":77,"column":13},"end":{"line":77,"column":18},"identifierName":"param"},"name":"param"},{"type":"Identifier","start":3392,"end":3395,"loc":{"start":{"line":77,"column":20},"end":{"line":77,"column":23},"identifierName":"cid"},"name":"cid"}],"body":{"type":"BlockStatement","start":3396,"end":3448,"loc":{"start":{"line":77,"column":24},"end":{"line":79,"column":2}},"body":[{"type":"ReturnStatement","start":3400,"end":3445,"loc":{"start":{"line":78,"column":2},"end":{"line":78,"column":47}},"argument":{"type":"MemberExpression","start":3407,"end":3445,"loc":{"start":{"line":78,"column":9},"end":{"line":78,"column":47}},"object":{"type":"MemberExpression","start":3407,"end":3423,"loc":{"start":{"line":78,"column":9},"end":{"line":78,"column":25}},"object":{"type":"MemberExpression","start":3407,"end":3416,"loc":{"start":{"line":78,"column":9},"end":{"line":78,"column":18}},"object":{"type":"ThisExpression","start":3407,"end":3411,"loc":{"start":{"line":78,"column":9},"end":{"line":78,"column":13}}},"property":{"type":"Identifier","start":3412,"end":3416,"loc":{"start":{"line":78,"column":14},"end":{"line":78,"column":18},"identifierName":"conf"},"name":"conf"},"computed":false},"property":{"type":"Identifier","start":3417,"end":3422,"loc":{"start":{"line":78,"column":19},"end":{"line":78,"column":24},"identifierName":"param"},"name":"param"},"computed":true},"property":{"type":"CallExpression","start":3424,"end":3444,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":46}},"callee":{"type":"MemberExpression","start":3424,"end":3439,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":41}},"object":{"type":"MemberExpression","start":3424,"end":3430,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":32}},"object":{"type":"ThisExpression","start":3424,"end":3428,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":30}}},"property":{"type":"Identifier","start":3429,"end":3430,"loc":{"start":{"line":78,"column":31},"end":{"line":78,"column":32},"identifierName":"C"},"name":"C"},"computed":false},"property":{"type":"Identifier","start":3431,"end":3439,"loc":{"start":{"line":78,"column":33},"end":{"line":78,"column":41},"identifierName":"cellKind"},"name":"cellKind"},"computed":false},"arguments":[{"type":"Identifier","start":3440,"end":3443,"loc":{"start":{"line":78,"column":42},"end":{"line":78,"column":45},"identifierName":"cid"},"name":"cid"}]},"computed":true}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Returns a cellKind specfic variable: \n\t * Assumes that the parameter is indexable by cellkind.\n\t *\n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":3033,"end":3371,"loc":{"start":{"line":70,"column":1},"end":{"line":76,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* The constructor of a constraint takes a configuration object.\n\tThis method is usually overwritten by the actual constraint so that the entries\n\tof this object can be documented.\n\t@param {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t@abstract","start":3452,"end":3751,"loc":{"start":{"line":81,"column":1},"end":{"line":86,"column":12}}}]},{"type":"ClassMethod","start":3753,"end":3862,"loc":{"start":{"line":87,"column":1},"end":{"line":91,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":3753,"end":3764,"loc":{"start":{"line":87,"column":1},"end":{"line":87,"column":12},"identifierName":"constructor"},"name":"constructor","leadingComments":null},"kind":"constructor","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":3766,"end":3770,"loc":{"start":{"line":87,"column":14},"end":{"line":87,"column":18},"identifierName":"conf"},"name":"conf"}],"body":{"type":"BlockStatement","start":3772,"end":3862,"loc":{"start":{"line":87,"column":20},"end":{"line":91,"column":2}},"body":[{"type":"ExpressionStatement","start":3843,"end":3859,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":18}},"expression":{"type":"AssignmentExpression","start":3843,"end":3859,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":18}},"operator":"=","left":{"type":"MemberExpression","start":3843,"end":3852,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":11}},"object":{"type":"ThisExpression","start":3843,"end":3847,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":6}},"leadingComments":null},"property":{"type":"Identifier","start":3848,"end":3852,"loc":{"start":{"line":90,"column":7},"end":{"line":90,"column":11},"identifierName":"conf"},"name":"conf"},"computed":false,"leadingComments":null},"right":{"type":"Identifier","start":3855,"end":3859,"loc":{"start":{"line":90,"column":14},"end":{"line":90,"column":18},"identifierName":"conf"},"name":"conf"},"leadingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Configuration object for this constraint.\n\t\t@type {object}","start":3776,"end":3840,"loc":{"start":{"line":88,"column":2},"end":{"line":89,"column":18}}}]}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* The constructor of a constraint takes a configuration object.\n\tThis method is usually overwritten by the actual constraint so that the entries\n\tof this object can be documented.\n\t@param {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t@abstract","start":3452,"end":3751,"loc":{"start":{"line":81,"column":1},"end":{"line":86,"column":12}}}],"trailingComments":[{"type":"CommentBlock","value":"* This function attaches the relevant CPM to this constraint, so that information\n\tabout this cpm can be requested from the constraint. If the cpm is of type CPMEvol,\n\tthe cellParameter call is redirected to check for CellId-specific parameters.\n\t@todo Check why some constraints overwrite this? Because that disables the automatic\n\tusage of a confChecker() when it is implemented. \n\t@param {CPM} C - the CPM to attach to this constraint.","start":3864,"end":4306,"loc":{"start":{"line":92,"column":1},"end":{"line":97,"column":57}}},{"type":"CommentBlock","value":"eslint-disable","start":4308,"end":4326,"loc":{"start":{"line":98,"column":1},"end":{"line":98,"column":19}}}]},{"type":"ClassMethod","start":4328,"end":4612,"loc":{"start":{"line":99,"column":1},"end":{"line":110,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":4332,"end":4335,"loc":{"start":{"line":99,"column":5},"end":{"line":99,"column":8},"identifierName":"CPM"},"name":"CPM"},"kind":"set","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":4336,"end":4337,"loc":{"start":{"line":99,"column":9},"end":{"line":99,"column":10},"identifierName":"C"},"name":"C"}],"body":{"type":"BlockStatement","start":4338,"end":4612,"loc":{"start":{"line":99,"column":11},"end":{"line":110,"column":2}},"body":[{"type":"ExpressionStatement","start":4399,"end":4409,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":12}},"expression":{"type":"AssignmentExpression","start":4399,"end":4409,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":12}},"operator":"=","left":{"type":"MemberExpression","start":4399,"end":4405,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":8}},"object":{"type":"ThisExpression","start":4399,"end":4403,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":6}},"leadingComments":null},"property":{"type":"Identifier","start":4404,"end":4405,"loc":{"start":{"line":102,"column":7},"end":{"line":102,"column":8},"identifierName":"C"},"name":"C"},"computed":false,"leadingComments":null},"right":{"type":"Identifier","start":4408,"end":4409,"loc":{"start":{"line":102,"column":11},"end":{"line":102,"column":12},"identifierName":"C"},"name":"C"},"leadingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* CPM on which this constraint acts.\n\t\t@type {CPM}","start":4342,"end":4396,"loc":{"start":{"line":100,"column":2},"end":{"line":101,"column":15}}}]},{"type":"ExpressionStatement","start":4412,"end":4449,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":39}},"expression":{"type":"AssignmentExpression","start":4412,"end":4449,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":39}},"operator":"=","left":{"type":"MemberExpression","start":4412,"end":4430,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":20}},"object":{"type":"ThisExpression","start":4412,"end":4416,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":6}}},"property":{"type":"Identifier","start":4417,"end":4430,"loc":{"start":{"line":103,"column":7},"end":{"line":103,"column":20},"identifierName":"cellParameter"},"name":"cellParameter"},"computed":false},"right":{"type":"MemberExpression","start":4433,"end":4449,"loc":{"start":{"line":103,"column":23},"end":{"line":103,"column":39}},"object":{"type":"ThisExpression","start":4433,"end":4437,"loc":{"start":{"line":103,"column":23},"end":{"line":103,"column":27}}},"property":{"type":"Identifier","start":4438,"end":4449,"loc":{"start":{"line":103,"column":28},"end":{"line":103,"column":39},"identifierName":"paramOfKind"},"name":"paramOfKind"},"computed":false}}},{"type":"IfStatement","start":4452,"end":4535,"loc":{"start":{"line":104,"column":2},"end":{"line":106,"column":3}},"test":{"type":"BinaryExpression","start":4456,"end":4488,"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":38}},"left":{"type":"MemberExpression","start":4456,"end":4474,"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":24}},"object":{"type":"MemberExpression","start":4456,"end":4469,"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":19}},"object":{"type":"Identifier","start":4456,"end":4457,"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":7},"identifierName":"C"},"name":"C"},"property":{"type":"Identifier","start":4458,"end":4469,"loc":{"start":{"line":104,"column":8},"end":{"line":104,"column":19},"identifierName":"constructor"},"name":"constructor"},"computed":false},"property":{"type":"Identifier","start":4470,"end":4474,"loc":{"start":{"line":104,"column":20},"end":{"line":104,"column":24},"identifierName":"name"},"name":"name"},"computed":false},"operator":"===","right":{"type":"StringLiteral","start":4479,"end":4488,"loc":{"start":{"line":104,"column":29},"end":{"line":104,"column":38}},"extra":{"rawValue":"CPMEvol","raw":"\"CPMEvol\""},"value":"CPMEvol"}},"consequent":{"type":"BlockStatement","start":4489,"end":4535,"loc":{"start":{"line":104,"column":39},"end":{"line":106,"column":3}},"body":[{"type":"ExpressionStatement","start":4494,"end":4531,"loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":40}},"expression":{"type":"AssignmentExpression","start":4494,"end":4531,"loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":40}},"operator":"=","left":{"type":"MemberExpression","start":4494,"end":4512,"loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":21}},"object":{"type":"ThisExpression","start":4494,"end":4498,"loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":7}}},"property":{"type":"Identifier","start":4499,"end":4512,"loc":{"start":{"line":105,"column":8},"end":{"line":105,"column":21},"identifierName":"cellParameter"},"name":"cellParameter"},"computed":false},"right":{"type":"MemberExpression","start":4515,"end":4531,"loc":{"start":{"line":105,"column":24},"end":{"line":105,"column":40}},"object":{"type":"ThisExpression","start":4515,"end":4519,"loc":{"start":{"line":105,"column":24},"end":{"line":105,"column":28}}},"property":{"type":"Identifier","start":4520,"end":4531,"loc":{"start":{"line":105,"column":29},"end":{"line":105,"column":40},"identifierName":"paramOfCell"},"name":"paramOfCell"},"computed":false}}}],"directives":[]},"alternate":null},{"type":"IfStatement","start":4538,"end":4609,"loc":{"start":{"line":107,"column":2},"end":{"line":109,"column":3}},"test":{"type":"BinaryExpression","start":4542,"end":4580,"loc":{"start":{"line":107,"column":6},"end":{"line":107,"column":44}},"left":{"type":"UnaryExpression","start":4542,"end":4565,"loc":{"start":{"line":107,"column":6},"end":{"line":107,"column":29}},"operator":"typeof","prefix":true,"argument":{"type":"MemberExpression","start":4549,"end":4565,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":29}},"object":{"type":"ThisExpression","start":4549,"end":4553,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":17}}},"property":{"type":"Identifier","start":4554,"end":4565,"loc":{"start":{"line":107,"column":18},"end":{"line":107,"column":29},"identifierName":"confChecker"},"name":"confChecker"},"computed":false},"extra":{"parenthesizedArgument":false}},"operator":"===","right":{"type":"StringLiteral","start":4570,"end":4580,"loc":{"start":{"line":107,"column":34},"end":{"line":107,"column":44}},"extra":{"rawValue":"function","raw":"\"function\""},"value":"function"}},"consequent":{"type":"BlockStatement","start":4582,"end":4609,"loc":{"start":{"line":107,"column":46},"end":{"line":109,"column":3}},"body":[{"type":"ExpressionStatement","start":4587,"end":4605,"loc":{"start":{"line":108,"column":3},"end":{"line":108,"column":21}},"expression":{"type":"CallExpression","start":4587,"end":4605,"loc":{"start":{"line":108,"column":3},"end":{"line":108,"column":21}},"callee":{"type":"MemberExpression","start":4587,"end":4603,"loc":{"start":{"line":108,"column":3},"end":{"line":108,"column":19}},"object":{"type":"ThisExpression","start":4587,"end":4591,"loc":{"start":{"line":108,"column":3},"end":{"line":108,"column":7}}},"property":{"type":"Identifier","start":4592,"end":4603,"loc":{"start":{"line":108,"column":8},"end":{"line":108,"column":19},"identifierName":"confChecker"},"name":"confChecker"},"computed":false},"arguments":[]}}],"directives":[]},"alternate":null}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* This function attaches the relevant CPM to this constraint, so that information\n\tabout this cpm can be requested from the constraint. If the cpm is of type CPMEvol,\n\tthe cellParameter call is redirected to check for CellId-specific parameters.\n\t@todo Check why some constraints overwrite this? Because that disables the automatic\n\tusage of a confChecker() when it is implemented. \n\t@param {CPM} C - the CPM to attach to this constraint.","start":3864,"end":4306,"loc":{"start":{"line":92,"column":1},"end":{"line":97,"column":57}}},{"type":"CommentBlock","value":"eslint-disable","start":4308,"end":4326,"loc":{"start":{"line":98,"column":1},"end":{"line":98,"column":19}}}],"trailingComments":[{"type":"CommentBlock","value":"* The optional confChecker method should verify that all the required conf parameters\n\tare actually present in the conf object and have the right format. It is implemented in\n\tthe subclass that specifies the actual constraint.\n\t@abstract ","start":4614,"end":4856,"loc":{"start":{"line":111,"column":1},"end":{"line":114,"column":13}}}]},{"type":"ClassMethod","start":4858,"end":4876,"loc":{"start":{"line":115,"column":1},"end":{"line":116,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":4858,"end":4869,"loc":{"start":{"line":115,"column":1},"end":{"line":115,"column":12},"identifierName":"confChecker"},"name":"confChecker","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":4872,"end":4876,"loc":{"start":{"line":115,"column":15},"end":{"line":116,"column":2}},"body":[],"directives":[]},"leadingComments":[{"type":"CommentBlock","value":"* The optional confChecker method should verify that all the required conf parameters\n\tare actually present in the conf object and have the right format. It is implemented in\n\tthe subclass that specifies the actual constraint.\n\t@abstract ","start":4614,"end":4856,"loc":{"start":{"line":111,"column":1},"end":{"line":114,"column":13}}}]}]},"leadingComments":[{"type":"CommentBlock","value":"* This base class defines a general CPM constraint and provides methods that do not \ndepend on the specific constraint used. This class is never used on its own, \nas it does not yet contain the actual definition of a constraint (such as a deltaH method).\n\nIn general, we distinguish between two types of constraint:\n\n- a {@link HardConstraint} is a hard rule that *must* be fulfilled in order for a copy\nattempt to succeed;\n- a {@link SoftConstraint} is an energy term in the Hamiltonian that can make a copy \nattempt either more or less energetically favourable, but does not by itself determine\nwhether a copy attempt will succeed. An unfavourable outcome may be outbalanced by \nfavourable energies from other terms, and even a copy attempt net unfavourable \nenergy (deltaH > 0) may succeed with a success chance P = exp(-DeltaH/T). \n\nSee the subclasses {@link SoftConstraint} and {@link HardConstraint} for details. Each\nimplemented constraint is in turn a subclass of one of these two.\n","start":0,"end":994,"loc":{"start":{"line":1,"column":0},"end":{"line":17,"column":2}}}],"__PseudoExport__":false,"trailingComments":[]},"leadingComments":null}],"directives":[]},"comments":[{"type":"CommentBlock","value":"* This base class defines a general CPM constraint and provides methods that do not \ndepend on the specific constraint used. This class is never used on its own, \nas it does not yet contain the actual definition of a constraint (such as a deltaH method).\n\nIn general, we distinguish between two types of constraint:\n\n- a {@link HardConstraint} is a hard rule that *must* be fulfilled in order for a copy\nattempt to succeed;\n- a {@link SoftConstraint} is an energy term in the Hamiltonian that can make a copy \nattempt either more or less energetically favourable, but does not by itself determine\nwhether a copy attempt will succeed. An unfavourable outcome may be outbalanced by \nfavourable energies from other terms, and even a copy attempt net unfavourable \nenergy (deltaH > 0) may succeed with a success chance P = exp(-DeltaH/T). \n\nSee the subclasses {@link SoftConstraint} and {@link HardConstraint} for details. Each\nimplemented constraint is in turn a subclass of one of these two.\n","start":0,"end":994,"loc":{"start":{"line":1,"column":0},"end":{"line":17,"column":2}}},{"type":"CommentBlock","value":"* This method is actually implemented in the subclass.\n\t@abstract\n\t","start":1016,"end":1087,"loc":{"start":{"line":20,"column":1},"end":{"line":22,"column":3}}},{"type":"CommentBlock","value":"* Get the parameters of this constraint from the conf object. \n\t@return {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t","start":1202,"end":1376,"loc":{"start":{"line":27,"column":1},"end":{"line":30,"column":3}}},{"type":"CommentBlock","value":"* Get a cellid or cellkind-specific parameter for a constraint. \n\t * This function is here to document its functionality, but it is \n\t * always overwritten by the constructor (via \"set CPM\") to point\n\t * to another function. This is normally  @function  paramOfKind,\n\t * which retrieves the parameter from the conf object for the current {@link cellKind}.\n\t * If CPMEvol is used this is instead redirected to @function  paramOfCell,\n\t * which looks whether the parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * @abstract\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":1420,"end":2229,"loc":{"start":{"line":35,"column":1},"end":{"line":48,"column":3}}},{"type":"CommentBlock","value":" eslint-disable no-unused-vars ","start":2231,"end":2266,"loc":{"start":{"line":49,"column":1},"end":{"line":49,"column":36}}},{"type":"CommentBlock","value":"*\n\t * Get a cellId specific parameter, only used if CPMEvol is used: \n\t * looks whether the requested parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":2442,"end":2878,"loc":{"start":{"line":54,"column":1},"end":{"line":62,"column":3}}},{"type":"CommentBlock","value":"* Returns a cellKind specfic variable: \n\t * Assumes that the parameter is indexable by cellkind.\n\t *\n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":3033,"end":3371,"loc":{"start":{"line":70,"column":1},"end":{"line":76,"column":3}}},{"type":"CommentBlock","value":"* The constructor of a constraint takes a configuration object.\n\tThis method is usually overwritten by the actual constraint so that the entries\n\tof this object can be documented.\n\t@param {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t@abstract","start":3452,"end":3751,"loc":{"start":{"line":81,"column":1},"end":{"line":86,"column":12}}},{"type":"CommentBlock","value":"* Configuration object for this constraint.\n\t\t@type {object}","start":3776,"end":3840,"loc":{"start":{"line":88,"column":2},"end":{"line":89,"column":18}}},{"type":"CommentBlock","value":"* This function attaches the relevant CPM to this constraint, so that information\n\tabout this cpm can be requested from the constraint. If the cpm is of type CPMEvol,\n\tthe cellParameter call is redirected to check for CellId-specific parameters.\n\t@todo Check why some constraints overwrite this? Because that disables the automatic\n\tusage of a confChecker() when it is implemented. \n\t@param {CPM} C - the CPM to attach to this constraint.","start":3864,"end":4306,"loc":{"start":{"line":92,"column":1},"end":{"line":97,"column":57}}},{"type":"CommentBlock","value":"eslint-disable","start":4308,"end":4326,"loc":{"start":{"line":98,"column":1},"end":{"line":98,"column":19}}},{"type":"CommentBlock","value":"* CPM on which this constraint acts.\n\t\t@type {CPM}","start":4342,"end":4396,"loc":{"start":{"line":100,"column":2},"end":{"line":101,"column":15}}},{"type":"CommentBlock","value":"* The optional confChecker method should verify that all the required conf parameters\n\tare actually present in the conf object and have the right format. It is implemented in\n\tthe subclass that specifies the actual constraint.\n\t@abstract ","start":4614,"end":4856,"loc":{"start":{"line":111,"column":1},"end":{"line":114,"column":13}}}],"tokens":[{"type":"CommentBlock","value":"* This base class defines a general CPM constraint and provides methods that do not \ndepend on the specific constraint used. This class is never used on its own, \nas it does not yet contain the actual definition of a constraint (such as a deltaH method).\n\nIn general, we distinguish between two types of constraint:\n\n- a {@link HardConstraint} is a hard rule that *must* be fulfilled in order for a copy\nattempt to succeed;\n- a {@link SoftConstraint} is an energy term in the Hamiltonian that can make a copy \nattempt either more or less energetically favourable, but does not by itself determine\nwhether a copy attempt will succeed. An unfavourable outcome may be outbalanced by \nfavourable energies from other terms, and even a copy attempt net unfavourable \nenergy (deltaH > 0) may succeed with a success chance P = exp(-DeltaH/T). \n\nSee the subclasses {@link SoftConstraint} and {@link HardConstraint} for details. Each\nimplemented constraint is in turn a subclass of one of these two.\n","start":0,"end":994,"loc":{"start":{"line":1,"column":0},"end":{"line":17,"column":2}}},{"type":{"label":"class","keyword":"class","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"class","start":995,"end":1000,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":5}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"Constraint","start":1001,"end":1011,"loc":{"start":{"line":18,"column":6},"end":{"line":18,"column":16}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1012,"end":1013,"loc":{"start":{"line":18,"column":17},"end":{"line":18,"column":18}}},{"type":"CommentBlock","value":"* This method is actually implemented in the subclass.\n\t@abstract\n\t","start":1016,"end":1087,"loc":{"start":{"line":20,"column":1},"end":{"line":22,"column":3}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"get","start":1089,"end":1092,"loc":{"start":{"line":23,"column":1},"end":{"line":23,"column":4}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"CONSTRAINT_TYPE","start":1093,"end":1108,"loc":{"start":{"line":23,"column":5},"end":{"line":23,"column":20}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1108,"end":1109,"loc":{"start":{"line":23,"column":20},"end":{"line":23,"column":21}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1109,"end":1110,"loc":{"start":{"line":23,"column":21},"end":{"line":23,"column":22}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1111,"end":1112,"loc":{"start":{"line":23,"column":23},"end":{"line":23,"column":24}}},{"type":{"label":"throw","keyword":"throw","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"throw","start":1115,"end":1120,"loc":{"start":{"line":24,"column":2},"end":{"line":24,"column":7}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1120,"end":1121,"loc":{"start":{"line":24,"column":7},"end":{"line":24,"column":8}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"You need to implement the 'CONSTRAINT_TYPE' getter for this constraint!","start":1121,"end":1194,"loc":{"start":{"line":24,"column":8},"end":{"line":24,"column":81}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1194,"end":1195,"loc":{"start":{"line":24,"column":81},"end":{"line":24,"column":82}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1197,"end":1198,"loc":{"start":{"line":25,"column":1},"end":{"line":25,"column":2}}},{"type":"CommentBlock","value":"* Get the parameters of this constraint from the conf object. \n\t@return {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t","start":1202,"end":1376,"loc":{"start":{"line":27,"column":1},"end":{"line":30,"column":3}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"get","start":1378,"end":1381,"loc":{"start":{"line":31,"column":1},"end":{"line":31,"column":4}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"parameters","start":1382,"end":1392,"loc":{"start":{"line":31,"column":5},"end":{"line":31,"column":15}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1392,"end":1393,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":16}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1393,"end":1394,"loc":{"start":{"line":31,"column":16},"end":{"line":31,"column":17}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1394,"end":1395,"loc":{"start":{"line":31,"column":17},"end":{"line":31,"column":18}}},{"type":{"label":"return","keyword":"return","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"return","start":1398,"end":1404,"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":8}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":1405,"end":1409,"loc":{"start":{"line":32,"column":9},"end":{"line":32,"column":13}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1409,"end":1410,"loc":{"start":{"line":32,"column":13},"end":{"line":32,"column":14}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"conf","start":1410,"end":1414,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":18}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1416,"end":1417,"loc":{"start":{"line":33,"column":1},"end":{"line":33,"column":2}}},{"type":"CommentBlock","value":"* Get a cellid or cellkind-specific parameter for a constraint. \n\t * This function is here to document its functionality, but it is \n\t * always overwritten by the constructor (via \"set CPM\") to point\n\t * to another function. This is normally  @function  paramOfKind,\n\t * which retrieves the parameter from the conf object for the current {@link cellKind}.\n\t * If CPMEvol is used this is instead redirected to @function  paramOfCell,\n\t * which looks whether the parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * @abstract\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":1420,"end":2229,"loc":{"start":{"line":35,"column":1},"end":{"line":48,"column":3}}},{"type":"CommentBlock","value":" eslint-disable no-unused-vars ","start":2231,"end":2266,"loc":{"start":{"line":49,"column":1},"end":{"line":49,"column":36}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cellParameter","start":2268,"end":2281,"loc":{"start":{"line":50,"column":1},"end":{"line":50,"column":14}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2281,"end":2282,"loc":{"start":{"line":50,"column":14},"end":{"line":50,"column":15}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"param","start":2282,"end":2287,"loc":{"start":{"line":50,"column":15},"end":{"line":50,"column":20}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2287,"end":2288,"loc":{"start":{"line":50,"column":20},"end":{"line":50,"column":21}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cid","start":2289,"end":2292,"loc":{"start":{"line":50,"column":22},"end":{"line":50,"column":25}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2292,"end":2293,"loc":{"start":{"line":50,"column":25},"end":{"line":50,"column":26}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2293,"end":2294,"loc":{"start":{"line":50,"column":26},"end":{"line":50,"column":27}}},{"type":{"label":"throw","keyword":"throw","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"throw","start":2297,"end":2302,"loc":{"start":{"line":51,"column":2},"end":{"line":51,"column":7}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2302,"end":2303,"loc":{"start":{"line":51,"column":7},"end":{"line":51,"column":8}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this is a template function that should never actually be called as it is overwritten to point to paramOfCell() or paramOfKind().","start":2304,"end":2435,"loc":{"start":{"line":51,"column":9},"end":{"line":51,"column":140}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2435,"end":2436,"loc":{"start":{"line":51,"column":140},"end":{"line":51,"column":141}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2438,"end":2439,"loc":{"start":{"line":52,"column":1},"end":{"line":52,"column":2}}},{"type":"CommentBlock","value":"*\n\t * Get a cellId specific parameter, only used if CPMEvol is used: \n\t * looks whether the requested parameter is overwritten in an @object Cell\n\t * and otherwise returns @function paramOfKind\n\t * \n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":2442,"end":2878,"loc":{"start":{"line":54,"column":1},"end":{"line":62,"column":3}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"paramOfCell","start":2880,"end":2891,"loc":{"start":{"line":63,"column":1},"end":{"line":63,"column":12}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2891,"end":2892,"loc":{"start":{"line":63,"column":12},"end":{"line":63,"column":13}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"param","start":2892,"end":2897,"loc":{"start":{"line":63,"column":13},"end":{"line":63,"column":18}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2897,"end":2898,"loc":{"start":{"line":63,"column":18},"end":{"line":63,"column":19}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cid","start":2899,"end":2902,"loc":{"start":{"line":63,"column":20},"end":{"line":63,"column":23}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2902,"end":2903,"loc":{"start":{"line":63,"column":23},"end":{"line":63,"column":24}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2903,"end":2904,"loc":{"start":{"line":63,"column":24},"end":{"line":63,"column":25}}},{"type":{"label":"if","keyword":"if","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"if","start":2907,"end":2909,"loc":{"start":{"line":64,"column":2},"end":{"line":64,"column":4}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2910,"end":2911,"loc":{"start":{"line":64,"column":5},"end":{"line":64,"column":6}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":2911,"end":2915,"loc":{"start":{"line":64,"column":6},"end":{"line":64,"column":10}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2915,"end":2916,"loc":{"start":{"line":64,"column":10},"end":{"line":64,"column":11}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"C","start":2916,"end":2917,"loc":{"start":{"line":64,"column":11},"end":{"line":64,"column":12}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2917,"end":2918,"loc":{"start":{"line":64,"column":12},"end":{"line":64,"column":13}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cells","start":2918,"end":2923,"loc":{"start":{"line":64,"column":13},"end":{"line":64,"column":18}}},{"type":{"label":"[","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2923,"end":2924,"loc":{"start":{"line":64,"column":18},"end":{"line":64,"column":19}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cid","start":2924,"end":2927,"loc":{"start":{"line":64,"column":19},"end":{"line":64,"column":22}}},{"type":{"label":"]","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2927,"end":2928,"loc":{"start":{"line":64,"column":22},"end":{"line":64,"column":23}}},{"type":{"label":"[","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2928,"end":2929,"loc":{"start":{"line":64,"column":23},"end":{"line":64,"column":24}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"param","start":2929,"end":2934,"loc":{"start":{"line":64,"column":24},"end":{"line":64,"column":29}}},{"type":{"label":"]","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2934,"end":2935,"loc":{"start":{"line":64,"column":29},"end":{"line":64,"column":30}}},{"type":{"label":"==/!=","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":6,"updateContext":null},"value":"!==","start":2936,"end":2939,"loc":{"start":{"line":64,"column":31},"end":{"line":64,"column":34}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"undefined","start":2940,"end":2949,"loc":{"start":{"line":64,"column":35},"end":{"line":64,"column":44}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2949,"end":2950,"loc":{"start":{"line":64,"column":44},"end":{"line":64,"column":45}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2950,"end":2951,"loc":{"start":{"line":64,"column":45},"end":{"line":64,"column":46}}},{"type":{"label":"return","keyword":"return","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"return","start":2955,"end":2961,"loc":{"start":{"line":65,"column":3},"end":{"line":65,"column":9}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":2962,"end":2966,"loc":{"start":{"line":65,"column":10},"end":{"line":65,"column":14}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2966,"end":2967,"loc":{"start":{"line":65,"column":14},"end":{"line":65,"column":15}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"C","start":2967,"end":2968,"loc":{"start":{"line":65,"column":15},"end":{"line":65,"column":16}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2968,"end":2969,"loc":{"start":{"line":65,"column":16},"end":{"line":65,"column":17}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cells","start":2969,"end":2974,"loc":{"start":{"line":65,"column":17},"end":{"line":65,"column":22}}},{"type":{"label":"[","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2974,"end":2975,"loc":{"start":{"line":65,"column":22},"end":{"line":65,"column":23}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cid","start":2975,"end":2978,"loc":{"start":{"line":65,"column":23},"end":{"line":65,"column":26}}},{"type":{"label":"]","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2978,"end":2979,"loc":{"start":{"line":65,"column":26},"end":{"line":65,"column":27}}},{"type":{"label":"[","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2979,"end":2980,"loc":{"start":{"line":65,"column":27},"end":{"line":65,"column":28}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"param","start":2980,"end":2985,"loc":{"start":{"line":65,"column":28},"end":{"line":65,"column":33}}},{"type":{"label":"]","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2985,"end":2986,"loc":{"start":{"line":65,"column":33},"end":{"line":65,"column":34}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2989,"end":2990,"loc":{"start":{"line":66,"column":2},"end":{"line":66,"column":3}}},{"type":{"label":"return","keyword":"return","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"return","start":2993,"end":2999,"loc":{"start":{"line":67,"column":2},"end":{"line":67,"column":8}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":3000,"end":3004,"loc":{"start":{"line":67,"column":9},"end":{"line":67,"column":13}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3004,"end":3005,"loc":{"start":{"line":67,"column":13},"end":{"line":67,"column":14}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"paramOfKind","start":3005,"end":3016,"loc":{"start":{"line":67,"column":14},"end":{"line":67,"column":25}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3016,"end":3017,"loc":{"start":{"line":67,"column":25},"end":{"line":67,"column":26}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"param","start":3017,"end":3022,"loc":{"start":{"line":67,"column":26},"end":{"line":67,"column":31}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3022,"end":3023,"loc":{"start":{"line":67,"column":31},"end":{"line":67,"column":32}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cid","start":3023,"end":3026,"loc":{"start":{"line":67,"column":32},"end":{"line":67,"column":35}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3026,"end":3027,"loc":{"start":{"line":67,"column":35},"end":{"line":67,"column":36}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3029,"end":3030,"loc":{"start":{"line":68,"column":1},"end":{"line":68,"column":2}}},{"type":"CommentBlock","value":"* Returns a cellKind specfic variable: \n\t * Assumes that the parameter is indexable by cellkind.\n\t *\n\t * @param {string} param - name of parameter in conf object\n\t * @param {CellId} cid - Cell Id of cell in question, if id-specific parameter is not present, cellkind of cid is used\n\t@return {any} parameter - the requested parameter\n\t","start":3033,"end":3371,"loc":{"start":{"line":70,"column":1},"end":{"line":76,"column":3}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"paramOfKind","start":3373,"end":3384,"loc":{"start":{"line":77,"column":1},"end":{"line":77,"column":12}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3384,"end":3385,"loc":{"start":{"line":77,"column":12},"end":{"line":77,"column":13}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"param","start":3385,"end":3390,"loc":{"start":{"line":77,"column":13},"end":{"line":77,"column":18}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3390,"end":3391,"loc":{"start":{"line":77,"column":18},"end":{"line":77,"column":19}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cid","start":3392,"end":3395,"loc":{"start":{"line":77,"column":20},"end":{"line":77,"column":23}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3395,"end":3396,"loc":{"start":{"line":77,"column":23},"end":{"line":77,"column":24}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3396,"end":3397,"loc":{"start":{"line":77,"column":24},"end":{"line":77,"column":25}}},{"type":{"label":"return","keyword":"return","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"return","start":3400,"end":3406,"loc":{"start":{"line":78,"column":2},"end":{"line":78,"column":8}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":3407,"end":3411,"loc":{"start":{"line":78,"column":9},"end":{"line":78,"column":13}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3411,"end":3412,"loc":{"start":{"line":78,"column":13},"end":{"line":78,"column":14}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"conf","start":3412,"end":3416,"loc":{"start":{"line":78,"column":14},"end":{"line":78,"column":18}}},{"type":{"label":"[","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3416,"end":3417,"loc":{"start":{"line":78,"column":18},"end":{"line":78,"column":19}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"param","start":3417,"end":3422,"loc":{"start":{"line":78,"column":19},"end":{"line":78,"column":24}}},{"type":{"label":"]","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3422,"end":3423,"loc":{"start":{"line":78,"column":24},"end":{"line":78,"column":25}}},{"type":{"label":"[","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3423,"end":3424,"loc":{"start":{"line":78,"column":25},"end":{"line":78,"column":26}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":3424,"end":3428,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":30}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3428,"end":3429,"loc":{"start":{"line":78,"column":30},"end":{"line":78,"column":31}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"C","start":3429,"end":3430,"loc":{"start":{"line":78,"column":31},"end":{"line":78,"column":32}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3430,"end":3431,"loc":{"start":{"line":78,"column":32},"end":{"line":78,"column":33}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cellKind","start":3431,"end":3439,"loc":{"start":{"line":78,"column":33},"end":{"line":78,"column":41}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3439,"end":3440,"loc":{"start":{"line":78,"column":41},"end":{"line":78,"column":42}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cid","start":3440,"end":3443,"loc":{"start":{"line":78,"column":42},"end":{"line":78,"column":45}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3443,"end":3444,"loc":{"start":{"line":78,"column":45},"end":{"line":78,"column":46}}},{"type":{"label":"]","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3444,"end":3445,"loc":{"start":{"line":78,"column":46},"end":{"line":78,"column":47}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3447,"end":3448,"loc":{"start":{"line":79,"column":1},"end":{"line":79,"column":2}}},{"type":"CommentBlock","value":"* The constructor of a constraint takes a configuration object.\n\tThis method is usually overwritten by the actual constraint so that the entries\n\tof this object can be documented.\n\t@param {object} conf - configuration settings for this constraint, containing the\n\trelevant parameters.\n\t@abstract","start":3452,"end":3751,"loc":{"start":{"line":81,"column":1},"end":{"line":86,"column":12}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"constructor","start":3753,"end":3764,"loc":{"start":{"line":87,"column":1},"end":{"line":87,"column":12}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3764,"end":3765,"loc":{"start":{"line":87,"column":12},"end":{"line":87,"column":13}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"conf","start":3766,"end":3770,"loc":{"start":{"line":87,"column":14},"end":{"line":87,"column":18}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3771,"end":3772,"loc":{"start":{"line":87,"column":19},"end":{"line":87,"column":20}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3772,"end":3773,"loc":{"start":{"line":87,"column":20},"end":{"line":87,"column":21}}},{"type":"CommentBlock","value":"* Configuration object for this constraint.\n\t\t@type {object}","start":3776,"end":3840,"loc":{"start":{"line":88,"column":2},"end":{"line":89,"column":18}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":3843,"end":3847,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":6}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":3847,"end":3848,"loc":{"start":{"line":90,"column":6},"end":{"line":90,"column":7}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"conf","start":3848,"end":3852,"loc":{"start":{"line":90,"column":7},"end":{"line":90,"column":11}}},{"type":{"label":"=","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":true,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"=","start":3853,"end":3854,"loc":{"start":{"line":90,"column":12},"end":{"line":90,"column":13}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"conf","start":3855,"end":3859,"loc":{"start":{"line":90,"column":14},"end":{"line":90,"column":18}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":3861,"end":3862,"loc":{"start":{"line":91,"column":1},"end":{"line":91,"column":2}}},{"type":"CommentBlock","value":"* This function attaches the relevant CPM to this constraint, so that information\n\tabout this cpm can be requested from the constraint. If the cpm is of type CPMEvol,\n\tthe cellParameter call is redirected to check for CellId-specific parameters.\n\t@todo Check why some constraints overwrite this? Because that disables the automatic\n\tusage of a confChecker() when it is implemented. \n\t@param {CPM} C - the CPM to attach to this constraint.","start":3864,"end":4306,"loc":{"start":{"line":92,"column":1},"end":{"line":97,"column":57}}},{"type":"CommentBlock","value":"eslint-disable","start":4308,"end":4326,"loc":{"start":{"line":98,"column":1},"end":{"line":98,"column":19}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"set","start":4328,"end":4331,"loc":{"start":{"line":99,"column":1},"end":{"line":99,"column":4}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"CPM","start":4332,"end":4335,"loc":{"start":{"line":99,"column":5},"end":{"line":99,"column":8}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4335,"end":4336,"loc":{"start":{"line":99,"column":8},"end":{"line":99,"column":9}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"C","start":4336,"end":4337,"loc":{"start":{"line":99,"column":9},"end":{"line":99,"column":10}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4337,"end":4338,"loc":{"start":{"line":99,"column":10},"end":{"line":99,"column":11}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4338,"end":4339,"loc":{"start":{"line":99,"column":11},"end":{"line":99,"column":12}}},{"type":"CommentBlock","value":"* CPM on which this constraint acts.\n\t\t@type {CPM}","start":4342,"end":4396,"loc":{"start":{"line":100,"column":2},"end":{"line":101,"column":15}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":4399,"end":4403,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":6}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4403,"end":4404,"loc":{"start":{"line":102,"column":6},"end":{"line":102,"column":7}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"C","start":4404,"end":4405,"loc":{"start":{"line":102,"column":7},"end":{"line":102,"column":8}}},{"type":{"label":"=","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":true,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"=","start":4406,"end":4407,"loc":{"start":{"line":102,"column":9},"end":{"line":102,"column":10}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"C","start":4408,"end":4409,"loc":{"start":{"line":102,"column":11},"end":{"line":102,"column":12}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":4412,"end":4416,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":6}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4416,"end":4417,"loc":{"start":{"line":103,"column":6},"end":{"line":103,"column":7}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cellParameter","start":4417,"end":4430,"loc":{"start":{"line":103,"column":7},"end":{"line":103,"column":20}}},{"type":{"label":"=","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":true,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"=","start":4431,"end":4432,"loc":{"start":{"line":103,"column":21},"end":{"line":103,"column":22}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":4433,"end":4437,"loc":{"start":{"line":103,"column":23},"end":{"line":103,"column":27}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4437,"end":4438,"loc":{"start":{"line":103,"column":27},"end":{"line":103,"column":28}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"paramOfKind","start":4438,"end":4449,"loc":{"start":{"line":103,"column":28},"end":{"line":103,"column":39}}},{"type":{"label":"if","keyword":"if","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"if","start":4452,"end":4454,"loc":{"start":{"line":104,"column":2},"end":{"line":104,"column":4}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4455,"end":4456,"loc":{"start":{"line":104,"column":5},"end":{"line":104,"column":6}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"C","start":4456,"end":4457,"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":7}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4457,"end":4458,"loc":{"start":{"line":104,"column":7},"end":{"line":104,"column":8}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"constructor","start":4458,"end":4469,"loc":{"start":{"line":104,"column":8},"end":{"line":104,"column":19}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4469,"end":4470,"loc":{"start":{"line":104,"column":19},"end":{"line":104,"column":20}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"name","start":4470,"end":4474,"loc":{"start":{"line":104,"column":20},"end":{"line":104,"column":24}}},{"type":{"label":"==/!=","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":6,"updateContext":null},"value":"===","start":4475,"end":4478,"loc":{"start":{"line":104,"column":25},"end":{"line":104,"column":28}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"CPMEvol","start":4479,"end":4488,"loc":{"start":{"line":104,"column":29},"end":{"line":104,"column":38}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4488,"end":4489,"loc":{"start":{"line":104,"column":38},"end":{"line":104,"column":39}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4489,"end":4490,"loc":{"start":{"line":104,"column":39},"end":{"line":104,"column":40}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":4494,"end":4498,"loc":{"start":{"line":105,"column":3},"end":{"line":105,"column":7}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4498,"end":4499,"loc":{"start":{"line":105,"column":7},"end":{"line":105,"column":8}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cellParameter","start":4499,"end":4512,"loc":{"start":{"line":105,"column":8},"end":{"line":105,"column":21}}},{"type":{"label":"=","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":true,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"=","start":4513,"end":4514,"loc":{"start":{"line":105,"column":22},"end":{"line":105,"column":23}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":4515,"end":4519,"loc":{"start":{"line":105,"column":24},"end":{"line":105,"column":28}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4519,"end":4520,"loc":{"start":{"line":105,"column":28},"end":{"line":105,"column":29}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"paramOfCell","start":4520,"end":4531,"loc":{"start":{"line":105,"column":29},"end":{"line":105,"column":40}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4534,"end":4535,"loc":{"start":{"line":106,"column":2},"end":{"line":106,"column":3}}},{"type":{"label":"if","keyword":"if","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"if","start":4538,"end":4540,"loc":{"start":{"line":107,"column":2},"end":{"line":107,"column":4}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4540,"end":4541,"loc":{"start":{"line":107,"column":4},"end":{"line":107,"column":5}}},{"type":{"label":"typeof","keyword":"typeof","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":true,"postfix":false,"binop":null,"updateContext":null},"value":"typeof","start":4542,"end":4548,"loc":{"start":{"line":107,"column":6},"end":{"line":107,"column":12}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":4549,"end":4553,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":17}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4553,"end":4554,"loc":{"start":{"line":107,"column":17},"end":{"line":107,"column":18}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"confChecker","start":4554,"end":4565,"loc":{"start":{"line":107,"column":18},"end":{"line":107,"column":29}}},{"type":{"label":"==/!=","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":6,"updateContext":null},"value":"===","start":4566,"end":4569,"loc":{"start":{"line":107,"column":30},"end":{"line":107,"column":33}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"function","start":4570,"end":4580,"loc":{"start":{"line":107,"column":34},"end":{"line":107,"column":44}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4581,"end":4582,"loc":{"start":{"line":107,"column":45},"end":{"line":107,"column":46}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4582,"end":4583,"loc":{"start":{"line":107,"column":46},"end":{"line":107,"column":47}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":4587,"end":4591,"loc":{"start":{"line":108,"column":3},"end":{"line":108,"column":7}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4591,"end":4592,"loc":{"start":{"line":108,"column":7},"end":{"line":108,"column":8}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"confChecker","start":4592,"end":4603,"loc":{"start":{"line":108,"column":8},"end":{"line":108,"column":19}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4603,"end":4604,"loc":{"start":{"line":108,"column":19},"end":{"line":108,"column":20}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4604,"end":4605,"loc":{"start":{"line":108,"column":20},"end":{"line":108,"column":21}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4608,"end":4609,"loc":{"start":{"line":109,"column":2},"end":{"line":109,"column":3}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4611,"end":4612,"loc":{"start":{"line":110,"column":1},"end":{"line":110,"column":2}}},{"type":"CommentBlock","value":"* The optional confChecker method should verify that all the required conf parameters\n\tare actually present in the conf object and have the right format. It is implemented in\n\tthe subclass that specifies the actual constraint.\n\t@abstract ","start":4614,"end":4856,"loc":{"start":{"line":111,"column":1},"end":{"line":114,"column":13}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"confChecker","start":4858,"end":4869,"loc":{"start":{"line":115,"column":1},"end":{"line":115,"column":12}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4869,"end":4870,"loc":{"start":{"line":115,"column":12},"end":{"line":115,"column":13}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4871,"end":4872,"loc":{"start":{"line":115,"column":14},"end":{"line":115,"column":15}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4872,"end":4873,"loc":{"start":{"line":115,"column":15},"end":{"line":115,"column":16}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4875,"end":4876,"loc":{"start":{"line":116,"column":1},"end":{"line":116,"column":2}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":4878,"end":4879,"loc":{"start":{"line":118,"column":0},"end":{"line":118,"column":1}}},{"type":{"label":"export","keyword":"export","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"export","start":4881,"end":4887,"loc":{"start":{"line":120,"column":0},"end":{"line":120,"column":6}}},{"type":{"label":"default","keyword":"default","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"default","start":4888,"end":4895,"loc":{"start":{"line":120,"column":7},"end":{"line":120,"column":14}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"Constraint","start":4896,"end":4906,"loc":{"start":{"line":120,"column":15},"end":{"line":120,"column":25}}},{"type":{"label":"eof","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":4907,"end":4907,"loc":{"start":{"line":121,"column":0},"end":{"line":121,"column":0}}}]}