{"type":"File","start":0,"end":1204,"loc":{"start":{"line":1,"column":0},"end":{"line":31,"column":0}},"program":{"type":"Program","start":0,"end":1204,"loc":{"start":{"line":1,"column":0},"end":{"line":31,"column":0}},"sourceType":"module","body":[{"type":"ImportDeclaration","start":1,"end":41,"loc":{"start":{"line":2,"column":0},"end":{"line":2,"column":40}},"specifiers":[{"type":"ImportDefaultSpecifier","start":8,"end":18,"loc":{"start":{"line":2,"column":7},"end":{"line":2,"column":17}},"local":{"type":"Identifier","start":8,"end":18,"loc":{"start":{"line":2,"column":7},"end":{"line":2,"column":17},"identifierName":"Constraint"},"name":"Constraint"}}],"source":{"type":"StringLiteral","start":24,"end":41,"loc":{"start":{"line":2,"column":23},"end":{"line":2,"column":40}},"extra":{"rawValue":"./Constraint.js","raw":"\"./Constraint.js\""},"value":"./Constraint.js","leadingComments":null,"trailingComments":null},"trailingComments":[{"type":"CommentBlock","value":"* Extension of class {@link Constraint} used for a soft constraint. See description in\n {@link Constraint} for details. This class is not used on its own but serves as a base\n class for a soft constraint. ","start":43,"end":252,"loc":{"start":{"line":4,"column":0},"end":{"line":6,"column":32}}}]},{"type":"Identifier","start":253,"end":1172,"loc":{"start":{"line":7,"column":0},"end":{"line":28,"column":1}},"id":{"type":"Identifier","start":259,"end":273,"loc":{"start":{"line":7,"column":6},"end":{"line":7,"column":20},"identifierName":"SoftConstraint"},"name":"SoftConstraint","leadingComments":null},"superClass":{"type":"Identifier","start":282,"end":292,"loc":{"start":{"line":7,"column":29},"end":{"line":7,"column":39},"identifierName":"Constraint"},"name":"Constraint"},"body":{"type":"ClassBody","start":293,"end":1172,"loc":{"start":{"line":7,"column":40},"end":{"line":28,"column":1}},"body":[{"type":"ClassMethod","start":397,"end":439,"loc":{"start":{"line":11,"column":1},"end":{"line":13,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":401,"end":416,"loc":{"start":{"line":11,"column":5},"end":{"line":11,"column":20},"identifierName":"CONSTRAINT_TYPE"},"name":"CONSTRAINT_TYPE"},"kind":"get","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":419,"end":439,"loc":{"start":{"line":11,"column":23},"end":{"line":13,"column":2}},"body":[{"type":"ReturnStatement","start":423,"end":436,"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":15}},"argument":{"type":"StringLiteral","start":430,"end":436,"loc":{"start":{"line":12,"column":9},"end":{"line":12,"column":15}},"extra":{"rawValue":"soft","raw":"\"soft\""},"value":"soft"}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Let the CPM know that this is a soft constraint, so return 'soft'. \n\t@return {string} \"soft\"","start":297,"end":395,"loc":{"start":{"line":9,"column":1},"end":{"line":10,"column":26}}}],"trailingComments":[{"type":"CommentBlock","value":"* Soft constraints must have a deltaH method to compute the Hamiltonian. This method\n\tmust be implemented in any SoftConstraint subclass before it works.\n\t@abstract\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {number} the change in Hamiltonian for this copy attempt and this constraint.","start":443,"end":1003,"loc":{"start":{"line":15,"column":1},"end":{"line":23,"column":89}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1006,"end":1048,"loc":{"start":{"line":24,"column":1},"end":{"line":24,"column":43}}}]},{"type":"ClassMethod","start":1050,"end":1170,"loc":{"start":{"line":25,"column":1},"end":{"line":27,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1050,"end":1056,"loc":{"start":{"line":25,"column":1},"end":{"line":25,"column":7},"identifierName":"deltaH"},"name":"deltaH","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":1058,"end":1063,"loc":{"start":{"line":25,"column":9},"end":{"line":25,"column":14},"identifierName":"src_i"},"name":"src_i"},{"type":"Identifier","start":1065,"end":1070,"loc":{"start":{"line":25,"column":16},"end":{"line":25,"column":21},"identifierName":"tgt_i"},"name":"tgt_i"},{"type":"Identifier","start":1072,"end":1080,"loc":{"start":{"line":25,"column":23},"end":{"line":25,"column":31},"identifierName":"src_type"},"name":"src_type"},{"type":"Identifier","start":1082,"end":1090,"loc":{"start":{"line":25,"column":33},"end":{"line":25,"column":41},"identifierName":"tgt_type"},"name":"tgt_type"}],"body":{"type":"BlockStatement","start":1092,"end":1170,"loc":{"start":{"line":25,"column":43},"end":{"line":27,"column":2}},"body":[{"type":"ThrowStatement","start":1096,"end":1167,"loc":{"start":{"line":26,"column":2},"end":{"line":26,"column":73}},"argument":{"type":"StringLiteral","start":1102,"end":1166,"loc":{"start":{"line":26,"column":8},"end":{"line":26,"column":72}},"extra":{"rawValue":"You need to implement the 'deltaH' method for this constraint!","raw":"\"You need to implement the 'deltaH' method for this constraint!\"","parenthesized":true,"parenStart":1101},"value":"You need to implement the 'deltaH' method for this constraint!"}}],"directives":[]},"leadingComments":[{"type":"CommentBlock","value":"* Soft constraints must have a deltaH method to compute the Hamiltonian. This method\n\tmust be implemented in any SoftConstraint subclass before it works.\n\t@abstract\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {number} the change in Hamiltonian for this copy attempt and this constraint.","start":443,"end":1003,"loc":{"start":{"line":15,"column":1},"end":{"line":23,"column":89}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1006,"end":1048,"loc":{"start":{"line":24,"column":1},"end":{"line":24,"column":43}}}]}]},"leadingComments":[],"name":"_","trailingComments":[]},{"type":"Identifier","start":1174,"end":1203,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":29}},"declaration":{"type":"Identifier","start":1189,"end":1203,"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":29},"identifierName":"SoftConstraint"},"name":"SoftConstraint"},"name":"_","leadingComments":[],"trailingComments":[]},{"type":"ExportDefaultDeclaration","start":1174,"end":1203,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":29}},"declaration":{"type":"ClassDeclaration","start":253,"end":1172,"loc":{"start":{"line":7,"column":0},"end":{"line":28,"column":1}},"id":{"type":"Identifier","start":259,"end":273,"loc":{"start":{"line":7,"column":6},"end":{"line":7,"column":20},"identifierName":"SoftConstraint"},"name":"SoftConstraint","leadingComments":null},"superClass":{"type":"Identifier","start":282,"end":292,"loc":{"start":{"line":7,"column":29},"end":{"line":7,"column":39},"identifierName":"Constraint"},"name":"Constraint"},"body":{"type":"ClassBody","start":293,"end":1172,"loc":{"start":{"line":7,"column":40},"end":{"line":28,"column":1}},"body":[{"type":"ClassMethod","start":397,"end":439,"loc":{"start":{"line":11,"column":1},"end":{"line":13,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":401,"end":416,"loc":{"start":{"line":11,"column":5},"end":{"line":11,"column":20},"identifierName":"CONSTRAINT_TYPE"},"name":"CONSTRAINT_TYPE"},"kind":"get","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":419,"end":439,"loc":{"start":{"line":11,"column":23},"end":{"line":13,"column":2}},"body":[{"type":"ReturnStatement","start":423,"end":436,"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":15}},"argument":{"type":"StringLiteral","start":430,"end":436,"loc":{"start":{"line":12,"column":9},"end":{"line":12,"column":15}},"extra":{"rawValue":"soft","raw":"\"soft\""},"value":"soft"}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Let the CPM know that this is a soft constraint, so return 'soft'. \n\t@return {string} \"soft\"","start":297,"end":395,"loc":{"start":{"line":9,"column":1},"end":{"line":10,"column":26}}}],"trailingComments":[{"type":"CommentBlock","value":"* Soft constraints must have a deltaH method to compute the Hamiltonian. This method\n\tmust be implemented in any SoftConstraint subclass before it works.\n\t@abstract\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {number} the change in Hamiltonian for this copy attempt and this constraint.","start":443,"end":1003,"loc":{"start":{"line":15,"column":1},"end":{"line":23,"column":89}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1006,"end":1048,"loc":{"start":{"line":24,"column":1},"end":{"line":24,"column":43}}}]},{"type":"ClassMethod","start":1050,"end":1170,"loc":{"start":{"line":25,"column":1},"end":{"line":27,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1050,"end":1056,"loc":{"start":{"line":25,"column":1},"end":{"line":25,"column":7},"identifierName":"deltaH"},"name":"deltaH","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":1058,"end":1063,"loc":{"start":{"line":25,"column":9},"end":{"line":25,"column":14},"identifierName":"src_i"},"name":"src_i"},{"type":"Identifier","start":1065,"end":1070,"loc":{"start":{"line":25,"column":16},"end":{"line":25,"column":21},"identifierName":"tgt_i"},"name":"tgt_i"},{"type":"Identifier","start":1072,"end":1080,"loc":{"start":{"line":25,"column":23},"end":{"line":25,"column":31},"identifierName":"src_type"},"name":"src_type"},{"type":"Identifier","start":1082,"end":1090,"loc":{"start":{"line":25,"column":33},"end":{"line":25,"column":41},"identifierName":"tgt_type"},"name":"tgt_type"}],"body":{"type":"BlockStatement","start":1092,"end":1170,"loc":{"start":{"line":25,"column":43},"end":{"line":27,"column":2}},"body":[{"type":"ThrowStatement","start":1096,"end":1167,"loc":{"start":{"line":26,"column":2},"end":{"line":26,"column":73}},"argument":{"type":"StringLiteral","start":1102,"end":1166,"loc":{"start":{"line":26,"column":8},"end":{"line":26,"column":72}},"extra":{"rawValue":"You need to implement the 'deltaH' method for this constraint!","raw":"\"You need to implement the 'deltaH' method for this constraint!\"","parenthesized":true,"parenStart":1101},"value":"You need to implement the 'deltaH' method for this constraint!"}}],"directives":[]},"leadingComments":[{"type":"CommentBlock","value":"* Soft constraints must have a deltaH method to compute the Hamiltonian. This method\n\tmust be implemented in any SoftConstraint subclass before it works.\n\t@abstract\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {number} the change in Hamiltonian for this copy attempt and this constraint.","start":443,"end":1003,"loc":{"start":{"line":15,"column":1},"end":{"line":23,"column":89}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1006,"end":1048,"loc":{"start":{"line":24,"column":1},"end":{"line":24,"column":43}}}]}]},"leadingComments":[{"type":"CommentBlock","value":"* Extension of class {@link Constraint} used for a soft constraint. See description in\n {@link Constraint} for details. This class is not used on its own but serves as a base\n class for a soft constraint. ","start":43,"end":252,"loc":{"start":{"line":4,"column":0},"end":{"line":6,"column":32}}}],"__PseudoExport__":false,"trailingComments":[]},"leadingComments":null}],"directives":[]},"comments":[{"type":"CommentBlock","value":"* Extension of class {@link Constraint} used for a soft constraint. See description in\n {@link Constraint} for details. This class is not used on its own but serves as a base\n class for a soft constraint. ","start":43,"end":252,"loc":{"start":{"line":4,"column":0},"end":{"line":6,"column":32}}},{"type":"CommentBlock","value":"* Let the CPM know that this is a soft constraint, so return 'soft'. \n\t@return {string} \"soft\"","start":297,"end":395,"loc":{"start":{"line":9,"column":1},"end":{"line":10,"column":26}}},{"type":"CommentBlock","value":"* Soft constraints must have a deltaH method to compute the Hamiltonian. This method\n\tmust be implemented in any SoftConstraint subclass before it works.\n\t@abstract\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {number} the change in Hamiltonian for this copy attempt and this constraint.","start":443,"end":1003,"loc":{"start":{"line":15,"column":1},"end":{"line":23,"column":89}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1006,"end":1048,"loc":{"start":{"line":24,"column":1},"end":{"line":24,"column":43}}}],"tokens":[{"type":{"label":"import","keyword":"import","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"import","start":1,"end":7,"loc":{"start":{"line":2,"column":0},"end":{"line":2,"column":6}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"Constraint","start":8,"end":18,"loc":{"start":{"line":2,"column":7},"end":{"line":2,"column":17}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"from","start":19,"end":23,"loc":{"start":{"line":2,"column":18},"end":{"line":2,"column":22}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"./Constraint.js","start":24,"end":41,"loc":{"start":{"line":2,"column":23},"end":{"line":2,"column":40}}},{"type":"CommentBlock","value":"* Extension of class {@link Constraint} used for a soft constraint. See description in\n {@link Constraint} for details. This class is not used on its own but serves as a base\n class for a soft constraint. ","start":43,"end":252,"loc":{"start":{"line":4,"column":0},"end":{"line":6,"column":32}}},{"type":{"label":"class","keyword":"class","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"class","start":253,"end":258,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":5}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"SoftConstraint","start":259,"end":273,"loc":{"start":{"line":7,"column":6},"end":{"line":7,"column":20}}},{"type":{"label":"extends","keyword":"extends","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"extends","start":274,"end":281,"loc":{"start":{"line":7,"column":21},"end":{"line":7,"column":28}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"Constraint","start":282,"end":292,"loc":{"start":{"line":7,"column":29},"end":{"line":7,"column":39}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":293,"end":294,"loc":{"start":{"line":7,"column":40},"end":{"line":7,"column":41}}},{"type":"CommentBlock","value":"* Let the CPM know that this is a soft constraint, so return 'soft'. \n\t@return {string} \"soft\"","start":297,"end":395,"loc":{"start":{"line":9,"column":1},"end":{"line":10,"column":26}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"get","start":397,"end":400,"loc":{"start":{"line":11,"column":1},"end":{"line":11,"column":4}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"CONSTRAINT_TYPE","start":401,"end":416,"loc":{"start":{"line":11,"column":5},"end":{"line":11,"column":20}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":416,"end":417,"loc":{"start":{"line":11,"column":20},"end":{"line":11,"column":21}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":417,"end":418,"loc":{"start":{"line":11,"column":21},"end":{"line":11,"column":22}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":419,"end":420,"loc":{"start":{"line":11,"column":23},"end":{"line":11,"column":24}}},{"type":{"label":"return","keyword":"return","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"return","start":423,"end":429,"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":8}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"soft","start":430,"end":436,"loc":{"start":{"line":12,"column":9},"end":{"line":12,"column":15}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":438,"end":439,"loc":{"start":{"line":13,"column":1},"end":{"line":13,"column":2}}},{"type":"CommentBlock","value":"* Soft constraints must have a deltaH method to compute the Hamiltonian. This method\n\tmust be implemented in any SoftConstraint subclass before it works.\n\t@abstract\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {number} the change in Hamiltonian for this copy attempt and this constraint.","start":443,"end":1003,"loc":{"start":{"line":15,"column":1},"end":{"line":23,"column":89}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1006,"end":1048,"loc":{"start":{"line":24,"column":1},"end":{"line":24,"column":43}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"deltaH","start":1050,"end":1056,"loc":{"start":{"line":25,"column":1},"end":{"line":25,"column":7}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1056,"end":1057,"loc":{"start":{"line":25,"column":7},"end":{"line":25,"column":8}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"src_i","start":1058,"end":1063,"loc":{"start":{"line":25,"column":9},"end":{"line":25,"column":14}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1063,"end":1064,"loc":{"start":{"line":25,"column":14},"end":{"line":25,"column":15}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"tgt_i","start":1065,"end":1070,"loc":{"start":{"line":25,"column":16},"end":{"line":25,"column":21}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1070,"end":1071,"loc":{"start":{"line":25,"column":21},"end":{"line":25,"column":22}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"src_type","start":1072,"end":1080,"loc":{"start":{"line":25,"column":23},"end":{"line":25,"column":31}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1080,"end":1081,"loc":{"start":{"line":25,"column":31},"end":{"line":25,"column":32}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"tgt_type","start":1082,"end":1090,"loc":{"start":{"line":25,"column":33},"end":{"line":25,"column":41}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1091,"end":1092,"loc":{"start":{"line":25,"column":42},"end":{"line":25,"column":43}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1092,"end":1093,"loc":{"start":{"line":25,"column":43},"end":{"line":25,"column":44}}},{"type":{"label":"throw","keyword":"throw","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"throw","start":1096,"end":1101,"loc":{"start":{"line":26,"column":2},"end":{"line":26,"column":7}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1101,"end":1102,"loc":{"start":{"line":26,"column":7},"end":{"line":26,"column":8}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"You need to implement the 'deltaH' method for this constraint!","start":1102,"end":1166,"loc":{"start":{"line":26,"column":8},"end":{"line":26,"column":72}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1166,"end":1167,"loc":{"start":{"line":26,"column":72},"end":{"line":26,"column":73}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1169,"end":1170,"loc":{"start":{"line":27,"column":1},"end":{"line":27,"column":2}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1171,"end":1172,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":1}}},{"type":{"label":"export","keyword":"export","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"export","start":1174,"end":1180,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":6}}},{"type":{"label":"default","keyword":"default","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"default","start":1181,"end":1188,"loc":{"start":{"line":30,"column":7},"end":{"line":30,"column":14}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"SoftConstraint","start":1189,"end":1203,"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":29}}},{"type":{"label":"eof","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1204,"end":1204,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":0}}}]}