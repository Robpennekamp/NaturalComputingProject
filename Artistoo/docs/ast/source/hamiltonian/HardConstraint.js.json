{"type":"File","start":0,"end":1277,"loc":{"start":{"line":1,"column":0},"end":{"line":37,"column":0}},"program":{"type":"Program","start":0,"end":1277,"loc":{"start":{"line":1,"column":0},"end":{"line":37,"column":0}},"sourceType":"module","body":[{"type":"ImportDeclaration","start":0,"end":40,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"specifiers":[{"type":"ImportDefaultSpecifier","start":7,"end":17,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":17}},"local":{"type":"Identifier","start":7,"end":17,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":17},"identifierName":"Constraint"},"name":"Constraint"}}],"source":{"type":"StringLiteral","start":23,"end":40,"loc":{"start":{"line":1,"column":23},"end":{"line":1,"column":40}},"extra":{"rawValue":"./Constraint.js","raw":"\"./Constraint.js\""},"value":"./Constraint.js","leadingComments":null,"trailingComments":null},"trailingComments":[{"type":"CommentBlock","value":"* Extension of class {@link Constraint} used for a hard constraint. See description in\n {@link Constraint} for details. This class is not used on its own but serves as a base\n class for a hard constraint. ","start":42,"end":251,"loc":{"start":{"line":3,"column":0},"end":{"line":5,"column":32}}}]},{"type":"Identifier","start":252,"end":1245,"loc":{"start":{"line":6,"column":0},"end":{"line":34,"column":1}},"id":{"type":"Identifier","start":258,"end":272,"loc":{"start":{"line":6,"column":6},"end":{"line":6,"column":20},"identifierName":"HardConstraint"},"name":"HardConstraint","leadingComments":null},"superClass":{"type":"Identifier","start":281,"end":291,"loc":{"start":{"line":6,"column":29},"end":{"line":6,"column":39},"identifierName":"Constraint"},"name":"Constraint"},"body":{"type":"ClassBody","start":292,"end":1245,"loc":{"start":{"line":6,"column":40},"end":{"line":34,"column":1}},"body":[{"type":"ClassMethod","start":395,"end":437,"loc":{"start":{"line":10,"column":1},"end":{"line":12,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":399,"end":414,"loc":{"start":{"line":10,"column":5},"end":{"line":10,"column":20},"identifierName":"CONSTRAINT_TYPE"},"name":"CONSTRAINT_TYPE"},"kind":"get","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":417,"end":437,"loc":{"start":{"line":10,"column":23},"end":{"line":12,"column":2}},"body":[{"type":"ReturnStatement","start":421,"end":434,"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":15}},"argument":{"type":"StringLiteral","start":428,"end":434,"loc":{"start":{"line":11,"column":9},"end":{"line":11,"column":15}},"extra":{"rawValue":"hard","raw":"\"hard\""},"value":"hard"}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Let the CPM know that this is a soft constraint, so return 'soft'.\n\t@return {string} \"hard\"","start":296,"end":393,"loc":{"start":{"line":8,"column":1},"end":{"line":9,"column":26}}}],"trailingComments":[{"type":"CommentBlock","value":"constructor( conf ){\n\t\tthis.conf = conf\n\t}","start":439,"end":485,"loc":{"start":{"line":13,"column":1},"end":{"line":15,"column":4}}},{"type":"CommentBlock","value":"set CPM(C){\n\t\tthis.C = C\n\t}","start":487,"end":518,"loc":{"start":{"line":16,"column":1},"end":{"line":18,"column":4}}},{"type":"CommentBlock","value":"* Hard constraints must have a 'fulfilled' method to compute whether the copy attempt fulfills the rule.\n\tThis method must be implemented in the subclass.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.\n\t @abstract\n\t ","start":522,"end":1070,"loc":{"start":{"line":20,"column":1},"end":{"line":29,"column":4}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1073,"end":1115,"loc":{"start":{"line":30,"column":1},"end":{"line":30,"column":43}}}]},{"type":"ClassMethod","start":1117,"end":1243,"loc":{"start":{"line":31,"column":1},"end":{"line":33,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1117,"end":1126,"loc":{"start":{"line":31,"column":1},"end":{"line":31,"column":10},"identifierName":"fulfilled"},"name":"fulfilled","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":1128,"end":1133,"loc":{"start":{"line":31,"column":12},"end":{"line":31,"column":17},"identifierName":"src_i"},"name":"src_i"},{"type":"Identifier","start":1135,"end":1140,"loc":{"start":{"line":31,"column":19},"end":{"line":31,"column":24},"identifierName":"tgt_i"},"name":"tgt_i"},{"type":"Identifier","start":1142,"end":1150,"loc":{"start":{"line":31,"column":26},"end":{"line":31,"column":34},"identifierName":"src_type"},"name":"src_type"},{"type":"Identifier","start":1152,"end":1160,"loc":{"start":{"line":31,"column":36},"end":{"line":31,"column":44},"identifierName":"tgt_type"},"name":"tgt_type"}],"body":{"type":"BlockStatement","start":1162,"end":1243,"loc":{"start":{"line":31,"column":46},"end":{"line":33,"column":2}},"body":[{"type":"ThrowStatement","start":1166,"end":1240,"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":76}},"argument":{"type":"StringLiteral","start":1172,"end":1239,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":75}},"extra":{"rawValue":"You need to implement the 'fulfilled' method for this constraint!","raw":"\"You need to implement the 'fulfilled' method for this constraint!\"","parenthesized":true,"parenStart":1171},"value":"You need to implement the 'fulfilled' method for this constraint!"}}],"directives":[]},"leadingComments":[{"type":"CommentBlock","value":"constructor( conf ){\n\t\tthis.conf = conf\n\t}","start":439,"end":485,"loc":{"start":{"line":13,"column":1},"end":{"line":15,"column":4}}},{"type":"CommentBlock","value":"set CPM(C){\n\t\tthis.C = C\n\t}","start":487,"end":518,"loc":{"start":{"line":16,"column":1},"end":{"line":18,"column":4}}},{"type":"CommentBlock","value":"* Hard constraints must have a 'fulfilled' method to compute whether the copy attempt fulfills the rule.\n\tThis method must be implemented in the subclass.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.\n\t @abstract\n\t ","start":522,"end":1070,"loc":{"start":{"line":20,"column":1},"end":{"line":29,"column":4}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1073,"end":1115,"loc":{"start":{"line":30,"column":1},"end":{"line":30,"column":43}}}]}]},"leadingComments":[],"name":"_","trailingComments":[]},{"type":"Identifier","start":1247,"end":1276,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":29}},"declaration":{"type":"Identifier","start":1262,"end":1276,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":29},"identifierName":"HardConstraint"},"name":"HardConstraint"},"name":"_","leadingComments":[],"trailingComments":[]},{"type":"ExportDefaultDeclaration","start":1247,"end":1276,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":29}},"declaration":{"type":"ClassDeclaration","start":252,"end":1245,"loc":{"start":{"line":6,"column":0},"end":{"line":34,"column":1}},"id":{"type":"Identifier","start":258,"end":272,"loc":{"start":{"line":6,"column":6},"end":{"line":6,"column":20},"identifierName":"HardConstraint"},"name":"HardConstraint","leadingComments":null},"superClass":{"type":"Identifier","start":281,"end":291,"loc":{"start":{"line":6,"column":29},"end":{"line":6,"column":39},"identifierName":"Constraint"},"name":"Constraint"},"body":{"type":"ClassBody","start":292,"end":1245,"loc":{"start":{"line":6,"column":40},"end":{"line":34,"column":1}},"body":[{"type":"ClassMethod","start":395,"end":437,"loc":{"start":{"line":10,"column":1},"end":{"line":12,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":399,"end":414,"loc":{"start":{"line":10,"column":5},"end":{"line":10,"column":20},"identifierName":"CONSTRAINT_TYPE"},"name":"CONSTRAINT_TYPE"},"kind":"get","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":417,"end":437,"loc":{"start":{"line":10,"column":23},"end":{"line":12,"column":2}},"body":[{"type":"ReturnStatement","start":421,"end":434,"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":15}},"argument":{"type":"StringLiteral","start":428,"end":434,"loc":{"start":{"line":11,"column":9},"end":{"line":11,"column":15}},"extra":{"rawValue":"hard","raw":"\"hard\""},"value":"hard"}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* Let the CPM know that this is a soft constraint, so return 'soft'.\n\t@return {string} \"hard\"","start":296,"end":393,"loc":{"start":{"line":8,"column":1},"end":{"line":9,"column":26}}}],"trailingComments":[{"type":"CommentBlock","value":"constructor( conf ){\n\t\tthis.conf = conf\n\t}","start":439,"end":485,"loc":{"start":{"line":13,"column":1},"end":{"line":15,"column":4}}},{"type":"CommentBlock","value":"set CPM(C){\n\t\tthis.C = C\n\t}","start":487,"end":518,"loc":{"start":{"line":16,"column":1},"end":{"line":18,"column":4}}},{"type":"CommentBlock","value":"* Hard constraints must have a 'fulfilled' method to compute whether the copy attempt fulfills the rule.\n\tThis method must be implemented in the subclass.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.\n\t @abstract\n\t ","start":522,"end":1070,"loc":{"start":{"line":20,"column":1},"end":{"line":29,"column":4}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1073,"end":1115,"loc":{"start":{"line":30,"column":1},"end":{"line":30,"column":43}}}]},{"type":"ClassMethod","start":1117,"end":1243,"loc":{"start":{"line":31,"column":1},"end":{"line":33,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1117,"end":1126,"loc":{"start":{"line":31,"column":1},"end":{"line":31,"column":10},"identifierName":"fulfilled"},"name":"fulfilled","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":1128,"end":1133,"loc":{"start":{"line":31,"column":12},"end":{"line":31,"column":17},"identifierName":"src_i"},"name":"src_i"},{"type":"Identifier","start":1135,"end":1140,"loc":{"start":{"line":31,"column":19},"end":{"line":31,"column":24},"identifierName":"tgt_i"},"name":"tgt_i"},{"type":"Identifier","start":1142,"end":1150,"loc":{"start":{"line":31,"column":26},"end":{"line":31,"column":34},"identifierName":"src_type"},"name":"src_type"},{"type":"Identifier","start":1152,"end":1160,"loc":{"start":{"line":31,"column":36},"end":{"line":31,"column":44},"identifierName":"tgt_type"},"name":"tgt_type"}],"body":{"type":"BlockStatement","start":1162,"end":1243,"loc":{"start":{"line":31,"column":46},"end":{"line":33,"column":2}},"body":[{"type":"ThrowStatement","start":1166,"end":1240,"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":76}},"argument":{"type":"StringLiteral","start":1172,"end":1239,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":75}},"extra":{"rawValue":"You need to implement the 'fulfilled' method for this constraint!","raw":"\"You need to implement the 'fulfilled' method for this constraint!\"","parenthesized":true,"parenStart":1171},"value":"You need to implement the 'fulfilled' method for this constraint!"}}],"directives":[]},"leadingComments":[{"type":"CommentBlock","value":"constructor( conf ){\n\t\tthis.conf = conf\n\t}","start":439,"end":485,"loc":{"start":{"line":13,"column":1},"end":{"line":15,"column":4}}},{"type":"CommentBlock","value":"set CPM(C){\n\t\tthis.C = C\n\t}","start":487,"end":518,"loc":{"start":{"line":16,"column":1},"end":{"line":18,"column":4}}},{"type":"CommentBlock","value":"* Hard constraints must have a 'fulfilled' method to compute whether the copy attempt fulfills the rule.\n\tThis method must be implemented in the subclass.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.\n\t @abstract\n\t ","start":522,"end":1070,"loc":{"start":{"line":20,"column":1},"end":{"line":29,"column":4}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1073,"end":1115,"loc":{"start":{"line":30,"column":1},"end":{"line":30,"column":43}}}]}]},"leadingComments":[{"type":"CommentBlock","value":"* Extension of class {@link Constraint} used for a hard constraint. See description in\n {@link Constraint} for details. This class is not used on its own but serves as a base\n class for a hard constraint. ","start":42,"end":251,"loc":{"start":{"line":3,"column":0},"end":{"line":5,"column":32}}}],"__PseudoExport__":false,"trailingComments":[]},"leadingComments":null}],"directives":[]},"comments":[{"type":"CommentBlock","value":"* Extension of class {@link Constraint} used for a hard constraint. See description in\n {@link Constraint} for details. This class is not used on its own but serves as a base\n class for a hard constraint. ","start":42,"end":251,"loc":{"start":{"line":3,"column":0},"end":{"line":5,"column":32}}},{"type":"CommentBlock","value":"* Let the CPM know that this is a soft constraint, so return 'soft'.\n\t@return {string} \"hard\"","start":296,"end":393,"loc":{"start":{"line":8,"column":1},"end":{"line":9,"column":26}}},{"type":"CommentBlock","value":"constructor( conf ){\n\t\tthis.conf = conf\n\t}","start":439,"end":485,"loc":{"start":{"line":13,"column":1},"end":{"line":15,"column":4}}},{"type":"CommentBlock","value":"set CPM(C){\n\t\tthis.C = C\n\t}","start":487,"end":518,"loc":{"start":{"line":16,"column":1},"end":{"line":18,"column":4}}},{"type":"CommentBlock","value":"* Hard constraints must have a 'fulfilled' method to compute whether the copy attempt fulfills the rule.\n\tThis method must be implemented in the subclass.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.\n\t @abstract\n\t ","start":522,"end":1070,"loc":{"start":{"line":20,"column":1},"end":{"line":29,"column":4}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1073,"end":1115,"loc":{"start":{"line":30,"column":1},"end":{"line":30,"column":43}}}],"tokens":[{"type":{"label":"import","keyword":"import","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"import","start":0,"end":6,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"Constraint","start":7,"end":17,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":17}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"from","start":18,"end":22,"loc":{"start":{"line":1,"column":18},"end":{"line":1,"column":22}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"./Constraint.js","start":23,"end":40,"loc":{"start":{"line":1,"column":23},"end":{"line":1,"column":40}}},{"type":"CommentBlock","value":"* Extension of class {@link Constraint} used for a hard constraint. See description in\n {@link Constraint} for details. This class is not used on its own but serves as a base\n class for a hard constraint. ","start":42,"end":251,"loc":{"start":{"line":3,"column":0},"end":{"line":5,"column":32}}},{"type":{"label":"class","keyword":"class","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"class","start":252,"end":257,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":5}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"HardConstraint","start":258,"end":272,"loc":{"start":{"line":6,"column":6},"end":{"line":6,"column":20}}},{"type":{"label":"extends","keyword":"extends","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"extends","start":273,"end":280,"loc":{"start":{"line":6,"column":21},"end":{"line":6,"column":28}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"Constraint","start":281,"end":291,"loc":{"start":{"line":6,"column":29},"end":{"line":6,"column":39}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":292,"end":293,"loc":{"start":{"line":6,"column":40},"end":{"line":6,"column":41}}},{"type":"CommentBlock","value":"* Let the CPM know that this is a soft constraint, so return 'soft'.\n\t@return {string} \"hard\"","start":296,"end":393,"loc":{"start":{"line":8,"column":1},"end":{"line":9,"column":26}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"get","start":395,"end":398,"loc":{"start":{"line":10,"column":1},"end":{"line":10,"column":4}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"CONSTRAINT_TYPE","start":399,"end":414,"loc":{"start":{"line":10,"column":5},"end":{"line":10,"column":20}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":414,"end":415,"loc":{"start":{"line":10,"column":20},"end":{"line":10,"column":21}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":415,"end":416,"loc":{"start":{"line":10,"column":21},"end":{"line":10,"column":22}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":417,"end":418,"loc":{"start":{"line":10,"column":23},"end":{"line":10,"column":24}}},{"type":{"label":"return","keyword":"return","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"return","start":421,"end":427,"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":8}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"hard","start":428,"end":434,"loc":{"start":{"line":11,"column":9},"end":{"line":11,"column":15}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":436,"end":437,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":2}}},{"type":"CommentBlock","value":"constructor( conf ){\n\t\tthis.conf = conf\n\t}","start":439,"end":485,"loc":{"start":{"line":13,"column":1},"end":{"line":15,"column":4}}},{"type":"CommentBlock","value":"set CPM(C){\n\t\tthis.C = C\n\t}","start":487,"end":518,"loc":{"start":{"line":16,"column":1},"end":{"line":18,"column":4}}},{"type":"CommentBlock","value":"* Hard constraints must have a 'fulfilled' method to compute whether the copy attempt fulfills the rule.\n\tThis method must be implemented in the subclass.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.\n\t @abstract\n\t ","start":522,"end":1070,"loc":{"start":{"line":20,"column":1},"end":{"line":29,"column":4}}},{"type":"CommentLine","value":" eslint-disable-next-line no-unused-vars","start":1073,"end":1115,"loc":{"start":{"line":30,"column":1},"end":{"line":30,"column":43}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"fulfilled","start":1117,"end":1126,"loc":{"start":{"line":31,"column":1},"end":{"line":31,"column":10}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1126,"end":1127,"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":11}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"src_i","start":1128,"end":1133,"loc":{"start":{"line":31,"column":12},"end":{"line":31,"column":17}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1133,"end":1134,"loc":{"start":{"line":31,"column":17},"end":{"line":31,"column":18}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"tgt_i","start":1135,"end":1140,"loc":{"start":{"line":31,"column":19},"end":{"line":31,"column":24}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1140,"end":1141,"loc":{"start":{"line":31,"column":24},"end":{"line":31,"column":25}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"src_type","start":1142,"end":1150,"loc":{"start":{"line":31,"column":26},"end":{"line":31,"column":34}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1150,"end":1151,"loc":{"start":{"line":31,"column":34},"end":{"line":31,"column":35}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"tgt_type","start":1152,"end":1160,"loc":{"start":{"line":31,"column":36},"end":{"line":31,"column":44}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1161,"end":1162,"loc":{"start":{"line":31,"column":45},"end":{"line":31,"column":46}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1162,"end":1163,"loc":{"start":{"line":31,"column":46},"end":{"line":31,"column":47}}},{"type":{"label":"throw","keyword":"throw","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"throw","start":1166,"end":1171,"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":7}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1171,"end":1172,"loc":{"start":{"line":32,"column":7},"end":{"line":32,"column":8}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"You need to implement the 'fulfilled' method for this constraint!","start":1172,"end":1239,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":75}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1239,"end":1240,"loc":{"start":{"line":32,"column":75},"end":{"line":32,"column":76}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1242,"end":1243,"loc":{"start":{"line":33,"column":1},"end":{"line":33,"column":2}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1244,"end":1245,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":1}}},{"type":{"label":"export","keyword":"export","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"export","start":1247,"end":1253,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":6}}},{"type":{"label":"default","keyword":"default","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"default","start":1254,"end":1261,"loc":{"start":{"line":36,"column":7},"end":{"line":36,"column":14}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"HardConstraint","start":1262,"end":1276,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":29}}},{"type":{"label":"eof","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1277,"end":1277,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":0}}}]}