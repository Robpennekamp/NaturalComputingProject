{"type":"File","start":0,"end":2566,"loc":{"start":{"line":1,"column":0},"end":{"line":79,"column":0}},"program":{"type":"Program","start":0,"end":2566,"loc":{"start":{"line":1,"column":0},"end":{"line":79,"column":0}},"sourceType":"module","body":[{"type":"ImportDeclaration","start":0,"end":48,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":48}},"specifiers":[{"type":"ImportDefaultSpecifier","start":7,"end":21,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":21}},"local":{"type":"Identifier","start":7,"end":21,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":21},"identifierName":"HardConstraint"},"name":"HardConstraint"}}],"source":{"type":"StringLiteral","start":27,"end":48,"loc":{"start":{"line":1,"column":27},"end":{"line":1,"column":48}},"extra":{"rawValue":"./HardConstraint.js","raw":"\"./HardConstraint.js\""},"value":"./HardConstraint.js"}},{"type":"ImportDeclaration","start":49,"end":101,"loc":{"start":{"line":2,"column":0},"end":{"line":2,"column":52}},"specifiers":[{"type":"ImportDefaultSpecifier","start":56,"end":72,"loc":{"start":{"line":2,"column":7},"end":{"line":2,"column":23}},"local":{"type":"Identifier","start":56,"end":72,"loc":{"start":{"line":2,"column":7},"end":{"line":2,"column":23},"identifierName":"ParameterChecker"},"name":"ParameterChecker"}}],"source":{"type":"StringLiteral","start":78,"end":101,"loc":{"start":{"line":2,"column":29},"end":{"line":2,"column":52}},"extra":{"rawValue":"./ParameterChecker.js","raw":"\"./ParameterChecker.js\""},"value":"./ParameterChecker.js","leadingComments":null,"trailingComments":null},"trailingComments":[{"type":"CommentBlock","value":"* \n * This constraint allows a \"barrier\" celltype from and into which copy attempts are forbidden.\n * @example\n * // Build a CPM and add the constraint\n * let CPM = require( \"path/to/build\" )\n * let C = new CPM.CPM( [200,200], {\n * \tT : 20,\n * \tJ : [[0,0,20],[0,0,5],[20,5,10]],\n * \tV : [0,0,500],\n * \tLAMBDA_V : [0,0,5],\n * })\n * C.add( new CPM.BarrierConstraint( {\n * \tIS_BARRIER : [false,true,false]\n * } ) )\n * \n * // OR: add automatically by entering the parameters in the CPM\n * C = new CPM.CPM( [200,200], {\n * \tT : 20,\n * \tJ : [[0,0,20],[0,0,5],[20,5,10]],\n * \tV : [0,0,500],\n * \tLAMBDA_V : [0,0,5],\n * \tIS_BARRIER : [false,true,false]\n * })\n * \n * // Make a horizontal line barrier (cellkind 1 )\n * let cid = C.makeNewCellID( 1 )\n * for( let x = 0; x < 200; x++ ){\n * \tC.setpix( [x,95], cid )\n * }\n * // Seed a cell (cellkind2)\n * let gm = new CPM.GridManipulator( C )\n * gm.seedCell(2)\n ","start":103,"end":1004,"loc":{"start":{"line":4,"column":0},"end":{"line":36,"column":3}}}]},{"type":"Identifier","start":1005,"end":2531,"loc":{"start":{"line":37,"column":0},"end":{"line":76,"column":1}},"id":{"type":"Identifier","start":1011,"end":1028,"loc":{"start":{"line":37,"column":6},"end":{"line":37,"column":23},"identifierName":"BarrierConstraint"},"name":"BarrierConstraint","leadingComments":null},"superClass":{"type":"Identifier","start":1037,"end":1051,"loc":{"start":{"line":37,"column":32},"end":{"line":37,"column":46},"identifierName":"HardConstraint"},"name":"HardConstraint"},"body":{"type":"ClassBody","start":1052,"end":2531,"loc":{"start":{"line":37,"column":47},"end":{"line":76,"column":1}},"body":[{"type":"ClassMethod","start":1386,"end":1423,"loc":{"start":{"line":44,"column":1},"end":{"line":46,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1386,"end":1397,"loc":{"start":{"line":44,"column":1},"end":{"line":44,"column":12},"identifierName":"constructor"},"name":"constructor","leadingComments":null},"kind":"constructor","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":1399,"end":1403,"loc":{"start":{"line":44,"column":14},"end":{"line":44,"column":18},"identifierName":"conf"},"name":"conf"}],"body":{"type":"BlockStatement","start":1405,"end":1423,"loc":{"start":{"line":44,"column":20},"end":{"line":46,"column":2}},"body":[{"type":"ExpressionStatement","start":1409,"end":1420,"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":13}},"expression":{"type":"CallExpression","start":1409,"end":1420,"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":13}},"callee":{"type":"Super","start":1409,"end":1414,"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":7}}},"arguments":[{"type":"Identifier","start":1415,"end":1419,"loc":{"start":{"line":45,"column":8},"end":{"line":45,"column":12},"identifierName":"conf"},"name":"conf"}]}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* The constructor of the BarrierConstraint requires a conf object with a single parameter.\n\t@param {object} conf - parameter object for this constraint.\n\t@param {PerKindBoolean} conf.IS_BARRIER - specify for each cellkind if it should be \n \tconsidered as a barrier. If so, all copy attempts into and from it are forbidden.\n\t","start":1056,"end":1384,"loc":{"start":{"line":39,"column":1},"end":{"line":43,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* This method checks that all required parameters are present in the object supplied to\n\tthe constructor, and that they are of the right format. It throws an error when this\n\tis not the case.","start":1426,"end":1621,"loc":{"start":{"line":48,"column":1},"end":{"line":50,"column":19}}}]},{"type":"ClassMethod","start":1623,"end":1767,"loc":{"start":{"line":51,"column":1},"end":{"line":54,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1623,"end":1634,"loc":{"start":{"line":51,"column":1},"end":{"line":51,"column":12},"identifierName":"confChecker"},"name":"confChecker","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":1636,"end":1767,"loc":{"start":{"line":51,"column":14},"end":{"line":54,"column":2}},"body":[{"type":"VariableDeclaration","start":1640,"end":1695,"loc":{"start":{"line":52,"column":2},"end":{"line":52,"column":57}},"declarations":[{"type":"VariableDeclarator","start":1644,"end":1695,"loc":{"start":{"line":52,"column":6},"end":{"line":52,"column":57}},"id":{"type":"Identifier","start":1644,"end":1651,"loc":{"start":{"line":52,"column":6},"end":{"line":52,"column":13},"identifierName":"checker"},"name":"checker"},"init":{"type":"NewExpression","start":1654,"end":1695,"loc":{"start":{"line":52,"column":16},"end":{"line":52,"column":57}},"callee":{"type":"Identifier","start":1658,"end":1674,"loc":{"start":{"line":52,"column":20},"end":{"line":52,"column":36},"identifierName":"ParameterChecker"},"name":"ParameterChecker"},"arguments":[{"type":"MemberExpression","start":1676,"end":1685,"loc":{"start":{"line":52,"column":38},"end":{"line":52,"column":47}},"object":{"type":"ThisExpression","start":1676,"end":1680,"loc":{"start":{"line":52,"column":38},"end":{"line":52,"column":42}}},"property":{"type":"Identifier","start":1681,"end":1685,"loc":{"start":{"line":52,"column":43},"end":{"line":52,"column":47},"identifierName":"conf"},"name":"conf"},"computed":false},{"type":"MemberExpression","start":1687,"end":1693,"loc":{"start":{"line":52,"column":49},"end":{"line":52,"column":55}},"object":{"type":"ThisExpression","start":1687,"end":1691,"loc":{"start":{"line":52,"column":49},"end":{"line":52,"column":53}}},"property":{"type":"Identifier","start":1692,"end":1693,"loc":{"start":{"line":52,"column":54},"end":{"line":52,"column":55},"identifierName":"C"},"name":"C"},"computed":false}]}}],"kind":"let"},{"type":"ExpressionStatement","start":1698,"end":1764,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":68}},"expression":{"type":"CallExpression","start":1698,"end":1764,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":68}},"callee":{"type":"MemberExpression","start":1698,"end":1724,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":28}},"object":{"type":"Identifier","start":1698,"end":1705,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":9},"identifierName":"checker"},"name":"checker"},"property":{"type":"Identifier","start":1706,"end":1724,"loc":{"start":{"line":53,"column":10},"end":{"line":53,"column":28},"identifierName":"confCheckParameter"},"name":"confCheckParameter"},"computed":false},"arguments":[{"type":"StringLiteral","start":1726,"end":1738,"loc":{"start":{"line":53,"column":30},"end":{"line":53,"column":42}},"extra":{"rawValue":"IS_BARRIER","raw":"\"IS_BARRIER\""},"value":"IS_BARRIER"},{"type":"StringLiteral","start":1740,"end":1751,"loc":{"start":{"line":53,"column":44},"end":{"line":53,"column":55}},"extra":{"rawValue":"KindArray","raw":"\"KindArray\""},"value":"KindArray"},{"type":"StringLiteral","start":1753,"end":1762,"loc":{"start":{"line":53,"column":57},"end":{"line":53,"column":66}},"extra":{"rawValue":"Boolean","raw":"\"Boolean\""},"value":"Boolean"}]}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* This method checks that all required parameters are present in the object supplied to\n\tthe constructor, and that they are of the right format. It throws an error when this\n\tis not the case.","start":1426,"end":1621,"loc":{"start":{"line":48,"column":1},"end":{"line":50,"column":19}}}],"trailingComments":[{"type":"CommentBlock","value":"* Method for hard constraints to compute whether the copy attempt fulfills the rule.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.","start":1770,"end":2233,"loc":{"start":{"line":56,"column":1},"end":{"line":62,"column":72}}}]},{"type":"ClassMethod","start":2236,"end":2529,"loc":{"start":{"line":63,"column":1},"end":{"line":75,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":2236,"end":2245,"loc":{"start":{"line":63,"column":1},"end":{"line":63,"column":10},"identifierName":"fulfilled"},"name":"fulfilled","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":2247,"end":2252,"loc":{"start":{"line":63,"column":12},"end":{"line":63,"column":17},"identifierName":"src_i"},"name":"src_i"},{"type":"Identifier","start":2254,"end":2259,"loc":{"start":{"line":63,"column":19},"end":{"line":63,"column":24},"identifierName":"tgt_i"},"name":"tgt_i"},{"type":"Identifier","start":2261,"end":2269,"loc":{"start":{"line":63,"column":26},"end":{"line":63,"column":34},"identifierName":"src_type"},"name":"src_type"},{"type":"Identifier","start":2271,"end":2279,"loc":{"start":{"line":63,"column":36},"end":{"line":63,"column":44},"identifierName":"tgt_type"},"name":"tgt_type"}],"body":{"type":"BlockStatement","start":2281,"end":2529,"loc":{"start":{"line":63,"column":46},"end":{"line":75,"column":2}},"body":[{"type":"IfStatement","start":2367,"end":2437,"loc":{"start":{"line":66,"column":2},"end":{"line":68,"column":3}},"test":{"type":"CallExpression","start":2371,"end":2414,"loc":{"start":{"line":66,"column":6},"end":{"line":66,"column":49}},"callee":{"type":"MemberExpression","start":2371,"end":2389,"loc":{"start":{"line":66,"column":6},"end":{"line":66,"column":24}},"object":{"type":"ThisExpression","start":2371,"end":2375,"loc":{"start":{"line":66,"column":6},"end":{"line":66,"column":10}},"leadingComments":null},"property":{"type":"Identifier","start":2376,"end":2389,"loc":{"start":{"line":66,"column":11},"end":{"line":66,"column":24},"identifierName":"cellParameter"},"name":"cellParameter"},"computed":false,"leadingComments":null},"arguments":[{"type":"StringLiteral","start":2390,"end":2402,"loc":{"start":{"line":66,"column":25},"end":{"line":66,"column":37}},"extra":{"rawValue":"IS_BARRIER","raw":"\"IS_BARRIER\""},"value":"IS_BARRIER"},{"type":"Identifier","start":2404,"end":2412,"loc":{"start":{"line":66,"column":39},"end":{"line":66,"column":47},"identifierName":"src_type"},"name":"src_type"}],"leadingComments":null},"consequent":{"type":"BlockStatement","start":2416,"end":2437,"loc":{"start":{"line":66,"column":51},"end":{"line":68,"column":3}},"body":[{"type":"ReturnStatement","start":2421,"end":2433,"loc":{"start":{"line":67,"column":3},"end":{"line":67,"column":15}},"argument":{"type":"BooleanLiteral","start":2428,"end":2433,"loc":{"start":{"line":67,"column":10},"end":{"line":67,"column":15}},"value":false}}],"directives":[]},"alternate":null,"leadingComments":[{"type":"CommentLine","value":" Fulfilled = false when either src or tgt pixel is of the barrier cellkind\t","start":2287,"end":2364,"loc":{"start":{"line":65,"column":2},"end":{"line":65,"column":79}}}]},{"type":"IfStatement","start":2441,"end":2511,"loc":{"start":{"line":70,"column":2},"end":{"line":72,"column":3}},"test":{"type":"CallExpression","start":2445,"end":2488,"loc":{"start":{"line":70,"column":6},"end":{"line":70,"column":49}},"callee":{"type":"MemberExpression","start":2445,"end":2463,"loc":{"start":{"line":70,"column":6},"end":{"line":70,"column":24}},"object":{"type":"ThisExpression","start":2445,"end":2449,"loc":{"start":{"line":70,"column":6},"end":{"line":70,"column":10}}},"property":{"type":"Identifier","start":2450,"end":2463,"loc":{"start":{"line":70,"column":11},"end":{"line":70,"column":24},"identifierName":"cellParameter"},"name":"cellParameter"},"computed":false},"arguments":[{"type":"StringLiteral","start":2464,"end":2476,"loc":{"start":{"line":70,"column":25},"end":{"line":70,"column":37}},"extra":{"rawValue":"IS_BARRIER","raw":"\"IS_BARRIER\""},"value":"IS_BARRIER"},{"type":"Identifier","start":2478,"end":2486,"loc":{"start":{"line":70,"column":39},"end":{"line":70,"column":47},"identifierName":"tgt_type"},"name":"tgt_type"}]},"consequent":{"type":"BlockStatement","start":2490,"end":2511,"loc":{"start":{"line":70,"column":51},"end":{"line":72,"column":3}},"body":[{"type":"ReturnStatement","start":2495,"end":2507,"loc":{"start":{"line":71,"column":3},"end":{"line":71,"column":15}},"argument":{"type":"BooleanLiteral","start":2502,"end":2507,"loc":{"start":{"line":71,"column":10},"end":{"line":71,"column":15}},"value":false}}],"directives":[]},"alternate":null},{"type":"ReturnStatement","start":2515,"end":2526,"loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":13}},"argument":{"type":"BooleanLiteral","start":2522,"end":2526,"loc":{"start":{"line":74,"column":9},"end":{"line":74,"column":13}},"value":true}}],"directives":[]},"leadingComments":[{"type":"CommentBlock","value":"* Method for hard constraints to compute whether the copy attempt fulfills the rule.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.","start":1770,"end":2233,"loc":{"start":{"line":56,"column":1},"end":{"line":62,"column":72}}}]}]},"leadingComments":[],"name":"_","trailingComments":[]},{"type":"Identifier","start":2533,"end":2565,"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":32}},"declaration":{"type":"Identifier","start":2548,"end":2565,"loc":{"start":{"line":78,"column":15},"end":{"line":78,"column":32},"identifierName":"BarrierConstraint"},"name":"BarrierConstraint"},"name":"_","leadingComments":[],"trailingComments":[]},{"type":"ExportDefaultDeclaration","start":2533,"end":2565,"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":32}},"declaration":{"type":"ClassDeclaration","start":1005,"end":2531,"loc":{"start":{"line":37,"column":0},"end":{"line":76,"column":1}},"id":{"type":"Identifier","start":1011,"end":1028,"loc":{"start":{"line":37,"column":6},"end":{"line":37,"column":23},"identifierName":"BarrierConstraint"},"name":"BarrierConstraint","leadingComments":null},"superClass":{"type":"Identifier","start":1037,"end":1051,"loc":{"start":{"line":37,"column":32},"end":{"line":37,"column":46},"identifierName":"HardConstraint"},"name":"HardConstraint"},"body":{"type":"ClassBody","start":1052,"end":2531,"loc":{"start":{"line":37,"column":47},"end":{"line":76,"column":1}},"body":[{"type":"ClassMethod","start":1386,"end":1423,"loc":{"start":{"line":44,"column":1},"end":{"line":46,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1386,"end":1397,"loc":{"start":{"line":44,"column":1},"end":{"line":44,"column":12},"identifierName":"constructor"},"name":"constructor","leadingComments":null},"kind":"constructor","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":1399,"end":1403,"loc":{"start":{"line":44,"column":14},"end":{"line":44,"column":18},"identifierName":"conf"},"name":"conf"}],"body":{"type":"BlockStatement","start":1405,"end":1423,"loc":{"start":{"line":44,"column":20},"end":{"line":46,"column":2}},"body":[{"type":"ExpressionStatement","start":1409,"end":1420,"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":13}},"expression":{"type":"CallExpression","start":1409,"end":1420,"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":13}},"callee":{"type":"Super","start":1409,"end":1414,"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":7}}},"arguments":[{"type":"Identifier","start":1415,"end":1419,"loc":{"start":{"line":45,"column":8},"end":{"line":45,"column":12},"identifierName":"conf"},"name":"conf"}]}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* The constructor of the BarrierConstraint requires a conf object with a single parameter.\n\t@param {object} conf - parameter object for this constraint.\n\t@param {PerKindBoolean} conf.IS_BARRIER - specify for each cellkind if it should be \n \tconsidered as a barrier. If so, all copy attempts into and from it are forbidden.\n\t","start":1056,"end":1384,"loc":{"start":{"line":39,"column":1},"end":{"line":43,"column":3}}}],"trailingComments":[{"type":"CommentBlock","value":"* This method checks that all required parameters are present in the object supplied to\n\tthe constructor, and that they are of the right format. It throws an error when this\n\tis not the case.","start":1426,"end":1621,"loc":{"start":{"line":48,"column":1},"end":{"line":50,"column":19}}}]},{"type":"ClassMethod","start":1623,"end":1767,"loc":{"start":{"line":51,"column":1},"end":{"line":54,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":1623,"end":1634,"loc":{"start":{"line":51,"column":1},"end":{"line":51,"column":12},"identifierName":"confChecker"},"name":"confChecker","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[],"body":{"type":"BlockStatement","start":1636,"end":1767,"loc":{"start":{"line":51,"column":14},"end":{"line":54,"column":2}},"body":[{"type":"VariableDeclaration","start":1640,"end":1695,"loc":{"start":{"line":52,"column":2},"end":{"line":52,"column":57}},"declarations":[{"type":"VariableDeclarator","start":1644,"end":1695,"loc":{"start":{"line":52,"column":6},"end":{"line":52,"column":57}},"id":{"type":"Identifier","start":1644,"end":1651,"loc":{"start":{"line":52,"column":6},"end":{"line":52,"column":13},"identifierName":"checker"},"name":"checker"},"init":{"type":"NewExpression","start":1654,"end":1695,"loc":{"start":{"line":52,"column":16},"end":{"line":52,"column":57}},"callee":{"type":"Identifier","start":1658,"end":1674,"loc":{"start":{"line":52,"column":20},"end":{"line":52,"column":36},"identifierName":"ParameterChecker"},"name":"ParameterChecker"},"arguments":[{"type":"MemberExpression","start":1676,"end":1685,"loc":{"start":{"line":52,"column":38},"end":{"line":52,"column":47}},"object":{"type":"ThisExpression","start":1676,"end":1680,"loc":{"start":{"line":52,"column":38},"end":{"line":52,"column":42}}},"property":{"type":"Identifier","start":1681,"end":1685,"loc":{"start":{"line":52,"column":43},"end":{"line":52,"column":47},"identifierName":"conf"},"name":"conf"},"computed":false},{"type":"MemberExpression","start":1687,"end":1693,"loc":{"start":{"line":52,"column":49},"end":{"line":52,"column":55}},"object":{"type":"ThisExpression","start":1687,"end":1691,"loc":{"start":{"line":52,"column":49},"end":{"line":52,"column":53}}},"property":{"type":"Identifier","start":1692,"end":1693,"loc":{"start":{"line":52,"column":54},"end":{"line":52,"column":55},"identifierName":"C"},"name":"C"},"computed":false}]}}],"kind":"let"},{"type":"ExpressionStatement","start":1698,"end":1764,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":68}},"expression":{"type":"CallExpression","start":1698,"end":1764,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":68}},"callee":{"type":"MemberExpression","start":1698,"end":1724,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":28}},"object":{"type":"Identifier","start":1698,"end":1705,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":9},"identifierName":"checker"},"name":"checker"},"property":{"type":"Identifier","start":1706,"end":1724,"loc":{"start":{"line":53,"column":10},"end":{"line":53,"column":28},"identifierName":"confCheckParameter"},"name":"confCheckParameter"},"computed":false},"arguments":[{"type":"StringLiteral","start":1726,"end":1738,"loc":{"start":{"line":53,"column":30},"end":{"line":53,"column":42}},"extra":{"rawValue":"IS_BARRIER","raw":"\"IS_BARRIER\""},"value":"IS_BARRIER"},{"type":"StringLiteral","start":1740,"end":1751,"loc":{"start":{"line":53,"column":44},"end":{"line":53,"column":55}},"extra":{"rawValue":"KindArray","raw":"\"KindArray\""},"value":"KindArray"},{"type":"StringLiteral","start":1753,"end":1762,"loc":{"start":{"line":53,"column":57},"end":{"line":53,"column":66}},"extra":{"rawValue":"Boolean","raw":"\"Boolean\""},"value":"Boolean"}]}}],"directives":[],"trailingComments":null},"leadingComments":[{"type":"CommentBlock","value":"* This method checks that all required parameters are present in the object supplied to\n\tthe constructor, and that they are of the right format. It throws an error when this\n\tis not the case.","start":1426,"end":1621,"loc":{"start":{"line":48,"column":1},"end":{"line":50,"column":19}}}],"trailingComments":[{"type":"CommentBlock","value":"* Method for hard constraints to compute whether the copy attempt fulfills the rule.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.","start":1770,"end":2233,"loc":{"start":{"line":56,"column":1},"end":{"line":62,"column":72}}}]},{"type":"ClassMethod","start":2236,"end":2529,"loc":{"start":{"line":63,"column":1},"end":{"line":75,"column":2}},"static":false,"computed":false,"key":{"type":"Identifier","start":2236,"end":2245,"loc":{"start":{"line":63,"column":1},"end":{"line":63,"column":10},"identifierName":"fulfilled"},"name":"fulfilled","leadingComments":null},"kind":"method","id":null,"generator":false,"expression":false,"async":false,"params":[{"type":"Identifier","start":2247,"end":2252,"loc":{"start":{"line":63,"column":12},"end":{"line":63,"column":17},"identifierName":"src_i"},"name":"src_i"},{"type":"Identifier","start":2254,"end":2259,"loc":{"start":{"line":63,"column":19},"end":{"line":63,"column":24},"identifierName":"tgt_i"},"name":"tgt_i"},{"type":"Identifier","start":2261,"end":2269,"loc":{"start":{"line":63,"column":26},"end":{"line":63,"column":34},"identifierName":"src_type"},"name":"src_type"},{"type":"Identifier","start":2271,"end":2279,"loc":{"start":{"line":63,"column":36},"end":{"line":63,"column":44},"identifierName":"tgt_type"},"name":"tgt_type"}],"body":{"type":"BlockStatement","start":2281,"end":2529,"loc":{"start":{"line":63,"column":46},"end":{"line":75,"column":2}},"body":[{"type":"IfStatement","start":2367,"end":2437,"loc":{"start":{"line":66,"column":2},"end":{"line":68,"column":3}},"test":{"type":"CallExpression","start":2371,"end":2414,"loc":{"start":{"line":66,"column":6},"end":{"line":66,"column":49}},"callee":{"type":"MemberExpression","start":2371,"end":2389,"loc":{"start":{"line":66,"column":6},"end":{"line":66,"column":24}},"object":{"type":"ThisExpression","start":2371,"end":2375,"loc":{"start":{"line":66,"column":6},"end":{"line":66,"column":10}},"leadingComments":null},"property":{"type":"Identifier","start":2376,"end":2389,"loc":{"start":{"line":66,"column":11},"end":{"line":66,"column":24},"identifierName":"cellParameter"},"name":"cellParameter"},"computed":false,"leadingComments":null},"arguments":[{"type":"StringLiteral","start":2390,"end":2402,"loc":{"start":{"line":66,"column":25},"end":{"line":66,"column":37}},"extra":{"rawValue":"IS_BARRIER","raw":"\"IS_BARRIER\""},"value":"IS_BARRIER"},{"type":"Identifier","start":2404,"end":2412,"loc":{"start":{"line":66,"column":39},"end":{"line":66,"column":47},"identifierName":"src_type"},"name":"src_type"}],"leadingComments":null},"consequent":{"type":"BlockStatement","start":2416,"end":2437,"loc":{"start":{"line":66,"column":51},"end":{"line":68,"column":3}},"body":[{"type":"ReturnStatement","start":2421,"end":2433,"loc":{"start":{"line":67,"column":3},"end":{"line":67,"column":15}},"argument":{"type":"BooleanLiteral","start":2428,"end":2433,"loc":{"start":{"line":67,"column":10},"end":{"line":67,"column":15}},"value":false}}],"directives":[]},"alternate":null,"leadingComments":[{"type":"CommentLine","value":" Fulfilled = false when either src or tgt pixel is of the barrier cellkind\t","start":2287,"end":2364,"loc":{"start":{"line":65,"column":2},"end":{"line":65,"column":79}}}]},{"type":"IfStatement","start":2441,"end":2511,"loc":{"start":{"line":70,"column":2},"end":{"line":72,"column":3}},"test":{"type":"CallExpression","start":2445,"end":2488,"loc":{"start":{"line":70,"column":6},"end":{"line":70,"column":49}},"callee":{"type":"MemberExpression","start":2445,"end":2463,"loc":{"start":{"line":70,"column":6},"end":{"line":70,"column":24}},"object":{"type":"ThisExpression","start":2445,"end":2449,"loc":{"start":{"line":70,"column":6},"end":{"line":70,"column":10}}},"property":{"type":"Identifier","start":2450,"end":2463,"loc":{"start":{"line":70,"column":11},"end":{"line":70,"column":24},"identifierName":"cellParameter"},"name":"cellParameter"},"computed":false},"arguments":[{"type":"StringLiteral","start":2464,"end":2476,"loc":{"start":{"line":70,"column":25},"end":{"line":70,"column":37}},"extra":{"rawValue":"IS_BARRIER","raw":"\"IS_BARRIER\""},"value":"IS_BARRIER"},{"type":"Identifier","start":2478,"end":2486,"loc":{"start":{"line":70,"column":39},"end":{"line":70,"column":47},"identifierName":"tgt_type"},"name":"tgt_type"}]},"consequent":{"type":"BlockStatement","start":2490,"end":2511,"loc":{"start":{"line":70,"column":51},"end":{"line":72,"column":3}},"body":[{"type":"ReturnStatement","start":2495,"end":2507,"loc":{"start":{"line":71,"column":3},"end":{"line":71,"column":15}},"argument":{"type":"BooleanLiteral","start":2502,"end":2507,"loc":{"start":{"line":71,"column":10},"end":{"line":71,"column":15}},"value":false}}],"directives":[]},"alternate":null},{"type":"ReturnStatement","start":2515,"end":2526,"loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":13}},"argument":{"type":"BooleanLiteral","start":2522,"end":2526,"loc":{"start":{"line":74,"column":9},"end":{"line":74,"column":13}},"value":true}}],"directives":[]},"leadingComments":[{"type":"CommentBlock","value":"* Method for hard constraints to compute whether the copy attempt fulfills the rule.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.","start":1770,"end":2233,"loc":{"start":{"line":56,"column":1},"end":{"line":62,"column":72}}}]}]},"leadingComments":[{"type":"CommentBlock","value":"* \n * This constraint allows a \"barrier\" celltype from and into which copy attempts are forbidden.\n * @example\n * // Build a CPM and add the constraint\n * let CPM = require( \"path/to/build\" )\n * let C = new CPM.CPM( [200,200], {\n * \tT : 20,\n * \tJ : [[0,0,20],[0,0,5],[20,5,10]],\n * \tV : [0,0,500],\n * \tLAMBDA_V : [0,0,5],\n * })\n * C.add( new CPM.BarrierConstraint( {\n * \tIS_BARRIER : [false,true,false]\n * } ) )\n * \n * // OR: add automatically by entering the parameters in the CPM\n * C = new CPM.CPM( [200,200], {\n * \tT : 20,\n * \tJ : [[0,0,20],[0,0,5],[20,5,10]],\n * \tV : [0,0,500],\n * \tLAMBDA_V : [0,0,5],\n * \tIS_BARRIER : [false,true,false]\n * })\n * \n * // Make a horizontal line barrier (cellkind 1 )\n * let cid = C.makeNewCellID( 1 )\n * for( let x = 0; x < 200; x++ ){\n * \tC.setpix( [x,95], cid )\n * }\n * // Seed a cell (cellkind2)\n * let gm = new CPM.GridManipulator( C )\n * gm.seedCell(2)\n ","start":103,"end":1004,"loc":{"start":{"line":4,"column":0},"end":{"line":36,"column":3}}}],"__PseudoExport__":false,"trailingComments":[]},"leadingComments":null}],"directives":[]},"comments":[{"type":"CommentBlock","value":"* \n * This constraint allows a \"barrier\" celltype from and into which copy attempts are forbidden.\n * @example\n * // Build a CPM and add the constraint\n * let CPM = require( \"path/to/build\" )\n * let C = new CPM.CPM( [200,200], {\n * \tT : 20,\n * \tJ : [[0,0,20],[0,0,5],[20,5,10]],\n * \tV : [0,0,500],\n * \tLAMBDA_V : [0,0,5],\n * })\n * C.add( new CPM.BarrierConstraint( {\n * \tIS_BARRIER : [false,true,false]\n * } ) )\n * \n * // OR: add automatically by entering the parameters in the CPM\n * C = new CPM.CPM( [200,200], {\n * \tT : 20,\n * \tJ : [[0,0,20],[0,0,5],[20,5,10]],\n * \tV : [0,0,500],\n * \tLAMBDA_V : [0,0,5],\n * \tIS_BARRIER : [false,true,false]\n * })\n * \n * // Make a horizontal line barrier (cellkind 1 )\n * let cid = C.makeNewCellID( 1 )\n * for( let x = 0; x < 200; x++ ){\n * \tC.setpix( [x,95], cid )\n * }\n * // Seed a cell (cellkind2)\n * let gm = new CPM.GridManipulator( C )\n * gm.seedCell(2)\n ","start":103,"end":1004,"loc":{"start":{"line":4,"column":0},"end":{"line":36,"column":3}}},{"type":"CommentBlock","value":"* The constructor of the BarrierConstraint requires a conf object with a single parameter.\n\t@param {object} conf - parameter object for this constraint.\n\t@param {PerKindBoolean} conf.IS_BARRIER - specify for each cellkind if it should be \n \tconsidered as a barrier. If so, all copy attempts into and from it are forbidden.\n\t","start":1056,"end":1384,"loc":{"start":{"line":39,"column":1},"end":{"line":43,"column":3}}},{"type":"CommentBlock","value":"* This method checks that all required parameters are present in the object supplied to\n\tthe constructor, and that they are of the right format. It throws an error when this\n\tis not the case.","start":1426,"end":1621,"loc":{"start":{"line":48,"column":1},"end":{"line":50,"column":19}}},{"type":"CommentBlock","value":"* Method for hard constraints to compute whether the copy attempt fulfills the rule.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.","start":1770,"end":2233,"loc":{"start":{"line":56,"column":1},"end":{"line":62,"column":72}}},{"type":"CommentLine","value":" Fulfilled = false when either src or tgt pixel is of the barrier cellkind\t","start":2287,"end":2364,"loc":{"start":{"line":65,"column":2},"end":{"line":65,"column":79}}}],"tokens":[{"type":{"label":"import","keyword":"import","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"import","start":0,"end":6,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"HardConstraint","start":7,"end":21,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":21}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"from","start":22,"end":26,"loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":26}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"./HardConstraint.js","start":27,"end":48,"loc":{"start":{"line":1,"column":27},"end":{"line":1,"column":48}}},{"type":{"label":"import","keyword":"import","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"import","start":49,"end":55,"loc":{"start":{"line":2,"column":0},"end":{"line":2,"column":6}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"ParameterChecker","start":56,"end":72,"loc":{"start":{"line":2,"column":7},"end":{"line":2,"column":23}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"from","start":73,"end":77,"loc":{"start":{"line":2,"column":24},"end":{"line":2,"column":28}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"./ParameterChecker.js","start":78,"end":101,"loc":{"start":{"line":2,"column":29},"end":{"line":2,"column":52}}},{"type":"CommentBlock","value":"* \n * This constraint allows a \"barrier\" celltype from and into which copy attempts are forbidden.\n * @example\n * // Build a CPM and add the constraint\n * let CPM = require( \"path/to/build\" )\n * let C = new CPM.CPM( [200,200], {\n * \tT : 20,\n * \tJ : [[0,0,20],[0,0,5],[20,5,10]],\n * \tV : [0,0,500],\n * \tLAMBDA_V : [0,0,5],\n * })\n * C.add( new CPM.BarrierConstraint( {\n * \tIS_BARRIER : [false,true,false]\n * } ) )\n * \n * // OR: add automatically by entering the parameters in the CPM\n * C = new CPM.CPM( [200,200], {\n * \tT : 20,\n * \tJ : [[0,0,20],[0,0,5],[20,5,10]],\n * \tV : [0,0,500],\n * \tLAMBDA_V : [0,0,5],\n * \tIS_BARRIER : [false,true,false]\n * })\n * \n * // Make a horizontal line barrier (cellkind 1 )\n * let cid = C.makeNewCellID( 1 )\n * for( let x = 0; x < 200; x++ ){\n * \tC.setpix( [x,95], cid )\n * }\n * // Seed a cell (cellkind2)\n * let gm = new CPM.GridManipulator( C )\n * gm.seedCell(2)\n ","start":103,"end":1004,"loc":{"start":{"line":4,"column":0},"end":{"line":36,"column":3}}},{"type":{"label":"class","keyword":"class","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"class","start":1005,"end":1010,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":5}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"BarrierConstraint","start":1011,"end":1028,"loc":{"start":{"line":37,"column":6},"end":{"line":37,"column":23}}},{"type":{"label":"extends","keyword":"extends","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"extends","start":1029,"end":1036,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":31}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"HardConstraint","start":1037,"end":1051,"loc":{"start":{"line":37,"column":32},"end":{"line":37,"column":46}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1052,"end":1053,"loc":{"start":{"line":37,"column":47},"end":{"line":37,"column":48}}},{"type":"CommentBlock","value":"* The constructor of the BarrierConstraint requires a conf object with a single parameter.\n\t@param {object} conf - parameter object for this constraint.\n\t@param {PerKindBoolean} conf.IS_BARRIER - specify for each cellkind if it should be \n \tconsidered as a barrier. If so, all copy attempts into and from it are forbidden.\n\t","start":1056,"end":1384,"loc":{"start":{"line":39,"column":1},"end":{"line":43,"column":3}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"constructor","start":1386,"end":1397,"loc":{"start":{"line":44,"column":1},"end":{"line":44,"column":12}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1397,"end":1398,"loc":{"start":{"line":44,"column":12},"end":{"line":44,"column":13}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"conf","start":1399,"end":1403,"loc":{"start":{"line":44,"column":14},"end":{"line":44,"column":18}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1404,"end":1405,"loc":{"start":{"line":44,"column":19},"end":{"line":44,"column":20}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1405,"end":1406,"loc":{"start":{"line":44,"column":20},"end":{"line":44,"column":21}}},{"type":{"label":"super","keyword":"super","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"super","start":1409,"end":1414,"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":7}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1414,"end":1415,"loc":{"start":{"line":45,"column":7},"end":{"line":45,"column":8}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"conf","start":1415,"end":1419,"loc":{"start":{"line":45,"column":8},"end":{"line":45,"column":12}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1419,"end":1420,"loc":{"start":{"line":45,"column":12},"end":{"line":45,"column":13}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1422,"end":1423,"loc":{"start":{"line":46,"column":1},"end":{"line":46,"column":2}}},{"type":"CommentBlock","value":"* This method checks that all required parameters are present in the object supplied to\n\tthe constructor, and that they are of the right format. It throws an error when this\n\tis not the case.","start":1426,"end":1621,"loc":{"start":{"line":48,"column":1},"end":{"line":50,"column":19}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"confChecker","start":1623,"end":1634,"loc":{"start":{"line":51,"column":1},"end":{"line":51,"column":12}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1634,"end":1635,"loc":{"start":{"line":51,"column":12},"end":{"line":51,"column":13}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1635,"end":1636,"loc":{"start":{"line":51,"column":13},"end":{"line":51,"column":14}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1636,"end":1637,"loc":{"start":{"line":51,"column":14},"end":{"line":51,"column":15}}},{"type":{"label":"let","keyword":"let","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"let","start":1640,"end":1643,"loc":{"start":{"line":52,"column":2},"end":{"line":52,"column":5}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"checker","start":1644,"end":1651,"loc":{"start":{"line":52,"column":6},"end":{"line":52,"column":13}}},{"type":{"label":"=","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":true,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"=","start":1652,"end":1653,"loc":{"start":{"line":52,"column":14},"end":{"line":52,"column":15}}},{"type":{"label":"new","keyword":"new","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"new","start":1654,"end":1657,"loc":{"start":{"line":52,"column":16},"end":{"line":52,"column":19}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"ParameterChecker","start":1658,"end":1674,"loc":{"start":{"line":52,"column":20},"end":{"line":52,"column":36}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1674,"end":1675,"loc":{"start":{"line":52,"column":36},"end":{"line":52,"column":37}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":1676,"end":1680,"loc":{"start":{"line":52,"column":38},"end":{"line":52,"column":42}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1680,"end":1681,"loc":{"start":{"line":52,"column":42},"end":{"line":52,"column":43}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"conf","start":1681,"end":1685,"loc":{"start":{"line":52,"column":43},"end":{"line":52,"column":47}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1685,"end":1686,"loc":{"start":{"line":52,"column":47},"end":{"line":52,"column":48}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":1687,"end":1691,"loc":{"start":{"line":52,"column":49},"end":{"line":52,"column":53}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1691,"end":1692,"loc":{"start":{"line":52,"column":53},"end":{"line":52,"column":54}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"C","start":1692,"end":1693,"loc":{"start":{"line":52,"column":54},"end":{"line":52,"column":55}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1694,"end":1695,"loc":{"start":{"line":52,"column":56},"end":{"line":52,"column":57}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"checker","start":1698,"end":1705,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":9}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1705,"end":1706,"loc":{"start":{"line":53,"column":9},"end":{"line":53,"column":10}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"confCheckParameter","start":1706,"end":1724,"loc":{"start":{"line":53,"column":10},"end":{"line":53,"column":28}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1724,"end":1725,"loc":{"start":{"line":53,"column":28},"end":{"line":53,"column":29}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"IS_BARRIER","start":1726,"end":1738,"loc":{"start":{"line":53,"column":30},"end":{"line":53,"column":42}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1738,"end":1739,"loc":{"start":{"line":53,"column":42},"end":{"line":53,"column":43}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"KindArray","start":1740,"end":1751,"loc":{"start":{"line":53,"column":44},"end":{"line":53,"column":55}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":1751,"end":1752,"loc":{"start":{"line":53,"column":55},"end":{"line":53,"column":56}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"Boolean","start":1753,"end":1762,"loc":{"start":{"line":53,"column":57},"end":{"line":53,"column":66}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1763,"end":1764,"loc":{"start":{"line":53,"column":67},"end":{"line":53,"column":68}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":1766,"end":1767,"loc":{"start":{"line":54,"column":1},"end":{"line":54,"column":2}}},{"type":"CommentBlock","value":"* Method for hard constraints to compute whether the copy attempt fulfills the rule.\n\t @param {IndexCoordinate} src_i - coordinate of the source pixel that tries to copy.\n\t @param {IndexCoordinate} tgt_i - coordinate of the target pixel the source is trying\n\t to copy into.\n\t @param {CellId} src_type - cellid of the source pixel.\n\t @param {CellId} tgt_type - cellid of the target pixel. \n\t @return {boolean} whether the copy attempt satisfies the constraint.","start":1770,"end":2233,"loc":{"start":{"line":56,"column":1},"end":{"line":62,"column":72}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"fulfilled","start":2236,"end":2245,"loc":{"start":{"line":63,"column":1},"end":{"line":63,"column":10}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2245,"end":2246,"loc":{"start":{"line":63,"column":10},"end":{"line":63,"column":11}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"src_i","start":2247,"end":2252,"loc":{"start":{"line":63,"column":12},"end":{"line":63,"column":17}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2252,"end":2253,"loc":{"start":{"line":63,"column":17},"end":{"line":63,"column":18}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"tgt_i","start":2254,"end":2259,"loc":{"start":{"line":63,"column":19},"end":{"line":63,"column":24}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2259,"end":2260,"loc":{"start":{"line":63,"column":24},"end":{"line":63,"column":25}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"src_type","start":2261,"end":2269,"loc":{"start":{"line":63,"column":26},"end":{"line":63,"column":34}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2269,"end":2270,"loc":{"start":{"line":63,"column":34},"end":{"line":63,"column":35}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"tgt_type","start":2271,"end":2279,"loc":{"start":{"line":63,"column":36},"end":{"line":63,"column":44}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2280,"end":2281,"loc":{"start":{"line":63,"column":45},"end":{"line":63,"column":46}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2281,"end":2282,"loc":{"start":{"line":63,"column":46},"end":{"line":63,"column":47}}},{"type":"CommentLine","value":" Fulfilled = false when either src or tgt pixel is of the barrier cellkind\t","start":2287,"end":2364,"loc":{"start":{"line":65,"column":2},"end":{"line":65,"column":79}}},{"type":{"label":"if","keyword":"if","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"if","start":2367,"end":2369,"loc":{"start":{"line":66,"column":2},"end":{"line":66,"column":4}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2369,"end":2370,"loc":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":2371,"end":2375,"loc":{"start":{"line":66,"column":6},"end":{"line":66,"column":10}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2375,"end":2376,"loc":{"start":{"line":66,"column":10},"end":{"line":66,"column":11}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cellParameter","start":2376,"end":2389,"loc":{"start":{"line":66,"column":11},"end":{"line":66,"column":24}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2389,"end":2390,"loc":{"start":{"line":66,"column":24},"end":{"line":66,"column":25}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"IS_BARRIER","start":2390,"end":2402,"loc":{"start":{"line":66,"column":25},"end":{"line":66,"column":37}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2402,"end":2403,"loc":{"start":{"line":66,"column":37},"end":{"line":66,"column":38}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"src_type","start":2404,"end":2412,"loc":{"start":{"line":66,"column":39},"end":{"line":66,"column":47}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2413,"end":2414,"loc":{"start":{"line":66,"column":48},"end":{"line":66,"column":49}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2415,"end":2416,"loc":{"start":{"line":66,"column":50},"end":{"line":66,"column":51}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2416,"end":2417,"loc":{"start":{"line":66,"column":51},"end":{"line":66,"column":52}}},{"type":{"label":"return","keyword":"return","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"return","start":2421,"end":2427,"loc":{"start":{"line":67,"column":3},"end":{"line":67,"column":9}}},{"type":{"label":"false","keyword":"false","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"false","start":2428,"end":2433,"loc":{"start":{"line":67,"column":10},"end":{"line":67,"column":15}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2436,"end":2437,"loc":{"start":{"line":68,"column":2},"end":{"line":68,"column":3}}},{"type":{"label":"if","keyword":"if","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"if","start":2441,"end":2443,"loc":{"start":{"line":70,"column":2},"end":{"line":70,"column":4}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2443,"end":2444,"loc":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}}},{"type":{"label":"this","keyword":"this","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"this","start":2445,"end":2449,"loc":{"start":{"line":70,"column":6},"end":{"line":70,"column":10}}},{"type":{"label":".","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2449,"end":2450,"loc":{"start":{"line":70,"column":10},"end":{"line":70,"column":11}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"cellParameter","start":2450,"end":2463,"loc":{"start":{"line":70,"column":11},"end":{"line":70,"column":24}}},{"type":{"label":"(","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2463,"end":2464,"loc":{"start":{"line":70,"column":24},"end":{"line":70,"column":25}}},{"type":{"label":"string","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"IS_BARRIER","start":2464,"end":2476,"loc":{"start":{"line":70,"column":25},"end":{"line":70,"column":37}}},{"type":{"label":",","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2476,"end":2477,"loc":{"start":{"line":70,"column":37},"end":{"line":70,"column":38}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"tgt_type","start":2478,"end":2486,"loc":{"start":{"line":70,"column":39},"end":{"line":70,"column":47}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2487,"end":2488,"loc":{"start":{"line":70,"column":48},"end":{"line":70,"column":49}}},{"type":{"label":")","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2489,"end":2490,"loc":{"start":{"line":70,"column":50},"end":{"line":70,"column":51}}},{"type":{"label":"{","beforeExpr":true,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2490,"end":2491,"loc":{"start":{"line":70,"column":51},"end":{"line":70,"column":52}}},{"type":{"label":"return","keyword":"return","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"return","start":2495,"end":2501,"loc":{"start":{"line":71,"column":3},"end":{"line":71,"column":9}}},{"type":{"label":"false","keyword":"false","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"false","start":2502,"end":2507,"loc":{"start":{"line":71,"column":10},"end":{"line":71,"column":15}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2510,"end":2511,"loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":3}}},{"type":{"label":"return","keyword":"return","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"return","start":2515,"end":2521,"loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":8}}},{"type":{"label":"true","keyword":"true","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"true","start":2522,"end":2526,"loc":{"start":{"line":74,"column":9},"end":{"line":74,"column":13}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2528,"end":2529,"loc":{"start":{"line":75,"column":1},"end":{"line":75,"column":2}}},{"type":{"label":"}","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"start":2530,"end":2531,"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":1}}},{"type":{"label":"export","keyword":"export","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"export","start":2533,"end":2539,"loc":{"start":{"line":78,"column":0},"end":{"line":78,"column":6}}},{"type":{"label":"default","keyword":"default","beforeExpr":true,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"value":"default","start":2540,"end":2547,"loc":{"start":{"line":78,"column":7},"end":{"line":78,"column":14}}},{"type":{"label":"name","beforeExpr":false,"startsExpr":true,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null},"value":"BarrierConstraint","start":2548,"end":2565,"loc":{"start":{"line":78,"column":15},"end":{"line":78,"column":32}}},{"type":{"label":"eof","beforeExpr":false,"startsExpr":false,"rightAssociative":false,"isLoop":false,"isAssign":false,"prefix":false,"postfix":false,"binop":null,"updateContext":null},"start":2566,"end":2566,"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":0}}}]}