{"version":3,"file":"index.js.map","sources":["src/amend/index.js","src/isbot/index.js","src/index.js"],"sourcesContent":["/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  [\n    // Addresses: Cubot device\n    ['bot', '(?<! cu)bot'],\n    // Addresses: Android webview\n    ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],\n    // Addresses: libhttp browser\n    ['http', '(?<!(?:lib))http'],\n    // Addresses: java based browsers\n    ['java', 'java(?!;)'],\n    // Addresses: Yandex Search App\n    ['search', '(?<! ya(?:yandex)?)search']\n  ].forEach(\n    ([search, replace]) => {\n      const index = list.lastIndexOf(search)\n      if (~index) {\n        list.splice(index, 1, replace)\n      }\n    }\n  )\n\n  return list\n}\n","import list from '../list.json' assert { type: 'json' }\nimport { amend } from '../amend/index.js'\n\namend(list)\n\nconst flags = 'i'\n\n/**\n * Test user agents for matching patterns\n */\nexport class Isbot {\n  /**\n   * @type {string[]}\n   */\n  #list\n\n  /**\n   * @type {RegExp}\n   */\n  #pattern\n\n  constructor (patterns) {\n    this.#list = patterns || list.slice()\n    this.#update()\n\n    const isbot = ua => this.test(ua)\n\n    return Object.defineProperties(\n      isbot,\n      Object.entries(Object.getOwnPropertyDescriptors(Isbot.prototype)).reduce(\n        (accumulator, [prop, descriptor]) => {\n          if (typeof descriptor.value === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { value: this[prop].bind(this) } }\n            )\n          }\n          if (typeof descriptor.get === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { get: () => this[prop] } }\n            )\n          }\n          return accumulator\n        },\n        {}\n      )\n    )\n  }\n\n  /**\n   * Recreate the pattern from rules list\n   */\n  #update () {\n    this.#pattern = new RegExp(\n      this.#list.join('|'),\n      flags\n    )\n  }\n\n  /**\n   * Find the first index of an existing rule or -1 if not found\n   * @param  {string} rule\n   * @returns {number}\n   */\n  #index (rule) {\n    return this.#list.indexOf(rule.toLowerCase())\n  }\n\n  /**\n   * Get a clone of the pattern\n   * @type RegExp\n   */\n  get pattern () {\n    return new RegExp(this.#pattern)\n  }\n\n  /**\n   * Match given string against out pattern\n   * @param  {string} ua User Agent string\n   * @returns {boolean}\n   */\n  test (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  /**\n   * Get the match for strings' known crawler pattern\n   * @param  {string} ua User Agent string\n   * @returns {string|null}\n   */\n  find (ua = '') {\n    const match = ua.match(this.#pattern)\n    return match && match[0]\n  }\n\n  /**\n   * Get the patterns that match user agent string if any\n   * @param  {string} ua User Agent string\n   * @returns {string[]}\n   */\n  matches (ua = '') {\n    return this.#list.filter(\n      entry => new RegExp(entry, flags).test(ua)\n    )\n  }\n\n  /**\n   * Clear all patterns that match user agent\n   * @param  {string} ua User Agent string\n   * @returns {void}\n   */\n  clear (ua = '') {\n    this.exclude(this.matches(ua))\n  }\n\n  /**\n   * Extent patterns for known crawlers\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  extend (filters = []) {\n    [].push.apply(\n      this.#list,\n      filters.filter(\n        rule => this.#index(rule) === -1\n      ).map(\n        filter => filter.toLowerCase()\n      )\n    )\n    this.#update()\n  }\n\n  /**\n   * Exclude patterns from bot pattern rule\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  exclude (filters = []) {\n    let { length } = filters\n    while (length--) {\n      const index = this.#index(filters[length])\n      if (index > -1) {\n        this.#list.splice(index, 1)\n      }\n    }\n    this.#update()\n  }\n\n  /**\n   * Create a new Isbot instance using given list or self's list\n   * @param  {string[]} [list]\n   * @returns {Isbot}\n   */\n  spawn (list) {\n    return new Isbot(list || this.#list)\n  }\n}\n","import { Isbot } from './isbot/index.js'\n\nconst isbot = new Isbot()\n\nexport default isbot\n"],"names":["amend","list","RegExp","test","error","forEach","_ref","search","replace","index","lastIndexOf","splice","flags","_list","WeakMap","_pattern","_update","WeakSet","_index","Isbot","constructor","patterns","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","slice","_classPrivateMethodGet","_update2","call","isbot","ua","Object","defineProperties","entries","getOwnPropertyDescriptors","prototype","reduce","accumulator","prop","descriptor","assign","bind","get","pattern","_classPrivateFieldGet","Boolean","find","arguments","length","undefined","match","matches","filter","entry","clear","exclude","extend","filters","push","apply","rule","_index2","map","toLowerCase","spawn","join","indexOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACO,SAASA,KAAKA,CAAEC,IAAI,EAAE;EAC3B,IAAI;AACF;IACA,IAAIC,MAAM,CAAC,aAAa,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC,CAAC;GAC7C,CAAC,OAAOC,KAAK,EAAE;AACd;AACA,IAAA,OAAOH,IAAI,CAAA;AACb,GAAA;AAEA,EAAA;AACE;EACA,CAAC,KAAK,EAAE,aAAa,CAAC;AACtB;EACA,CAAC,QAAQ,EAAE,0DAA0D,CAAC;AACtE;EACA,CAAC,MAAM,EAAE,kBAAkB,CAAC;AAC5B;EACA,CAAC,MAAM,EAAE,WAAW,CAAC;AACrB;EACA,CAAC,QAAQ,EAAE,2BAA2B,CAAC,CACxC,CAACI,OAAO,CACPC,IAAA,IAAuB;AAAA,IAAA,IAAtB,CAACC,MAAM,EAAEC,OAAO,CAAC,GAAAF,IAAA,CAAA;AAChB,IAAA,MAAMG,KAAK,GAAGR,IAAI,CAACS,WAAW,CAACH,MAAM,CAAC,CAAA;IACtC,IAAI,CAACE,KAAK,EAAE;MACVR,IAAI,CAACU,MAAM,CAACF,KAAK,EAAE,CAAC,EAAED,OAAO,CAAC,CAAA;AAChC,KAAA;AACF,GAAC,CACF,CAAA;AAED,EAAA,OAAOP,IAAI,CAAA;AACb;;AChCAD,KAAK,CAACC,IAAI,CAAC,CAAA;AAEX,MAAMW,KAAK,GAAG,GAAG,CAAA;;AAEjB;AACA;AACA;AAFA,IAAAC,KAAA,oBAAAC,OAAA,EAAA,CAAA;AAAA,IAAAC,QAAA,oBAAAD,OAAA,EAAA,CAAA;AAAA,IAAAE,OAAA,oBAAAC,OAAA,EAAA,CAAA;AAAA,IAAAC,MAAA,oBAAAD,OAAA,EAAA,CAAA;AAGO,MAAME,KAAK,CAAC;EAWjBC,WAAWA,CAAEC,QAAQ,EAAE;AAuCvB;AACF;AACA;AACA;AACA;AAJEC,IAAAA,2BAAA,OAAAJ,MAAA,CAAA,CAAA;AAVA;AACF;AACA;AAFEI,IAAAA,2BAAA,OAAAN,OAAA,CAAA,CAAA;AAvCA;AACF;AACA;AAFEO,IAAAA,0BAAA,OAAAV,KAAA,EAAA;MAAAW,QAAA,EAAA,IAAA;MAAAC,KAAA,EAAA,KAAA,CAAA;AAAA,KAAA,CAAA,CAAA;AAKA;AACF;AACA;AAFEF,IAAAA,0BAAA,OAAAR,QAAA,EAAA;MAAAS,QAAA,EAAA,IAAA;MAAAC,KAAA,EAAA,KAAA,CAAA;AAAA,KAAA,CAAA,CAAA;IAMEC,qBAAA,CAAA,IAAI,EAAAb,KAAA,EAASQ,QAAQ,IAAIpB,IAAI,CAAC0B,KAAK,EAAE,CAAA,CAAA;IACrCC,sBAAA,CAAA,IAAI,EAAAZ,OAAA,EAAAa,QAAA,CAAAC,CAAAA,IAAA,CAAJ,IAAI,CAAA,CAAA;IAEJ,MAAMC,KAAK,GAAGC,EAAE,IAAI,IAAI,CAAC7B,IAAI,CAAC6B,EAAE,CAAC,CAAA;IAEjC,OAAOC,MAAM,CAACC,gBAAgB,CAC5BH,KAAK,EACLE,MAAM,CAACE,OAAO,CAACF,MAAM,CAACG,yBAAyB,CAACjB,KAAK,CAACkB,SAAS,CAAC,CAAC,CAACC,MAAM,CACtE,CAACC,WAAW,EAAAjC,IAAA,KAAyB;AAAA,MAAA,IAAvB,CAACkC,IAAI,EAAEC,UAAU,CAAC,GAAAnC,IAAA,CAAA;AAC9B,MAAA,IAAI,OAAOmC,UAAU,CAAChB,KAAK,KAAK,UAAU,EAAE;AAC1CQ,QAAAA,MAAM,CAACS,MAAM,CACXH,WAAW,EACX;AAAE,UAAA,CAACC,IAAI,GAAG;YAAEf,KAAK,EAAE,IAAI,CAACe,IAAI,CAAC,CAACG,IAAI,CAAC,IAAI,CAAA;AAAE,WAAA;AAAE,SAAC,CAC7C,CAAA;AACH,OAAA;AACA,MAAA,IAAI,OAAOF,UAAU,CAACG,GAAG,KAAK,UAAU,EAAE;AACxCX,QAAAA,MAAM,CAACS,MAAM,CACXH,WAAW,EACX;AAAE,UAAA,CAACC,IAAI,GAAG;AAAEI,YAAAA,GAAG,EAAEA,MAAM,IAAI,CAACJ,IAAI,CAAA;AAAE,WAAA;AAAE,SAAC,CACtC,CAAA;AACH,OAAA;AACA,MAAA,OAAOD,WAAW,CAAA;AACpB,KAAC,EACD,EAAE,CACH,CACF,CAAA;AACH,GAAA;AAqBA;AACF;AACA;AACA;EACE,IAAIM,OAAOA,GAAI;IACb,OAAO,IAAI3C,MAAM,CAAA4C,qBAAA,CAAC,IAAI,EAAA/B,QAAA,CAAU,CAAA,CAAA;AAClC,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACEZ,IAAIA,CAAE6B,EAAE,EAAE;AACR,IAAA,OAAOe,OAAO,CAACf,EAAE,CAAC,IAAIc,qBAAA,CAAI,IAAA,EAAA/B,QAAA,CAAA,CAAUZ,IAAI,CAAC6B,EAAE,CAAC,CAAA;AAC9C,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEgB,EAAAA,IAAIA,GAAW;AAAA,IAAA,IAAThB,EAAE,GAAAiB,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;IACX,MAAMG,KAAK,GAAGpB,EAAE,CAACoB,KAAK,CAAAN,qBAAA,CAAC,IAAI,EAAA/B,QAAA,CAAU,CAAA,CAAA;AACrC,IAAA,OAAOqC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAA;AAC1B,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEC,EAAAA,OAAOA,GAAW;AAAA,IAAA,IAATrB,EAAE,GAAAiB,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;IACd,OAAOH,qBAAA,KAAI,EAAAjC,KAAA,EAAOyC,MAAM,CACtBC,KAAK,IAAI,IAAIrD,MAAM,CAACqD,KAAK,EAAE3C,KAAK,CAAC,CAACT,IAAI,CAAC6B,EAAE,CAAC,CAC3C,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEwB,EAAAA,KAAKA,GAAW;AAAA,IAAA,IAATxB,EAAE,GAAAiB,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;IACZ,IAAI,CAACQ,OAAO,CAAC,IAAI,CAACJ,OAAO,CAACrB,EAAE,CAAC,CAAC,CAAA;AAChC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACE0B,EAAAA,MAAMA,GAAgB;AAAA,IAAA,IAAdC,OAAO,GAAAV,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;AAClB,IAAA,EAAE,CAACW,IAAI,CAACC,KAAK,CAAAf,qBAAA,CACX,IAAI,EAAAjC,KAAA,CACJ8C,EAAAA,OAAO,CAACL,MAAM,CACZQ,IAAI,IAAIlC,sBAAA,KAAI,EAAAV,MAAA,EAAA6C,OAAA,CAAA,CAAAjC,IAAA,CAAJ,IAAI,EAAQgC,IAAI,CAAA,KAAM,CAAC,CAAC,CACjC,CAACE,GAAG,CACHV,MAAM,IAAIA,MAAM,CAACW,WAAW,EAAE,CAC/B,CACF,CAAA;IACDrC,sBAAA,CAAA,IAAI,EAAAZ,OAAA,EAAAa,QAAA,CAAAC,CAAAA,IAAA,CAAJ,IAAI,CAAA,CAAA;AACN,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACE2B,EAAAA,OAAOA,GAAgB;AAAA,IAAA,IAAdE,OAAO,GAAAV,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;IACnB,IAAI;AAAEC,MAAAA,MAAAA;AAAO,KAAC,GAAGS,OAAO,CAAA;IACxB,OAAOT,MAAM,EAAE,EAAE;AACf,MAAA,MAAMzC,KAAK,GAAAmB,sBAAA,CAAG,IAAI,EAAAV,MAAA,EAAA6C,OAAA,CAAAjC,CAAAA,IAAA,CAAJ,IAAI,EAAQ6B,OAAO,CAACT,MAAM,CAAC,CAAC,CAAA;AAC1C,MAAA,IAAIzC,KAAK,GAAG,CAAC,CAAC,EAAE;QACdqC,qBAAA,CAAA,IAAI,EAAAjC,KAAA,CAAA,CAAOF,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAA;AAC7B,OAAA;AACF,KAAA;IACAmB,sBAAA,CAAA,IAAI,EAAAZ,OAAA,EAAAa,QAAA,CAAAC,CAAAA,IAAA,CAAJ,IAAI,CAAA,CAAA;AACN,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACEoC,KAAKA,CAAEjE,IAAI,EAAE;IACX,OAAO,IAAIkB,KAAK,CAAClB,IAAI,IAAA6C,qBAAA,CAAI,IAAI,EAAAjC,KAAA,CAAM,CAAC,CAAA;AACtC,GAAA;AACF,CAAA;AAAC,SAAAgB,WAxGY;AACTH,EAAAA,qBAAA,KAAI,EAAAX,QAAA,EAAY,IAAIb,MAAM,CACxB4C,qBAAA,CAAA,IAAI,EAAAjC,KAAA,EAAOsD,IAAI,CAAC,GAAG,CAAC,EACpBvD,KAAK,CACN,CAAA,CAAA;AACH,CAAA;AAAC,SAAAmD,OAAAA,CAOOD,IAAI,EAAE;EACZ,OAAOhB,qBAAA,CAAI,IAAA,EAAAjC,KAAA,CAAA,CAAOuD,OAAO,CAACN,IAAI,CAACG,WAAW,EAAE,CAAC,CAAA;AAC/C;;ACjEF,MAAMlC,KAAK,GAAG,IAAIZ,KAAK;;;;"}