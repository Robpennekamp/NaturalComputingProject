import type { ICredentialType, ICredentialTypeData, INodeTypeBaseDescription, INodeTypeData, INodeTypeNameVersion, KnownNodesAndCredentials } from 'n8n-workflow';
import type { n8n } from './Interfaces';
export type Types = {
    nodes: INodeTypeBaseDescription[];
    credentials: ICredentialType[];
};
export declare abstract class DirectoryLoader {
    readonly directory: string;
    protected readonly excludeNodes: string[];
    protected readonly includeNodes: string[];
    isLazyLoaded: boolean;
    loadedNodes: INodeTypeNameVersion[];
    nodeTypes: INodeTypeData;
    credentialTypes: ICredentialTypeData;
    known: KnownNodesAndCredentials;
    types: Types;
    constructor(directory: string, excludeNodes?: string[], includeNodes?: string[]);
    abstract packageName: string;
    abstract loadAll(): Promise<void>;
    reset(): void;
    protected resolvePath(file: string): string;
    protected loadNodeFromFile(nodeName: string, filePath: string): void;
    protected loadCredentialFromFile(credentialName: string, filePath: string): void;
    private getCodex;
    private addCodex;
    private addLoadOptionsMethods;
    private fixIconPath;
}
export declare class CustomDirectoryLoader extends DirectoryLoader {
    packageName: string;
    loadAll(): Promise<void>;
}
export declare class PackageDirectoryLoader extends DirectoryLoader {
    packageName: string;
    packageJson: n8n.PackageJson;
    readPackageJson(): Promise<void>;
    loadAll(): Promise<void>;
    protected readJSON<T>(file: string): Promise<T>;
}
export declare class LazyPackageDirectoryLoader extends PackageDirectoryLoader {
    loadAll(): Promise<void>;
}
