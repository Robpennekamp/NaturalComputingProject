"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExecuteWebhookFunctions = exports.getExecuteHookFunctions = exports.getLoadOptionsFunctions = exports.getCredentialTestFunctions = exports.getExecuteSingleFunctions = exports.getExecuteFunctions = exports.getExecuteTriggerFunctions = exports.getExecutePollFunctions = exports.getWebhookDescription = exports.getTimezone = exports.getNodeWebhookUrl = exports.continueOnFail = exports.getNodeParameter = exports.getCredentials = exports.getAdditionalKeys = exports.requestWithAuthentication = exports.normalizeItems = exports.constructExecutionMetaData = exports.returnJsonArray = exports.httpRequestWithAuthentication = exports.requestOAuth1 = exports.requestOAuth2 = exports.copyBinaryFile = exports.setBinaryDataBuffer = exports.getBinaryDataBuffer = exports.assertBinaryData = exports.getBinaryStream = exports.getBinaryMetadata = exports.proxyRequestToAxios = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_pick_1 = __importDefault(require("lodash.pick"));
const https_1 = require("https");
const http_1 = require("http");
const qs_1 = require("qs");
const oauth_1_0a_1 = __importDefault(require("oauth-1.0a"));
const client_oauth2_1 = __importDefault(require("client-oauth2"));
const crypto_1 = __importStar(require("crypto"));
const lodash_get_1 = __importDefault(require("lodash.get"));
const form_data_1 = __importDefault(require("form-data"));
const path_1 = __importDefault(require("path"));
const request_promise_native_1 = __importDefault(require("request-promise-native"));
const file_type_1 = __importDefault(require("file-type"));
const mime_types_1 = require("mime-types");
const axios_1 = __importDefault(require("axios"));
const url_1 = __importStar(require("url"));
const stream_1 = require("stream");
const promises_1 = require("fs/promises");
const fs_1 = require("fs");
const BinaryDataManager_1 = require("./BinaryDataManager");
const ExtractValue_1 = require("./ExtractValue");
const OAuth2Helper_1 = require("./OAuth2Helper");
const Constants_1 = require("./Constants");
const utils_1 = require("./BinaryDataManager/utils");
const WorkflowExecutionMetadata_1 = require("./WorkflowExecutionMetadata");
axios_1.default.defaults.timeout = 300000;
axios_1.default.defaults.headers.post = {};
axios_1.default.defaults.headers.put = {};
axios_1.default.defaults.headers.patch = {};
axios_1.default.defaults.paramsSerializer = (params) => {
    if (params instanceof url_1.URLSearchParams) {
        return params.toString();
    }
    return (0, qs_1.stringify)(params, { arrayFormat: 'indices' });
};
const requestPromiseWithDefaults = request_promise_native_1.default.defaults({
    timeout: 300000,
});
const pushFormDataValue = (form, key, value) => {
    if ((value === null || value === void 0 ? void 0 : value.hasOwnProperty('value')) && value.hasOwnProperty('options')) {
        form.append(key, value.value, value.options);
    }
    else {
        form.append(key, value);
    }
};
const createFormDataObject = (data) => {
    const formData = new form_data_1.default();
    const keys = Object.keys(data);
    keys.forEach((key) => {
        const formField = data[key];
        if (formField instanceof Array) {
            formField.forEach((item) => {
                pushFormDataValue(formData, key, item);
            });
        }
        else {
            pushFormDataValue(formData, key, formField);
        }
    });
    return formData;
};
function searchForHeader(headers, headerName) {
    if (headers === undefined) {
        return undefined;
    }
    const headerNames = Object.keys(headers);
    headerName = headerName.toLowerCase();
    return headerNames.find((thisHeader) => thisHeader.toLowerCase() === headerName);
}
async function generateContentLengthHeader(formData, headers) {
    if (!(formData === null || formData === void 0 ? void 0 : formData.getLength)) {
        return;
    }
    try {
        const length = await new Promise((res, rej) => {
            formData.getLength((error, length) => {
                if (error) {
                    rej(error);
                    return;
                }
                res(length);
            });
        });
        headers = Object.assign(headers, {
            'content-length': length,
        });
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.error('Unable to calculate form data length', { error });
    }
}
async function parseRequestObject(requestObject) {
    var _a, _b, _c;
    const axiosConfig = {};
    if (requestObject.headers !== undefined) {
        axiosConfig.headers = requestObject.headers;
    }
    const contentTypeHeaderKeyName = axiosConfig.headers &&
        Object.keys(axiosConfig.headers).find((headerName) => headerName.toLowerCase() === 'content-type');
    const contentType = contentTypeHeaderKeyName &&
        axiosConfig.headers[contentTypeHeaderKeyName];
    if (contentType === 'application/x-www-form-urlencoded' && requestObject.formData === undefined) {
        if (typeof requestObject.body === 'string') {
            axiosConfig.data = requestObject.body;
        }
        else {
            const allData = Object.assign(requestObject.body || {}, requestObject.form || {});
            if (requestObject.useQuerystring === true) {
                axiosConfig.data = (0, qs_1.stringify)(allData, { arrayFormat: 'repeat' });
            }
            else {
                axiosConfig.data = (0, qs_1.stringify)(allData);
            }
        }
    }
    else if (contentType && contentType.includes('multipart/form-data') !== false) {
        if (requestObject.formData !== undefined && requestObject.formData instanceof form_data_1.default) {
            axiosConfig.data = requestObject.formData;
        }
        else {
            const allData = {
                ...requestObject.body,
                ...requestObject.formData,
            };
            axiosConfig.data = createFormDataObject(allData);
        }
        delete axiosConfig.headers[contentTypeHeaderKeyName];
        const headers = axiosConfig.data.getHeaders();
        axiosConfig.headers = Object.assign(axiosConfig.headers || {}, headers);
        await generateContentLengthHeader(axiosConfig.data, axiosConfig.headers);
    }
    else {
        if (requestObject.form !== undefined && requestObject.body === undefined) {
            axiosConfig.data =
                typeof requestObject.form === 'string'
                    ? (0, qs_1.stringify)(requestObject.form, { format: 'RFC3986' })
                    : (0, qs_1.stringify)(requestObject.form).toString();
            if (axiosConfig.headers !== undefined) {
                const headerName = searchForHeader(axiosConfig.headers, 'content-type');
                if (headerName) {
                    delete axiosConfig.headers[headerName];
                }
                axiosConfig.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
            else {
                axiosConfig.headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                };
            }
        }
        else if (requestObject.formData !== undefined) {
            if (axiosConfig.headers !== undefined) {
                const headers = Object.keys(axiosConfig.headers);
                headers.forEach((header) => header.toLowerCase() === 'content-type' ? delete axiosConfig.headers[header] : null);
            }
            if (requestObject.formData instanceof form_data_1.default) {
                axiosConfig.data = requestObject.formData;
            }
            else {
                axiosConfig.data = createFormDataObject(requestObject.formData);
            }
            const headers = axiosConfig.data.getHeaders();
            axiosConfig.headers = Object.assign(axiosConfig.headers || {}, headers);
            await generateContentLengthHeader(axiosConfig.data, axiosConfig.headers);
        }
        else if (requestObject.body !== undefined) {
            if (requestObject.form !== undefined && requestObject.body) {
                requestObject.body = Object.assign(requestObject.body, requestObject.form);
            }
            axiosConfig.data = requestObject.body;
        }
    }
    if (requestObject.uri !== undefined) {
        axiosConfig.url = (_a = requestObject.uri) === null || _a === void 0 ? void 0 : _a.toString();
    }
    if (requestObject.url !== undefined) {
        axiosConfig.url = (_b = requestObject.url) === null || _b === void 0 ? void 0 : _b.toString();
    }
    if (requestObject.baseURL !== undefined) {
        axiosConfig.baseURL = (_c = requestObject.baseURL) === null || _c === void 0 ? void 0 : _c.toString();
    }
    if (requestObject.method !== undefined) {
        axiosConfig.method = requestObject.method;
    }
    if (requestObject.qs !== undefined && Object.keys(requestObject.qs).length > 0) {
        axiosConfig.params = requestObject.qs;
    }
    function hasArrayFormatOptions(arg) {
        if (typeof arg.qsStringifyOptions === 'object' &&
            arg.qsStringifyOptions !== null &&
            !Array.isArray(arg.qsStringifyOptions) &&
            'arrayFormat' in arg.qsStringifyOptions) {
            return true;
        }
        return false;
    }
    if (requestObject.useQuerystring === true ||
        (hasArrayFormatOptions(requestObject) &&
            requestObject.qsStringifyOptions.arrayFormat === 'repeat')) {
        axiosConfig.paramsSerializer = (params) => {
            return (0, qs_1.stringify)(params, { arrayFormat: 'repeat' });
        };
    }
    else if (requestObject.useQuerystring === false) {
        axiosConfig.paramsSerializer = (params) => {
            return (0, qs_1.stringify)(params, { arrayFormat: 'indices' });
        };
    }
    if (hasArrayFormatOptions(requestObject) &&
        requestObject.qsStringifyOptions.arrayFormat === 'brackets') {
        axiosConfig.paramsSerializer = (params) => {
            return (0, qs_1.stringify)(params, { arrayFormat: 'brackets' });
        };
    }
    if (requestObject.auth !== undefined) {
        if (requestObject.auth.bearer !== undefined) {
            axiosConfig.headers = Object.assign(axiosConfig.headers || {}, {
                Authorization: `Bearer ${requestObject.auth.bearer}`,
            });
        }
        else {
            const authObj = requestObject.auth;
            axiosConfig.auth = {
                username: (authObj.user || authObj.username),
                password: (authObj.password || authObj.pass),
            };
        }
    }
    if (requestObject.json === true) {
        const acceptHeaderExists = axiosConfig.headers === undefined
            ? false
            : Object.keys(axiosConfig.headers)
                .map((headerKey) => headerKey.toLowerCase())
                .includes('accept');
        if (!acceptHeaderExists) {
            axiosConfig.headers = Object.assign(axiosConfig.headers || {}, {
                Accept: 'application/json',
            });
        }
    }
    if (requestObject.json === false || requestObject.json === undefined) {
        axiosConfig.transformResponse = (res) => res;
    }
    if (requestObject.followRedirect === false &&
        (requestObject.method || 'get').toLowerCase() === 'get') {
        axiosConfig.maxRedirects = 0;
    }
    if (requestObject.followAllRedirects === false &&
        (requestObject.method || 'get').toLowerCase() !== 'get') {
        axiosConfig.maxRedirects = 0;
    }
    if (requestObject.rejectUnauthorized === false) {
        axiosConfig.httpsAgent = new https_1.Agent({
            rejectUnauthorized: false,
        });
    }
    if (requestObject.timeout !== undefined) {
        axiosConfig.timeout = requestObject.timeout;
    }
    if (requestObject.proxy !== undefined) {
        if (typeof requestObject.proxy === 'string') {
            try {
                const url = new url_1.URL(requestObject.proxy);
                axiosConfig.proxy = {
                    host: url.hostname,
                    port: parseInt(url.port, 10),
                    protocol: url.protocol,
                };
                if (!url.port) {
                    if (url.protocol === 'http') {
                        axiosConfig.proxy.port = 80;
                    }
                    else if (url.protocol === 'https') {
                        axiosConfig.proxy.port = 443;
                    }
                }
                if (url.username || url.password) {
                    axiosConfig.proxy.auth = {
                        username: url.username,
                        password: url.password,
                    };
                }
            }
            catch (error) {
                if (requestObject.proxy.includes('@')) {
                    const [userpass, hostport] = requestObject.proxy.split('@');
                    const [username, password] = userpass.split(':');
                    const [hostname, port] = hostport.split(':');
                    axiosConfig.proxy = {
                        host: hostname,
                        port: parseInt(port, 10),
                        protocol: 'http',
                        auth: {
                            username,
                            password,
                        },
                    };
                }
                else if (requestObject.proxy.includes(':')) {
                    const [hostname, port] = requestObject.proxy.split(':');
                    axiosConfig.proxy = {
                        host: hostname,
                        port: parseInt(port, 10),
                        protocol: 'http',
                    };
                }
                else {
                    axiosConfig.proxy = {
                        host: requestObject.proxy,
                        port: 80,
                        protocol: 'http',
                    };
                }
            }
        }
        else {
            axiosConfig.proxy = requestObject.proxy;
        }
    }
    if (requestObject.useStream) {
        axiosConfig.responseType = 'stream';
    }
    else if (requestObject.encoding === null) {
        axiosConfig.responseType = 'arraybuffer';
    }
    const allHeaders = axiosConfig.headers ? Object.keys(axiosConfig.headers) : [];
    if (!allHeaders.some((headerKey) => headerKey.toLowerCase() === 'accept')) {
        axiosConfig.headers = Object.assign(axiosConfig.headers || {}, { accept: '*/*' });
    }
    if (requestObject.json !== false &&
        axiosConfig.data !== undefined &&
        axiosConfig.data !== '' &&
        !(axiosConfig.data instanceof Buffer) &&
        !allHeaders.some((headerKey) => headerKey.toLowerCase() === 'content-type')) {
        axiosConfig.headers = Object.assign(axiosConfig.headers || {}, {
            'content-type': 'application/json',
        });
    }
    if (requestObject.simple === false) {
        axiosConfig.validateStatus = () => true;
    }
    return axiosConfig;
}
function digestAuthAxiosConfig(axiosConfig, response, auth) {
    var _a;
    const authDetails = response.headers['www-authenticate']
        .split(',')
        .map((v) => v.split('='));
    if (authDetails) {
        const nonceCount = '000000001';
        const cnonce = crypto_1.default.randomBytes(24).toString('hex');
        const realm = authDetails
            .find((el) => el[0].toLowerCase().indexOf('realm') > -1)[1]
            .replace(/"/g, '');
        const opaqueKV = authDetails.find((el) => el[0].toLowerCase().indexOf('opaque') > -1);
        const opaque = opaqueKV ? opaqueKV[1].replace(/"/g, '') : undefined;
        const nonce = authDetails
            .find((el) => el[0].toLowerCase().indexOf('nonce') > -1)[1]
            .replace(/"/g, '');
        const ha1 = crypto_1.default
            .createHash('md5')
            .update(`${auth === null || auth === void 0 ? void 0 : auth.username}:${realm}:${auth === null || auth === void 0 ? void 0 : auth.password}`)
            .digest('hex');
        const urlURL = new url_1.default.URL(axios_1.default.getUri(axiosConfig));
        const path = urlURL.pathname + urlURL.search;
        const ha2 = crypto_1.default
            .createHash('md5')
            .update(`${(_a = axiosConfig.method) !== null && _a !== void 0 ? _a : 'GET'}:${path}`)
            .digest('hex');
        const response = crypto_1.default
            .createHash('md5')
            .update(`${ha1}:${nonce}:${nonceCount}:${cnonce}:auth:${ha2}`)
            .digest('hex');
        let authorization = `Digest username="${auth === null || auth === void 0 ? void 0 : auth.username}",realm="${realm}",` +
            `nonce="${nonce}",uri="${path}",qop="auth",algorithm="MD5",` +
            `response="${response}",nc="${nonceCount}",cnonce="${cnonce}"`;
        if (opaque) {
            authorization += `,opaque="${opaque}"`;
        }
        if (axiosConfig.headers) {
            axiosConfig.headers.authorization = authorization;
        }
        else {
            axiosConfig.headers = { authorization };
        }
    }
    return axiosConfig;
}
async function proxyRequestToAxios(workflow, additionalData, node, uriOrObject, options) {
    var _a, _b, _c;
    if (process.env.N8N_USE_DEPRECATED_REQUEST_LIB) {
        return requestPromiseWithDefaults.call(null, uriOrObject, options);
    }
    let axiosConfig = {
        maxBodyLength: Infinity,
        maxContentLength: Infinity,
    };
    let configObject;
    if (uriOrObject !== undefined && typeof uriOrObject === 'string') {
        axiosConfig.url = uriOrObject;
    }
    if (uriOrObject !== undefined && typeof uriOrObject === 'object') {
        configObject = uriOrObject;
    }
    else {
        configObject = options || {};
    }
    axiosConfig = Object.assign(axiosConfig, await parseRequestObject(configObject));
    n8n_workflow_1.LoggerProxy.debug('Proxying request to axios');
    let requestFn;
    if (((_a = configObject.auth) === null || _a === void 0 ? void 0 : _a.sendImmediately) === false) {
        requestFn = async () => {
            var _a;
            try {
                return await (0, axios_1.default)(axiosConfig);
            }
            catch (error) {
                const { response } = error;
                if ((response === null || response === void 0 ? void 0 : response.status) !== 401 || !((_a = response.headers['www-authenticate']) === null || _a === void 0 ? void 0 : _a.includes('nonce'))) {
                    throw error;
                }
                const { auth } = axiosConfig;
                delete axiosConfig.auth;
                axiosConfig = digestAuthAxiosConfig(axiosConfig, response, auth);
                return await (0, axios_1.default)(axiosConfig);
            }
        };
    }
    else {
        requestFn = async () => (0, axios_1.default)(axiosConfig);
    }
    try {
        const response = await requestFn();
        if (configObject.resolveWithFullResponse === true) {
            let body = response.data;
            if (response.data === '') {
                if (axiosConfig.responseType === 'arraybuffer') {
                    body = Buffer.alloc(0);
                }
                else {
                    body = undefined;
                }
            }
            await ((_b = additionalData.hooks) === null || _b === void 0 ? void 0 : _b.executeHookFunctions('nodeFetchedData', [workflow.id, node]));
            return {
                body,
                headers: response.headers,
                statusCode: response.status,
                statusMessage: response.statusText,
                request: response.request,
            };
        }
        else {
            let body = response.data;
            if (response.data === '') {
                if (axiosConfig.responseType === 'arraybuffer') {
                    body = Buffer.alloc(0);
                }
                else {
                    body = undefined;
                }
            }
            await ((_c = additionalData.hooks) === null || _c === void 0 ? void 0 : _c.executeHookFunctions('nodeFetchedData', [workflow.id, node]));
            return body;
        }
    }
    catch (error) {
        const { config, response } = error;
        if (error.isAxiosError) {
            if (response) {
                n8n_workflow_1.LoggerProxy.debug('Request proxied to Axios failed', { status: response.status });
                let responseData = response.data;
                if (Buffer.isBuffer(responseData) || responseData instanceof stream_1.Readable) {
                    responseData = await (0, utils_1.binaryToBuffer)(responseData).then((buffer) => buffer.toString('utf-8'));
                }
                if (configObject.simple === false) {
                    if (configObject.resolveWithFullResponse) {
                        return {
                            body: responseData,
                            headers: response.headers,
                            statusCode: response.status,
                            statusMessage: response.statusText,
                        };
                    }
                    else {
                        return responseData;
                    }
                }
                const message = `${response.status} - ${JSON.stringify(responseData)}`;
                throw Object.assign(error, {
                    message,
                    statusCode: response.status,
                    options: (0, lodash_pick_1.default)(config !== null && config !== void 0 ? config : {}, ['url', 'method', 'data', 'headers']),
                    error: responseData,
                    config: undefined,
                    request: undefined,
                    response: (0, lodash_pick_1.default)(response, ['headers', 'status', 'statusText']),
                });
            }
            else {
                throw Object.assign(error, {
                    options: (0, lodash_pick_1.default)(config !== null && config !== void 0 ? config : {}, ['url', 'method', 'data', 'headers']),
                });
            }
        }
        throw error;
    }
}
exports.proxyRequestToAxios = proxyRequestToAxios;
function convertN8nRequestToAxios(n8nRequest) {
    const { headers, method, timeout, auth, proxy, url } = n8nRequest;
    const axiosRequest = {
        headers: headers !== null && headers !== void 0 ? headers : {},
        method,
        timeout,
        auth,
        proxy,
        url,
    };
    axiosRequest.params = n8nRequest.qs;
    if (n8nRequest.baseURL !== undefined) {
        axiosRequest.baseURL = n8nRequest.baseURL;
    }
    if (n8nRequest.disableFollowRedirect === true) {
        axiosRequest.maxRedirects = 0;
    }
    if (n8nRequest.encoding !== undefined) {
        axiosRequest.responseType = n8nRequest.encoding;
    }
    if (n8nRequest.skipSslCertificateValidation === true) {
        axiosRequest.httpsAgent = new https_1.Agent({
            rejectUnauthorized: false,
        });
    }
    if (n8nRequest.arrayFormat !== undefined) {
        axiosRequest.paramsSerializer = (params) => {
            return (0, qs_1.stringify)(params, { arrayFormat: n8nRequest.arrayFormat });
        };
    }
    const { body } = n8nRequest;
    if (body) {
        const existingContentTypeHeaderKey = searchForHeader(axiosRequest.headers, 'content-type');
        if (existingContentTypeHeaderKey === undefined) {
            axiosRequest.headers = axiosRequest.headers || {};
            if (body instanceof form_data_1.default) {
                axiosRequest.headers = {
                    ...axiosRequest.headers,
                    ...body.getHeaders(),
                };
            }
            else if (body instanceof url_1.URLSearchParams) {
                axiosRequest.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        }
        else if (axiosRequest.headers[existingContentTypeHeaderKey] === 'application/x-www-form-urlencoded') {
            axiosRequest.data = new url_1.URLSearchParams(n8nRequest.body);
        }
        if (typeof body === 'string' || (typeof body === 'object' && !(0, n8n_workflow_1.isObjectEmpty)(body))) {
            axiosRequest.data = body;
        }
    }
    if (n8nRequest.json) {
        const key = searchForHeader(axiosRequest.headers, 'accept');
        if (!key) {
            axiosRequest.headers.Accept = 'application/json';
        }
    }
    const userAgentHeader = searchForHeader(axiosRequest.headers, 'user-agent');
    if (!userAgentHeader) {
        axiosRequest.headers['User-Agent'] = 'n8n';
    }
    if (n8nRequest.ignoreHttpStatusErrors) {
        axiosRequest.validateStatus = () => true;
    }
    return axiosRequest;
}
async function httpRequest(requestOptions) {
    var _a, _b;
    let axiosRequest = convertN8nRequestToAxios(requestOptions);
    if (axiosRequest.data === undefined ||
        (axiosRequest.method !== undefined && axiosRequest.method.toUpperCase() === 'GET')) {
        delete axiosRequest.data;
    }
    let result;
    try {
        result = await (0, axios_1.default)(axiosRequest);
    }
    catch (error) {
        if (((_a = requestOptions.auth) === null || _a === void 0 ? void 0 : _a.sendImmediately) === false) {
            const { response } = error;
            if ((response === null || response === void 0 ? void 0 : response.status) !== 401 || !((_b = response.headers['www-authenticate']) === null || _b === void 0 ? void 0 : _b.includes('nonce'))) {
                throw error;
            }
            const { auth } = axiosRequest;
            delete axiosRequest.auth;
            axiosRequest = digestAuthAxiosConfig(axiosRequest, response, auth);
            result = await (0, axios_1.default)(axiosRequest);
        }
        throw error;
    }
    if (requestOptions.returnFullResponse) {
        return {
            body: result.data,
            headers: result.headers,
            statusCode: result.status,
            statusMessage: result.statusText,
        };
    }
    return result.data;
}
async function getBinaryMetadata(binaryDataId) {
    return BinaryDataManager_1.BinaryDataManager.getInstance().getBinaryMetadata(binaryDataId);
}
exports.getBinaryMetadata = getBinaryMetadata;
function getBinaryStream(binaryDataId, chunkSize) {
    return BinaryDataManager_1.BinaryDataManager.getInstance().getBinaryStream(binaryDataId, chunkSize);
}
exports.getBinaryStream = getBinaryStream;
function assertBinaryData(inputData, node, itemIndex, propertyName, inputIndex) {
    const binaryKeyData = inputData.main[inputIndex][itemIndex].binary;
    if (binaryKeyData === undefined) {
        throw new n8n_workflow_1.NodeOperationError(node, 'No binary data exists on item!', {
            itemIndex,
        });
    }
    const binaryPropertyData = binaryKeyData[propertyName];
    if (binaryPropertyData === undefined) {
        throw new n8n_workflow_1.NodeOperationError(node, `Item has no binary property called "${propertyName}"`, {
            itemIndex,
        });
    }
    return binaryPropertyData;
}
exports.assertBinaryData = assertBinaryData;
async function getBinaryDataBuffer(inputData, itemIndex, propertyName, inputIndex) {
    const binaryData = inputData.main[inputIndex][itemIndex].binary[propertyName];
    return BinaryDataManager_1.BinaryDataManager.getInstance().retrieveBinaryData(binaryData);
}
exports.getBinaryDataBuffer = getBinaryDataBuffer;
async function setBinaryDataBuffer(data, binaryData, executionId) {
    return BinaryDataManager_1.BinaryDataManager.getInstance().storeBinaryData(data, binaryData, executionId);
}
exports.setBinaryDataBuffer = setBinaryDataBuffer;
async function copyBinaryFile(executionId, filePath, fileName, mimeType) {
    let fileExtension;
    if (!mimeType) {
        if (filePath) {
            const mimeTypeLookup = (0, mime_types_1.lookup)(filePath);
            if (mimeTypeLookup) {
                mimeType = mimeTypeLookup;
            }
        }
        if (!mimeType) {
            const fileTypeData = await file_type_1.default.fromFile(filePath);
            if (fileTypeData) {
                mimeType = fileTypeData.mime;
                fileExtension = fileTypeData.ext;
            }
        }
    }
    if (!fileExtension && mimeType) {
        fileExtension = (0, mime_types_1.extension)(mimeType) || undefined;
    }
    if (!mimeType) {
        mimeType = 'text/plain';
    }
    const returnData = {
        mimeType,
        fileType: (0, n8n_workflow_1.fileTypeFromMimeType)(mimeType),
        fileExtension,
        data: '',
    };
    if (fileName) {
        returnData.fileName = fileName;
    }
    else if (filePath) {
        returnData.fileName = path_1.default.parse(filePath).base;
    }
    return BinaryDataManager_1.BinaryDataManager.getInstance().copyBinaryFile(returnData, filePath, executionId);
}
exports.copyBinaryFile = copyBinaryFile;
async function prepareBinaryData(binaryData, executionId, filePath, mimeType) {
    let fileExtension;
    if (!mimeType) {
        if (filePath) {
            const mimeTypeLookup = (0, mime_types_1.lookup)(filePath);
            if (mimeTypeLookup) {
                mimeType = mimeTypeLookup;
            }
        }
        if (!mimeType) {
            if (Buffer.isBuffer(binaryData)) {
                const fileTypeData = await file_type_1.default.fromBuffer(binaryData);
                if (fileTypeData) {
                    mimeType = fileTypeData.mime;
                    fileExtension = fileTypeData.ext;
                }
            }
            else if (binaryData instanceof http_1.IncomingMessage) {
                mimeType = binaryData.headers['content-type'];
            }
            else {
            }
        }
    }
    if (!fileExtension && mimeType) {
        fileExtension = (0, mime_types_1.extension)(mimeType) || undefined;
    }
    if (!mimeType) {
        mimeType = 'text/plain';
    }
    const returnData = {
        mimeType,
        fileType: (0, n8n_workflow_1.fileTypeFromMimeType)(mimeType),
        fileExtension,
        data: '',
    };
    if (filePath) {
        if (filePath.includes('?')) {
            filePath = filePath.split('?').shift();
        }
        const filePathParts = path_1.default.parse(filePath);
        if (filePathParts.dir !== '') {
            returnData.directory = filePathParts.dir;
        }
        returnData.fileName = filePathParts.base;
        const fileExtension = filePathParts.ext.slice(1);
        if (fileExtension) {
            returnData.fileExtension = fileExtension;
        }
    }
    return setBinaryDataBuffer(returnData, binaryData, executionId);
}
async function requestOAuth2(credentialsType, requestOptions, node, additionalData, oAuth2Options, isN8nRequest = false) {
    var _a, _b;
    const credentials = await this.getCredentials(credentialsType);
    if (credentials.grantType === "authorizationCode" &&
        credentials.oauthTokenData === undefined) {
        throw new Error('OAuth credentials not connected!');
    }
    const oAuthClient = new client_oauth2_1.default({
        clientId: credentials.clientId,
        clientSecret: credentials.clientSecret,
        accessTokenUri: credentials.accessTokenUrl,
        scopes: credentials.scope.split(' '),
    });
    let oauthTokenData = credentials.oauthTokenData;
    if (credentials.grantType === "clientCredentials" &&
        (oauthTokenData === undefined || Object.keys(oauthTokenData).length === 0)) {
        const { data } = await (0, OAuth2Helper_1.getClientCredentialsToken)(oAuthClient, credentials);
        if (!((_a = node.credentials) === null || _a === void 0 ? void 0 : _a[credentialsType])) {
            throw new Error(`The node "${node.name}" does not have credentials of type "${credentialsType}"!`);
        }
        const nodeCredentials = node.credentials[credentialsType];
        await additionalData.credentialsHelper.updateCredentials(nodeCredentials, credentialsType, Object.assign(credentials, { oauthTokenData: data }));
        oauthTokenData = data;
    }
    const token = oAuthClient.createToken((0, lodash_get_1.default)(oauthTokenData, oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.property) || oauthTokenData.accessToken, oauthTokenData.refreshToken, (oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.tokenType) || oauthTokenData.tokenType, oauthTokenData);
    const newRequestOptions = token.sign(requestOptions);
    const newRequestHeaders = (newRequestOptions.headers = (_b = newRequestOptions.headers) !== null && _b !== void 0 ? _b : {});
    if ((oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.keepBearer) === false && typeof newRequestHeaders.Authorization === 'string') {
        newRequestHeaders.Authorization = newRequestHeaders.Authorization.split(' ')[1];
    }
    if (oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.keyToIncludeInAccessTokenHeader) {
        Object.assign(newRequestHeaders, {
            [oAuth2Options.keyToIncludeInAccessTokenHeader]: token.accessToken,
        });
    }
    if (isN8nRequest) {
        return this.helpers.httpRequest(newRequestOptions).catch(async (error) => {
            var _a, _b;
            if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 401) {
                n8n_workflow_1.LoggerProxy.debug(`OAuth2 token for "${credentialsType}" used by node "${node.name}" expired. Should revalidate.`);
                const tokenRefreshOptions = {};
                if (oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.includeCredentialsOnRefreshOnBody) {
                    const body = {
                        client_id: credentials.clientId,
                        client_secret: credentials.clientSecret,
                    };
                    tokenRefreshOptions.body = body;
                    tokenRefreshOptions.headers = {
                        Authorization: '',
                    };
                }
                let newToken;
                n8n_workflow_1.LoggerProxy.debug(`OAuth2 token for "${credentialsType}" used by node "${node.name}" has been renewed.`);
                if ("clientCredentials" === credentials.grantType) {
                    newToken = await (0, OAuth2Helper_1.getClientCredentialsToken)(token.client, credentials);
                }
                else {
                    newToken = await token.refresh(tokenRefreshOptions);
                }
                n8n_workflow_1.LoggerProxy.debug(`OAuth2 token for "${credentialsType}" used by node "${node.name}" has been renewed.`);
                credentials.oauthTokenData = newToken.data;
                if (!((_b = node.credentials) === null || _b === void 0 ? void 0 : _b[credentialsType])) {
                    throw new Error(`The node "${node.name}" does not have credentials of type "${credentialsType}"!`);
                }
                const nodeCredentials = node.credentials[credentialsType];
                await additionalData.credentialsHelper.updateCredentials(nodeCredentials, credentialsType, credentials);
                const refreshedRequestOption = newToken.sign(requestOptions);
                if (oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.keyToIncludeInAccessTokenHeader) {
                    Object.assign(newRequestHeaders, {
                        [oAuth2Options.keyToIncludeInAccessTokenHeader]: token.accessToken,
                    });
                }
                return this.helpers.httpRequest(refreshedRequestOption);
            }
            throw error;
        });
    }
    return this.helpers
        .request(newRequestOptions)
        .then((response) => {
        const requestOptions = newRequestOptions;
        if (requestOptions.resolveWithFullResponse === true &&
            requestOptions.simple === false &&
            response.statusCode ===
                ((oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.tokenExpiredStatusCode) === undefined
                    ? 401
                    : oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.tokenExpiredStatusCode)) {
            throw response;
        }
        return response;
    })
        .catch(async (error) => {
        var _a, _b;
        const statusCodeReturned = (oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.tokenExpiredStatusCode) === undefined
            ? 401
            : oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.tokenExpiredStatusCode;
        if (error.statusCode === statusCodeReturned) {
            const tokenRefreshOptions = {};
            if (oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.includeCredentialsOnRefreshOnBody) {
                const body = {
                    client_id: credentials.clientId,
                    client_secret: credentials.clientSecret,
                };
                tokenRefreshOptions.body = body;
                tokenRefreshOptions.headers = {
                    Authorization: '',
                };
            }
            n8n_workflow_1.LoggerProxy.debug(`OAuth2 token for "${credentialsType}" used by node "${node.name}" expired. Should revalidate.`);
            let newToken;
            if ("clientCredentials" === credentials.grantType) {
                newToken = await (0, OAuth2Helper_1.getClientCredentialsToken)(token.client, credentials);
            }
            else {
                newToken = await token.refresh(tokenRefreshOptions);
            }
            n8n_workflow_1.LoggerProxy.debug(`OAuth2 token for "${credentialsType}" used by node "${node.name}" has been renewed.`);
            credentials.oauthTokenData = newToken.data;
            if (!((_a = node.credentials) === null || _a === void 0 ? void 0 : _a[credentialsType])) {
                throw new Error(`The node "${node.name}" does not have credentials of type "${credentialsType}"!`);
            }
            const nodeCredentials = node.credentials[credentialsType];
            await additionalData.credentialsHelper.updateCredentials(nodeCredentials, credentialsType, credentials);
            n8n_workflow_1.LoggerProxy.debug(`OAuth2 token for "${credentialsType}" used by node "${node.name}" has been saved to database successfully.`);
            const newRequestOptions = newToken.sign(requestOptions);
            newRequestOptions.headers = (_b = newRequestOptions.headers) !== null && _b !== void 0 ? _b : {};
            if (oAuth2Options === null || oAuth2Options === void 0 ? void 0 : oAuth2Options.keyToIncludeInAccessTokenHeader) {
                Object.assign(newRequestOptions.headers, {
                    [oAuth2Options.keyToIncludeInAccessTokenHeader]: token.accessToken,
                });
            }
            return this.helpers.request(newRequestOptions);
        }
        throw error;
    });
}
exports.requestOAuth2 = requestOAuth2;
async function requestOAuth1(credentialsType, requestOptions, isN8nRequest = false) {
    const credentials = await this.getCredentials(credentialsType);
    if (credentials === undefined) {
        throw new Error('No credentials were returned!');
    }
    if (credentials.oauthTokenData === undefined) {
        throw new Error('OAuth credentials not connected!');
    }
    const oauth = new oauth_1_0a_1.default({
        consumer: {
            key: credentials.consumerKey,
            secret: credentials.consumerSecret,
        },
        signature_method: credentials.signatureMethod,
        hash_function(base, key) {
            const algorithm = credentials.signatureMethod === 'HMAC-SHA1' ? 'sha1' : 'sha256';
            return (0, crypto_1.createHmac)(algorithm, key).update(base).digest('base64');
        },
    });
    const oauthTokenData = credentials.oauthTokenData;
    const token = {
        key: oauthTokenData.oauth_token,
        secret: oauthTokenData.oauth_token_secret,
    };
    requestOptions.data = { ...requestOptions.qs, ...requestOptions.form };
    if (requestOptions.uri && !requestOptions.url) {
        requestOptions.url = requestOptions.uri;
        delete requestOptions.uri;
    }
    requestOptions.headers = oauth.toHeader(oauth.authorize(requestOptions, token));
    if (isN8nRequest) {
        return this.helpers.httpRequest(requestOptions);
    }
    return this.helpers.request(requestOptions).catch(async (error) => {
        throw error;
    });
}
exports.requestOAuth1 = requestOAuth1;
async function httpRequestWithAuthentication(credentialsType, requestOptions, workflow, node, additionalData, additionalCredentialOptions) {
    var _a;
    let credentialsDecrypted;
    try {
        const parentTypes = additionalData.credentialsHelper.getParentTypes(credentialsType);
        if (parentTypes.includes('oAuth1Api')) {
            return await requestOAuth1.call(this, credentialsType, requestOptions, true);
        }
        if (parentTypes.includes('oAuth2Api')) {
            return await requestOAuth2.call(this, credentialsType, requestOptions, node, additionalData, additionalCredentialOptions === null || additionalCredentialOptions === void 0 ? void 0 : additionalCredentialOptions.oauth2, true);
        }
        if (additionalCredentialOptions === null || additionalCredentialOptions === void 0 ? void 0 : additionalCredentialOptions.credentialsDecrypted) {
            credentialsDecrypted = additionalCredentialOptions.credentialsDecrypted.data;
        }
        else {
            credentialsDecrypted = await this.getCredentials(credentialsType);
        }
        if (credentialsDecrypted === undefined) {
            throw new n8n_workflow_1.NodeOperationError(node, `Node "${node.name}" does not have any credentials of type "${credentialsType}" set!`);
        }
        const data = await additionalData.credentialsHelper.preAuthentication({ helpers: this.helpers }, credentialsDecrypted, credentialsType, node, false);
        if (data) {
            Object.assign(credentialsDecrypted, data);
        }
        requestOptions = await additionalData.credentialsHelper.authenticate(credentialsDecrypted, credentialsType, requestOptions, workflow, node, additionalData.timezone);
        return await httpRequest(requestOptions);
    }
    catch (error) {
        if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 401 &&
            additionalData.credentialsHelper.preAuthentication !== undefined) {
            try {
                if (credentialsDecrypted !== undefined) {
                    const data = await additionalData.credentialsHelper.preAuthentication({ helpers: this.helpers }, credentialsDecrypted, credentialsType, node, true);
                    if (data) {
                        Object.assign(credentialsDecrypted, data);
                    }
                    requestOptions = await additionalData.credentialsHelper.authenticate(credentialsDecrypted, credentialsType, requestOptions, workflow, node, additionalData.timezone);
                }
                return await httpRequest(requestOptions);
            }
            catch (error) {
                throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
            }
        }
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.httpRequestWithAuthentication = httpRequestWithAuthentication;
function returnJsonArray(jsonData) {
    const returnData = [];
    if (!Array.isArray(jsonData)) {
        jsonData = [jsonData];
    }
    jsonData.forEach((data) => {
        if (data === null || data === void 0 ? void 0 : data.json) {
            returnData.push({ ...data, json: data.json });
        }
        else {
            returnData.push({ json: data });
        }
    });
    return returnData;
}
exports.returnJsonArray = returnJsonArray;
function constructExecutionMetaData(inputData, options) {
    const { itemData } = options;
    return inputData.map((data) => {
        const { json, ...rest } = data;
        return { json, pairedItem: itemData, ...rest };
    });
}
exports.constructExecutionMetaData = constructExecutionMetaData;
function normalizeItems(executionData) {
    if (typeof executionData === 'object' && !Array.isArray(executionData)) {
        executionData = executionData.json ? [executionData] : [{ json: executionData }];
    }
    if (executionData.every((item) => typeof item === 'object' && 'json' in item))
        return executionData;
    if (executionData.some((item) => typeof item === 'object' && 'json' in item)) {
        throw new Error('Inconsistent item format');
    }
    if (executionData.every((item) => typeof item === 'object' && 'binary' in item)) {
        const normalizedItems = [];
        executionData.forEach((item) => {
            const json = Object.keys(item).reduce((acc, key) => {
                if (key === 'binary')
                    return acc;
                return { ...acc, [key]: item[key] };
            }, {});
            normalizedItems.push({
                json,
                binary: item.binary,
            });
        });
        return normalizedItems;
    }
    if (executionData.some((item) => typeof item === 'object' && 'binary' in item)) {
        throw new Error('Inconsistent item format');
    }
    return executionData.map((item) => {
        return { json: item };
    });
}
exports.normalizeItems = normalizeItems;
async function requestWithAuthentication(credentialsType, requestOptions, workflow, node, additionalData, additionalCredentialOptions) {
    let credentialsDecrypted;
    try {
        const parentTypes = additionalData.credentialsHelper.getParentTypes(credentialsType);
        if (parentTypes.includes('oAuth1Api')) {
            return await requestOAuth1.call(this, credentialsType, requestOptions, false);
        }
        if (parentTypes.includes('oAuth2Api')) {
            return await requestOAuth2.call(this, credentialsType, requestOptions, node, additionalData, additionalCredentialOptions === null || additionalCredentialOptions === void 0 ? void 0 : additionalCredentialOptions.oauth2, false);
        }
        if (additionalCredentialOptions === null || additionalCredentialOptions === void 0 ? void 0 : additionalCredentialOptions.credentialsDecrypted) {
            credentialsDecrypted = additionalCredentialOptions.credentialsDecrypted.data;
        }
        else {
            credentialsDecrypted = await this.getCredentials(credentialsType);
        }
        if (credentialsDecrypted === undefined) {
            throw new n8n_workflow_1.NodeOperationError(node, `Node "${node.name}" does not have any credentials of type "${credentialsType}" set!`);
        }
        const data = await additionalData.credentialsHelper.preAuthentication({ helpers: this.helpers }, credentialsDecrypted, credentialsType, node, false);
        if (data) {
            Object.assign(credentialsDecrypted, data);
        }
        requestOptions = await additionalData.credentialsHelper.authenticate(credentialsDecrypted, credentialsType, requestOptions, workflow, node, additionalData.timezone);
        return await proxyRequestToAxios(workflow, additionalData, node, requestOptions);
    }
    catch (error) {
        try {
            if (credentialsDecrypted !== undefined) {
                const data = await additionalData.credentialsHelper.preAuthentication({ helpers: this.helpers }, credentialsDecrypted, credentialsType, node, true);
                if (data) {
                    Object.assign(credentialsDecrypted, data);
                    requestOptions = await additionalData.credentialsHelper.authenticate(credentialsDecrypted, credentialsType, requestOptions, workflow, node, additionalData.timezone);
                    return await proxyRequestToAxios(workflow, additionalData, node, requestOptions);
                }
            }
            throw error;
        }
        catch (error) {
            throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
        }
    }
}
exports.requestWithAuthentication = requestWithAuthentication;
function getAdditionalKeys(additionalData, mode, runExecutionData) {
    const executionId = additionalData.executionId || Constants_1.PLACEHOLDER_EMPTY_EXECUTION_ID;
    const resumeUrl = `${additionalData.webhookWaitingBaseUrl}/${executionId}`;
    return {
        $execution: {
            id: executionId,
            mode: mode === 'manual' ? 'test' : 'production',
            resumeUrl,
            customData: runExecutionData
                ? {
                    set(key, value) {
                        try {
                            (0, WorkflowExecutionMetadata_1.setWorkflowExecutionMetadata)(runExecutionData, key, value);
                        }
                        catch (e) {
                            if (mode === 'manual') {
                                throw e;
                            }
                            n8n_workflow_1.LoggerProxy.verbose(e.message);
                        }
                    },
                    setAll(obj) {
                        try {
                            (0, WorkflowExecutionMetadata_1.setAllWorkflowExecutionMetadata)(runExecutionData, obj);
                        }
                        catch (e) {
                            if (mode === 'manual') {
                                throw e;
                            }
                            n8n_workflow_1.LoggerProxy.verbose(e.message);
                        }
                    },
                    get(key) {
                        return (0, WorkflowExecutionMetadata_1.getWorkflowExecutionMetadata)(runExecutionData, key);
                    },
                    getAll() {
                        return (0, WorkflowExecutionMetadata_1.getAllWorkflowExecutionMetadata)(runExecutionData);
                    },
                }
                : undefined,
        },
        $vars: additionalData.variables,
        $executionId: executionId,
        $resumeWebhookUrl: resumeUrl,
    };
}
exports.getAdditionalKeys = getAdditionalKeys;
async function getCredentials(workflow, node, type, additionalData, mode, runExecutionData, runIndex, connectionInputData, itemIndex) {
    var _a, _b;
    const nodeType = workflow.nodeTypes.getByNameAndVersion(node.type, node.typeVersion);
    if (nodeType === undefined) {
        throw new n8n_workflow_1.NodeOperationError(node, `Node type "${node.type}" is not known so can not get credentials!`);
    }
    const fullAccess = ['n8n-nodes-base.httpRequest'].includes(node.type);
    let nodeCredentialDescription;
    if (!fullAccess) {
        if (nodeType.description.credentials === undefined) {
            throw new n8n_workflow_1.NodeOperationError(node, `Node type "${node.type}" does not have any credentials defined!`);
        }
        nodeCredentialDescription = nodeType.description.credentials.find((credentialTypeDescription) => credentialTypeDescription.name === type);
        if (nodeCredentialDescription === undefined) {
            throw new n8n_workflow_1.NodeOperationError(node, `Node type "${node.type}" does not have any credentials of type "${type}" defined!`);
        }
        if (!n8n_workflow_1.NodeHelpers.displayParameter(additionalData.currentNodeParameters || node.parameters, nodeCredentialDescription, node, node.parameters)) {
            throw new n8n_workflow_1.NodeOperationError(node, 'Credentials not found');
        }
    }
    if (!fullAccess && !((_a = node.credentials) === null || _a === void 0 ? void 0 : _a[type])) {
        if ((nodeCredentialDescription === null || nodeCredentialDescription === void 0 ? void 0 : nodeCredentialDescription.required) === true) {
            if (!node.credentials) {
                throw new n8n_workflow_1.NodeOperationError(node, 'Node does not have any credentials set!');
            }
            if (!node.credentials[type]) {
                throw new n8n_workflow_1.NodeOperationError(node, `Node does not have any credentials set for "${type}"!`);
            }
        }
        else {
            throw new n8n_workflow_1.NodeOperationError(node, 'Node does not require credentials');
        }
    }
    if (fullAccess && !((_b = node.credentials) === null || _b === void 0 ? void 0 : _b[type])) {
        throw new n8n_workflow_1.NodeOperationError(node, 'Credentials not found');
    }
    let expressionResolveValues;
    if (connectionInputData && runExecutionData && runIndex !== undefined) {
        expressionResolveValues = {
            connectionInputData,
            itemIndex: itemIndex || 0,
            node,
            runExecutionData,
            runIndex,
            workflow,
        };
    }
    const nodeCredentials = node.credentials
        ? node.credentials[type]
        : {};
    const decryptedDataObject = await additionalData.credentialsHelper.getDecrypted(nodeCredentials, type, mode, additionalData.timezone, false, expressionResolveValues);
    return decryptedDataObject;
}
exports.getCredentials = getCredentials;
function cleanupParameterData(inputData) {
    if (typeof inputData !== 'object' || inputData === null) {
        return;
    }
    if (Array.isArray(inputData)) {
        inputData.forEach((value) => cleanupParameterData(value));
        return;
    }
    if (typeof inputData === 'object') {
        Object.keys(inputData).forEach((key) => {
            var _a, _b;
            if (typeof inputData[key] === 'object') {
                if (((_a = inputData[key]) === null || _a === void 0 ? void 0 : _a.constructor.name) === 'DateTime') {
                    inputData[key] =
                        (_b = inputData[key]) === null || _b === void 0 ? void 0 : _b.toString();
                }
                else {
                    cleanupParameterData(inputData[key]);
                }
            }
        });
    }
}
function getNodeParameter(workflow, runExecutionData, runIndex, connectionInputData, node, parameterName, itemIndex, mode, timezone, additionalKeys, executeData, fallbackValue, options) {
    const nodeType = workflow.nodeTypes.getByNameAndVersion(node.type, node.typeVersion);
    if (nodeType === undefined) {
        throw new Error(`Node type "${node.type}" is not known so can not return parameter value!`);
    }
    const value = (0, lodash_get_1.default)(node.parameters, parameterName, fallbackValue);
    if (value === undefined) {
        throw new Error(`Could not get parameter "${parameterName}"!`);
    }
    let returnData;
    try {
        returnData = workflow.expression.getParameterValue(value, runExecutionData, runIndex, itemIndex, node.name, connectionInputData, mode, timezone, additionalKeys, executeData);
        cleanupParameterData(returnData);
    }
    catch (e) {
        if (e instanceof n8n_workflow_1.ExpressionError && node.continueOnFail && node.name === 'Set') {
            returnData = [{ name: undefined, value: undefined }];
        }
        else {
            if (e.context)
                e.context.parameter = parameterName;
            e.cause = value;
            throw e;
        }
    }
    if (options === null || options === void 0 ? void 0 : options.extractValue) {
        returnData = (0, ExtractValue_1.extractValue)(returnData, parameterName, node, nodeType);
    }
    return returnData;
}
exports.getNodeParameter = getNodeParameter;
function continueOnFail(node) {
    return (0, lodash_get_1.default)(node, 'continueOnFail', false);
}
exports.continueOnFail = continueOnFail;
function getNodeWebhookUrl(name, workflow, node, additionalData, mode, timezone, additionalKeys, isTest) {
    let baseUrl = additionalData.webhookBaseUrl;
    if (isTest === true) {
        baseUrl = additionalData.webhookTestBaseUrl;
    }
    const webhookDescription = getWebhookDescription(name, workflow, node);
    if (webhookDescription === undefined) {
        return undefined;
    }
    const path = workflow.expression.getSimpleParameterValue(node, webhookDescription.path, mode, timezone, additionalKeys);
    if (path === undefined) {
        return undefined;
    }
    const isFullPath = workflow.expression.getSimpleParameterValue(node, webhookDescription.isFullPath, mode, timezone, additionalKeys, undefined, false);
    return n8n_workflow_1.NodeHelpers.getNodeWebhookUrl(baseUrl, workflow.id, node, path.toString(), isFullPath);
}
exports.getNodeWebhookUrl = getNodeWebhookUrl;
function getTimezone(workflow, additionalData) {
    if (workflow.settings !== undefined && workflow.settings.timezone !== undefined) {
        return workflow.settings.timezone;
    }
    return additionalData.timezone;
}
exports.getTimezone = getTimezone;
function getWebhookDescription(name, workflow, node) {
    const nodeType = workflow.nodeTypes.getByNameAndVersion(node.type, node.typeVersion);
    if (nodeType.description.webhooks === undefined) {
        return undefined;
    }
    for (const webhookDescription of nodeType.description.webhooks) {
        if (webhookDescription.name === name) {
            return webhookDescription;
        }
    }
    return undefined;
}
exports.getWebhookDescription = getWebhookDescription;
const getCommonWorkflowFunctions = (workflow, node, additionalData) => ({
    logger: n8n_workflow_1.LoggerProxy,
    getExecutionId: () => additionalData.executionId,
    getNode: () => (0, n8n_workflow_1.deepCopy)(node),
    getWorkflow: () => ({
        id: workflow.id,
        name: workflow.name,
        active: workflow.active,
    }),
    getWorkflowStaticData: (type) => workflow.getStaticData(type, node),
    getRestApiUrl: () => additionalData.restApiUrl,
    getTimezone: () => getTimezone(workflow, additionalData),
});
const getRequestHelperFunctions = (workflow, node, additionalData) => ({
    httpRequest,
    async httpRequestWithAuthentication(credentialsType, requestOptions, additionalCredentialOptions) {
        return httpRequestWithAuthentication.call(this, credentialsType, requestOptions, workflow, node, additionalData, additionalCredentialOptions);
    },
    request: async (uriOrObject, options) => proxyRequestToAxios(workflow, additionalData, node, uriOrObject, options),
    async requestWithAuthentication(credentialsType, requestOptions, additionalCredentialOptions) {
        return requestWithAuthentication.call(this, credentialsType, requestOptions, workflow, node, additionalData, additionalCredentialOptions);
    },
    async requestOAuth1(credentialsType, requestOptions) {
        return requestOAuth1.call(this, credentialsType, requestOptions);
    },
    async requestOAuth2(credentialsType, requestOptions, oAuth2Options) {
        return requestOAuth2.call(this, credentialsType, requestOptions, node, additionalData, oAuth2Options);
    },
});
const getFileSystemHelperFunctions = (node) => ({
    async createReadStream(filePath) {
        try {
            await (0, promises_1.access)(filePath);
        }
        catch (error) {
            throw error.code === 'ENOENT'
                ? new n8n_workflow_1.NodeOperationError(node, error, {
                    message: `The file "${String(filePath)}" could not be accessed.`,
                })
                : error;
        }
        return (0, fs_1.createReadStream)(filePath);
    },
});
const getNodeHelperFunctions = ({ executionId, }) => ({
    copyBinaryFile: async (filePath, fileName, mimeType) => copyBinaryFile(executionId, filePath, fileName, mimeType),
});
const getBinaryHelperFunctions = ({ executionId, }) => ({
    getBinaryStream,
    getBinaryMetadata,
    binaryToBuffer: utils_1.binaryToBuffer,
    prepareBinaryData: async (binaryData, filePath, mimeType) => prepareBinaryData(binaryData, executionId, filePath, mimeType),
    setBinaryDataBuffer: async (data, binaryData) => setBinaryDataBuffer(data, binaryData, executionId),
    copyBinaryFile: async () => {
        throw new Error('copyBinaryFile has been removed. Please upgrade this node');
    },
});
function getExecutePollFunctions(workflow, node, additionalData, mode, activation) {
    return ((workflow, node) => {
        return {
            ...getCommonWorkflowFunctions(workflow, node, additionalData),
            __emit: (data) => {
                throw new Error('Overwrite NodeExecuteFunctions.getExecutePollFunctions.__emit function!');
            },
            __emitError(error) {
                throw new Error('Overwrite NodeExecuteFunctions.getExecutePollFunctions.__emitError function!');
            },
            getMode: () => mode,
            getActivationMode: () => activation,
            getCredentials: async (type) => getCredentials(workflow, node, type, additionalData, mode),
            getNodeParameter: (parameterName, fallbackValue, options) => {
                const runExecutionData = null;
                const itemIndex = 0;
                const runIndex = 0;
                const connectionInputData = [];
                return getNodeParameter(workflow, runExecutionData, runIndex, connectionInputData, node, parameterName, itemIndex, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), undefined, fallbackValue, options);
            },
            helpers: {
                createDeferredPromise: n8n_workflow_1.createDeferredPromise,
                ...getRequestHelperFunctions(workflow, node, additionalData),
                ...getBinaryHelperFunctions(additionalData),
                returnJsonArray,
            },
        };
    })(workflow, node);
}
exports.getExecutePollFunctions = getExecutePollFunctions;
function getExecuteTriggerFunctions(workflow, node, additionalData, mode, activation) {
    return ((workflow, node) => {
        return {
            ...getCommonWorkflowFunctions(workflow, node, additionalData),
            emit: (data) => {
                throw new Error('Overwrite NodeExecuteFunctions.getExecuteTriggerFunctions.emit function!');
            },
            emitError: (error) => {
                throw new Error('Overwrite NodeExecuteFunctions.getExecuteTriggerFunctions.emit function!');
            },
            getMode: () => mode,
            getActivationMode: () => activation,
            getCredentials: async (type) => getCredentials(workflow, node, type, additionalData, mode),
            getNodeParameter: (parameterName, fallbackValue, options) => {
                const runExecutionData = null;
                const itemIndex = 0;
                const runIndex = 0;
                const connectionInputData = [];
                return getNodeParameter(workflow, runExecutionData, runIndex, connectionInputData, node, parameterName, itemIndex, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), undefined, fallbackValue, options);
            },
            helpers: {
                createDeferredPromise: n8n_workflow_1.createDeferredPromise,
                ...getRequestHelperFunctions(workflow, node, additionalData),
                ...getBinaryHelperFunctions(additionalData),
                returnJsonArray,
            },
        };
    })(workflow, node);
}
exports.getExecuteTriggerFunctions = getExecuteTriggerFunctions;
function getExecuteFunctions(workflow, runExecutionData, runIndex, connectionInputData, inputData, node, additionalData, executeData, mode) {
    return ((workflow, runExecutionData, connectionInputData, inputData, node) => {
        return {
            ...getCommonWorkflowFunctions(workflow, node, additionalData),
            getMode: () => mode,
            getCredentials: async (type, itemIndex) => getCredentials(workflow, node, type, additionalData, mode, runExecutionData, runIndex, connectionInputData, itemIndex),
            getExecuteData: () => executeData,
            continueOnFail: () => continueOnFail(node),
            evaluateExpression: (expression, itemIndex) => {
                return workflow.expression.resolveSimpleParameterValue(`=${expression}`, {}, runExecutionData, runIndex, itemIndex, node.name, connectionInputData, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), executeData);
            },
            async executeWorkflow(workflowInfo, inputData) {
                var _a;
                return additionalData
                    .executeWorkflow(workflowInfo, additionalData, {
                    parentWorkflowId: (_a = workflow.id) === null || _a === void 0 ? void 0 : _a.toString(),
                    inputData,
                    parentWorkflowSettings: workflow.settings,
                })
                    .then(async (result) => BinaryDataManager_1.BinaryDataManager.getInstance().duplicateBinaryData(result, additionalData.executionId));
            },
            getContext(type) {
                return n8n_workflow_1.NodeHelpers.getContext(runExecutionData, type, node);
            },
            getInputData: (inputIndex = 0, inputName = 'main') => {
                if (!inputData.hasOwnProperty(inputName)) {
                    return [];
                }
                if (inputData[inputName].length < inputIndex) {
                    throw new Error(`Could not get input index "${inputIndex}" of input "${inputName}"!`);
                }
                if (inputData[inputName][inputIndex] === null) {
                    throw new Error(`Value "${inputIndex}" of input "${inputName}" did not get set!`);
                }
                return inputData[inputName][inputIndex];
            },
            getInputSourceData: (inputIndex = 0, inputName = 'main') => {
                if ((executeData === null || executeData === void 0 ? void 0 : executeData.source) === null) {
                    throw new Error('Source data is missing!');
                }
                return executeData.source[inputName][inputIndex];
            },
            getNodeParameter: (parameterName, itemIndex, fallbackValue, options) => {
                return getNodeParameter(workflow, runExecutionData, runIndex, connectionInputData, node, parameterName, itemIndex, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), executeData, fallbackValue, options);
            },
            getWorkflowDataProxy: (itemIndex) => {
                const dataProxy = new n8n_workflow_1.WorkflowDataProxy(workflow, runExecutionData, runIndex, itemIndex, node.name, connectionInputData, {}, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), executeData);
                return dataProxy.getDataProxy();
            },
            prepareOutputData: n8n_workflow_1.NodeHelpers.prepareOutputData,
            binaryToBuffer: utils_1.binaryToBuffer,
            async putExecutionToWait(waitTill) {
                runExecutionData.waitTill = waitTill;
                if (additionalData.setExecutionStatus) {
                    additionalData.setExecutionStatus('waiting');
                }
            },
            sendMessageToUI(...args) {
                if (mode !== 'manual') {
                    return;
                }
                try {
                    if (additionalData.sendMessageToUI) {
                        args = args.map((arg) => {
                            if (arg.isLuxonDateTime && arg.invalidReason)
                                return { ...arg };
                            if (arg.isLuxonDateTime)
                                return new Date(arg.ts).toString();
                            if (arg instanceof Date)
                                return arg.toString();
                            return arg;
                        });
                        additionalData.sendMessageToUI(node.name, args);
                    }
                }
                catch (error) {
                    n8n_workflow_1.LoggerProxy.warn(`There was a problem sending message to UI: ${error.message}`);
                }
            },
            async sendResponse(response) {
                var _a;
                await ((_a = additionalData.hooks) === null || _a === void 0 ? void 0 : _a.executeHookFunctions('sendResponse', [response]));
            },
            helpers: {
                createDeferredPromise: n8n_workflow_1.createDeferredPromise,
                ...getRequestHelperFunctions(workflow, node, additionalData),
                ...getFileSystemHelperFunctions(node),
                ...getBinaryHelperFunctions(additionalData),
                assertBinaryData: (itemIndex, propertyName) => assertBinaryData(inputData, node, itemIndex, propertyName, 0),
                getBinaryDataBuffer: async (itemIndex, propertyName) => getBinaryDataBuffer(inputData, itemIndex, propertyName, 0),
                returnJsonArray,
                normalizeItems,
                constructExecutionMetaData,
            },
            nodeHelpers: getNodeHelperFunctions(additionalData),
        };
    })(workflow, runExecutionData, connectionInputData, inputData, node);
}
exports.getExecuteFunctions = getExecuteFunctions;
function getExecuteSingleFunctions(workflow, runExecutionData, runIndex, connectionInputData, inputData, node, itemIndex, additionalData, executeData, mode) {
    return ((workflow, runExecutionData, connectionInputData, inputData, node, itemIndex) => {
        return {
            ...getCommonWorkflowFunctions(workflow, node, additionalData),
            continueOnFail: () => continueOnFail(node),
            evaluateExpression: (expression, evaluateItemIndex) => {
                evaluateItemIndex = evaluateItemIndex === undefined ? itemIndex : evaluateItemIndex;
                return workflow.expression.resolveSimpleParameterValue(`=${expression}`, {}, runExecutionData, runIndex, evaluateItemIndex, node.name, connectionInputData, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), executeData);
            },
            getContext(type) {
                return n8n_workflow_1.NodeHelpers.getContext(runExecutionData, type, node);
            },
            getCredentials: async (type) => getCredentials(workflow, node, type, additionalData, mode, runExecutionData, runIndex, connectionInputData, itemIndex),
            getInputData: (inputIndex = 0, inputName = 'main') => {
                if (!inputData.hasOwnProperty(inputName)) {
                    return { json: {} };
                }
                if (inputData[inputName].length < inputIndex) {
                    throw new Error(`Could not get input index "${inputIndex}" of input "${inputName}"!`);
                }
                const allItems = inputData[inputName][inputIndex];
                if (allItems === null) {
                    throw new Error(`Value "${inputIndex}" of input "${inputName}" did not get set!`);
                }
                if (allItems[itemIndex] === null) {
                    throw new Error(`Value "${inputIndex}" of input "${inputName}" with itemIndex "${itemIndex}" did not get set!`);
                }
                return allItems[itemIndex];
            },
            getInputSourceData: (inputIndex = 0, inputName = 'main') => {
                if ((executeData === null || executeData === void 0 ? void 0 : executeData.source) === null) {
                    throw new Error('Source data is missing!');
                }
                return executeData.source[inputName][inputIndex];
            },
            getItemIndex: () => itemIndex,
            getMode: () => mode,
            getExecuteData: () => executeData,
            getNodeParameter: (parameterName, fallbackValue, options) => {
                return getNodeParameter(workflow, runExecutionData, runIndex, connectionInputData, node, parameterName, itemIndex, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), executeData, fallbackValue, options);
            },
            getWorkflowDataProxy: () => {
                const dataProxy = new n8n_workflow_1.WorkflowDataProxy(workflow, runExecutionData, runIndex, itemIndex, node.name, connectionInputData, {}, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), executeData);
                return dataProxy.getDataProxy();
            },
            helpers: {
                createDeferredPromise: n8n_workflow_1.createDeferredPromise,
                ...getRequestHelperFunctions(workflow, node, additionalData),
                ...getBinaryHelperFunctions(additionalData),
                assertBinaryData: (propertyName, inputIndex = 0) => assertBinaryData(inputData, node, itemIndex, propertyName, inputIndex),
                getBinaryDataBuffer: async (propertyName, inputIndex = 0) => getBinaryDataBuffer(inputData, itemIndex, propertyName, inputIndex),
            },
        };
    })(workflow, runExecutionData, connectionInputData, inputData, node, itemIndex);
}
exports.getExecuteSingleFunctions = getExecuteSingleFunctions;
function getCredentialTestFunctions() {
    return {
        helpers: {
            request: requestPromiseWithDefaults,
        },
    };
}
exports.getCredentialTestFunctions = getCredentialTestFunctions;
function getLoadOptionsFunctions(workflow, node, path, additionalData) {
    return ((workflow, node, path) => {
        return {
            ...getCommonWorkflowFunctions(workflow, node, additionalData),
            getCredentials: async (type) => getCredentials(workflow, node, type, additionalData, 'internal'),
            getCurrentNodeParameter: (parameterPath, options) => {
                const nodeParameters = additionalData.currentNodeParameters;
                if (parameterPath.charAt(0) === '&') {
                    parameterPath = `${path.split('.').slice(1, -1).join('.')}.${parameterPath.slice(1)}`;
                }
                let returnData = (0, lodash_get_1.default)(nodeParameters, parameterPath);
                if (options === null || options === void 0 ? void 0 : options.extractValue) {
                    const nodeType = workflow.nodeTypes.getByNameAndVersion(node.type, node.typeVersion);
                    if (nodeType === undefined) {
                        throw new Error(`Node type "${node.type}" is not known so can not return parameter value!`);
                    }
                    returnData = (0, ExtractValue_1.extractValue)(returnData, parameterPath, node, nodeType);
                }
                return returnData;
            },
            getCurrentNodeParameters: () => additionalData.currentNodeParameters,
            getNodeParameter: (parameterName, fallbackValue, options) => {
                const runExecutionData = null;
                const itemIndex = 0;
                const runIndex = 0;
                const mode = 'internal';
                const connectionInputData = [];
                return getNodeParameter(workflow, runExecutionData, runIndex, connectionInputData, node, parameterName, itemIndex, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), undefined, fallbackValue, options);
            },
            helpers: getRequestHelperFunctions(workflow, node, additionalData),
        };
    })(workflow, node, path);
}
exports.getLoadOptionsFunctions = getLoadOptionsFunctions;
function getExecuteHookFunctions(workflow, node, additionalData, mode, activation, isTest, webhookData) {
    return ((workflow, node) => {
        return {
            ...getCommonWorkflowFunctions(workflow, node, additionalData),
            getCredentials: async (type) => getCredentials(workflow, node, type, additionalData, mode),
            getMode: () => mode,
            getActivationMode: () => activation,
            getNodeParameter: (parameterName, fallbackValue, options) => {
                const runExecutionData = null;
                const itemIndex = 0;
                const runIndex = 0;
                const connectionInputData = [];
                return getNodeParameter(workflow, runExecutionData, runIndex, connectionInputData, node, parameterName, itemIndex, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, runExecutionData), undefined, fallbackValue, options);
            },
            getNodeWebhookUrl: (name) => {
                return getNodeWebhookUrl(name, workflow, node, additionalData, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, null), isTest);
            },
            getWebhookName() {
                if (webhookData === undefined) {
                    throw new Error('Is only supported in webhook functions!');
                }
                return webhookData.webhookDescription.name;
            },
            getWebhookDescription: (name) => getWebhookDescription(name, workflow, node),
            helpers: getRequestHelperFunctions(workflow, node, additionalData),
        };
    })(workflow, node);
}
exports.getExecuteHookFunctions = getExecuteHookFunctions;
function getExecuteWebhookFunctions(workflow, node, additionalData, mode, webhookData) {
    return ((workflow, node) => {
        return {
            ...getCommonWorkflowFunctions(workflow, node, additionalData),
            getBodyData() {
                if (additionalData.httpRequest === undefined) {
                    throw new Error('Request is missing!');
                }
                return additionalData.httpRequest.body;
            },
            getCredentials: async (type) => getCredentials(workflow, node, type, additionalData, mode),
            getHeaderData() {
                if (additionalData.httpRequest === undefined) {
                    throw new Error('Request is missing!');
                }
                return additionalData.httpRequest.headers;
            },
            getMode: () => mode,
            getNodeParameter: (parameterName, fallbackValue, options) => {
                const runExecutionData = null;
                const itemIndex = 0;
                const runIndex = 0;
                const connectionInputData = [];
                return getNodeParameter(workflow, runExecutionData, runIndex, connectionInputData, node, parameterName, itemIndex, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, null), undefined, fallbackValue, options);
            },
            getParamsData() {
                if (additionalData.httpRequest === undefined) {
                    throw new Error('Request is missing!');
                }
                return additionalData.httpRequest.params;
            },
            getQueryData() {
                if (additionalData.httpRequest === undefined) {
                    throw new Error('Request is missing!');
                }
                return additionalData.httpRequest.query;
            },
            getRequestObject() {
                if (additionalData.httpRequest === undefined) {
                    throw new Error('Request is missing!');
                }
                return additionalData.httpRequest;
            },
            getResponseObject() {
                if (additionalData.httpResponse === undefined) {
                    throw new Error('Response is missing!');
                }
                return additionalData.httpResponse;
            },
            getNodeWebhookUrl: (name) => getNodeWebhookUrl(name, workflow, node, additionalData, mode, additionalData.timezone, getAdditionalKeys(additionalData, mode, null)),
            getWebhookName: () => webhookData.webhookDescription.name,
            prepareOutputData: n8n_workflow_1.NodeHelpers.prepareOutputData,
            helpers: {
                createDeferredPromise: n8n_workflow_1.createDeferredPromise,
                ...getRequestHelperFunctions(workflow, node, additionalData),
                ...getBinaryHelperFunctions(additionalData),
                returnJsonArray,
            },
            nodeHelpers: getNodeHelperFunctions(additionalData),
        };
    })(workflow, node);
}
exports.getExecuteWebhookFunctions = getExecuteWebhookFunctions;
//# sourceMappingURL=NodeExecuteFunctions.js.map