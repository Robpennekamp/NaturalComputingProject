"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserHome = exports.getUserN8nFolderDownloadedNodesPath = exports.getUserN8nFolderCustomExtensionPath = exports.getUserN8nFolderPath = exports.getUserSettingsPath = exports.getUserSettings = exports.writeUserSettings = exports.addToUserSettings = exports.getInstanceId = exports.getEncryptionKey = exports.prepareUserSettings = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const crypto_1 = require("crypto");
const util_1 = require("util");
const n8n_workflow_1 = require("n8n-workflow");
const Constants_1 = require("./Constants");
const fsAccess = (0, util_1.promisify)(fs_1.default.access);
const fsReadFile = (0, util_1.promisify)(fs_1.default.readFile);
const fsMkdir = (0, util_1.promisify)(fs_1.default.mkdir);
const fsWriteFile = (0, util_1.promisify)(fs_1.default.writeFile);
let settingsCache;
async function prepareUserSettings() {
    const settingsPath = getUserSettingsPath();
    let userSettings = await getUserSettings(settingsPath);
    if (userSettings !== undefined) {
        if (userSettings.encryptionKey !== undefined) {
            if (userSettings.instanceId === undefined) {
                userSettings.instanceId = await generateInstanceId(userSettings.encryptionKey);
                settingsCache = userSettings;
            }
            return userSettings;
        }
    }
    else {
        userSettings = {};
    }
    if (process.env[Constants_1.ENCRYPTION_KEY_ENV_OVERWRITE] !== undefined) {
        userSettings.encryptionKey = process.env[Constants_1.ENCRYPTION_KEY_ENV_OVERWRITE];
    }
    else {
        userSettings.encryptionKey = (0, crypto_1.randomBytes)(24).toString('base64');
    }
    userSettings.instanceId = await generateInstanceId(userSettings.encryptionKey);
    console.log(`UserSettings were generated and saved to: ${settingsPath}`);
    return writeUserSettings(userSettings, settingsPath);
}
exports.prepareUserSettings = prepareUserSettings;
async function getEncryptionKey() {
    if (process.env[Constants_1.ENCRYPTION_KEY_ENV_OVERWRITE] !== undefined) {
        return process.env[Constants_1.ENCRYPTION_KEY_ENV_OVERWRITE];
    }
    const userSettings = await getUserSettings();
    if (userSettings === undefined || userSettings.encryptionKey === undefined) {
        throw new Error(Constants_1.RESPONSE_ERROR_MESSAGES.NO_ENCRYPTION_KEY);
    }
    return userSettings.encryptionKey;
}
exports.getEncryptionKey = getEncryptionKey;
async function getInstanceId() {
    const userSettings = await getUserSettings();
    if (userSettings === undefined) {
        return '';
    }
    if (userSettings.instanceId === undefined) {
        return '';
    }
    return userSettings.instanceId;
}
exports.getInstanceId = getInstanceId;
async function generateInstanceId(key) {
    const hash = key
        ? (0, crypto_1.createHash)('sha256')
            .update(key.slice(Math.round(key.length / 2)))
            .digest('hex')
        : undefined;
    return hash;
}
async function addToUserSettings(addSettings, settingsPath) {
    if (settingsPath === undefined) {
        settingsPath = getUserSettingsPath();
    }
    let userSettings = await getUserSettings(settingsPath);
    if (userSettings === undefined) {
        userSettings = {};
    }
    Object.assign(userSettings, addSettings);
    return writeUserSettings(userSettings, settingsPath);
}
exports.addToUserSettings = addToUserSettings;
async function writeUserSettings(userSettings, settingsPath) {
    if (settingsPath === undefined) {
        settingsPath = getUserSettingsPath();
    }
    if (userSettings === undefined) {
        userSettings = {};
    }
    try {
        await fsAccess(path_1.default.dirname(settingsPath));
    }
    catch (error) {
        await fsMkdir(path_1.default.dirname(settingsPath));
    }
    const settingsToWrite = { ...userSettings };
    if (settingsToWrite.instanceId !== undefined) {
        delete settingsToWrite.instanceId;
    }
    await fsWriteFile(settingsPath, JSON.stringify(settingsToWrite, null, '\t'));
    settingsCache = (0, n8n_workflow_1.deepCopy)(userSettings);
    return userSettings;
}
exports.writeUserSettings = writeUserSettings;
async function getUserSettings(settingsPath, ignoreCache) {
    if (settingsCache !== undefined && ignoreCache !== true) {
        return settingsCache;
    }
    if (settingsPath === undefined) {
        settingsPath = getUserSettingsPath();
    }
    try {
        await fsAccess(settingsPath);
    }
    catch (error) {
        return undefined;
    }
    const settingsFile = await fsReadFile(settingsPath, 'utf8');
    try {
        settingsCache = JSON.parse(settingsFile);
    }
    catch (error) {
        throw new Error(`Error parsing n8n-config file "${settingsPath}". It does not seem to be valid JSON.`);
    }
    return settingsCache;
}
exports.getUserSettings = getUserSettings;
function getUserSettingsPath() {
    const n8nFolder = getUserN8nFolderPath();
    return path_1.default.join(n8nFolder, Constants_1.USER_SETTINGS_FILE_NAME);
}
exports.getUserSettingsPath = getUserSettingsPath;
function getUserN8nFolderPath() {
    return path_1.default.join(getUserHome(), Constants_1.USER_SETTINGS_SUBFOLDER);
}
exports.getUserN8nFolderPath = getUserN8nFolderPath;
function getUserN8nFolderCustomExtensionPath() {
    return path_1.default.join(getUserN8nFolderPath(), Constants_1.EXTENSIONS_SUBDIRECTORY);
}
exports.getUserN8nFolderCustomExtensionPath = getUserN8nFolderCustomExtensionPath;
function getUserN8nFolderDownloadedNodesPath() {
    return path_1.default.join(getUserN8nFolderPath(), Constants_1.DOWNLOADED_NODES_SUBDIRECTORY);
}
exports.getUserN8nFolderDownloadedNodesPath = getUserN8nFolderDownloadedNodesPath;
function getUserHome() {
    if (process.env[Constants_1.USER_FOLDER_ENV_OVERWRITE] !== undefined) {
        return process.env[Constants_1.USER_FOLDER_ENV_OVERWRITE];
    }
    else {
        let variableName = 'HOME';
        if (process.platform === 'win32') {
            variableName = 'USERPROFILE';
        }
        if (process.env[variableName] === undefined) {
            return process.cwd();
        }
        return process.env[variableName];
    }
}
exports.getUserHome = getUserHome;
//# sourceMappingURL=UserSettings.js.map