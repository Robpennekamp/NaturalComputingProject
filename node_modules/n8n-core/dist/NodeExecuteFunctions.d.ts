/// <reference types="node" />
/// <reference types="node" />
import type { IAdditionalCredentialOptions, IAllExecuteFunctions, IBinaryData, ICredentialDataDecryptedObject, IDataObject, IHttpRequestOptions, INode, INodeExecutionData, IOAuth2Options, IRunExecutionData, ITaskDataConnections, IWebhookData, IWebhookDescription, IWorkflowDataProxyAdditionalKeys, IWorkflowExecuteAdditionalData, Workflow, WorkflowActivateMode, WorkflowExecuteMode, IExecuteData, IGetNodeParameterOptions, NodeParameterValueType, NodeExecutionWithMetadata, IPairedItemData, ICredentialTestFunctions, IExecuteFunctions, IExecuteSingleFunctions, IHookFunctions, ILoadOptionsFunctions, IPollFunctions, ITriggerFunctions, IWebhookFunctions, BinaryMetadata } from 'n8n-workflow';
import type { OptionsWithUri, OptionsWithUrl } from 'request';
import requestPromise from 'request-promise-native';
import { Readable } from 'stream';
export declare function proxyRequestToAxios(workflow: Workflow, additionalData: IWorkflowExecuteAdditionalData, node: INode, uriOrObject: string | IDataObject, options?: IDataObject): Promise<any>;
export declare function getBinaryMetadata(binaryDataId: string): Promise<BinaryMetadata>;
export declare function getBinaryStream(binaryDataId: string, chunkSize?: number): Readable;
export declare function assertBinaryData(inputData: ITaskDataConnections, node: INode, itemIndex: number, propertyName: string, inputIndex: number): IBinaryData;
export declare function getBinaryDataBuffer(inputData: ITaskDataConnections, itemIndex: number, propertyName: string, inputIndex: number): Promise<Buffer>;
export declare function setBinaryDataBuffer(data: IBinaryData, binaryData: Buffer | Readable, executionId: string): Promise<IBinaryData>;
export declare function copyBinaryFile(executionId: string, filePath: string, fileName: string, mimeType?: string): Promise<IBinaryData>;
export declare function requestOAuth2(this: IAllExecuteFunctions, credentialsType: string, requestOptions: OptionsWithUri | requestPromise.RequestPromiseOptions | IHttpRequestOptions, node: INode, additionalData: IWorkflowExecuteAdditionalData, oAuth2Options?: IOAuth2Options, isN8nRequest?: boolean): Promise<any>;
export declare function requestOAuth1(this: IAllExecuteFunctions, credentialsType: string, requestOptions: OptionsWithUrl | OptionsWithUri | requestPromise.RequestPromiseOptions | IHttpRequestOptions, isN8nRequest?: boolean): Promise<any>;
export declare function httpRequestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: IHttpRequestOptions, workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<any>;
export declare function returnJsonArray(jsonData: IDataObject | IDataObject[]): INodeExecutionData[];
export declare function constructExecutionMetaData(inputData: INodeExecutionData[], options: {
    itemData: IPairedItemData | IPairedItemData[];
}): NodeExecutionWithMetadata[];
export declare function normalizeItems(executionData: INodeExecutionData | INodeExecutionData[]): INodeExecutionData[];
export declare function requestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: OptionsWithUri | requestPromise.RequestPromiseOptions, workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<any>;
export declare function getAdditionalKeys(additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, runExecutionData: IRunExecutionData | null): IWorkflowDataProxyAdditionalKeys;
export declare function getCredentials(workflow: Workflow, node: INode, type: string, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, runExecutionData?: IRunExecutionData | null, runIndex?: number, connectionInputData?: INodeExecutionData[], itemIndex?: number): Promise<ICredentialDataDecryptedObject>;
export declare function getNodeParameter(workflow: Workflow, runExecutionData: IRunExecutionData | null, runIndex: number, connectionInputData: INodeExecutionData[], node: INode, parameterName: string, itemIndex: number, mode: WorkflowExecuteMode, timezone: string, additionalKeys: IWorkflowDataProxyAdditionalKeys, executeData?: IExecuteData, fallbackValue?: any, options?: IGetNodeParameterOptions): NodeParameterValueType | object;
export declare function continueOnFail(node: INode): boolean;
export declare function getNodeWebhookUrl(name: string, workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, timezone: string, additionalKeys: IWorkflowDataProxyAdditionalKeys, isTest?: boolean): string | undefined;
export declare function getTimezone(workflow: Workflow, additionalData: IWorkflowExecuteAdditionalData): string;
export declare function getWebhookDescription(name: string, workflow: Workflow, node: INode): IWebhookDescription | undefined;
export declare function getExecutePollFunctions(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): IPollFunctions;
export declare function getExecuteTriggerFunctions(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): ITriggerFunctions;
export declare function getExecuteFunctions(workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, additionalData: IWorkflowExecuteAdditionalData, executeData: IExecuteData, mode: WorkflowExecuteMode): IExecuteFunctions;
export declare function getExecuteSingleFunctions(workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, itemIndex: number, additionalData: IWorkflowExecuteAdditionalData, executeData: IExecuteData, mode: WorkflowExecuteMode): IExecuteSingleFunctions;
export declare function getCredentialTestFunctions(): ICredentialTestFunctions;
export declare function getLoadOptionsFunctions(workflow: Workflow, node: INode, path: string, additionalData: IWorkflowExecuteAdditionalData): ILoadOptionsFunctions;
export declare function getExecuteHookFunctions(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode, isTest?: boolean, webhookData?: IWebhookData): IHookFunctions;
export declare function getExecuteWebhookFunctions(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, webhookData: IWebhookData): IWebhookFunctions;
