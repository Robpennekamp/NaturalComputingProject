/// <reference types="node" />
/// <reference types="node" />
import type { Readable } from 'stream';
import type { BinaryMetadata } from 'n8n-workflow';
import type { IBinaryDataConfig, IBinaryDataManager } from '../Interfaces';
export declare class BinaryDataFileSystem implements IBinaryDataManager {
    private storagePath;
    private binaryDataTTL;
    private persistedBinaryDataTTL;
    constructor(config: IBinaryDataConfig);
    init(startPurger?: boolean): Promise<void>;
    getFileSize(identifier: string): Promise<number>;
    copyBinaryFile(filePath: string, executionId: string): Promise<string>;
    storeBinaryMetadata(identifier: string, metadata: BinaryMetadata): Promise<void>;
    getBinaryMetadata(identifier: string): Promise<BinaryMetadata>;
    storeBinaryData(binaryData: Buffer | Readable, executionId: string): Promise<string>;
    getBinaryStream(identifier: string, chunkSize?: number): Readable;
    retrieveBinaryDataByIdentifier(identifier: string): Promise<Buffer>;
    getBinaryPath(identifier: string): string;
    getMetadataPath(identifier: string): string;
    markDataForDeletionByExecutionId(executionId: string): Promise<void>;
    deleteMarkedFiles(): Promise<void>;
    deleteMarkedPersistedFiles(): Promise<void>;
    private addBinaryIdToPersistMeta;
    private deleteMarkedFilesByMeta;
    duplicateBinaryDataByIdentifier(binaryDataId: string, prefix: string): Promise<string>;
    deleteBinaryDataByExecutionId(executionId: string): Promise<void>;
    deleteBinaryDataByIdentifier(identifier: string): Promise<void>;
    persistBinaryDataForExecutionId(executionId: string): Promise<void>;
    private generateFileName;
    private getBinaryDataMetaPath;
    private getBinaryDataPersistMetaPath;
    private deleteMetaFileByPath;
    private deleteFromLocalStorage;
    private copyFileToLocalStorage;
    private saveToLocalStorage;
    private retrieveFromLocalStorage;
    private resolveStoragePath;
}
