"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Code = void 0;
const JavascriptCodeDescription_1 = require("./descriptions/JavascriptCodeDescription");
const PythonCodeDescription_1 = require("./descriptions/PythonCodeDescription");
const JavaScriptSandbox_1 = require("./JavaScriptSandbox");
const PythonSandbox_1 = require("./PythonSandbox");
const Sandbox_1 = require("./Sandbox");
const utils_1 = require("./utils");
const constants_1 = require("../../utils/constants");
class Code {
    constructor() {
        this.description = {
            displayName: 'Code',
            name: 'code',
            icon: 'fa:code',
            group: ['transform'],
            version: [1, 2],
            defaultVersion: constants_1.IS_V1_RELEASE ? 2 : 1,
            description: 'Run custom JavaScript code',
            defaults: {
                name: 'Code',
                color: '#FF9922',
            },
            inputs: ['main'],
            outputs: ['main'],
            parameterPane: 'wide',
            properties: [
                {
                    displayName: 'Mode',
                    name: 'mode',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Run Once for All Items',
                            value: 'runOnceForAllItems',
                            description: 'Run this code only once, no matter how many input items there are',
                        },
                        {
                            name: 'Run Once for Each Item',
                            value: 'runOnceForEachItem',
                            description: 'Run this code as many times as there are input items',
                        },
                    ],
                    default: 'runOnceForAllItems',
                },
                {
                    displayName: 'Language',
                    name: 'language',
                    type: 'options',
                    noDataExpression: true,
                    displayOptions: {
                        show: {
                            '@version': [2],
                        },
                    },
                    options: [
                        {
                            name: 'JavaScript',
                            value: 'javaScript',
                        },
                        {
                            name: 'Python (Beta)',
                            value: 'python',
                        },
                    ],
                    default: 'javaScript',
                },
                {
                    displayName: 'Language',
                    name: 'language',
                    type: 'hidden',
                    displayOptions: {
                        show: {
                            '@version': [1],
                        },
                    },
                    default: 'javaScript',
                },
                ...JavascriptCodeDescription_1.javascriptCodeDescription,
                ...PythonCodeDescription_1.pythonCodeDescription,
            ],
        };
    }
    async execute() {
        var _a;
        const nodeMode = this.getNodeParameter('mode', 0);
        const workflowMode = this.getMode();
        const language = ((_a = this.getNode()) === null || _a === void 0 ? void 0 : _a.typeVersion) === 2
            ? this.getNodeParameter('language', 0)
            : 'javaScript';
        const codeParameterName = language === 'python' ? 'pythonCode' : 'jsCode';
        const getSandbox = (index = 0) => {
            const code = this.getNodeParameter(codeParameterName, index);
            const context = Sandbox_1.getSandboxContext.call(this, index);
            if (language === 'python') {
                const modules = this.getNodeParameter('modules', index);
                const moduleImports = modules ? modules.split(',').map((m) => m.trim()) : [];
                context.printOverwrite = workflowMode === 'manual' ? this.sendMessageToUI : null;
                return new PythonSandbox_1.PythonSandbox(context, code, moduleImports, index, this.helpers);
            }
            else {
                context.items = context.$input.all();
                const sandbox = new JavaScriptSandbox_1.JavaScriptSandbox(context, code, index, workflowMode, this.helpers);
                if (workflowMode === 'manual') {
                    sandbox.vm.on('console.log', this.sendMessageToUI);
                }
                return sandbox;
            }
        };
        if (nodeMode === 'runOnceForAllItems') {
            const sandbox = getSandbox();
            let items;
            try {
                items = await sandbox.runCodeAllItems();
            }
            catch (error) {
                if (!this.continueOnFail())
                    throw error;
                items = [{ json: { error: error.message } }];
            }
            for (const item of items) {
                (0, utils_1.standardizeOutput)(item.json);
            }
            return this.prepareOutputData(items);
        }
        const returnData = [];
        const items = this.getInputData();
        for (let index = 0; index < items.length; index++) {
            const sandbox = getSandbox(index);
            let result;
            try {
                result = await sandbox.runCodeEachItem();
            }
            catch (error) {
                if (!this.continueOnFail())
                    throw error;
                returnData.push({ json: { error: error.message } });
            }
            if (result) {
                returnData.push({
                    json: (0, utils_1.standardizeOutput)(result.json),
                    pairedItem: { item: index },
                    ...(result.binary && { binary: result.binary }),
                });
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.Code = Code;
//# sourceMappingURL=Code.node.js.map