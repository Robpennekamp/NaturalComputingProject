"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutionError = void 0;
class ExecutionError extends Error {
    constructor(error, itemIndex) {
        super();
        this.description = null;
        this.itemIndex = undefined;
        this.context = undefined;
        this.stack = '';
        this.lineNumber = undefined;
        this.itemIndex = itemIndex;
        if (this.itemIndex !== undefined) {
            this.context = { itemIndex: this.itemIndex };
        }
        this.stack = error.stack;
        this.populateFromStack();
    }
    populateFromStack() {
        const stackRows = this.stack.split('\n');
        if (stackRows.length === 0) {
            this.message = 'Unknown error';
        }
        const messageRow = stackRows.find((line) => line.includes('Error:'));
        const lineNumberRow = stackRows.find((line) => line.includes('Code:'));
        const lineNumberDisplay = this.toLineNumberDisplay(lineNumberRow);
        if (!messageRow) {
            this.message = `Unknown error ${lineNumberDisplay}`;
            return;
        }
        const [errorDetails, errorType] = this.toErrorDetailsAndType(messageRow);
        if (errorType)
            this.description = errorType;
        if (!errorDetails) {
            this.message = `Unknown error ${lineNumberDisplay}`;
            return;
        }
        this.message = `${errorDetails} ${lineNumberDisplay}`;
    }
    toLineNumberDisplay(lineNumberRow) {
        var _a;
        const errorLineNumberMatch = lineNumberRow === null || lineNumberRow === void 0 ? void 0 : lineNumberRow.match(/Code:(?<lineNumber>\d+)/);
        if (!((_a = errorLineNumberMatch === null || errorLineNumberMatch === void 0 ? void 0 : errorLineNumberMatch.groups) === null || _a === void 0 ? void 0 : _a.lineNumber))
            return null;
        const lineNumber = errorLineNumberMatch.groups.lineNumber;
        this.lineNumber = Number(lineNumber);
        if (!lineNumber)
            return '';
        return this.itemIndex === undefined
            ? `[line ${lineNumber}]`
            : `[line ${lineNumber}, for item ${this.itemIndex}]`;
    }
    toErrorDetailsAndType(messageRow) {
        if (!messageRow)
            return [null, null];
        const [errorDetails, errorType] = messageRow
            .split(':')
            .reverse()
            .map((i) => i.trim());
        return [errorDetails, errorType === 'Error' ? null : errorType];
    }
}
exports.ExecutionError = ExecutionError;
//# sourceMappingURL=ExecutionError.js.map