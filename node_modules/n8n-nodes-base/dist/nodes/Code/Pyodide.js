"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadPyodide = void 0;
let pyodideInstance;
async function LoadPyodide() {
    if (pyodideInstance === undefined) {
        globalThis.Blob = (await Promise.resolve().then(() => __importStar(require('node:buffer')))).Blob;
        const { emitWarning } = process;
        process.emitWarning = (warning, ...args) => {
            if (args[0] === 'ExperimentalWarning') {
                return;
            }
            if (args[0] && typeof args[0] === 'object' && args[0].type === 'ExperimentalWarning') {
                return;
            }
            return emitWarning(warning, ...args);
        };
        const { loadPyodide } = await Promise.resolve().then(() => __importStar(require('pyodide')));
        pyodideInstance = await loadPyodide();
    }
    return pyodideInstance;
}
exports.LoadPyodide = LoadPyodide;
//# sourceMappingURL=Pyodide.js.map