import type { IExecuteFunctions, INodeExecutionData, IWorkflowDataProxyData } from 'n8n-workflow';
interface SandboxTextKeys {
    object: {
        singular: string;
        plural: string;
    };
}
export interface SandboxContext extends IWorkflowDataProxyData {
    $getNodeParameter: IExecuteFunctions['getNodeParameter'];
    $getWorkflowStaticData: IExecuteFunctions['getWorkflowStaticData'];
    helpers: IExecuteFunctions['helpers'];
}
export declare const REQUIRED_N8N_ITEM_KEYS: Set<string>;
export declare function getSandboxContext(this: IExecuteFunctions, index: number): SandboxContext;
export declare abstract class Sandbox {
    private textKeys;
    protected itemIndex: number | undefined;
    private helpers;
    constructor(textKeys: SandboxTextKeys, itemIndex: number | undefined, helpers: IExecuteFunctions['helpers']);
    abstract runCodeAllItems(): Promise<INodeExecutionData[]>;
    abstract runCodeEachItem(): Promise<INodeExecutionData | undefined>;
    validateRunCodeEachItem(executionResult: INodeExecutionData | undefined): INodeExecutionData;
    validateRunCodeAllItems(executionResult: INodeExecutionData | INodeExecutionData[] | undefined, itemIndex?: number): INodeExecutionData[];
    private getTextKey;
    private validateItem;
    private validateTopLevelKeys;
}
export {};
