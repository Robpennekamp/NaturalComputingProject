"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareRangeQuery = exports.prepareSortQuery = exports.buildCustomFieldSearch = exports.prepareCustomFields = exports.prepareOptional = exports.splitTags = exports.mapResource = exports.theHiveApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const moment_1 = __importDefault(require("moment"));
const QueryFunctions_1 = require("./QueryFunctions");
async function theHiveApiRequest(method, resource, body = {}, query = {}, uri, option = {}) {
    const credentials = await this.getCredentials('theHiveApi');
    let options = {
        method,
        qs: query,
        uri: uri || `${credentials.url}/api${resource}`,
        body,
        rejectUnauthorized: !credentials.allowUnauthorizedCerts,
        json: true,
    };
    if (Object.keys(option).length !== 0) {
        options = Object.assign({}, options, option);
    }
    if (Object.keys(body).length === 0) {
        delete options.body;
    }
    if (Object.keys(query).length === 0) {
        delete options.qs;
    }
    return this.helpers.requestWithAuthentication.call(this, 'theHiveApi', options);
}
exports.theHiveApiRequest = theHiveApiRequest;
function mapResource(resource) {
    switch (resource) {
        case 'alert':
            return 'alert';
        case 'case':
            return 'case';
        case 'observable':
            return 'case_artifact';
        case 'task':
            return 'case_task';
        case 'log':
            return 'case_task_log';
        default:
            return '';
    }
}
exports.mapResource = mapResource;
function splitTags(tags) {
    return tags.split(',').filter((tag) => tag !== ' ' && tag);
}
exports.splitTags = splitTags;
function prepareOptional(optionals) {
    const response = {};
    for (const key in optionals) {
        if (optionals[key] !== undefined && optionals[key] !== null && optionals[key] !== '') {
            if (['customFieldsJson', 'customFieldsUi'].indexOf(key) > -1) {
                continue;
            }
            else if ((0, moment_1.default)(optionals[key], moment_1.default.ISO_8601).isValid()) {
                response[key] = Date.parse(optionals[key]);
            }
            else if (key === 'artifacts') {
                try {
                    response[key] = (0, n8n_workflow_1.jsonParse)(optionals[key]);
                }
                catch (error) {
                    throw new Error('Invalid JSON for artifacts');
                }
            }
            else if (key === 'tags') {
                response[key] = splitTags(optionals[key]);
            }
            else {
                response[key] = optionals[key];
            }
        }
    }
    return response;
}
exports.prepareOptional = prepareOptional;
async function prepareCustomFields(additionalFields, jsonParameters = false) {
    if (jsonParameters) {
        let customFieldsJson = additionalFields.customFieldsJson;
        delete additionalFields.customFieldsJson;
        if (typeof customFieldsJson === 'string') {
            try {
                customFieldsJson = (0, n8n_workflow_1.jsonParse)(customFieldsJson);
            }
            catch (error) {
                throw new Error('Invalid JSON for customFields');
            }
        }
        if (typeof customFieldsJson === 'object') {
            const customFields = Object.keys(customFieldsJson).reduce((acc, curr) => {
                acc[`customFields.${curr}`] = customFieldsJson[curr];
                return acc;
            }, {});
            return customFields;
        }
        else if (customFieldsJson) {
            throw Error('customFieldsJson value is invalid');
        }
    }
    else if (additionalFields.customFieldsUi) {
        const credentials = await this.getCredentials('theHiveApi');
        const version = credentials.apiVersion;
        const endpoint = version === 'v1' ? '/customField' : '/list/custom_fields';
        const requestResult = await theHiveApiRequest.call(this, 'GET', endpoint);
        const hiveCustomFields = version === 'v1'
            ? requestResult
            : Object.keys(requestResult).map((key) => requestResult[key]);
        const referenceTypeMapping = hiveCustomFields.reduce((acc, curr) => ((acc[curr.reference] = curr.type), acc), {});
        const customFieldsUi = additionalFields.customFieldsUi;
        const customFields = (customFieldsUi === null || customFieldsUi === void 0 ? void 0 : customFieldsUi.customFields).reduce((acc, curr) => {
            const fieldName = curr.field;
            const updatedField = `customFields.${fieldName}.${[referenceTypeMapping[fieldName]]}`;
            acc[updatedField] = curr.value;
            return acc;
        }, {});
        delete additionalFields.customFieldsUi;
        return customFields;
    }
    return undefined;
}
exports.prepareCustomFields = prepareCustomFields;
function buildCustomFieldSearch(customFields) {
    const searchQueries = [];
    Object.keys(customFields).forEach((customFieldName) => {
        searchQueries.push((0, QueryFunctions_1.Eq)(customFieldName, customFields[customFieldName]));
    });
    return searchQueries;
}
exports.buildCustomFieldSearch = buildCustomFieldSearch;
function prepareSortQuery(sort, body) {
    if (sort) {
        const field = sort.substring(1);
        const value = sort.charAt(0) === '+' ? 'asc' : 'desc';
        const sortOption = {};
        sortOption[field] = value;
        body.query.push({
            _name: 'sort',
            _fields: [sortOption],
        });
    }
}
exports.prepareSortQuery = prepareSortQuery;
function prepareRangeQuery(range, body) {
    if (range && range !== 'all') {
        body.query.push({
            _name: 'page',
            from: parseInt(range.split('-')[0], 10),
            to: parseInt(range.split('-')[1], 10),
        });
    }
}
exports.prepareRangeQuery = prepareRangeQuery;
//# sourceMappingURL=GenericFunctions.js.map