"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Splunk = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const descriptions_1 = require("./descriptions");
class Splunk {
    constructor() {
        this.description = {
            displayName: 'Splunk',
            name: 'splunk',
            icon: 'file:splunk.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume the Splunk Enterprise API',
            defaults: {
                name: 'Splunk',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'splunkApi',
                    required: true,
                    testedBy: 'splunkApiTest',
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Fired Alert',
                            value: 'firedAlert',
                        },
                        {
                            name: 'Search Configuration',
                            value: 'searchConfiguration',
                        },
                        {
                            name: 'Search Job',
                            value: 'searchJob',
                        },
                        {
                            name: 'Search Result',
                            value: 'searchResult',
                        },
                        {
                            name: 'User',
                            value: 'user',
                        },
                    ],
                    default: 'searchJob',
                },
                ...descriptions_1.firedAlertOperations,
                ...descriptions_1.searchConfigurationOperations,
                ...descriptions_1.searchConfigurationFields,
                ...descriptions_1.searchJobOperations,
                ...descriptions_1.searchJobFields,
                ...descriptions_1.searchResultOperations,
                ...descriptions_1.searchResultFields,
                ...descriptions_1.userOperations,
                ...descriptions_1.userFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getRoles() {
                    const endpoint = '/services/authorization/roles';
                    const responseData = (await GenericFunctions_1.splunkApiRequest.call(this, 'GET', endpoint));
                    const { entry: entries } = responseData.feed;
                    return Array.isArray(entries)
                        ? entries.map((entry) => ({ name: entry.title, value: entry.title }))
                        : [{ name: entries.title, value: entries.title }];
                },
            },
            credentialTest: {
                async splunkApiTest(credential) {
                    const { authToken, baseUrl, allowUnauthorizedCerts } = credential.data;
                    const endpoint = '/services/alerts/fired_alerts';
                    const options = {
                        headers: {
                            Authorization: `Bearer ${authToken}`,
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        method: 'GET',
                        form: {},
                        qs: {},
                        uri: `${baseUrl}${endpoint}`,
                        json: true,
                        rejectUnauthorized: !allowUnauthorizedCerts,
                    };
                    try {
                        await this.helpers.request(options);
                        return {
                            status: 'OK',
                            message: 'Authentication successful',
                        };
                    }
                    catch (error) {
                        return {
                            status: 'Error',
                            message: error.message,
                        };
                    }
                },
            },
        };
    }
    async execute() {
        var _a;
        const items = this.getInputData();
        const returnData = [];
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        let responseData;
        for (let i = 0; i < items.length; i++) {
            try {
                if (resource === 'firedAlert') {
                    if (operation === 'getReport') {
                        const endpoint = '/services/alerts/fired_alerts';
                        responseData = await GenericFunctions_1.splunkApiRequest.call(this, 'GET', endpoint).then(GenericFunctions_1.formatFeed);
                    }
                }
                else if (resource === 'searchConfiguration') {
                    if (operation === 'delete') {
                        const partialEndpoint = '/services/saved/searches/';
                        const searchConfigurationId = GenericFunctions_1.getId.call(this, i, 'searchConfigurationId', '/search/saved/searches/');
                        const endpoint = `${partialEndpoint}/${searchConfigurationId}`;
                        responseData = await GenericFunctions_1.splunkApiRequest.call(this, 'DELETE', endpoint);
                    }
                    else if (operation === 'get') {
                        const partialEndpoint = '/services/saved/searches/';
                        const searchConfigurationId = GenericFunctions_1.getId.call(this, i, 'searchConfigurationId', '/search/saved/searches/');
                        const endpoint = `${partialEndpoint}/${searchConfigurationId}`;
                        responseData = await GenericFunctions_1.splunkApiRequest.call(this, 'GET', endpoint).then(GenericFunctions_1.formatFeed);
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.populate)(options, qs);
                        GenericFunctions_1.setCount.call(this, qs);
                        const endpoint = '/services/saved/searches';
                        responseData = await GenericFunctions_1.splunkApiRequest
                            .call(this, 'GET', endpoint, {}, qs)
                            .then(GenericFunctions_1.formatFeed);
                    }
                }
                else if (resource === 'searchJob') {
                    if (operation === 'create') {
                        const body = {
                            search: this.getNodeParameter('search', i),
                        };
                        const { earliest_time, latest_time, index_earliest, index_latest, ...rest } = this.getNodeParameter('additionalFields', i);
                        (0, GenericFunctions_1.populate)({
                            ...(earliest_time && { earliest_time: (0, GenericFunctions_1.toUnixEpoch)(earliest_time) }),
                            ...(latest_time && { latest_time: (0, GenericFunctions_1.toUnixEpoch)(latest_time) }),
                            ...(index_earliest && { index_earliest: (0, GenericFunctions_1.toUnixEpoch)(index_earliest) }),
                            ...(index_latest && { index_latest: (0, GenericFunctions_1.toUnixEpoch)(index_latest) }),
                            ...rest,
                        }, body);
                        const endpoint = '/services/search/jobs';
                        responseData = await GenericFunctions_1.splunkApiRequest.call(this, 'POST', endpoint, body);
                        const getEndpoint = `/services/search/jobs/${responseData.response.sid}`;
                        responseData = await GenericFunctions_1.splunkApiRequest.call(this, 'GET', getEndpoint).then(GenericFunctions_1.formatSearch);
                    }
                    else if (operation === 'delete') {
                        const partialEndpoint = '/services/search/jobs/';
                        const searchJobId = GenericFunctions_1.getId.call(this, i, 'searchJobId', partialEndpoint);
                        const endpoint = `${partialEndpoint}/${searchJobId}`;
                        responseData = await GenericFunctions_1.splunkApiRequest.call(this, 'DELETE', endpoint);
                    }
                    else if (operation === 'get') {
                        const partialEndpoint = '/services/search/jobs/';
                        const searchJobId = GenericFunctions_1.getId.call(this, i, 'searchJobId', partialEndpoint);
                        const endpoint = `${partialEndpoint}/${searchJobId}`;
                        responseData = await GenericFunctions_1.splunkApiRequest.call(this, 'GET', endpoint).then(GenericFunctions_1.formatSearch);
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.populate)(options, qs);
                        GenericFunctions_1.setCount.call(this, qs);
                        const endpoint = '/services/search/jobs';
                        responseData = (await GenericFunctions_1.splunkApiRequest.call(this, 'GET', endpoint, {}, qs));
                        responseData = (0, GenericFunctions_1.formatFeed)(responseData);
                    }
                }
                else if (resource === 'searchResult') {
                    if (operation === 'getAll') {
                        const searchJobId = this.getNodeParameter('searchJobId', i);
                        const qs = {};
                        const filters = this.getNodeParameter('filters', i);
                        const options = this.getNodeParameter('options', i);
                        const keyValuePair = (_a = filters === null || filters === void 0 ? void 0 : filters.keyValueMatch) === null || _a === void 0 ? void 0 : _a.keyValuePair;
                        if ((keyValuePair === null || keyValuePair === void 0 ? void 0 : keyValuePair.key) && (keyValuePair === null || keyValuePair === void 0 ? void 0 : keyValuePair.value)) {
                            qs.search = `search ${keyValuePair.key}=${keyValuePair.value}`;
                        }
                        (0, GenericFunctions_1.populate)(options, qs);
                        GenericFunctions_1.setCount.call(this, qs);
                        const endpoint = `/services/search/jobs/${searchJobId}/results`;
                        responseData = await GenericFunctions_1.splunkApiRequest
                            .call(this, 'GET', endpoint, {}, qs)
                            .then(GenericFunctions_1.formatResults);
                    }
                }
                else if (resource === 'user') {
                    if (operation === 'create') {
                        const roles = this.getNodeParameter('roles', i);
                        const body = {
                            name: this.getNodeParameter('name', i),
                            roles,
                            password: this.getNodeParameter('password', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        (0, GenericFunctions_1.populate)(additionalFields, body);
                        const endpoint = '/services/authentication/users';
                        responseData = (await GenericFunctions_1.splunkApiRequest.call(this, 'POST', endpoint, body));
                        responseData = (0, GenericFunctions_1.formatFeed)(responseData);
                    }
                    else if (operation === 'delete') {
                        const partialEndpoint = '/services/authentication/users';
                        const userId = GenericFunctions_1.getId.call(this, i, 'userId', partialEndpoint);
                        const endpoint = `${partialEndpoint}/${userId}`;
                        await GenericFunctions_1.splunkApiRequest.call(this, 'DELETE', endpoint);
                        responseData = { success: true };
                    }
                    else if (operation === 'get') {
                        const partialEndpoint = '/services/authentication/users/';
                        const userId = GenericFunctions_1.getId.call(this, i, 'userId', '/services/authentication/users/');
                        const endpoint = `${partialEndpoint}/${userId}`;
                        responseData = await GenericFunctions_1.splunkApiRequest.call(this, 'GET', endpoint).then(GenericFunctions_1.formatFeed);
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        GenericFunctions_1.setCount.call(this, qs);
                        const endpoint = '/services/authentication/users';
                        responseData = await GenericFunctions_1.splunkApiRequest
                            .call(this, 'GET', endpoint, {}, qs)
                            .then(GenericFunctions_1.formatFeed);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const { roles, ...rest } = this.getNodeParameter('updateFields', i);
                        (0, GenericFunctions_1.populate)({
                            ...(roles && { roles }),
                            ...rest,
                        }, body);
                        const partialEndpoint = '/services/authentication/users/';
                        const userId = GenericFunctions_1.getId.call(this, i, 'userId', partialEndpoint);
                        const endpoint = `${partialEndpoint}/${userId}`;
                        responseData = await GenericFunctions_1.splunkApiRequest
                            .call(this, 'POST', endpoint, body)
                            .then(GenericFunctions_1.formatFeed);
                    }
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.cause.error });
                    continue;
                }
                throw error;
            }
            Array.isArray(responseData)
                ? returnData.push(...responseData)
                : returnData.push(responseData);
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Splunk = Splunk;
//# sourceMappingURL=Splunk.node.js.map