"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webflow = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const ItemDescription_1 = require("./ItemDescription");
class Webflow {
    constructor() {
        this.description = {
            displayName: 'Webflow',
            name: 'webflow',
            icon: 'file:webflow.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume the Webflow API',
            defaults: {
                name: 'Webflow',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'webflowApi',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: ['accessToken'],
                        },
                    },
                },
                {
                    name: 'webflowOAuth2Api',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: ['oAuth2'],
                        },
                    },
                },
            ],
            properties: [
                {
                    displayName: 'Authentication',
                    name: 'authentication',
                    type: 'options',
                    options: [
                        {
                            name: 'Access Token',
                            value: 'accessToken',
                        },
                        {
                            name: 'OAuth2',
                            value: 'oAuth2',
                        },
                    ],
                    default: 'accessToken',
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Item',
                            value: 'item',
                        },
                    ],
                    default: 'item',
                },
                ...ItemDescription_1.itemOperations,
                ...ItemDescription_1.itemFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getSites() {
                    const returnData = [];
                    const sites = await GenericFunctions_1.webflowApiRequest.call(this, 'GET', '/sites');
                    for (const site of sites) {
                        returnData.push({
                            name: site.name,
                            value: site._id,
                        });
                    }
                    return returnData;
                },
                async getCollections() {
                    const returnData = [];
                    const siteId = this.getCurrentNodeParameter('siteId');
                    const collections = await GenericFunctions_1.webflowApiRequest.call(this, 'GET', `/sites/${siteId}/collections`);
                    for (const collection of collections) {
                        returnData.push({
                            name: collection.name,
                            value: collection._id,
                        });
                    }
                    return returnData;
                },
                async getFields() {
                    const returnData = [];
                    const collectionId = this.getCurrentNodeParameter('collectionId');
                    const { fields } = await GenericFunctions_1.webflowApiRequest.call(this, 'GET', `/collections/${collectionId}`);
                    for (const field of fields) {
                        returnData.push({
                            name: `${field.name} (${field.type}) ${field.required ? ' (required)' : ''}`,
                            value: field.slug,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        let responseData;
        const returnData = [];
        for (let i = 0; i < items.length; i++) {
            try {
                if (resource === 'item') {
                    if (operation === 'create') {
                        const collectionId = this.getNodeParameter('collectionId', i);
                        const properties = this.getNodeParameter('fieldsUi.fieldValues', i, []);
                        const live = this.getNodeParameter('live', i);
                        const fields = {};
                        properties.forEach((data) => (fields[data.fieldId] = data.fieldValue));
                        const body = {
                            fields,
                        };
                        responseData = await GenericFunctions_1.webflowApiRequest.call(this, 'POST', `/collections/${collectionId}/items`, body, { live });
                    }
                    else if (operation === 'delete') {
                        const collectionId = this.getNodeParameter('collectionId', i);
                        const itemId = this.getNodeParameter('itemId', i);
                        responseData = await GenericFunctions_1.webflowApiRequest.call(this, 'DELETE', `/collections/${collectionId}/items/${itemId}`);
                    }
                    else if (operation === 'get') {
                        const collectionId = this.getNodeParameter('collectionId', i);
                        const itemId = this.getNodeParameter('itemId', i);
                        responseData = await GenericFunctions_1.webflowApiRequest.call(this, 'GET', `/collections/${collectionId}/items/${itemId}`);
                        responseData = responseData.items;
                    }
                    else if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', 0);
                        const collectionId = this.getNodeParameter('collectionId', i);
                        const qs = {};
                        if (returnAll) {
                            responseData = await GenericFunctions_1.webflowApiRequestAllItems.call(this, 'GET', `/collections/${collectionId}/items`, {}, qs);
                        }
                        else {
                            qs.limit = this.getNodeParameter('limit', 0);
                            responseData = await GenericFunctions_1.webflowApiRequest.call(this, 'GET', `/collections/${collectionId}/items`, {}, qs);
                            responseData = responseData.items;
                        }
                    }
                    else if (operation === 'update') {
                        const collectionId = this.getNodeParameter('collectionId', i);
                        const itemId = this.getNodeParameter('itemId', i);
                        const properties = this.getNodeParameter('fieldsUi.fieldValues', i, []);
                        const live = this.getNodeParameter('live', i);
                        const fields = {};
                        properties.forEach((data) => (fields[data.fieldId] = data.fieldValue));
                        const body = {
                            fields,
                        };
                        responseData = await GenericFunctions_1.webflowApiRequest.call(this, 'PUT', `/collections/${collectionId}/items/${itemId}`, body, { live });
                    }
                }
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ json: { error: error.message } });
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.Webflow = Webflow;
//# sourceMappingURL=Webflow.node.js.map