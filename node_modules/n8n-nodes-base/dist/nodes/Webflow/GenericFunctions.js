"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webflowApiRequestAllItems = exports.webflowApiRequest = void 0;
async function webflowApiRequest(method, resource, body = {}, qs = {}, uri, option = {}) {
    const authenticationMethod = this.getNodeParameter('authentication', 0, 'accessToken');
    let credentialsType = '';
    if (authenticationMethod === 'accessToken') {
        credentialsType = 'webflowApi';
    }
    if (authenticationMethod === 'oAuth2') {
        credentialsType = 'webflowOAuth2Api';
    }
    let options = {
        headers: {
            'accept-version': '1.0.0',
        },
        method,
        qs,
        body,
        uri: uri || `https://api.webflow.com${resource}`,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (Object.keys(options.qs).length === 0) {
        delete options.qs;
    }
    if (Object.keys(options.body).length === 0) {
        delete options.body;
    }
    return this.helpers.requestWithAuthentication.call(this, credentialsType, options);
}
exports.webflowApiRequest = webflowApiRequest;
async function webflowApiRequestAllItems(method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.limit = 100;
    query.offset = 0;
    do {
        responseData = await webflowApiRequest.call(this, method, endpoint, body, query);
        if (responseData.offset !== undefined) {
            query.offset += query.limit;
        }
        returnData.push.apply(returnData, responseData.items);
    } while (returnData.length < responseData.total);
    return returnData;
}
exports.webflowApiRequestAllItems = webflowApiRequestAllItems;
//# sourceMappingURL=GenericFunctions.js.map