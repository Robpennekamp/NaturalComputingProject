"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.credentialFields = exports.credentialOperations = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
exports.credentialOperations = [
    {
        displayName: 'Operation',
        name: 'operation',
        type: 'options',
        noDataExpression: true,
        default: 'create',
        displayOptions: {
            show: {
                resource: ['credential'],
            },
        },
        options: [
            {
                name: 'Create',
                value: 'create',
                action: 'Create a credential',
                routing: {
                    request: {
                        method: 'POST',
                        url: '/credentials',
                    },
                },
            },
            {
                name: 'Delete',
                value: 'delete',
                action: 'Delete a credential',
                routing: {
                    request: {
                        method: 'DELETE',
                        url: '=/credentials/{{ $parameter.credentialId }}',
                    },
                },
            },
            {
                name: 'Get Schema',
                value: 'getSchema',
                action: 'Get credential data schema for type',
                routing: {
                    request: {
                        method: 'GET',
                        url: '=/credentials/schema/{{ $parameter.credentialTypeName }}',
                    },
                },
            },
        ],
    },
];
const createOperation = [
    {
        displayName: 'Name',
        name: 'name',
        type: 'string',
        default: '',
        placeholder: 'e.g. n8n account',
        required: true,
        displayOptions: {
            show: {
                resource: ['credential'],
                operation: ['create'],
            },
        },
        routing: {
            request: {
                body: {
                    name: '={{ $value }}',
                },
            },
        },
        description: 'Name of the new credential',
    },
    {
        displayName: 'Credential Type',
        name: 'credentialTypeName',
        type: 'string',
        placeholder: 'e.g. n8nApi',
        default: '',
        required: true,
        displayOptions: {
            show: {
                resource: ['credential'],
                operation: ['create'],
            },
        },
        routing: {
            request: {
                body: {
                    type: '={{ $value }}',
                },
            },
        },
        description: "The available types depend on nodes installed on the n8n instance. Some built-in types include e.g. 'githubApi', 'notionApi', and 'slackApi'.",
    },
    {
        displayName: 'Data',
        name: 'data',
        type: 'json',
        default: '',
        placeholder: '// e.g. for n8nApi \n{\n  "apiKey": "my-n8n-api-key",\n  "baseUrl": "https://<name>.app.n8n.cloud/api/v1",\n}',
        required: true,
        typeOptions: {
            alwaysOpenEditWindow: true,
        },
        displayOptions: {
            show: {
                resource: ['credential'],
                operation: ['create'],
            },
        },
        routing: {
            send: {
                preSend: [(0, GenericFunctions_1.parseAndSetBodyJson)('data', 'data')],
            },
        },
        description: "A valid JSON object with properties required for this Credential Type. To see the expected format, you can use 'Get Schema' operation.",
    },
];
const deleteOperation = [
    {
        displayName: 'Credential ID',
        name: 'credentialId',
        type: 'string',
        required: true,
        default: '',
        displayOptions: {
            show: {
                resource: ['credential'],
                operation: ['delete'],
            },
        },
    },
];
const getSchemaOperation = [
    {
        displayName: 'Credential Type',
        name: 'credentialTypeName',
        default: '',
        placeholder: 'e.g. n8nApi',
        required: true,
        type: 'string',
        displayOptions: {
            show: {
                resource: ['credential'],
                operation: ['getSchema'],
            },
        },
        description: "The available types depend on nodes installed on the n8n instance. Some built-in types include e.g. 'githubApi', 'notionApi', and 'slackApi'.",
    },
];
exports.credentialFields = [
    ...createOperation,
    ...deleteOperation,
    ...getSchemaOperation,
];
//# sourceMappingURL=CredentialDescription.js.map