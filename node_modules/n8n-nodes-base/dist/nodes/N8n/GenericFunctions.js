"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareWorkflowUpdateBody = exports.prepareWorkflowCreateBody = exports.parseAndSetBodyJson = exports.getCursorPaginator = exports.apiRequestAllItems = exports.apiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function apiRequest(method, endpoint, body, query) {
    query = query || {};
    const credentials = (await this.getCredentials('n8nApi'));
    const baseUrl = credentials.baseUrl;
    const options = {
        method,
        body,
        qs: query,
        uri: `${baseUrl.replace(new RegExp('/$'), '')}/${endpoint}`,
        json: true,
    };
    try {
        return await this.helpers.requestWithAuthentication.call(this, 'n8nApi', options);
    }
    catch (error) {
        if (error instanceof n8n_workflow_1.NodeApiError) {
            throw error;
        }
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.apiRequest = apiRequest;
async function apiRequestAllItems(method, endpoint, body, query) {
    query = query || {};
    const returnData = [];
    let nextCursor = undefined;
    let responseData;
    do {
        query.cursor = nextCursor;
        query.limit = 100;
        responseData = await apiRequest.call(this, method, endpoint, body, query);
        returnData.push.apply(returnData, responseData.data);
        nextCursor = responseData.nextCursor;
    } while (nextCursor);
    return returnData;
}
exports.apiRequestAllItems = apiRequestAllItems;
const getCursorPaginator = () => {
    return async function cursorPagination(requestOptions) {
        if (!requestOptions.options.qs) {
            requestOptions.options.qs = {};
        }
        let executions = [];
        let responseData;
        let nextCursor = undefined;
        const returnAll = this.getNodeParameter('returnAll', true);
        const extractItems = (page) => {
            const items = page.json.data;
            if (items) {
                executions = executions.concat(items.map((item) => ({ json: item })));
            }
        };
        do {
            requestOptions.options.qs.cursor = nextCursor;
            responseData = await this.makeRoutingRequest(requestOptions);
            const lastItem = responseData[responseData.length - 1].json;
            nextCursor = lastItem.nextCursor;
            responseData.forEach(extractItems);
        } while (returnAll && nextCursor);
        return executions;
    };
};
exports.getCursorPaginator = getCursorPaginator;
const parseAndSetBodyJson = (parameterName, setAsBodyProperty) => {
    return async function (requestOptions) {
        try {
            const rawData = this.getNodeParameter(parameterName, '{}');
            const parsedObject = JSON.parse(rawData);
            if (setAsBodyProperty === undefined) {
                requestOptions.body = parsedObject;
            }
            else {
                requestOptions.body = Object.assign({}, requestOptions.body, {
                    [setAsBodyProperty]: parsedObject,
                });
            }
        }
        catch (err) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), new Error(`The '${parameterName}' property must be valid JSON, but cannot be parsed`, {
                cause: err,
            }));
        }
        return requestOptions;
    };
};
exports.parseAndSetBodyJson = parseAndSetBodyJson;
const prepareWorkflowCreateBody = async function (requestOptions) {
    const body = requestOptions.body;
    const newBody = {};
    newBody.name = body.name || 'My workflow';
    newBody.nodes = body.nodes || [];
    newBody.settings = body.settings || {};
    newBody.connections = body.connections || {};
    newBody.staticData = body.staticData || null;
    requestOptions.body = newBody;
    return requestOptions;
};
exports.prepareWorkflowCreateBody = prepareWorkflowCreateBody;
const prepareWorkflowUpdateBody = async function (requestOptions) {
    const body = requestOptions.body;
    const newBody = {};
    if (body.name) {
        newBody.name = body.name;
    }
    if (body.nodes) {
        newBody.nodes = body.nodes;
    }
    if (body.settings) {
        newBody.settings = body.settings;
    }
    if (body.connections) {
        newBody.connections = body.connections;
    }
    if (body.staticData) {
        newBody.staticData = body.staticData;
    }
    requestOptions.body = newBody;
    return requestOptions;
};
exports.prepareWorkflowUpdateBody = prepareWorkflowUpdateBody;
//# sourceMappingURL=GenericFunctions.js.map