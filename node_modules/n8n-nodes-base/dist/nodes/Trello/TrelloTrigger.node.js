"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrelloTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class TrelloTrigger {
    constructor() {
        this.description = {
            displayName: 'Trello Trigger',
            name: 'trelloTrigger',
            icon: 'file:trello.svg',
            group: ['trigger'],
            version: 1,
            description: 'Starts the workflow when Trello events occur',
            defaults: {
                name: 'Trello Trigger',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'trelloApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'setup',
                    httpMethod: 'HEAD',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Model ID',
                    name: 'id',
                    type: 'string',
                    default: '',
                    placeholder: '4d5ea62fd76aa1136000000c',
                    required: true,
                    description: 'ID of the model of which to subscribe to events',
                },
            ],
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const credentials = await this.getCredentials('trelloApi');
                    const endpoint = `tokens/${credentials.apiToken}/webhooks`;
                    const responseData = await GenericFunctions_1.apiRequest.call(this, 'GET', endpoint, {});
                    const idModel = this.getNodeParameter('id');
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    for (const webhook of responseData) {
                        if (webhook.idModel === idModel && webhook.callbackURL === webhookUrl) {
                            const webhookData = this.getWorkflowStaticData('node');
                            webhookData.webhookId = webhook.id;
                            return true;
                        }
                    }
                    return false;
                },
                async create() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const credentials = await this.getCredentials('trelloApi');
                    const idModel = this.getNodeParameter('id');
                    const endpoint = `tokens/${credentials.apiToken}/webhooks`;
                    const body = {
                        description: `n8n Webhook - ${idModel}`,
                        callbackURL: webhookUrl,
                        idModel,
                    };
                    const responseData = await GenericFunctions_1.apiRequest.call(this, 'POST', endpoint, body);
                    if (responseData.id === undefined) {
                        return false;
                    }
                    const webhookData = this.getWorkflowStaticData('node');
                    webhookData.webhookId = responseData.id;
                    return true;
                },
                async delete() {
                    const webhookData = this.getWorkflowStaticData('node');
                    if (webhookData.webhookId !== undefined) {
                        const credentials = await this.getCredentials('trelloApi');
                        const endpoint = `tokens/${credentials.apiToken}/webhooks/${webhookData.webhookId}`;
                        const body = {};
                        try {
                            await GenericFunctions_1.apiRequest.call(this, 'DELETE', endpoint, body);
                        }
                        catch (error) {
                            return false;
                        }
                        delete webhookData.webhookId;
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        const webhookName = this.getWebhookName();
        if (webhookName === 'setup') {
            const res = this.getResponseObject();
            res.status(200).end();
            return {
                noWebhookResponse: true,
            };
        }
        const bodyData = this.getBodyData();
        return {
            workflowData: [this.helpers.returnJsonArray(bodyData)],
        };
    }
}
exports.TrelloTrigger = TrelloTrigger;
//# sourceMappingURL=TrelloTrigger.node.js.map