"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZohoCrm = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const descriptions_1 = require("./descriptions");
class ZohoCrm {
    constructor() {
        this.description = {
            displayName: 'Zoho CRM',
            name: 'zohoCrm',
            icon: 'file:zoho.svg',
            group: ['transform'],
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            version: 1,
            description: 'Consume Zoho CRM API',
            defaults: {
                name: 'Zoho CRM',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'zohoOAuth2Api',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Account',
                            value: 'account',
                        },
                        {
                            name: 'Contact',
                            value: 'contact',
                        },
                        {
                            name: 'Deal',
                            value: 'deal',
                        },
                        {
                            name: 'Invoice',
                            value: 'invoice',
                        },
                        {
                            name: 'Lead',
                            value: 'lead',
                        },
                        {
                            name: 'Product',
                            value: 'product',
                        },
                        {
                            name: 'Purchase Order',
                            value: 'purchaseOrder',
                        },
                        {
                            name: 'Quote',
                            value: 'quote',
                        },
                        {
                            name: 'Sales Order',
                            value: 'salesOrder',
                        },
                        {
                            name: 'Vendor',
                            value: 'vendor',
                        },
                    ],
                    default: 'account',
                },
                ...descriptions_1.accountOperations,
                ...descriptions_1.accountFields,
                ...descriptions_1.contactOperations,
                ...descriptions_1.contactFields,
                ...descriptions_1.dealOperations,
                ...descriptions_1.dealFields,
                ...descriptions_1.invoiceOperations,
                ...descriptions_1.invoiceFields,
                ...descriptions_1.leadOperations,
                ...descriptions_1.leadFields,
                ...descriptions_1.productOperations,
                ...descriptions_1.productFields,
                ...descriptions_1.purchaseOrderOperations,
                ...descriptions_1.purchaseOrderFields,
                ...descriptions_1.quoteOperations,
                ...descriptions_1.quoteFields,
                ...descriptions_1.salesOrderOperations,
                ...descriptions_1.salesOrderFields,
                ...descriptions_1.vendorOperations,
                ...descriptions_1.vendorFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getAccounts() {
                    const accounts = (await GenericFunctions_1.zohoApiRequestAllItems.call(this, 'GET', '/accounts'));
                    return (0, GenericFunctions_1.toLoadOptions)(accounts, 'Account_Name');
                },
                async getContacts() {
                    const contacts = (await GenericFunctions_1.zohoApiRequestAllItems.call(this, 'GET', '/contacts'));
                    return (0, GenericFunctions_1.toLoadOptions)(contacts, 'Full_Name');
                },
                async getDeals() {
                    const deals = (await GenericFunctions_1.zohoApiRequestAllItems.call(this, 'GET', '/deals'));
                    return (0, GenericFunctions_1.toLoadOptions)(deals, 'Deal_Name');
                },
                async getProducts() {
                    const products = (await GenericFunctions_1.zohoApiRequestAllItems.call(this, 'GET', '/products'));
                    return (0, GenericFunctions_1.toLoadOptions)(products, 'Product_Name');
                },
                async getVendors() {
                    const vendors = (await GenericFunctions_1.zohoApiRequestAllItems.call(this, 'GET', '/vendors'));
                    return (0, GenericFunctions_1.toLoadOptions)(vendors, 'Vendor_Name');
                },
                async getAccountFields() {
                    return GenericFunctions_1.getFields.call(this, 'account');
                },
                async getContactFields() {
                    return GenericFunctions_1.getFields.call(this, 'contact');
                },
                async getDealFields() {
                    return GenericFunctions_1.getFields.call(this, 'deal');
                },
                async getInvoiceFields() {
                    return GenericFunctions_1.getFields.call(this, 'invoice');
                },
                async getLeadFields() {
                    return GenericFunctions_1.getFields.call(this, 'lead');
                },
                async getProductFields() {
                    return GenericFunctions_1.getFields.call(this, 'product');
                },
                async getPurchaseOrderFields() {
                    return GenericFunctions_1.getFields.call(this, 'purchase_order');
                },
                async getVendorOrderFields() {
                    return GenericFunctions_1.getFields.call(this, 'vendor');
                },
                async getQuoteFields() {
                    return GenericFunctions_1.getFields.call(this, 'quote');
                },
                async getSalesOrderFields() {
                    return GenericFunctions_1.getFields.call(this, 'sales_order');
                },
                async getVendorFields() {
                    return GenericFunctions_1.getFields.call(this, 'vendor');
                },
                async getCustomAccountFields() {
                    return GenericFunctions_1.getFields.call(this, 'account', { onlyCustom: true });
                },
                async getCustomContactFields() {
                    return GenericFunctions_1.getFields.call(this, 'contact', { onlyCustom: true });
                },
                async getCustomDealFields() {
                    return GenericFunctions_1.getFields.call(this, 'deal', { onlyCustom: true });
                },
                async getCustomInvoiceFields() {
                    return GenericFunctions_1.getFields.call(this, 'invoice', { onlyCustom: true });
                },
                async getCustomLeadFields() {
                    return GenericFunctions_1.getFields.call(this, 'lead', { onlyCustom: true });
                },
                async getCustomProductFields() {
                    return GenericFunctions_1.getFields.call(this, 'product', { onlyCustom: true });
                },
                async getCustomPurchaseOrderFields() {
                    return GenericFunctions_1.getFields.call(this, 'purchase_order', { onlyCustom: true });
                },
                async getCustomVendorOrderFields() {
                    return GenericFunctions_1.getFields.call(this, 'vendor', { onlyCustom: true });
                },
                async getCustomQuoteFields() {
                    return GenericFunctions_1.getFields.call(this, 'quote', { onlyCustom: true });
                },
                async getCustomSalesOrderFields() {
                    return GenericFunctions_1.getFields.call(this, 'sales_order', { onlyCustom: true });
                },
                async getCustomVendorFields() {
                    return GenericFunctions_1.getFields.call(this, 'vendor', { onlyCustom: true });
                },
                async getAccountType() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'Account_Type');
                },
                async getDealStage() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'deal', 'Stage');
                },
                async getPurchaseOrderStatus() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'purchaseOrder', 'Status');
                },
                async getSalesOrderStatus() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'salesOrder', 'Status');
                },
                async getQuoteStage() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'quote', 'Quote_Stage');
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        let responseData;
        for (let i = 0; i < items.length; i++) {
            try {
                if (resource === 'account') {
                    if (operation === 'create') {
                        const body = {
                            Account_Name: this.getNodeParameter('accountName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustAccountPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/accounts', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const accountId = this.getNodeParameter('accountId', i);
                        const endpoint = `/accounts/${accountId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', endpoint);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const accountId = this.getNodeParameter('accountId', i);
                        const endpoint = `/accounts/${accountId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', endpoint);
                        responseData = responseData.data;
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/accounts', {}, qs);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustAccountPayload)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const accountId = this.getNodeParameter('accountId', i);
                        const endpoint = `/accounts/${accountId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', endpoint, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const body = {
                            Account_Name: this.getNodeParameter('accountName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustAccountPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/accounts/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
                else if (resource === 'contact') {
                    if (operation === 'create') {
                        const body = {
                            Last_Name: this.getNodeParameter('lastName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustContactPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/contacts', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const contactId = this.getNodeParameter('contactId', i);
                        const endpoint = `/contacts/${contactId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', endpoint);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const contactId = this.getNodeParameter('contactId', i);
                        const endpoint = `/contacts/${contactId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', endpoint);
                        responseData = responseData.data;
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/contacts', {}, qs);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustContactPayload)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const contactId = this.getNodeParameter('contactId', i);
                        const endpoint = `/contacts/${contactId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', endpoint, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const body = {
                            Last_Name: this.getNodeParameter('lastName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustContactPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/contacts/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
                else if (resource === 'deal') {
                    if (operation === 'create') {
                        const body = {
                            Deal_Name: this.getNodeParameter('dealName', i),
                            Stage: this.getNodeParameter('stage', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustDealPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/deals', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const dealId = this.getNodeParameter('dealId', i);
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', `/deals/${dealId}`);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const dealId = this.getNodeParameter('dealId', i);
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', `/deals/${dealId}`);
                        responseData = responseData.data;
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/deals', {}, qs);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustDealPayload)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const dealId = this.getNodeParameter('dealId', i);
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', `/deals/${dealId}`, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const body = {
                            Deal_Name: this.getNodeParameter('dealName', i),
                            Stage: this.getNodeParameter('stage', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustDealPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/deals/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
                else if (resource === 'invoice') {
                    if (operation === 'create') {
                        const productDetails = this.getNodeParameter('Product_Details', i);
                        GenericFunctions_1.throwOnMissingProducts.call(this, resource, productDetails);
                        const body = {
                            Subject: this.getNodeParameter('subject', i),
                            Product_Details: (0, GenericFunctions_1.adjustProductDetails)(productDetails),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustInvoicePayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/invoices', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const invoiceId = this.getNodeParameter('invoiceId', i);
                        const endpoint = `/invoices/${invoiceId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', endpoint);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const invoiceId = this.getNodeParameter('invoiceId', i);
                        const endpoint = `/invoices/${invoiceId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', endpoint);
                        responseData = responseData.data;
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/invoices', {}, qs);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustInvoicePayloadOnUpdate)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const invoiceId = this.getNodeParameter('invoiceId', i);
                        const endpoint = `/invoices/${invoiceId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', endpoint, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const productDetails = this.getNodeParameter('Product_Details', i);
                        const body = {
                            Subject: this.getNodeParameter('subject', i),
                            Product_Details: (0, GenericFunctions_1.adjustProductDetails)(productDetails),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustInvoicePayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/invoices/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
                else if (resource === 'lead') {
                    if (operation === 'create') {
                        const body = {
                            Company: this.getNodeParameter('Company', i),
                            Last_Name: this.getNodeParameter('lastName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustLeadPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/leads', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const leadId = this.getNodeParameter('leadId', i);
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', `/leads/${leadId}`);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const leadId = this.getNodeParameter('leadId', i);
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', `/leads/${leadId}`);
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/leads', {}, qs);
                    }
                    else if (operation === 'getFields') {
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', '/settings/fields', {}, { module: 'leads' });
                        responseData = responseData.fields;
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustLeadPayload)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const leadId = this.getNodeParameter('leadId', i);
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', `/leads/${leadId}`, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const body = {
                            Company: this.getNodeParameter('Company', i),
                            Last_Name: this.getNodeParameter('lastName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustLeadPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/leads/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
                else if (resource === 'product') {
                    if (operation === 'create') {
                        const body = {
                            Product_Name: this.getNodeParameter('productName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustProductPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/products', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const productId = this.getNodeParameter('productId', i);
                        const endpoint = `/products/${productId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', endpoint);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const productId = this.getNodeParameter('productId', i);
                        const endpoint = `/products/${productId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', endpoint);
                        responseData = responseData.data;
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/products', {}, qs);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustProductPayload)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const productId = this.getNodeParameter('productId', i);
                        const endpoint = `/products/${productId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', endpoint, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const body = {
                            Product_Name: this.getNodeParameter('productName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustProductPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/products/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
                else if (resource === 'purchaseOrder') {
                    if (operation === 'create') {
                        const productDetails = this.getNodeParameter('Product_Details', i);
                        GenericFunctions_1.throwOnMissingProducts.call(this, resource, productDetails);
                        const body = {
                            Subject: this.getNodeParameter('subject', i),
                            Vendor_Name: { id: this.getNodeParameter('vendorId', i) },
                            Product_Details: (0, GenericFunctions_1.adjustProductDetails)(productDetails),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustPurchaseOrderPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/purchase_orders', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const purchaseOrderId = this.getNodeParameter('purchaseOrderId', i);
                        const endpoint = `/purchase_orders/${purchaseOrderId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', endpoint);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const purchaseOrderId = this.getNodeParameter('purchaseOrderId', i);
                        const endpoint = `/purchase_orders/${purchaseOrderId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', endpoint);
                        responseData = responseData.data;
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/purchase_orders', {}, qs);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustPurchaseOrderPayload)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const purchaseOrderId = this.getNodeParameter('purchaseOrderId', i);
                        const endpoint = `/purchase_orders/${purchaseOrderId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', endpoint, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const productDetails = this.getNodeParameter('Product_Details', i);
                        const body = {
                            Subject: this.getNodeParameter('subject', i),
                            Vendor_Name: { id: this.getNodeParameter('vendorId', i) },
                            Product_Details: (0, GenericFunctions_1.adjustProductDetails)(productDetails),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustPurchaseOrderPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/purchase_orders/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
                else if (resource === 'quote') {
                    if (operation === 'create') {
                        const productDetails = this.getNodeParameter('Product_Details', i);
                        GenericFunctions_1.throwOnMissingProducts.call(this, resource, productDetails);
                        const body = {
                            Subject: this.getNodeParameter('subject', i),
                            Product_Details: (0, GenericFunctions_1.adjustProductDetails)(productDetails),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustQuotePayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/quotes', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const quoteId = this.getNodeParameter('quoteId', i);
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', `/quotes/${quoteId}`);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const quoteId = this.getNodeParameter('quoteId', i);
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', `/quotes/${quoteId}`);
                        responseData = responseData.data;
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/quotes', {}, qs);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustQuotePayload)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const quoteId = this.getNodeParameter('quoteId', i);
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', `/quotes/${quoteId}`, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const productDetails = this.getNodeParameter('Product_Details', i);
                        const body = {
                            Subject: this.getNodeParameter('subject', i),
                            Product_Details: (0, GenericFunctions_1.adjustProductDetails)(productDetails),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustQuotePayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/quotes/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
                else if (resource === 'salesOrder') {
                    if (operation === 'create') {
                        const productDetails = this.getNodeParameter('Product_Details', i);
                        const body = {
                            Account_Name: { id: this.getNodeParameter('accountId', i) },
                            Subject: this.getNodeParameter('subject', i),
                            Product_Details: (0, GenericFunctions_1.adjustProductDetails)(productDetails),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustSalesOrderPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/sales_orders', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const salesOrderId = this.getNodeParameter('salesOrderId', i);
                        const endpoint = `/sales_orders/${salesOrderId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', endpoint);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const salesOrderId = this.getNodeParameter('salesOrderId', i);
                        const endpoint = `/sales_orders/${salesOrderId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', endpoint);
                        responseData = responseData.data;
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/sales_orders', {}, qs);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustSalesOrderPayload)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const salesOrderId = this.getNodeParameter('salesOrderId', i);
                        const endpoint = `/sales_orders/${salesOrderId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', endpoint, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const productDetails = this.getNodeParameter('Product_Details', i);
                        const body = {
                            Account_Name: { id: this.getNodeParameter('accountId', i) },
                            Subject: this.getNodeParameter('subject', i),
                            Product_Details: (0, GenericFunctions_1.adjustProductDetails)(productDetails),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustSalesOrderPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/sales_orders/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
                else if (resource === 'vendor') {
                    if (operation === 'create') {
                        const body = {
                            Vendor_Name: this.getNodeParameter('vendorName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustVendorPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/vendors', body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'delete') {
                        const vendorId = this.getNodeParameter('vendorId', i);
                        const endpoint = `/vendors/${vendorId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'DELETE', endpoint);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'get') {
                        const vendorId = this.getNodeParameter('vendorId', i);
                        const endpoint = `/vendors/${vendorId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'GET', endpoint);
                        responseData = responseData.data;
                    }
                    else if (operation === 'getAll') {
                        const qs = {};
                        const options = this.getNodeParameter('options', i);
                        (0, GenericFunctions_1.addGetAllFilterOptions)(qs, options);
                        responseData = await GenericFunctions_1.handleListing.call(this, 'GET', '/vendors', {}, qs);
                    }
                    else if (operation === 'update') {
                        const body = {};
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (Object.keys(updateFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustVendorPayload)(updateFields));
                        }
                        else {
                            GenericFunctions_1.throwOnEmptyUpdate.call(this, resource);
                        }
                        const vendorId = this.getNodeParameter('vendorId', i);
                        const endpoint = `/vendors/${vendorId}`;
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'PUT', endpoint, body);
                        responseData = responseData.data[0].details;
                    }
                    else if (operation === 'upsert') {
                        const body = {
                            Vendor_Name: this.getNodeParameter('vendorName', i),
                        };
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (Object.keys(additionalFields).length) {
                            Object.assign(body, (0, GenericFunctions_1.adjustVendorPayload)(additionalFields));
                        }
                        responseData = await GenericFunctions_1.zohoApiRequest.call(this, 'POST', '/vendors/upsert', body);
                        responseData = responseData.data[0].details;
                    }
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message, json: {} });
                    continue;
                }
                throw error;
            }
            const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
            returnData.push(...executionData);
        }
        return this.prepareOutputData(returnData);
    }
}
exports.ZohoCrm = ZohoCrm;
//# sourceMappingURL=ZohoCrm.node.js.map