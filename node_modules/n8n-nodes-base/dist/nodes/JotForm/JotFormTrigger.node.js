"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JotFormTrigger = void 0;
const formidable = __importStar(require("formidable"));
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
class JotFormTrigger {
    constructor() {
        this.description = {
            displayName: 'JotForm Trigger',
            name: 'jotFormTrigger',
            icon: 'file:jotform.png',
            group: ['trigger'],
            version: 1,
            description: 'Handle JotForm events via webhooks',
            defaults: {
                name: 'JotForm Trigger',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'jotFormApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Form Name or ID',
                    name: 'form',
                    type: 'options',
                    required: true,
                    typeOptions: {
                        loadOptionsMethod: 'getForms',
                    },
                    default: '',
                    description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                },
                {
                    displayName: 'Resolve Data',
                    name: 'resolveData',
                    type: 'boolean',
                    default: true,
                    description: 'By default does the webhook-data use internal keys instead of the names. If this option gets activated, it will resolve the keys automatically to the actual names.',
                },
                {
                    displayName: 'Only Answers',
                    name: 'onlyAnswers',
                    type: 'boolean',
                    default: true,
                    description: 'Whether to return only the answers of the form and not any of the other data',
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getForms() {
                    const returnData = [];
                    const qs = {
                        limit: 1000,
                    };
                    const forms = await GenericFunctions_1.jotformApiRequest.call(this, 'GET', '/user/forms', {}, qs);
                    for (const form of forms.content) {
                        const formName = form.title;
                        const formId = form.id;
                        returnData.push({
                            name: formName,
                            value: formId,
                        });
                    }
                    return returnData;
                },
            },
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookData = this.getWorkflowStaticData('node');
                    const formId = this.getNodeParameter('form');
                    const endpoint = `/form/${formId}/webhooks`;
                    try {
                        const responseData = await GenericFunctions_1.jotformApiRequest.call(this, 'GET', endpoint);
                        const webhookUrls = Object.values(responseData.content);
                        const webhookUrl = this.getNodeWebhookUrl('default');
                        if (!webhookUrls.includes(webhookUrl)) {
                            return false;
                        }
                        const webhookIds = Object.keys(responseData.content);
                        webhookData.webhookId = webhookIds[webhookUrls.indexOf(webhookUrl)];
                    }
                    catch (error) {
                        return false;
                    }
                    return true;
                },
                async create() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const webhookData = this.getWorkflowStaticData('node');
                    const formId = this.getNodeParameter('form');
                    const endpoint = `/form/${formId}/webhooks`;
                    const body = {
                        webhookURL: webhookUrl,
                    };
                    const { content } = await GenericFunctions_1.jotformApiRequest.call(this, 'POST', endpoint, body);
                    webhookData.webhookId = Object.keys(content)[0];
                    return true;
                },
                async delete() {
                    let responseData;
                    const webhookData = this.getWorkflowStaticData('node');
                    const formId = this.getNodeParameter('form');
                    const endpoint = `/form/${formId}/webhooks/${webhookData.webhookId}`;
                    try {
                        responseData = await GenericFunctions_1.jotformApiRequest.call(this, 'DELETE', endpoint);
                    }
                    catch (error) {
                        return false;
                    }
                    if (responseData.message !== 'success') {
                        return false;
                    }
                    delete webhookData.webhookId;
                    return true;
                },
            },
        };
    }
    async webhook() {
        const req = this.getRequestObject();
        const formId = this.getNodeParameter('form');
        const resolveData = this.getNodeParameter('resolveData', false);
        const onlyAnswers = this.getNodeParameter('onlyAnswers', false);
        const form = new formidable.IncomingForm({});
        return new Promise((resolve, _reject) => {
            form.parse(req, async (err, data, _files) => {
                const rawRequest = (0, n8n_workflow_1.jsonParse)(data.rawRequest);
                data.rawRequest = rawRequest;
                let returnData;
                if (!resolveData) {
                    if (onlyAnswers) {
                        returnData = data.rawRequest;
                    }
                    else {
                        returnData = data;
                    }
                    resolve({
                        workflowData: [this.helpers.returnJsonArray(returnData)],
                    });
                }
                const endpoint = `/form/${formId}/questions`;
                const responseData = await GenericFunctions_1.jotformApiRequest.call(this, 'GET', endpoint, {});
                const questionNames = {};
                for (const question of Object.values(responseData.content)) {
                    questionNames[question.name] = question.text;
                }
                let questionKey;
                const questionsData = {};
                for (const key of Object.keys(rawRequest)) {
                    if (!key.includes('_')) {
                        continue;
                    }
                    questionKey = key.split('_').slice(1).join('_');
                    if (questionNames[questionKey] === undefined) {
                        continue;
                    }
                    questionsData[questionNames[questionKey]] = rawRequest[key];
                }
                if (onlyAnswers) {
                    returnData = questionsData;
                }
                else {
                    data.rawRequest = questionsData;
                    returnData = data;
                }
                resolve({
                    workflowData: [this.helpers.returnJsonArray(returnData)],
                });
            });
        });
    }
}
exports.JotFormTrigger = JotFormTrigger;
//# sourceMappingURL=JotFormTrigger.node.js.map