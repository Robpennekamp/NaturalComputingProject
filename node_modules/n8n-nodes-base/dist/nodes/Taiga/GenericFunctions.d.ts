import type { ICredentialDataDecryptedObject, IDataObject, IExecuteFunctions, IExecuteSingleFunctions, IHookFunctions, ILoadOptionsFunctions, IWebhookFunctions } from 'n8n-workflow';
export declare function getAuthorization(this: IHookFunctions | IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions | IWebhookFunctions, credentials?: ICredentialDataDecryptedObject): Promise<string>;
export declare function taigaApiRequest(this: IHookFunctions | IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions | IWebhookFunctions, method: string, resource: string, body?: {}, query?: {}, uri?: string | undefined, option?: {}): Promise<any>;
export declare function taigaApiRequestAllItems(this: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions, method: string, resource: string, body?: IDataObject, query?: IDataObject): Promise<any>;
export declare function getAutomaticSecret(credentials: ICredentialDataDecryptedObject): string;
export declare function handleListing(this: IExecuteFunctions, method: string, endpoint: string, body: IDataObject, qs: IDataObject, i: number): Promise<any>;
export declare const toOptions: (items: LoadedResource[]) => {
    name: string;
    value: string;
}[];
export declare function throwOnEmptyUpdate(this: IExecuteFunctions, resource: Resource): void;
export declare function getVersionForUpdate(this: IExecuteFunctions, endpoint: string): Promise<any>;
