"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storyblok = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const StoryContentDescription_1 = require("./StoryContentDescription");
const StoryManagementDescription_1 = require("./StoryManagementDescription");
class Storyblok {
    constructor() {
        this.description = {
            displayName: 'Storyblok',
            name: 'storyblok',
            icon: 'file:storyblok.svg',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Storyblok API',
            defaults: {
                name: 'Storyblok',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'storyblokContentApi',
                    required: true,
                    displayOptions: {
                        show: {
                            source: ['contentApi'],
                        },
                    },
                },
                {
                    name: 'storyblokManagementApi',
                    required: true,
                    displayOptions: {
                        show: {
                            source: ['managementApi'],
                        },
                    },
                },
            ],
            properties: [
                {
                    displayName: 'Source',
                    name: 'source',
                    type: 'options',
                    default: 'contentApi',
                    description: 'Pick where your data comes from, Content or Management API',
                    options: [
                        {
                            name: 'Content API',
                            value: 'contentApi',
                        },
                        {
                            name: 'Management API',
                            value: 'managementApi',
                        },
                    ],
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Story',
                            value: 'story',
                        },
                    ],
                    default: 'story',
                    displayOptions: {
                        show: {
                            source: ['contentApi'],
                        },
                    },
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Story',
                            value: 'story',
                        },
                    ],
                    default: 'story',
                    displayOptions: {
                        show: {
                            source: ['managementApi'],
                        },
                    },
                },
                ...StoryContentDescription_1.storyContentOperations,
                ...StoryContentDescription_1.storyContentFields,
                ...StoryManagementDescription_1.storyManagementOperations,
                ...StoryManagementDescription_1.storyManagementFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getSpaces() {
                    const returnData = [];
                    const { spaces } = await GenericFunctions_1.storyblokApiRequest.call(this, 'GET', '/v1/spaces');
                    for (const space of spaces) {
                        returnData.push({
                            name: space.name,
                            value: space.id,
                        });
                    }
                    return returnData;
                },
                async getComponents() {
                    const returnData = [];
                    const space = this.getCurrentNodeParameter('space');
                    const { components } = await GenericFunctions_1.storyblokApiRequest.call(this, 'GET', `/v1/spaces/${space}/components`);
                    for (const component of components) {
                        returnData.push({
                            name: `${component.name} ${component.is_root ? '(root)' : ''}`,
                            value: component.name,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const source = this.getNodeParameter('source', 0);
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (source === 'contentApi') {
                    if (resource === 'story') {
                        if (operation === 'get') {
                            const identifier = this.getNodeParameter('identifier', i);
                            responseData = await GenericFunctions_1.storyblokApiRequest.call(this, 'GET', `/v1/cdn/stories/${identifier}`);
                            responseData = responseData.story;
                        }
                        if (operation === 'getAll') {
                            const filters = this.getNodeParameter('filters', i);
                            const returnAll = this.getNodeParameter('returnAll', i);
                            Object.assign(qs, filters);
                            if (returnAll) {
                                responseData = await GenericFunctions_1.storyblokApiRequestAllItems.call(this, 'stories', 'GET', '/v1/cdn/stories', {}, qs);
                            }
                            else {
                                const limit = this.getNodeParameter('limit', i);
                                qs.per_page = limit;
                                responseData = await GenericFunctions_1.storyblokApiRequest.call(this, 'GET', '/v1/cdn/stories', {}, qs);
                                responseData = responseData.stories;
                            }
                        }
                    }
                }
                if (source === 'managementApi') {
                    if (resource === 'story') {
                        if (operation === 'delete') {
                            const space = this.getNodeParameter('space', i);
                            const storyId = this.getNodeParameter('storyId', i);
                            responseData = await GenericFunctions_1.storyblokApiRequest.call(this, 'DELETE', `/v1/spaces/${space}/stories/${storyId}`);
                            responseData = responseData.story;
                        }
                        if (operation === 'get') {
                            const space = this.getNodeParameter('space', i);
                            const storyId = this.getNodeParameter('storyId', i);
                            responseData = await GenericFunctions_1.storyblokApiRequest.call(this, 'GET', `/v1/spaces/${space}/stories/${storyId}`);
                            responseData = responseData.story;
                        }
                        if (operation === 'getAll') {
                            const space = this.getNodeParameter('space', i);
                            const filters = this.getNodeParameter('filters', i);
                            const returnAll = this.getNodeParameter('returnAll', i);
                            Object.assign(qs, filters);
                            if (returnAll) {
                                responseData = await GenericFunctions_1.storyblokApiRequestAllItems.call(this, 'stories', 'GET', `/v1/spaces/${space}/stories`, {}, qs);
                            }
                            else {
                                const limit = this.getNodeParameter('limit', i);
                                qs.per_page = limit;
                                responseData = await GenericFunctions_1.storyblokApiRequest.call(this, 'GET', `/v1/spaces/${space}/stories`, {}, qs);
                                responseData = responseData.stories;
                            }
                        }
                        if (operation === 'publish') {
                            const space = this.getNodeParameter('space', i);
                            const storyId = this.getNodeParameter('storyId', i);
                            const options = this.getNodeParameter('options', i);
                            const query = {};
                            if (options.releaseId) {
                                query.release_id = options.releaseId;
                            }
                            if (options.language) {
                                query.lang = options.language;
                            }
                            responseData = await GenericFunctions_1.storyblokApiRequest.call(this, 'GET', `/v1/spaces/${space}/stories/${storyId}/publish`, {}, query);
                            responseData = responseData.story;
                        }
                        if (operation === 'unpublish') {
                            const space = this.getNodeParameter('space', i);
                            const storyId = this.getNodeParameter('storyId', i);
                            responseData = await GenericFunctions_1.storyblokApiRequest.call(this, 'GET', `/v1/spaces/${space}/stories/${storyId}/unpublish`);
                            responseData = responseData.story;
                        }
                    }
                }
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    const executionErrorData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray({ error: error.message }), { itemData: { item: i } });
                    returnData.push(...executionErrorData);
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.Storyblok = Storyblok;
//# sourceMappingURL=Storyblok.node.js.map