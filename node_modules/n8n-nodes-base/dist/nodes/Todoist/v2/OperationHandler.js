"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncHandler = exports.MoveHandler = exports.UpdateHandler = exports.ReopenHandler = exports.GetAllHandler = exports.GetHandler = exports.DeleteHandler = exports.CloseHandler = exports.CreateHandler = exports.CommandType = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("../GenericFunctions");
const uuid_1 = require("uuid");
var CommandType;
(function (CommandType) {
    CommandType["ITEM_MOVE"] = "item_move";
    CommandType["ITEM_ADD"] = "item_add";
    CommandType["ITEM_UPDATE"] = "item_update";
    CommandType["ITEM_REORDER"] = "item_reorder";
    CommandType["ITEM_DELETE"] = "item_delete";
    CommandType["ITEM_COMPLETE"] = "item_complete";
})(CommandType = exports.CommandType || (exports.CommandType = {}));
class CreateHandler {
    async handleOperation(ctx, itemIndex) {
        const content = ctx.getNodeParameter('content', itemIndex);
        const projectId = ctx.getNodeParameter('project', itemIndex, undefined, {
            extractValue: true,
        });
        const labels = ctx.getNodeParameter('labels', itemIndex);
        const options = ctx.getNodeParameter('options', itemIndex);
        const body = {
            content,
            project_id: projectId,
            priority: options.priority ? parseInt(options.priority, 10) : 1,
        };
        if (options.description) {
            body.description = options.description;
        }
        if (options.dueDateTime) {
            body.due_datetime = (0, GenericFunctions_1.FormatDueDatetime)(options.dueDateTime);
        }
        if (options.dueString) {
            body.due_string = options.dueString;
        }
        if (labels !== undefined && labels.length !== 0) {
            body.labels = labels;
        }
        if (options.section) {
            body.section_id = options.section;
        }
        if (options.dueLang) {
            body.due_lang = options.dueLang;
        }
        if (options.parentId) {
            body.parent_id = options.parentId;
        }
        const data = await GenericFunctions_1.todoistApiRequest.call(ctx, 'POST', '/tasks', body);
        return {
            data,
        };
    }
}
exports.CreateHandler = CreateHandler;
class CloseHandler {
    async handleOperation(ctx, itemIndex) {
        const id = ctx.getNodeParameter('taskId', itemIndex);
        await GenericFunctions_1.todoistApiRequest.call(ctx, 'POST', `/tasks/${id}/close`);
        return {
            success: true,
        };
    }
}
exports.CloseHandler = CloseHandler;
class DeleteHandler {
    async handleOperation(ctx, itemIndex) {
        const id = ctx.getNodeParameter('taskId', itemIndex);
        await GenericFunctions_1.todoistApiRequest.call(ctx, 'DELETE', `/tasks/${id}`);
        return {
            success: true,
        };
    }
}
exports.DeleteHandler = DeleteHandler;
class GetHandler {
    async handleOperation(ctx, itemIndex) {
        const id = ctx.getNodeParameter('taskId', itemIndex);
        const responseData = await GenericFunctions_1.todoistApiRequest.call(ctx, 'GET', `/tasks/${id}`);
        return {
            data: responseData,
        };
    }
}
exports.GetHandler = GetHandler;
class GetAllHandler {
    async handleOperation(ctx, itemIndex) {
        const returnAll = ctx.getNodeParameter('returnAll', itemIndex);
        const filters = ctx.getNodeParameter('filters', itemIndex);
        const qs = {};
        if (filters.projectId) {
            qs.project_id = filters.projectId;
        }
        if (filters.labelId) {
            qs.label = filters.labelId;
        }
        if (filters.filter) {
            qs.filter = filters.filter;
        }
        if (filters.lang) {
            qs.lang = filters.lang;
        }
        if (filters.ids) {
            qs.ids = filters.ids;
        }
        let responseData = await GenericFunctions_1.todoistApiRequest.call(ctx, 'GET', '/tasks', {}, qs);
        if (!returnAll) {
            const limit = ctx.getNodeParameter('limit', itemIndex);
            responseData = responseData.splice(0, limit);
        }
        return {
            data: responseData,
        };
    }
}
exports.GetAllHandler = GetAllHandler;
async function getSectionIds(ctx, projectId) {
    const sections = await GenericFunctions_1.todoistApiRequest.call(ctx, 'GET', '/sections', {}, { project_id: projectId });
    return new Map(sections.map((s) => [s.name, s.id]));
}
class ReopenHandler {
    async handleOperation(ctx, itemIndex) {
        const id = ctx.getNodeParameter('taskId', itemIndex);
        await GenericFunctions_1.todoistApiRequest.call(ctx, 'POST', `/tasks/${id}/reopen`);
        return {
            success: true,
        };
    }
}
exports.ReopenHandler = ReopenHandler;
class UpdateHandler {
    async handleOperation(ctx, itemIndex) {
        const id = ctx.getNodeParameter('taskId', itemIndex);
        const updateFields = ctx.getNodeParameter('updateFields', itemIndex);
        const body = {};
        if (updateFields.content) {
            body.content = updateFields.content;
        }
        if (updateFields.priority) {
            body.priority = parseInt(updateFields.priority, 10);
        }
        if (updateFields.description) {
            body.description = updateFields.description;
        }
        if (updateFields.dueDateTime) {
            body.due_datetime = (0, GenericFunctions_1.FormatDueDatetime)(updateFields.dueDateTime);
        }
        if (updateFields.dueString) {
            body.due_string = updateFields.dueString;
        }
        if (updateFields.labels !== undefined &&
            Array.isArray(updateFields.labels) &&
            updateFields.labels.length !== 0) {
            body.labels = updateFields.labels;
        }
        if (updateFields.dueLang) {
            body.due_lang = updateFields.dueLang;
        }
        await GenericFunctions_1.todoistApiRequest.call(ctx, 'POST', `/tasks/${id}`, body);
        return { success: true };
    }
}
exports.UpdateHandler = UpdateHandler;
class MoveHandler {
    async handleOperation(ctx, itemIndex) {
        const taskId = ctx.getNodeParameter('taskId', itemIndex);
        const section = ctx.getNodeParameter('section', itemIndex);
        const body = {
            commands: [
                {
                    type: "item_move",
                    uuid: (0, uuid_1.v4)(),
                    args: {
                        id: taskId,
                        section_id: section,
                    },
                },
            ],
        };
        await GenericFunctions_1.todoistSyncRequest.call(ctx, body);
        return { success: true };
    }
}
exports.MoveHandler = MoveHandler;
class SyncHandler {
    async handleOperation(ctx, itemIndex) {
        const commandsJson = ctx.getNodeParameter('commands', itemIndex);
        const projectId = ctx.getNodeParameter('project', itemIndex, undefined, {
            extractValue: true,
        });
        const sections = await getSectionIds(ctx, projectId);
        const commands = (0, n8n_workflow_1.jsonParse)(commandsJson);
        const tempIdMapping = new Map();
        for (let i = 0; i < commands.length; i++) {
            const command = commands[i];
            this.enrichUUID(command);
            this.enrichSection(command, sections);
            this.enrichProjectId(command, projectId);
            this.enrichTempId(command, tempIdMapping, projectId);
        }
        const body = {
            commands,
            temp_id_mapping: this.convertToObject(tempIdMapping),
        };
        await GenericFunctions_1.todoistSyncRequest.call(ctx, body);
        return { success: true };
    }
    convertToObject(map) {
        return Array.from(map.entries()).reduce((o, [key, value]) => {
            o[key] = value;
            return o;
        }, {});
    }
    enrichUUID(command) {
        command.uuid = (0, uuid_1.v4)();
    }
    enrichSection(command, sections) {
        var _a;
        if (((_a = command.args) === null || _a === void 0 ? void 0 : _a.section) !== undefined) {
            const sectionId = sections.get(command.args.section);
            if (sectionId) {
                command.args.section_id = sectionId;
            }
            else {
                throw new Error('Section ' + command.args.section + " doesn't exist on Todoist");
            }
        }
    }
    enrichProjectId(command, projectId) {
        if (this.requiresProjectId(command)) {
            command.args.project_id = projectId;
        }
    }
    requiresProjectId(command) {
        return command.type === "item_add";
    }
    enrichTempId(command, tempIdMapping, projectId) {
        if (this.requiresTempId(command)) {
            command.temp_id = (0, uuid_1.v4)();
            tempIdMapping.set(command.temp_id, projectId);
        }
    }
    requiresTempId(command) {
        return command.type === "item_add";
    }
}
exports.SyncHandler = SyncHandler;
//# sourceMappingURL=OperationHandler.js.map