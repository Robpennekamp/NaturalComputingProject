import type { IDataObject } from 'n8n-workflow';
import type { Context } from '../GenericFunctions';
import type { TodoistResponse } from './Service';
export interface OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
}
export interface CreateTaskRequest {
    content?: string;
    description?: string;
    project_id?: number;
    section_id?: number;
    parent_id?: string;
    order?: number;
    labels?: string[];
    priority?: number;
    due_string?: string;
    due_datetime?: string;
    due_date?: string;
    due_lang?: string;
}
export interface SyncRequest {
    commands: Command[];
    temp_id_mapping?: IDataObject;
}
export interface Command {
    type: CommandType;
    uuid: string;
    temp_id?: string;
    args: {
        id?: number;
        section_id?: number;
        project_id?: number | string;
        section?: string;
        content?: string;
    };
}
export declare const enum CommandType {
    ITEM_MOVE = "item_move",
    ITEM_ADD = "item_add",
    ITEM_UPDATE = "item_update",
    ITEM_REORDER = "item_reorder",
    ITEM_DELETE = "item_delete",
    ITEM_COMPLETE = "item_complete"
}
export declare class CreateHandler implements OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
}
export declare class CloseHandler implements OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
}
export declare class DeleteHandler implements OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
}
export declare class GetHandler implements OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
}
export declare class GetAllHandler implements OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
}
export declare class ReopenHandler implements OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
}
export declare class UpdateHandler implements OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
}
export declare class MoveHandler implements OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
}
export declare class SyncHandler implements OperationHandler {
    handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;
    private convertToObject;
    private enrichUUID;
    private enrichSection;
    private enrichProjectId;
    private requiresProjectId;
    private enrichTempId;
    private requiresTempId;
}
