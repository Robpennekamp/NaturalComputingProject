"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const interfaces_1 = require("../../helpers/interfaces");
const utilities_1 = require("../../../../../utils/utilities");
const utils_1 = require("../../helpers/utils");
const common_descriptions_1 = require("../common.descriptions");
const properties = [
    {
        displayName: 'Data Mode',
        name: 'dataMode',
        type: 'options',
        options: [
            {
                name: 'Auto-Map Input Data to Columns',
                value: interfaces_1.DATA_MODE.AUTO_MAP,
                description: 'Use when node input properties names exactly match the table column names',
            },
            {
                name: 'Map Each Column Below',
                value: interfaces_1.DATA_MODE.MANUAL,
                description: 'Set the value for each destination column manually',
            },
        ],
        default: interfaces_1.AUTO_MAP,
        description: 'Whether to map node input properties and the table data automatically or manually',
    },
    {
        displayName: `
		In this mode, make sure incoming data fields are named the same as the columns in your table. If needed, use a 'Set' node before this node to change the field names.
		`,
        name: 'notice',
        type: 'notice',
        default: '',
        displayOptions: {
            show: {
                dataMode: [interfaces_1.DATA_MODE.AUTO_MAP],
            },
        },
    },
    {
        displayName: 'Column to Match On',
        name: 'columnToMatchOn',
        type: 'options',
        required: true,
        description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
        typeOptions: {
            loadOptionsMethod: 'getColumns',
            loadOptionsDependsOn: ['schema.value', 'table.value'],
        },
        default: '',
        hint: "Used to find the correct row to update. Doesn't get changed.",
    },
    {
        displayName: 'Value of Column to Match On',
        name: 'valueToMatchOn',
        type: 'string',
        default: '',
        description: 'Rows with a value in the specified "Column to Match On" that corresponds to the value in this field will be updated',
        displayOptions: {
            show: {
                dataMode: [interfaces_1.DATA_MODE.MANUAL],
            },
        },
    },
    {
        displayName: 'Values to Send',
        name: 'valuesToSend',
        placeholder: 'Add Value',
        type: 'fixedCollection',
        typeOptions: {
            multipleValueButtonText: 'Add Value',
            multipleValues: true,
        },
        displayOptions: {
            show: {
                dataMode: [interfaces_1.DATA_MODE.MANUAL],
            },
        },
        default: {},
        options: [
            {
                displayName: 'Values',
                name: 'values',
                values: [
                    {
                        displayName: 'Column',
                        name: 'column',
                        type: 'options',
                        description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                        typeOptions: {
                            loadOptionsMethod: 'getColumnsWithoutColumnToMatchOn',
                            loadOptionsDependsOn: ['schema.value', 'table.value'],
                        },
                        default: [],
                    },
                    {
                        displayName: 'Value',
                        name: 'value',
                        type: 'string',
                        default: '',
                    },
                ],
            },
        ],
    },
    common_descriptions_1.optionsCollection,
];
const displayOptions = {
    show: {
        resource: ['database'],
        operation: ['update'],
    },
    hide: {
        table: [''],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, properties);
async function execute(inputItems, runQueries, nodeOptions) {
    let returnData = [];
    const items = (0, utils_1.replaceEmptyStringsByNulls)(inputItems, nodeOptions.replaceEmptyStrings);
    const queries = [];
    for (let i = 0; i < items.length; i++) {
        const table = this.getNodeParameter('table', i, undefined, {
            extractValue: true,
        });
        const columnToMatchOn = this.getNodeParameter('columnToMatchOn', i);
        const dataMode = this.getNodeParameter('dataMode', i);
        let item = {};
        let valueToMatchOn = '';
        if (dataMode === interfaces_1.DATA_MODE.AUTO_MAP) {
            item = items[i].json;
            valueToMatchOn = item[columnToMatchOn];
        }
        if (dataMode === interfaces_1.DATA_MODE.MANUAL) {
            const valuesToSend = this.getNodeParameter('valuesToSend', i, [])
                .values;
            item = valuesToSend.reduce((acc, { column, value }) => {
                acc[column] = value;
                return acc;
            }, {});
            valueToMatchOn = this.getNodeParameter('valueToMatchOn', i);
        }
        const values = [];
        const updateColumns = Object.keys(item).filter((column) => column !== columnToMatchOn);
        const updates = [];
        for (const column of updateColumns) {
            updates.push(`\`${column}\` = ?`);
            values.push(item[column]);
        }
        const condition = `\`${columnToMatchOn}\` = ?`;
        values.push(valueToMatchOn);
        const query = `UPDATE \`${table}\` SET ${updates.join(', ')} WHERE ${condition}`;
        queries.push({ query, values });
    }
    returnData = await runQueries(queries);
    return returnData;
}
exports.execute = execute;
//# sourceMappingURL=update.operation.js.map