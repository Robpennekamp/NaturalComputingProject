"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const utilities_1 = require("../../../../../utils/utilities");
const utils_1 = require("../../helpers/utils");
const common_descriptions_1 = require("../common.descriptions");
const properties = [
    {
        displayName: 'Command',
        name: 'deleteCommand',
        type: 'options',
        default: 'truncate',
        options: [
            {
                name: 'Truncate',
                value: 'truncate',
                description: "Only removes the table's data and preserves the table's structure",
            },
            {
                name: 'Delete',
                value: 'delete',
                description: "Delete the rows that match the 'Select Rows' conditions below. If no selection is made, all rows in the table are deleted.",
            },
            {
                name: 'Drop',
                value: 'drop',
                description: "Deletes the table's data and also the table's structure permanently",
            },
        ],
    },
    {
        ...common_descriptions_1.selectRowsFixedCollection,
        displayOptions: {
            show: {
                deleteCommand: ['delete'],
            },
        },
    },
    {
        ...common_descriptions_1.combineConditionsCollection,
        displayOptions: {
            show: {
                deleteCommand: ['delete'],
            },
        },
    },
    common_descriptions_1.optionsCollection,
];
const displayOptions = {
    show: {
        resource: ['database'],
        operation: ['deleteTable'],
    },
    hide: {
        table: [''],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, properties);
async function execute(inputItems, runQueries) {
    let returnData = [];
    const queries = [];
    for (let i = 0; i < inputItems.length; i++) {
        const table = this.getNodeParameter('table', i, undefined, {
            extractValue: true,
        });
        const deleteCommand = this.getNodeParameter('deleteCommand', i);
        let query = '';
        let values = [];
        if (deleteCommand === 'drop') {
            query = `DROP TABLE IF EXISTS \`${table}\``;
        }
        if (deleteCommand === 'truncate') {
            query = `TRUNCATE TABLE \`${table}\``;
        }
        if (deleteCommand === 'delete') {
            const whereClauses = this.getNodeParameter('where', i, []).values || [];
            const combineConditions = this.getNodeParameter('combineConditions', i, 'AND');
            [query, values] = (0, utils_1.addWhereClauses)(this.getNode(), i, `DELETE FROM \`${table}\``, whereClauses, values, combineConditions);
        }
        if (query === '') {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Invalid delete command, only drop, delete and truncate are supported ', { itemIndex: i });
        }
        const queryWithValues = { query, values };
        queries.push(queryWithValues);
    }
    returnData = await runQueries(queries);
    return returnData;
}
exports.execute = execute;
//# sourceMappingURL=deleteTable.operation.js.map