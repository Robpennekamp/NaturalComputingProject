"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getColumnsWithoutColumnToMatchOn = exports.getColumnsMultiOptions = exports.getColumns = void 0;
const transport_1 = require("../transport");
const ssh2_1 = require("ssh2");
async function getColumns() {
    const credentials = await this.getCredentials('mySql');
    const nodeOptions = this.getNodeParameter('options', 0);
    let sshClient = undefined;
    if (credentials.sshTunnel) {
        sshClient = new ssh2_1.Client();
    }
    const pool = await (0, transport_1.createPool)(credentials, nodeOptions, sshClient);
    try {
        const connection = await pool.getConnection();
        const table = this.getNodeParameter('table', 0, {
            extractValue: true,
        });
        const columns = (await connection.query(`SHOW COLUMNS FROM \`${table}\` FROM \`${credentials.database}\``))[0];
        connection.release();
        return (columns || []).map((column) => ({
            name: column.Field,
            value: column.Field,
            description: `type: ${column.Type.toUpperCase()}, nullable: ${column.Null}`,
        }));
    }
    catch (error) {
        throw error;
    }
    finally {
        if (sshClient) {
            sshClient.end();
        }
        await pool.end();
    }
}
exports.getColumns = getColumns;
async function getColumnsMultiOptions() {
    const returnData = await getColumns.call(this);
    const returnAll = { name: '*', value: '*', description: 'All columns' };
    return [returnAll, ...returnData];
}
exports.getColumnsMultiOptions = getColumnsMultiOptions;
async function getColumnsWithoutColumnToMatchOn() {
    const columnToMatchOn = this.getNodeParameter('columnToMatchOn');
    const returnData = await getColumns.call(this);
    return returnData.filter((column) => column.value !== columnToMatchOn);
}
exports.getColumnsWithoutColumnToMatchOn = getColumnsWithoutColumnToMatchOn;
//# sourceMappingURL=loadOptions.js.map