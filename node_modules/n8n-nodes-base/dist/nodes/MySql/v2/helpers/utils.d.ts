import type { IDataObject, IExecuteFunctions, INode, INodeExecutionData, IPairedItemData, NodeExecutionWithMetadata } from 'n8n-workflow';
import { NodeOperationError } from 'n8n-workflow';
import type { Mysql2Pool, QueryValues, QueryWithValues, SortRule, WhereClause } from './interfaces';
export declare function copyInputItems(items: INodeExecutionData[], properties: string[]): IDataObject[];
export declare const prepareQueryAndReplacements: (rawQuery: string, replacements?: QueryValues) => {
    query: string;
    values: QueryValues;
};
export declare function prepareErrorItem(item: IDataObject, error: IDataObject | NodeOperationError | Error, index: number): INodeExecutionData;
export declare function parseMySqlError(this: IExecuteFunctions, error: any, itemIndex?: number, queries?: string[]): NodeOperationError;
export declare function wrapData(data: IDataObject | IDataObject[]): INodeExecutionData[];
export declare function prepareOutput(response: IDataObject[], options: IDataObject, statements: string[], constructExecutionHelper: (inputData: INodeExecutionData[], options: {
    itemData: IPairedItemData | IPairedItemData[];
}) => NodeExecutionWithMetadata[]): INodeExecutionData[];
export declare function configureQueryRunner(this: IExecuteFunctions, options: IDataObject, pool: Mysql2Pool): (queries: QueryWithValues[]) => Promise<INodeExecutionData[]>;
export declare function addWhereClauses(node: INode, itemIndex: number, query: string, clauses: WhereClause[], replacements: QueryValues, combineConditions?: string): [string, QueryValues];
export declare function addSortRules(query: string, rules: SortRule[], replacements: QueryValues): [string, QueryValues];
export declare function replaceEmptyStringsByNulls(items: INodeExecutionData[], replace?: boolean): INodeExecutionData[];
