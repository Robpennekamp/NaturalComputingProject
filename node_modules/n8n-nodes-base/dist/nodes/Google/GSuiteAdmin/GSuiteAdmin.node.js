"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GSuiteAdmin = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
const UserDescription_1 = require("./UserDescription");
const GroupDescripion_1 = require("./GroupDescripion");
class GSuiteAdmin {
    constructor() {
        this.description = {
            displayName: 'Google Workspace Admin',
            name: 'gSuiteAdmin',
            icon: 'file:google-workspace-admin.png',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Google Workspace Admin API',
            defaults: {
                name: 'Google Workspace Admin',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'gSuiteAdminOAuth2Api',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Group',
                            value: 'group',
                        },
                        {
                            name: 'User',
                            value: 'user',
                        },
                    ],
                    default: 'user',
                },
                ...GroupDescripion_1.groupOperations,
                ...GroupDescripion_1.groupFields,
                ...UserDescription_1.userOperations,
                ...UserDescription_1.userFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getDomains() {
                    const returnData = [];
                    const domains = await GenericFunctions_1.googleApiRequestAllItems.call(this, 'domains', 'GET', '/directory/v1/customer/my_customer/domains');
                    for (const domain of domains) {
                        const domainName = domain.domainName;
                        const domainId = domain.domainName;
                        returnData.push({
                            name: domainName,
                            value: domainId,
                        });
                    }
                    return returnData;
                },
                async getSchemas() {
                    const returnData = [];
                    const schemas = await GenericFunctions_1.googleApiRequestAllItems.call(this, 'schemas', 'GET', '/directory/v1/customer/my_customer/schemas');
                    for (const schema of schemas) {
                        const schemaName = schema.displayName;
                        const schemaId = schema.schemaName;
                        returnData.push({
                            name: schemaName,
                            value: schemaId,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            if (resource === 'group') {
                if (operation === 'create') {
                    const email = this.getNodeParameter('email', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const body = {
                        email,
                    };
                    Object.assign(body, additionalFields);
                    responseData = await GenericFunctions_1.googleApiRequest.call(this, 'POST', '/directory/v1/groups', body);
                }
                if (operation === 'delete') {
                    const groupId = this.getNodeParameter('groupId', i);
                    responseData = await GenericFunctions_1.googleApiRequest.call(this, 'DELETE', `/directory/v1/groups/${groupId}`, {});
                    responseData = { success: true };
                }
                if (operation === 'get') {
                    const groupId = this.getNodeParameter('groupId', i);
                    responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/directory/v1/groups/${groupId}`, {});
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const options = this.getNodeParameter('options', i);
                    Object.assign(qs, options);
                    if (qs.customer === undefined) {
                        qs.customer = 'my_customer';
                    }
                    if (returnAll) {
                        responseData = await GenericFunctions_1.googleApiRequestAllItems.call(this, 'groups', 'GET', '/directory/v1/groups', {}, qs);
                    }
                    else {
                        qs.maxResults = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', '/directory/v1/groups', {}, qs);
                        responseData = responseData.groups;
                    }
                }
                if (operation === 'update') {
                    const groupId = this.getNodeParameter('groupId', i);
                    const updateFields = this.getNodeParameter('updateFields', i);
                    const body = {};
                    Object.assign(body, updateFields);
                    responseData = await GenericFunctions_1.googleApiRequest.call(this, 'PUT', `/directory/v1/groups/${groupId}`, body);
                }
            }
            if (resource === 'user') {
                if (operation === 'create') {
                    const domain = this.getNodeParameter('domain', i);
                    const firstName = this.getNodeParameter('firstName', i);
                    const lastName = this.getNodeParameter('lastName', i);
                    const password = this.getNodeParameter('password', i);
                    const username = this.getNodeParameter('username', i);
                    const makeAdmin = this.getNodeParameter('makeAdmin', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const body = {
                        name: {
                            familyName: lastName,
                            givenName: firstName,
                        },
                        password,
                        primaryEmail: `${username}@${domain}`,
                    };
                    Object.assign(body, additionalFields);
                    if (additionalFields.phoneUi) {
                        const phones = additionalFields.phoneUi.phoneValues;
                        body.phones = phones;
                        delete body.phoneUi;
                    }
                    if (additionalFields.emailUi) {
                        const emails = additionalFields.emailUi.emailValues;
                        body.emails = emails;
                        delete body.emailUi;
                    }
                    responseData = await GenericFunctions_1.googleApiRequest.call(this, 'POST', '/directory/v1/users', body, qs);
                    if (makeAdmin) {
                        await GenericFunctions_1.googleApiRequest.call(this, 'POST', `/directory/v1/users/${responseData.id}/makeAdmin`, { status: true });
                        responseData.isAdmin = true;
                    }
                }
                if (operation === 'delete') {
                    const userId = this.getNodeParameter('userId', i);
                    responseData = await GenericFunctions_1.googleApiRequest.call(this, 'DELETE', `/directory/v1/users/${userId}`, {});
                    responseData = { success: true };
                }
                if (operation === 'get') {
                    const userId = this.getNodeParameter('userId', i);
                    const projection = this.getNodeParameter('projection', i);
                    const options = this.getNodeParameter('options', i);
                    qs.projection = projection;
                    Object.assign(qs, options);
                    if (qs.customFieldMask) {
                        qs.customFieldMask = qs.customFieldMask.join(' ');
                    }
                    if (qs.projection === 'custom' && qs.customFieldMask === undefined) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'When projection is set to custom, the custom schemas field must be defined', { itemIndex: i });
                    }
                    responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/directory/v1/users/${userId}`, {}, qs);
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const projection = this.getNodeParameter('projection', i);
                    const options = this.getNodeParameter('options', i);
                    qs.projection = projection;
                    Object.assign(qs, options);
                    if (qs.customer === undefined) {
                        qs.customer = 'my_customer';
                    }
                    if (qs.customFieldMask) {
                        qs.customFieldMask = qs.customFieldMask.join(' ');
                    }
                    if (qs.projection === 'custom' && qs.customFieldMask === undefined) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'When projection is set to custom, the custom schemas field must be defined', { itemIndex: i });
                    }
                    if (returnAll) {
                        responseData = await GenericFunctions_1.googleApiRequestAllItems.call(this, 'users', 'GET', '/directory/v1/users', {}, qs);
                    }
                    else {
                        qs.maxResults = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', '/directory/v1/users', {}, qs);
                        responseData = responseData.users;
                    }
                }
                if (operation === 'update') {
                    const userId = this.getNodeParameter('userId', i);
                    const updateFields = this.getNodeParameter('updateFields', i);
                    const body = { name: {} };
                    Object.assign(body, updateFields);
                    if (updateFields.firstName) {
                        body.name.givenName = updateFields.firstName;
                        delete body.firstName;
                    }
                    if (updateFields.lastName) {
                        body.name.familyName = updateFields.lastName;
                        delete body.lastName;
                    }
                    if (Object.keys(body.name).length === 0) {
                        delete body.name;
                    }
                    if (updateFields.phoneUi) {
                        const phones = updateFields.phoneUi.phoneValues;
                        body.phones = phones;
                        delete body.phoneUi;
                    }
                    if (updateFields.emailUi) {
                        const emails = updateFields.emailUi.emailValues;
                        body.emails = emails;
                        delete body.emailUi;
                    }
                    responseData = await GenericFunctions_1.googleApiRequest.call(this, 'PUT', `/directory/v1/users/${userId}`, body, qs);
                }
            }
            const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
            returnData.push(...executionData);
        }
        return this.prepareOutputData(returnData);
    }
}
exports.GSuiteAdmin = GSuiteAdmin;
//# sourceMappingURL=GSuiteAdmin.node.js.map