"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleChat = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const descriptions_1 = require("./descriptions");
const GenericFunctions_1 = require("./GenericFunctions");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
class GoogleChat {
    constructor() {
        this.description = {
            displayName: 'Google Chat',
            name: 'googleChat',
            icon: 'file:googleChat.svg',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Google Chat API',
            defaults: {
                name: 'Google Chat',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'googleApi',
                    required: true,
                    testedBy: 'testGoogleTokenAuth',
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    required: true,
                    noDataExpression: true,
                    type: 'options',
                    options: [
                        {
                            name: 'Member',
                            value: 'member',
                        },
                        {
                            name: 'Message',
                            value: 'message',
                        },
                        {
                            name: 'Space',
                            value: 'space',
                        },
                    ],
                    default: 'message',
                },
                ...descriptions_1.memberOperations,
                ...descriptions_1.memberFields,
                ...descriptions_1.messageOperations,
                ...descriptions_1.messageFields,
                ...descriptions_1.spaceOperations,
                ...descriptions_1.spaceFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getSpaces() {
                    const returnData = [];
                    const spaces = await GenericFunctions_1.googleApiRequestAllItems.call(this, 'spaces', 'GET', '/v1/spaces');
                    for (const space of spaces) {
                        returnData.push({
                            name: space.displayName,
                            value: space.name,
                        });
                    }
                    return returnData;
                },
            },
            credentialTest: {
                async testGoogleTokenAuth(credential) {
                    const scopes = ['https://www.googleapis.com/auth/chat.bot'];
                    const now = (0, moment_timezone_1.default)().unix();
                    const email = credential.data.email.trim();
                    const privateKey = credential.data.privateKey.replace(/\\n/g, '\n').trim();
                    try {
                        const signature = jsonwebtoken_1.default.sign({
                            iss: email,
                            sub: credential.data.delegatedEmail || email,
                            scope: scopes.join(' '),
                            aud: 'https://oauth2.googleapis.com/token',
                            iat: now,
                            exp: now,
                        }, privateKey, {
                            algorithm: 'RS256',
                            header: {
                                kid: privateKey,
                                typ: 'JWT',
                                alg: 'RS256',
                            },
                        });
                        const options = {
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            method: 'POST',
                            form: {
                                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
                                assertion: signature,
                            },
                            uri: 'https://oauth2.googleapis.com/token',
                            json: true,
                        };
                        const response = await this.helpers.request(options);
                        if (!response.access_token) {
                            return {
                                status: 'Error',
                                message: JSON.stringify(response),
                            };
                        }
                    }
                    catch (err) {
                        return {
                            status: 'Error',
                            message: `${err.message}`,
                        };
                    }
                    return {
                        status: 'OK',
                        message: 'Connection successful!',
                    };
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'media') {
                    if (operation === 'download') {
                        const resourceName = this.getNodeParameter('resourceName', i);
                        const endpoint = `/v1/media/${resourceName}?alt=media`;
                        const encoding = null;
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', endpoint, undefined, undefined, undefined, undefined, encoding);
                        const newItem = {
                            json: items[i].json,
                            binary: {},
                        };
                        if (items[i].binary !== undefined) {
                            Object.assign(newItem.binary, items[i].binary);
                        }
                        items[i] = newItem;
                        const binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);
                        items[i].binary[binaryPropertyName] = await this.helpers.prepareBinaryData(responseData, endpoint);
                    }
                }
                else if (resource === 'space') {
                    if (operation === 'get') {
                        const spaceId = this.getNodeParameter('spaceId', i);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/v1/${spaceId}`);
                    }
                    else if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', 0);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.googleApiRequestAllItems.call(this, 'spaces', 'GET', '/v1/spaces');
                        }
                        else {
                            const limit = this.getNodeParameter('limit', i);
                            qs.pageSize = limit;
                            responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', '/v1/spaces', undefined, qs);
                            responseData = responseData.spaces;
                        }
                    }
                }
                else if (resource === 'member') {
                    if (operation === 'get') {
                        const memberId = this.getNodeParameter('memberId', i);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/v1/${memberId}`);
                    }
                    else if (operation === 'getAll') {
                        const spaceId = this.getNodeParameter('spaceId', i);
                        const returnAll = this.getNodeParameter('returnAll', 0);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.googleApiRequestAllItems.call(this, 'memberships', 'GET', `/v1/${spaceId}/members`, undefined, qs);
                        }
                        else {
                            const limit = this.getNodeParameter('limit', i);
                            qs.pageSize = limit;
                            responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/v1/${spaceId}/members`, undefined, qs);
                            responseData = responseData.memberships;
                        }
                    }
                }
                else if (resource === 'message') {
                    if (operation === 'create') {
                        const spaceId = this.getNodeParameter('spaceId', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (additionalFields.threadKey) {
                            qs.threadKey = additionalFields.threadKey;
                        }
                        if (additionalFields.requestId) {
                            qs.requestId = additionalFields.requestId;
                        }
                        let message = {};
                        const jsonParameters = this.getNodeParameter('jsonParameters', i);
                        if (jsonParameters) {
                            const messageJson = this.getNodeParameter('messageJson', i);
                            if (messageJson instanceof Object) {
                                message = messageJson;
                            }
                            else {
                                if ((0, GenericFunctions_1.validateJSON)(messageJson) !== undefined) {
                                    message = JSON.parse(messageJson);
                                }
                                else {
                                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Message (JSON) must be a valid json', { itemIndex: i });
                                }
                            }
                        }
                        else {
                            const messageUi = this.getNodeParameter('messageUi', i);
                            if (messageUi.text && messageUi.text !== '') {
                                message.text = messageUi.text;
                            }
                            else {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Message Text must be provided.', {
                                    itemIndex: i,
                                });
                            }
                        }
                        const body = {};
                        Object.assign(body, message);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'POST', `/v1/${spaceId}/messages`, body, qs);
                    }
                    else if (operation === 'delete') {
                        const messageId = this.getNodeParameter('messageId', i);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'DELETE', `/v1/${messageId}`);
                    }
                    else if (operation === 'get') {
                        const messageId = this.getNodeParameter('messageId', i);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/v1/${messageId}`);
                    }
                    else if (operation === 'update') {
                        const messageId = this.getNodeParameter('messageId', i);
                        let message = {};
                        const jsonParameters = this.getNodeParameter('jsonParameters', i);
                        if (jsonParameters) {
                            const updateFieldsJson = this.getNodeParameter('updateFieldsJson', i);
                            if (updateFieldsJson instanceof Object) {
                                message = updateFieldsJson;
                            }
                            else {
                                if ((0, GenericFunctions_1.validateJSON)(updateFieldsJson) !== undefined) {
                                    message = JSON.parse(updateFieldsJson);
                                }
                                else {
                                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Update Fields (JSON) must be a valid json', { itemIndex: i });
                                }
                            }
                        }
                        else {
                            const updateFieldsUi = this.getNodeParameter('updateFieldsUi', i);
                            if (updateFieldsUi.text) {
                                message.text = updateFieldsUi.text;
                            }
                        }
                        const body = {};
                        Object.assign(body, message);
                        let updateMask = '';
                        if (message.text) {
                            updateMask += 'text,';
                        }
                        if (message.cards) {
                            updateMask += 'cards,';
                        }
                        updateMask = updateMask.slice(0, -1);
                        qs.updateMask = updateMask;
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'PUT', `/v1/${messageId}`, body, qs);
                    }
                }
                else if (resource === 'attachment') {
                    if (operation === 'get') {
                        const attachmentName = this.getNodeParameter('attachmentName', i);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/v1/${attachmentName}`);
                    }
                }
                else if (resource === 'incomingWebhook') {
                    if (operation === 'create') {
                        const uri = this.getNodeParameter('incomingWebhookUrl', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (additionalFields.threadKey) {
                            qs.threadKey = additionalFields.threadKey;
                        }
                        let message = {};
                        const jsonParameters = this.getNodeParameter('jsonParameters', i);
                        if (jsonParameters) {
                            const messageJson = this.getNodeParameter('messageJson', i);
                            if (messageJson instanceof Object) {
                                message = messageJson;
                            }
                            else {
                                if ((0, GenericFunctions_1.validateJSON)(messageJson) !== undefined) {
                                    message = JSON.parse(messageJson);
                                }
                                else {
                                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Message (JSON) must be a valid json', { itemIndex: i });
                                }
                            }
                        }
                        else {
                            const messageUi = this.getNodeParameter('messageUi', i);
                            if (messageUi.text && messageUi.text !== '') {
                                message.text = messageUi.text;
                            }
                            else {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Message Text must be provided.', {
                                    itemIndex: i,
                                });
                            }
                        }
                        const body = {};
                        Object.assign(body, message);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'POST', '', body, qs, uri, true);
                    }
                }
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    if (operation === 'download') {
                        items[i].json = { error: error.message };
                    }
                    else {
                        const executionErrorData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray({ error: error.message }), { itemData: { item: i } });
                        returnData.push(...executionErrorData);
                    }
                    continue;
                }
                throw error;
            }
        }
        if (operation === 'download') {
            return this.prepareOutputData(items);
        }
        else {
            return this.prepareOutputData(returnData);
        }
    }
}
exports.GoogleChat = GoogleChat;
//# sourceMappingURL=GoogleChat.node.js.map