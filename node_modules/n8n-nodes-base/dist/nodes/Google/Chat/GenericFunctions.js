"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPagingParameters = exports.validateJSON = exports.googleApiRequestAllItems = exports.googleApiRequest = exports.getAccessToken = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
async function getAccessToken(credentials) {
    const scopes = ['https://www.googleapis.com/auth/chat.bot'];
    const now = (0, moment_timezone_1.default)().unix();
    credentials.email = credentials.email.trim();
    const privateKey = credentials.privateKey.replace(/\\n/g, '\n').trim();
    const signature = jsonwebtoken_1.default.sign({
        iss: credentials.email,
        sub: credentials.delegatedEmail || credentials.email,
        scope: scopes.join(' '),
        aud: 'https://oauth2.googleapis.com/token',
        iat: now,
        exp: now + 3600,
    }, privateKey, {
        algorithm: 'RS256',
        header: {
            kid: privateKey,
            typ: 'JWT',
            alg: 'RS256',
        },
    });
    const options = {
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        method: 'POST',
        form: {
            grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
            assertion: signature,
        },
        uri: 'https://oauth2.googleapis.com/token',
        json: true,
    };
    return this.helpers.request(options);
}
exports.getAccessToken = getAccessToken;
async function googleApiRequest(method, resource, body = {}, qs = {}, uri, noCredentials = false, encoding) {
    const options = {
        headers: {
            'Content-Type': 'application/json',
        },
        method,
        body,
        qs,
        uri: uri || `https://chat.googleapis.com${resource}`,
        json: true,
    };
    if (Object.keys(body).length === 0) {
        delete options.body;
    }
    if (encoding === null) {
        options.encoding = null;
    }
    let responseData;
    try {
        if (noCredentials) {
            responseData = await this.helpers.request(options);
        }
        else {
            const credentials = await this.getCredentials('googleApi');
            const { access_token } = await getAccessToken.call(this, credentials);
            options.headers.Authorization = `Bearer ${access_token}`;
            responseData = await this.helpers.request(options);
        }
    }
    catch (error) {
        if (error.code === 'ERR_OSSL_PEM_NO_START_LINE') {
            error.statusCode = '401';
        }
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
    if (Object.keys(responseData).length !== 0) {
        return responseData;
    }
    else {
        return { success: true };
    }
}
exports.googleApiRequest = googleApiRequest;
async function googleApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.pageSize = 100;
    do {
        responseData = await googleApiRequest.call(this, method, endpoint, body, query);
        query.pageToken = responseData.nextPageToken;
        returnData.push.apply(returnData, responseData[propertyName]);
    } while (responseData.nextPageToken !== undefined && responseData.nextPageToken !== '');
    return returnData;
}
exports.googleApiRequestAllItems = googleApiRequestAllItems;
function validateJSON(json) {
    let result;
    try {
        result = JSON.parse(json);
    }
    catch (exception) {
        result = undefined;
    }
    return result;
}
exports.validateJSON = validateJSON;
function getPagingParameters(resource, operation = 'getAll') {
    const pagingParameters = [
        {
            displayName: 'Return All',
            name: 'returnAll',
            type: 'boolean',
            displayOptions: {
                show: {
                    resource: [resource],
                    operation: [operation],
                },
            },
            default: false,
            description: 'Whether to return all results or only up to a given limit',
        },
        {
            displayName: 'Limit',
            name: 'limit',
            type: 'number',
            typeOptions: {
                maxValue: 1000,
            },
            displayOptions: {
                show: {
                    resource: [resource],
                    operation: [operation],
                    returnAll: [false],
                },
            },
            default: 100,
            description: 'Max number of results to return',
        },
    ];
    return pagingParameters;
}
exports.getPagingParameters = getPagingParameters;
//# sourceMappingURL=GenericFunctions.js.map