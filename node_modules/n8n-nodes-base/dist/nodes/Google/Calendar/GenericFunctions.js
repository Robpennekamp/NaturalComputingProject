"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimezones = exports.TIMEZONE_VALIDATION_REGEX = exports.getCalendars = exports.encodeURIComponentOnce = exports.googleApiRequestAllItems = exports.googleApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
async function googleApiRequest(method, resource, body = {}, qs = {}, uri, headers = {}) {
    const options = {
        headers: {
            'Content-Type': 'application/json',
        },
        method,
        body,
        qs,
        uri: uri || `https://www.googleapis.com${resource}`,
        json: true,
    };
    try {
        if (Object.keys(headers).length !== 0) {
            options.headers = Object.assign({}, options.headers, headers);
        }
        if (Object.keys(body).length === 0) {
            delete options.body;
        }
        return await this.helpers.requestOAuth2.call(this, 'googleCalendarOAuth2Api', options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.googleApiRequest = googleApiRequest;
async function googleApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.maxResults = 100;
    do {
        responseData = await googleApiRequest.call(this, method, endpoint, body, query);
        query.pageToken = responseData.nextPageToken;
        returnData.push.apply(returnData, responseData[propertyName]);
    } while (responseData.nextPageToken !== undefined && responseData.nextPageToken !== '');
    return returnData;
}
exports.googleApiRequestAllItems = googleApiRequestAllItems;
function encodeURIComponentOnce(uri) {
    return encodeURIComponent(decodeURIComponent(uri));
}
exports.encodeURIComponentOnce = encodeURIComponentOnce;
async function getCalendars(filter) {
    const calendars = (await googleApiRequestAllItems.call(this, 'items', 'GET', '/calendar/v3/users/me/calendarList'));
    const results = calendars
        .map((c) => ({
        name: c.summary,
        value: c.id,
    }))
        .filter((c) => {
        var _a;
        return !filter ||
            c.name.toLowerCase().includes(filter.toLowerCase()) ||
            ((_a = c.value) === null || _a === void 0 ? void 0 : _a.toString()) === filter;
    })
        .sort((a, b) => {
        if (a.name.toLowerCase() < b.name.toLowerCase())
            return -1;
        if (a.name.toLowerCase() > b.name.toLowerCase())
            return 1;
        return 0;
    });
    return { results };
}
exports.getCalendars = getCalendars;
exports.TIMEZONE_VALIDATION_REGEX = `(${moment_timezone_1.default.tz
    .names()
    .map((t) => t.replace('+', '\\+'))
    .join('|')})[ \t]*`;
async function getTimezones(filter) {
    const results = moment_timezone_1.default.tz
        .names()
        .map((timezone) => ({
        name: timezone,
        value: timezone,
    }))
        .filter((c) => {
        var _a;
        return !filter ||
            c.name.toLowerCase().includes(filter.toLowerCase()) ||
            ((_a = c.value) === null || _a === void 0 ? void 0 : _a.toString()) === filter;
    });
    return { results };
}
exports.getTimezones = getTimezones;
//# sourceMappingURL=GenericFunctions.js.map