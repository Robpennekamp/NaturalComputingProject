import type { IExecuteFunctions, IDataObject, INodeExecutionData, INodeListSearchItems, INodePropertyOptions } from 'n8n-workflow';
import type { GoogleSheet } from './GoogleSheet';
import type { RangeDetectionOptions, ResourceLocator, SheetRangeData } from './GoogleSheets.types';
export declare const untilSheetSelected: {
    sheetName: string[];
};
export declare function getSpreadsheetId(documentIdType: ResourceLocator, value: string): string;
export declare function getColumnName(colNumber: number): string;
export declare function getColumnNumber(colPosition: string): number;
export declare function hexToRgb(hex: string): {
    red: number;
    green: number;
    blue: number;
} | null;
export declare function addRowNumber(data: SheetRangeData, headerRow: number): SheetRangeData;
export declare function trimToFirstEmptyRow(data: SheetRangeData, includesRowNumber?: boolean): SheetRangeData;
export declare function removeEmptyRows(data: SheetRangeData, includesRowNumber?: boolean): import("./GoogleSheets.types").SheetDataRow[];
export declare function trimLeadingEmptyRows(data: SheetRangeData, includesRowNumber?: boolean, rowNumbersColumnName?: string): import("./GoogleSheets.types").SheetDataRow[];
export declare function removeEmptyColumns(data: SheetRangeData): (string | number)[][];
export declare function prepareSheetData(data: SheetRangeData, options: RangeDetectionOptions, addRowNumbersToData?: boolean): {
    data: SheetRangeData;
    headerRow: number;
    firstDataRow: number;
};
export declare function getRangeString(sheetName: string, options: RangeDetectionOptions): string;
export declare function getExistingSheetNames(sheet: GoogleSheet): Promise<(IDataObject | IDataObject[] | import("n8n-workflow").GenericValue | import("n8n-workflow").GenericValue[])[]>;
export declare function mapFields(this: IExecuteFunctions, inputSize: number): IDataObject[];
export declare function autoMapInputData(this: IExecuteFunctions, sheetNameWithRange: string, sheet: GoogleSheet, items: INodeExecutionData[], options: IDataObject): Promise<IDataObject[]>;
export declare function sortLoadOptions(data: INodePropertyOptions[] | INodeListSearchItems[]): (INodePropertyOptions | INodeListSearchItems)[];
