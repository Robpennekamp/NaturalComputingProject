"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiRequestAllItems = exports.apiRequest = exports.getAccessToken = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
async function getAccessToken(credentials) {
    const scopes = [
        'https://www.googleapis.com/auth/drive.file',
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive.metadata',
    ];
    const now = (0, moment_timezone_1.default)().unix();
    credentials.email = credentials.email.trim();
    const privateKey = credentials.privateKey.replace(/\\n/g, '\n').trim();
    const signature = jsonwebtoken_1.default.sign({
        iss: credentials.email,
        sub: credentials.delegatedEmail || credentials.email,
        scope: scopes.join(' '),
        aud: 'https://oauth2.googleapis.com/token',
        iat: now,
        exp: now + 3600,
    }, privateKey, {
        algorithm: 'RS256',
        header: {
            kid: privateKey,
            typ: 'JWT',
            alg: 'RS256',
        },
    });
    const options = {
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        method: 'POST',
        form: {
            grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
            assertion: signature,
        },
        uri: 'https://oauth2.googleapis.com/token',
        json: true,
    };
    return this.helpers.request(options);
}
exports.getAccessToken = getAccessToken;
async function apiRequest(method, resource, body = {}, qs = {}, uri, headers = {}, option = {}) {
    const authenticationMethod = this.getNodeParameter('authentication', 0, 'serviceAccount');
    const options = {
        headers: {
            'Content-Type': 'application/json',
        },
        method,
        body,
        qs,
        uri: uri || `https://sheets.googleapis.com${resource}`,
        json: true,
        ...option,
    };
    try {
        if (Object.keys(headers).length !== 0) {
            options.headers = Object.assign({}, options.headers, headers);
        }
        if (Object.keys(body).length === 0) {
            delete options.body;
        }
        if (authenticationMethod === 'serviceAccount') {
            const credentials = await this.getCredentials('googleApi');
            const { access_token } = await getAccessToken.call(this, credentials);
            options.headers.Authorization = `Bearer ${access_token}`;
            return await this.helpers.request(options);
        }
        else if (authenticationMethod === 'triggerOAuth2') {
            return await this.helpers.requestOAuth2.call(this, 'googleSheetsTriggerOAuth2Api', options);
        }
        else {
            return await this.helpers.requestOAuth2.call(this, 'googleSheetsOAuth2Api', options);
        }
    }
    catch (error) {
        if (error.code === 'ERR_OSSL_PEM_NO_START_LINE') {
            error.statusCode = '401';
        }
        if (error.message.includes('PERMISSION_DENIED')) {
            const message = `Missing permissions for Google Sheet, ${error.message}}`;
            const details = error.description ? ` Details of the error: ${error.description}.` : '';
            const description = `Please check that the account you're using has the right permissions. (If you're trying to modify the sheet, you'll need edit access.)${details}`;
            throw new n8n_workflow_1.NodeApiError(this.getNode(), error, { message, description });
        }
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.apiRequest = apiRequest;
async function apiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}, uri) {
    const returnData = [];
    let responseData;
    query.maxResults = 100;
    const url = uri ? uri : `https://sheets.googleapis.com${method}`;
    do {
        responseData = await apiRequest.call(this, method, endpoint, body, query, url);
        query.pageToken = responseData.nextPageToken;
        returnData.push.apply(returnData, responseData[propertyName]);
    } while (responseData.nextPageToken !== undefined && responseData.nextPageToken !== '');
    return returnData;
}
exports.apiRequestAllItems = apiRequestAllItems;
//# sourceMappingURL=index.js.map