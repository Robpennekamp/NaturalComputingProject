"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const GoogleSheets_utils_1 = require("../../helpers/GoogleSheets.utils");
const commonDescription_1 = require("./commonDescription");
exports.description = [
    {
        displayName: 'Data Mode',
        name: 'dataMode',
        type: 'options',
        options: [
            {
                name: 'Auto-Map Input Data to Columns',
                value: 'autoMapInputData',
                description: 'Use when node input properties match destination column names',
            },
            {
                name: 'Map Each Column Below',
                value: 'defineBelow',
                description: 'Set the value for each destination column',
            },
            {
                name: 'Nothing',
                value: 'nothing',
                description: 'Do not send anything',
            },
        ],
        displayOptions: {
            show: {
                resource: ['sheet'],
                operation: ['append'],
            },
            hide: {
                ...GoogleSheets_utils_1.untilSheetSelected,
            },
        },
        default: 'defineBelow',
        description: 'Whether to insert the input data this node receives in the new row',
    },
    {
        displayName: "In this mode, make sure the incoming data is named the same as the columns in your Sheet. (Use a 'set' node before this node to change it if required.)",
        name: 'autoMapNotice',
        type: 'notice',
        default: '',
        displayOptions: {
            show: {
                operation: ['append'],
                dataMode: ['autoMapInputData'],
            },
            hide: {
                ...GoogleSheets_utils_1.untilSheetSelected,
            },
        },
    },
    {
        displayName: 'Fields to Send',
        name: 'fieldsUi',
        placeholder: 'Add Field',
        type: 'fixedCollection',
        typeOptions: {
            multipleValueButtonText: 'Add Field to Send',
            multipleValues: true,
        },
        displayOptions: {
            show: {
                resource: ['sheet'],
                operation: ['append'],
                dataMode: ['defineBelow'],
            },
            hide: {
                ...GoogleSheets_utils_1.untilSheetSelected,
            },
        },
        default: {},
        options: [
            {
                displayName: 'Field',
                name: 'fieldValues',
                values: [
                    {
                        displayName: 'Field Name or ID',
                        name: 'fieldId',
                        type: 'options',
                        description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                        typeOptions: {
                            loadOptionsDependsOn: ['sheetName.value'],
                            loadOptionsMethod: 'getSheetHeaderRowAndSkipEmpty',
                        },
                        default: '',
                    },
                    {
                        displayName: 'Field Value',
                        name: 'fieldValue',
                        type: 'string',
                        default: '',
                    },
                ],
            },
        ],
    },
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                resource: ['sheet'],
                operation: ['append'],
            },
            hide: {
                ...GoogleSheets_utils_1.untilSheetSelected,
            },
        },
        options: [
            ...commonDescription_1.cellFormat,
            {
                displayName: 'Data Location on Sheet',
                name: 'locationDefine',
                type: 'fixedCollection',
                placeholder: 'Select Range',
                default: { values: {} },
                options: [
                    {
                        displayName: 'Values',
                        name: 'values',
                        values: [
                            {
                                displayName: 'Header Row',
                                name: 'headerRow',
                                type: 'number',
                                typeOptions: {
                                    minValue: 1,
                                },
                                default: 1,
                                description: 'Index of the row which contains the keys. Starts at 1. The incoming node data is matched to the keys for assignment. The matching is case sensitive.',
                            },
                        ],
                    },
                ],
            },
            ...commonDescription_1.handlingExtraData,
        ],
    },
];
async function execute(sheet, sheetName, sheetId) {
    var _a;
    const items = this.getInputData();
    const dataMode = this.getNodeParameter('dataMode', 0);
    if (!items.length || dataMode === 'nothing')
        return [];
    const options = this.getNodeParameter('options', 0, {});
    const locationDefine = (_a = options.locationDefine) === null || _a === void 0 ? void 0 : _a.values;
    let headerRow = 1;
    if (locationDefine === null || locationDefine === void 0 ? void 0 : locationDefine.headerRow) {
        headerRow = locationDefine.headerRow;
    }
    let setData = [];
    if (dataMode === 'autoMapInputData') {
        setData = await GoogleSheets_utils_1.autoMapInputData.call(this, sheetName, sheet, items, options);
    }
    else {
        setData = GoogleSheets_utils_1.mapFields.call(this, items.length);
    }
    if (setData.length === 0) {
        return [];
    }
    else {
        await sheet.appendEmptyRowsOrColumns(sheetId, 1, 0);
    }
    await sheet.appendSheetData(setData, sheetName, headerRow, options.cellFormat || 'RAW', false);
    return items;
}
exports.execute = execute;
//# sourceMappingURL=append.operation.js.map