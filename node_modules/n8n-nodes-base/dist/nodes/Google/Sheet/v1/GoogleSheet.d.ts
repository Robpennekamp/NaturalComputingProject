import type { IExecuteFunctions, ILoadOptionsFunctions, IDataObject } from 'n8n-workflow';
export interface ISheetOptions {
    scope: string[];
}
export interface IGoogleAuthCredentials {
    email: string;
    privateKey: string;
}
export interface ISheetUpdateData {
    range: string;
    values: string[][];
}
export interface ILookupValues {
    lookupColumn: string;
    lookupValue: string;
}
export interface IToDeleteRange {
    amount: number;
    startIndex: number;
    sheetId: number;
}
export interface IToDelete {
    [key: string]: IToDeleteRange[] | undefined;
    columns?: IToDeleteRange[];
    rows?: IToDeleteRange[];
}
export type ValueInputOption = 'RAW' | 'USER_ENTERED';
export type ValueRenderOption = 'FORMATTED_VALUE' | 'FORMULA' | 'UNFORMATTED_VALUE';
export declare class GoogleSheet {
    id: string;
    executeFunctions: IExecuteFunctions | ILoadOptionsFunctions;
    constructor(spreadsheetId: string, executeFunctions: IExecuteFunctions | ILoadOptionsFunctions, options?: ISheetOptions | undefined);
    encodeRange(range: string): string;
    clearData(range: string): Promise<object>;
    getData(range: string, valueRenderMode: ValueRenderOption): Promise<string[][] | undefined>;
    spreadsheetGetSheets(): Promise<any>;
    spreadsheetBatchUpdate(requests: IDataObject[]): Promise<any>;
    batchUpdate(updateData: ISheetUpdateData[], valueInputMode: ValueInputOption): Promise<any>;
    setData(range: string, data: string[][], valueInputMode: ValueInputOption): Promise<any>;
    appendData(range: string, data: string[][], valueInputMode: ValueInputOption): Promise<any>;
    structureData(inputData: string[][], startRow: number, keys: string[], addEmpty?: boolean): IDataObject[];
    structureArrayDataByColumn(inputData: string[][], keyRow: number, dataStartRow: number): IDataObject[];
    appendSheetData(inputData: IDataObject[], range: string, keyRowIndex: number, valueInputMode: ValueInputOption, usePathForKeyRow: boolean): Promise<string[][]>;
    getColumnWithOffset(startColumn: string, offset: number): string;
    updateSheetData(inputData: IDataObject[], indexKey: string, range: string, keyRowIndex: number, dataStartRowIndex: number, valueInputMode: ValueInputOption, valueRenderMode: ValueRenderOption, upsert?: boolean): Promise<string[][]>;
    lookupValues(inputData: string[][], keyRowIndex: number, dataStartRowIndex: number, lookupValues: ILookupValues[], returnAllMatches?: boolean): Promise<IDataObject[]>;
    convertStructuredDataToArray(inputData: IDataObject[], range: string, keyRowIndex: number, usePathForKeyRow: boolean): Promise<string[][]>;
}
