"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequestV3 = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("../GenericFunctions");
const utilities_1 = require("../../../utils/utilities");
function toText(data) {
    if (typeof data === 'object' && data !== null) {
        return JSON.stringify(data);
    }
    return data;
}
class HttpRequestV3 {
    constructor(baseDescription) {
        this.description = {
            ...baseDescription,
            subtitle: '={{$parameter["method"] + ": " + $parameter["url"]}}',
            version: [3, 4, 4.1],
            defaults: {
                name: 'HTTP Request',
                color: '#2200DD',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [],
            properties: [
                {
                    displayName: '',
                    name: 'curlImport',
                    type: 'curlImport',
                    default: '',
                },
                {
                    displayName: 'Method',
                    name: 'method',
                    type: 'options',
                    options: [
                        {
                            name: 'DELETE',
                            value: 'DELETE',
                        },
                        {
                            name: 'GET',
                            value: 'GET',
                        },
                        {
                            name: 'HEAD',
                            value: 'HEAD',
                        },
                        {
                            name: 'OPTIONS',
                            value: 'OPTIONS',
                        },
                        {
                            name: 'PATCH',
                            value: 'PATCH',
                        },
                        {
                            name: 'POST',
                            value: 'POST',
                        },
                        {
                            name: 'PUT',
                            value: 'PUT',
                        },
                    ],
                    default: 'GET',
                    description: 'The request method to use',
                },
                {
                    displayName: 'URL',
                    name: 'url',
                    type: 'string',
                    default: '',
                    placeholder: 'http://example.com/index.html',
                    description: 'The URL to make the request to',
                    required: true,
                },
                {
                    displayName: 'Authentication',
                    name: 'authentication',
                    noDataExpression: true,
                    type: 'options',
                    options: [
                        {
                            name: 'None',
                            value: 'none',
                        },
                        {
                            name: 'Predefined Credential Type',
                            value: 'predefinedCredentialType',
                            description: "We've already implemented auth for many services so that you don't have to set it up manually",
                        },
                        {
                            name: 'Generic Credential Type',
                            value: 'genericCredentialType',
                            description: 'Fully customizable. Choose between basic, header, OAuth2, etc.',
                        },
                    ],
                    default: 'none',
                },
                {
                    displayName: 'Credential Type',
                    name: 'nodeCredentialType',
                    type: 'credentialsSelect',
                    noDataExpression: true,
                    required: true,
                    default: '',
                    credentialTypes: ['extends:oAuth2Api', 'extends:oAuth1Api', 'has:authenticate'],
                    displayOptions: {
                        show: {
                            authentication: ['predefinedCredentialType'],
                        },
                    },
                },
                {
                    displayName: 'Make sure you have specified the scope(s) for the Service Account in the credential',
                    name: 'googleApiWarning',
                    type: 'notice',
                    default: '',
                    displayOptions: {
                        show: {
                            nodeCredentialType: ['googleApi'],
                        },
                    },
                },
                {
                    displayName: 'Generic Auth Type',
                    name: 'genericAuthType',
                    type: 'credentialsSelect',
                    required: true,
                    default: '',
                    credentialTypes: ['has:genericAuth'],
                    displayOptions: {
                        show: {
                            authentication: ['genericCredentialType'],
                        },
                    },
                },
                {
                    displayName: 'Send Query Parameters',
                    name: 'sendQuery',
                    type: 'boolean',
                    default: false,
                    noDataExpression: true,
                    description: 'Whether the request has query params or not',
                },
                {
                    displayName: 'Specify Query Parameters',
                    name: 'specifyQuery',
                    type: 'options',
                    displayOptions: {
                        show: {
                            sendQuery: [true],
                        },
                    },
                    options: [
                        {
                            name: 'Using Fields Below',
                            value: 'keypair',
                        },
                        {
                            name: 'Using JSON',
                            value: 'json',
                        },
                    ],
                    default: 'keypair',
                },
                {
                    displayName: 'Query Parameters',
                    name: 'queryParameters',
                    type: 'fixedCollection',
                    displayOptions: {
                        show: {
                            sendQuery: [true],
                            specifyQuery: ['keypair'],
                        },
                    },
                    typeOptions: {
                        multipleValues: true,
                    },
                    placeholder: 'Add Parameter',
                    default: {
                        parameters: [
                            {
                                name: '',
                                value: '',
                            },
                        ],
                    },
                    options: [
                        {
                            name: 'parameters',
                            displayName: 'Parameter',
                            values: [
                                {
                                    displayName: 'Name',
                                    name: 'name',
                                    type: 'string',
                                    default: '',
                                },
                                {
                                    displayName: 'Value',
                                    name: 'value',
                                    type: 'string',
                                    default: '',
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'JSON',
                    name: 'jsonQuery',
                    type: 'json',
                    displayOptions: {
                        show: {
                            sendQuery: [true],
                            specifyQuery: ['json'],
                        },
                    },
                    default: '',
                },
                {
                    displayName: 'Send Headers',
                    name: 'sendHeaders',
                    type: 'boolean',
                    default: false,
                    noDataExpression: true,
                    description: 'Whether the request has headers or not',
                },
                {
                    displayName: 'Specify Headers',
                    name: 'specifyHeaders',
                    type: 'options',
                    displayOptions: {
                        show: {
                            sendHeaders: [true],
                        },
                    },
                    options: [
                        {
                            name: 'Using Fields Below',
                            value: 'keypair',
                        },
                        {
                            name: 'Using JSON',
                            value: 'json',
                        },
                    ],
                    default: 'keypair',
                },
                {
                    displayName: 'Header Parameters',
                    name: 'headerParameters',
                    type: 'fixedCollection',
                    displayOptions: {
                        show: {
                            sendHeaders: [true],
                            specifyHeaders: ['keypair'],
                        },
                    },
                    typeOptions: {
                        multipleValues: true,
                    },
                    placeholder: 'Add Parameter',
                    default: {
                        parameters: [
                            {
                                name: '',
                                value: '',
                            },
                        ],
                    },
                    options: [
                        {
                            name: 'parameters',
                            displayName: 'Parameter',
                            values: [
                                {
                                    displayName: 'Name',
                                    name: 'name',
                                    type: 'string',
                                    default: '',
                                },
                                {
                                    displayName: 'Value',
                                    name: 'value',
                                    type: 'string',
                                    default: '',
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'JSON',
                    name: 'jsonHeaders',
                    type: 'json',
                    displayOptions: {
                        show: {
                            sendHeaders: [true],
                            specifyHeaders: ['json'],
                        },
                    },
                    default: '',
                },
                {
                    displayName: 'Send Body',
                    name: 'sendBody',
                    type: 'boolean',
                    default: false,
                    noDataExpression: true,
                    description: 'Whether the request has a body or not',
                },
                {
                    displayName: 'Body Content Type',
                    name: 'contentType',
                    type: 'options',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                        },
                    },
                    options: [
                        {
                            name: 'Form Urlencoded',
                            value: 'form-urlencoded',
                        },
                        {
                            name: 'Form-Data',
                            value: 'multipart-form-data',
                        },
                        {
                            name: 'JSON',
                            value: 'json',
                        },
                        {
                            name: 'n8n Binary Data',
                            value: 'binaryData',
                        },
                        {
                            name: 'Raw',
                            value: 'raw',
                        },
                    ],
                    default: 'json',
                    description: 'Content-Type to use to send body parameters',
                },
                {
                    displayName: 'Specify Body',
                    name: 'specifyBody',
                    type: 'options',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            contentType: ['json'],
                        },
                    },
                    options: [
                        {
                            name: 'Using Fields Below',
                            value: 'keypair',
                        },
                        {
                            name: 'Using JSON',
                            value: 'json',
                        },
                    ],
                    default: 'keypair',
                    description: 'The body can be specified using explicit fields (<code>keypair</code>) or using a JavaScript object (<code>json</code>)',
                },
                {
                    displayName: 'Body Parameters',
                    name: 'bodyParameters',
                    type: 'fixedCollection',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            contentType: ['json'],
                            specifyBody: ['keypair'],
                        },
                    },
                    typeOptions: {
                        multipleValues: true,
                    },
                    placeholder: 'Add Parameter',
                    default: {
                        parameters: [
                            {
                                name: '',
                                value: '',
                            },
                        ],
                    },
                    options: [
                        {
                            name: 'parameters',
                            displayName: 'Parameter',
                            values: [
                                {
                                    displayName: 'Name',
                                    name: 'name',
                                    type: 'string',
                                    default: '',
                                    description: 'ID of the field to set. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
                                },
                                {
                                    displayName: 'Value',
                                    name: 'value',
                                    type: 'string',
                                    default: '',
                                    description: 'Value of the field to set',
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'JSON',
                    name: 'jsonBody',
                    type: 'json',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            contentType: ['json'],
                            specifyBody: ['json'],
                        },
                    },
                    default: '',
                },
                {
                    displayName: 'Body Parameters',
                    name: 'bodyParameters',
                    type: 'fixedCollection',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            contentType: ['multipart-form-data'],
                        },
                    },
                    typeOptions: {
                        multipleValues: true,
                    },
                    placeholder: 'Add Parameter',
                    default: {
                        parameters: [
                            {
                                name: '',
                                value: '',
                            },
                        ],
                    },
                    options: [
                        {
                            name: 'parameters',
                            displayName: 'Parameter',
                            values: [
                                {
                                    displayName: 'Parameter Type',
                                    name: 'parameterType',
                                    type: 'options',
                                    options: [
                                        {
                                            name: 'n8n Binary Data',
                                            value: 'formBinaryData',
                                        },
                                        {
                                            name: 'Form Data',
                                            value: 'formData',
                                        },
                                    ],
                                    default: 'formData',
                                },
                                {
                                    displayName: 'Name',
                                    name: 'name',
                                    type: 'string',
                                    default: '',
                                    description: 'ID of the field to set. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
                                },
                                {
                                    displayName: 'Value',
                                    name: 'value',
                                    type: 'string',
                                    displayOptions: {
                                        show: {
                                            parameterType: ['formData'],
                                        },
                                    },
                                    default: '',
                                    description: 'Value of the field to set',
                                },
                                {
                                    displayName: 'Input Data Field Name',
                                    name: 'inputDataFieldName',
                                    type: 'string',
                                    noDataExpression: true,
                                    displayOptions: {
                                        show: {
                                            parameterType: ['formBinaryData'],
                                        },
                                    },
                                    default: '',
                                    description: 'The name of the incoming field containing the binary file data to be processed',
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'Specify Body',
                    name: 'specifyBody',
                    type: 'options',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            contentType: ['form-urlencoded'],
                        },
                    },
                    options: [
                        {
                            name: 'Using Fields Below',
                            value: 'keypair',
                        },
                        {
                            name: 'Using Single Field',
                            value: 'string',
                        },
                    ],
                    default: 'keypair',
                },
                {
                    displayName: 'Body Parameters',
                    name: 'bodyParameters',
                    type: 'fixedCollection',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            contentType: ['form-urlencoded'],
                            specifyBody: ['keypair'],
                        },
                    },
                    typeOptions: {
                        multipleValues: true,
                    },
                    placeholder: 'Add Parameter',
                    default: {
                        parameters: [
                            {
                                name: '',
                                value: '',
                            },
                        ],
                    },
                    options: [
                        {
                            name: 'parameters',
                            displayName: 'Parameter',
                            values: [
                                {
                                    displayName: 'Name',
                                    name: 'name',
                                    type: 'string',
                                    default: '',
                                    description: 'ID of the field to set. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
                                },
                                {
                                    displayName: 'Value',
                                    name: 'value',
                                    type: 'string',
                                    default: '',
                                    description: 'Value of the field to set',
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'Body',
                    name: 'body',
                    type: 'string',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            specifyBody: ['string'],
                        },
                    },
                    default: '',
                    placeholder: 'field1=value1&field2=value2',
                },
                {
                    displayName: 'Input Data Field Name',
                    name: 'inputDataFieldName',
                    type: 'string',
                    noDataExpression: true,
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            contentType: ['binaryData'],
                        },
                    },
                    default: '',
                    description: 'The name of the incoming field containing the binary file data to be processed',
                },
                {
                    displayName: 'Content Type',
                    name: 'rawContentType',
                    type: 'string',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            contentType: ['raw'],
                        },
                    },
                    default: '',
                    placeholder: 'text/html',
                },
                {
                    displayName: 'Body',
                    name: 'body',
                    type: 'string',
                    displayOptions: {
                        show: {
                            sendBody: [true],
                            contentType: ['raw'],
                        },
                    },
                    default: '',
                    placeholder: '',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'Batching',
                            name: 'batching',
                            placeholder: 'Add Batching',
                            type: 'fixedCollection',
                            typeOptions: {
                                multipleValues: false,
                            },
                            default: {
                                batch: {},
                            },
                            options: [
                                {
                                    displayName: 'Batching',
                                    name: 'batch',
                                    values: [
                                        {
                                            displayName: 'Items per Batch',
                                            name: 'batchSize',
                                            type: 'number',
                                            typeOptions: {
                                                minValue: -1,
                                            },
                                            default: 50,
                                            description: 'Input will be split in batches to throttle requests. -1 for disabled. 0 will be treated as 1.',
                                        },
                                        {
                                            displayName: 'Batch Interval (ms)',
                                            name: 'batchInterval',
                                            type: 'number',
                                            typeOptions: {
                                                minValue: 0,
                                            },
                                            default: 1000,
                                            description: 'Time (in milliseconds) between each batch of requests. 0 for disabled.',
                                        },
                                    ],
                                },
                            ],
                        },
                        {
                            displayName: 'Ignore SSL Issues',
                            name: 'allowUnauthorizedCerts',
                            type: 'boolean',
                            noDataExpression: true,
                            default: false,
                            description: 'Whether to download the response even if SSL certificate validation is not possible',
                        },
                        {
                            displayName: 'Array Format in Query Parameters',
                            name: 'queryParameterArrays',
                            type: 'options',
                            displayOptions: {
                                show: {
                                    '/sendQuery': [true],
                                },
                            },
                            options: [
                                {
                                    name: 'No Brackets',
                                    value: 'repeat',
                                    description: 'e.g. foo=bar&foo=qux',
                                },
                                {
                                    name: 'Brackets Only',
                                    value: 'brackets',
                                    description: 'e.g. foo[]=bar&foo[]=qux',
                                },
                                {
                                    name: 'Brackets with Indices',
                                    value: 'indices',
                                    description: 'e.g. foo[0]=bar&foo[1]=qux',
                                },
                            ],
                            default: 'brackets',
                        },
                        {
                            displayName: 'Redirects',
                            name: 'redirect',
                            placeholder: 'Add Redirect',
                            type: 'fixedCollection',
                            typeOptions: {
                                multipleValues: false,
                            },
                            default: { redirect: {} },
                            options: [
                                {
                                    displayName: 'Redirect',
                                    name: 'redirect',
                                    values: [
                                        {
                                            displayName: 'Follow Redirects',
                                            name: 'followRedirects',
                                            type: 'boolean',
                                            default: false,
                                            noDataExpression: true,
                                            description: 'Whether to follow all redirects',
                                        },
                                        {
                                            displayName: 'Max Redirects',
                                            name: 'maxRedirects',
                                            type: 'number',
                                            displayOptions: {
                                                show: {
                                                    followRedirects: [true],
                                                },
                                            },
                                            default: 21,
                                            description: 'Max number of redirects to follow',
                                        },
                                    ],
                                },
                            ],
                            displayOptions: {
                                show: {
                                    '@version': [1, 2, 3],
                                },
                            },
                        },
                        {
                            displayName: 'Redirects',
                            name: 'redirect',
                            placeholder: 'Add Redirect',
                            type: 'fixedCollection',
                            typeOptions: {
                                multipleValues: false,
                            },
                            default: {
                                redirect: {},
                            },
                            options: [
                                {
                                    displayName: 'Redirect',
                                    name: 'redirect',
                                    values: [
                                        {
                                            displayName: 'Follow Redirects',
                                            name: 'followRedirects',
                                            type: 'boolean',
                                            default: true,
                                            noDataExpression: true,
                                            description: 'Whether to follow all redirects',
                                        },
                                        {
                                            displayName: 'Max Redirects',
                                            name: 'maxRedirects',
                                            type: 'number',
                                            displayOptions: {
                                                show: {
                                                    followRedirects: [true],
                                                },
                                            },
                                            default: 21,
                                            description: 'Max number of redirects to follow',
                                        },
                                    ],
                                },
                            ],
                            displayOptions: {
                                hide: {
                                    '@version': [1, 2, 3],
                                },
                            },
                        },
                        {
                            displayName: 'Response',
                            name: 'response',
                            placeholder: 'Add response',
                            type: 'fixedCollection',
                            typeOptions: {
                                multipleValues: false,
                            },
                            default: {
                                response: {},
                            },
                            options: [
                                {
                                    displayName: 'Response',
                                    name: 'response',
                                    values: [
                                        {
                                            displayName: 'Include Response Headers and Status',
                                            name: 'fullResponse',
                                            type: 'boolean',
                                            default: false,
                                            description: 'Whether to return the full response (headers and response status code) data instead of only the body',
                                        },
                                        {
                                            displayName: 'Never Error',
                                            name: 'neverError',
                                            type: 'boolean',
                                            default: false,
                                            description: 'Whether to succeeds also when status code is not 2xx',
                                        },
                                        {
                                            displayName: 'Response Format',
                                            name: 'responseFormat',
                                            type: 'options',
                                            noDataExpression: true,
                                            options: [
                                                {
                                                    name: 'Autodetect',
                                                    value: 'autodetect',
                                                },
                                                {
                                                    name: 'File',
                                                    value: 'file',
                                                },
                                                {
                                                    name: 'JSON',
                                                    value: 'json',
                                                },
                                                {
                                                    name: 'Text',
                                                    value: 'text',
                                                },
                                            ],
                                            default: 'autodetect',
                                            description: 'The format in which the data gets returned from the URL',
                                        },
                                        {
                                            displayName: 'Put Output in Field',
                                            name: 'outputPropertyName',
                                            type: 'string',
                                            default: 'data',
                                            required: true,
                                            displayOptions: {
                                                show: {
                                                    responseFormat: ['file', 'text'],
                                                },
                                            },
                                            description: 'Name of the binary property to which to write the data of the read file',
                                        },
                                    ],
                                },
                            ],
                        },
                        {
                            displayName: 'Proxy',
                            name: 'proxy',
                            type: 'string',
                            default: '',
                            placeholder: 'e.g. http://myproxy:3128',
                            description: 'HTTP proxy to use',
                        },
                        {
                            displayName: 'Timeout',
                            name: 'timeout',
                            type: 'number',
                            typeOptions: {
                                minValue: 1,
                            },
                            default: 10000,
                            description: 'Time in ms to wait for the server to send response headers (and start the response body) before aborting the request',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const items = this.getInputData();
        const nodeVersion = this.getNode().typeVersion;
        const fullResponseProperties = ['body', 'headers', 'statusCode', 'statusMessage'];
        let authentication;
        try {
            authentication = this.getNodeParameter('authentication', 0);
        }
        catch { }
        let httpBasicAuth;
        let httpDigestAuth;
        let httpHeaderAuth;
        let httpQueryAuth;
        let oAuth1Api;
        let oAuth2Api;
        let nodeCredentialType;
        if (authentication === 'genericCredentialType') {
            const genericAuthType = this.getNodeParameter('genericAuthType', 0);
            if (genericAuthType === 'httpBasicAuth') {
                try {
                    httpBasicAuth = await this.getCredentials('httpBasicAuth');
                }
                catch { }
            }
            else if (genericAuthType === 'httpDigestAuth') {
                try {
                    httpDigestAuth = await this.getCredentials('httpDigestAuth');
                }
                catch { }
            }
            else if (genericAuthType === 'httpHeaderAuth') {
                try {
                    httpHeaderAuth = await this.getCredentials('httpHeaderAuth');
                }
                catch { }
            }
            else if (genericAuthType === 'httpQueryAuth') {
                try {
                    httpQueryAuth = await this.getCredentials('httpQueryAuth');
                }
                catch { }
            }
            else if (genericAuthType === 'oAuth1Api') {
                try {
                    oAuth1Api = await this.getCredentials('oAuth1Api');
                }
                catch { }
            }
            else if (genericAuthType === 'oAuth2Api') {
                try {
                    oAuth2Api = await this.getCredentials('oAuth2Api');
                }
                catch { }
            }
        }
        else if (authentication === 'predefinedCredentialType') {
            try {
                nodeCredentialType = this.getNodeParameter('nodeCredentialType', 0);
            }
            catch { }
        }
        let requestOptions = {
            uri: '',
        };
        let returnItems = [];
        const requestPromises = [];
        let fullResponse = false;
        let autoDetectResponseFormat = false;
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            const requestMethod = this.getNodeParameter('method', itemIndex);
            const sendQuery = this.getNodeParameter('sendQuery', itemIndex, false);
            const queryParameters = this.getNodeParameter('queryParameters.parameters', itemIndex, []);
            const specifyQuery = this.getNodeParameter('specifyQuery', itemIndex, 'keypair');
            const jsonQueryParameter = this.getNodeParameter('jsonQuery', itemIndex, '');
            const sendBody = this.getNodeParameter('sendBody', itemIndex, false);
            const bodyContentType = this.getNodeParameter('contentType', itemIndex, '');
            const specifyBody = this.getNodeParameter('specifyBody', itemIndex, '');
            const bodyParameters = this.getNodeParameter('bodyParameters.parameters', itemIndex, []);
            const jsonBodyParameter = this.getNodeParameter('jsonBody', itemIndex, '');
            const body = this.getNodeParameter('body', itemIndex, '');
            const sendHeaders = this.getNodeParameter('sendHeaders', itemIndex, false);
            const headerParameters = this.getNodeParameter('headerParameters.parameters', itemIndex, []);
            const specifyHeaders = this.getNodeParameter('specifyHeaders', itemIndex, 'keypair');
            const jsonHeadersParameter = this.getNodeParameter('jsonHeaders', itemIndex, '');
            const { redirect, batching, proxy, timeout, allowUnauthorizedCerts, queryParameterArrays, response, } = this.getNodeParameter('options', itemIndex, {});
            const url = this.getNodeParameter('url', itemIndex);
            const responseFormat = ((_a = response === null || response === void 0 ? void 0 : response.response) === null || _a === void 0 ? void 0 : _a.responseFormat) || 'autodetect';
            fullResponse = ((_b = response === null || response === void 0 ? void 0 : response.response) === null || _b === void 0 ? void 0 : _b.fullResponse) || false;
            autoDetectResponseFormat = responseFormat === 'autodetect';
            const batchSize = ((_c = batching === null || batching === void 0 ? void 0 : batching.batch) === null || _c === void 0 ? void 0 : _c.batchSize) > 0 ? (_d = batching === null || batching === void 0 ? void 0 : batching.batch) === null || _d === void 0 ? void 0 : _d.batchSize : 1;
            const batchInterval = batching === null || batching === void 0 ? void 0 : batching.batch.batchInterval;
            if (itemIndex > 0 && batchSize >= 0 && batchInterval > 0) {
                if (itemIndex % batchSize === 0) {
                    await (0, n8n_workflow_1.sleep)(batchInterval);
                }
            }
            requestOptions = {
                headers: {},
                method: requestMethod,
                uri: url,
                gzip: true,
                rejectUnauthorized: !allowUnauthorizedCerts || false,
                followRedirect: false,
            };
            if (autoDetectResponseFormat || fullResponse) {
                requestOptions.resolveWithFullResponse = true;
            }
            if (requestOptions.method !== 'GET' && nodeVersion >= 4.1) {
                requestOptions = { ...requestOptions, followAllRedirects: false };
            }
            const defaultRedirect = nodeVersion >= 4 && redirect === undefined;
            if (((_e = redirect === null || redirect === void 0 ? void 0 : redirect.redirect) === null || _e === void 0 ? void 0 : _e.followRedirects) || defaultRedirect) {
                requestOptions.followRedirect = true;
                requestOptions.followAllRedirects = true;
            }
            if (((_f = redirect === null || redirect === void 0 ? void 0 : redirect.redirect) === null || _f === void 0 ? void 0 : _f.maxRedirects) || defaultRedirect) {
                requestOptions.maxRedirects = (_g = redirect === null || redirect === void 0 ? void 0 : redirect.redirect) === null || _g === void 0 ? void 0 : _g.maxRedirects;
            }
            if ((_h = response === null || response === void 0 ? void 0 : response.response) === null || _h === void 0 ? void 0 : _h.neverError) {
                requestOptions.simple = false;
            }
            if (proxy) {
                requestOptions.proxy = proxy;
            }
            if (timeout) {
                requestOptions.timeout = timeout;
            }
            else {
                requestOptions.timeout = 3600000;
            }
            if (sendQuery && queryParameterArrays) {
                Object.assign(requestOptions, {
                    qsStringifyOptions: { arrayFormat: queryParameterArrays },
                });
            }
            const parametersToKeyValue = (accumulator, cur) => {
                if (cur.parameterType === 'formBinaryData') {
                    if (!cur.inputDataFieldName)
                        return accumulator;
                    const binaryData = this.helpers.assertBinaryData(itemIndex, cur.inputDataFieldName);
                    let uploadData;
                    const itemBinaryData = items[itemIndex].binary[cur.inputDataFieldName];
                    if (itemBinaryData.id) {
                        uploadData = this.helpers.getBinaryStream(itemBinaryData.id);
                    }
                    else {
                        uploadData = Buffer.from(itemBinaryData.data, n8n_workflow_1.BINARY_ENCODING);
                    }
                    accumulator[cur.name] = {
                        value: uploadData,
                        options: {
                            filename: binaryData.fileName,
                            contentType: binaryData.mimeType,
                        },
                    };
                    return accumulator;
                }
                accumulator[cur.name] = cur.value;
                return accumulator;
            };
            if (sendBody && bodyParameters) {
                if (specifyBody === 'keypair' || bodyContentType === 'multipart-form-data') {
                    requestOptions.body = (0, GenericFunctions_1.prepareRequestBody)(bodyParameters, bodyContentType, nodeVersion, parametersToKeyValue);
                }
                else if (specifyBody === 'json') {
                    if (typeof jsonBodyParameter !== 'object' && jsonBodyParameter !== null) {
                        try {
                            JSON.parse(jsonBodyParameter);
                        }
                        catch {
                            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'JSON parameter need to be an valid JSON', {
                                itemIndex,
                            });
                        }
                        requestOptions.body = (0, n8n_workflow_1.jsonParse)(jsonBodyParameter);
                    }
                    else {
                        requestOptions.body = jsonBodyParameter;
                    }
                }
                else if (specifyBody === 'string') {
                    requestOptions.body = Object.fromEntries(new URLSearchParams(body));
                }
            }
            if (sendBody && ['PATCH', 'POST', 'PUT', 'GET'].includes(requestMethod)) {
                if (bodyContentType === 'multipart-form-data') {
                    requestOptions.formData = requestOptions.body;
                    delete requestOptions.body;
                }
                else if (bodyContentType === 'form-urlencoded') {
                    requestOptions.form = requestOptions.body;
                    delete requestOptions.body;
                }
                else if (bodyContentType === 'binaryData') {
                    const inputDataFieldName = this.getNodeParameter('inputDataFieldName', itemIndex);
                    let uploadData;
                    let contentLength;
                    const itemBinaryData = this.helpers.assertBinaryData(itemIndex, inputDataFieldName);
                    if (itemBinaryData.id) {
                        uploadData = this.helpers.getBinaryStream(itemBinaryData.id);
                        const metadata = await this.helpers.getBinaryMetadata(itemBinaryData.id);
                        contentLength = metadata.fileSize;
                    }
                    else {
                        uploadData = Buffer.from(itemBinaryData.data, n8n_workflow_1.BINARY_ENCODING);
                        contentLength = uploadData.length;
                    }
                    requestOptions.body = uploadData;
                    requestOptions.headers = {
                        ...requestOptions.headers,
                        'content-length': contentLength,
                        'content-type': (_j = itemBinaryData.mimeType) !== null && _j !== void 0 ? _j : 'application/octet-stream',
                    };
                }
                else if (bodyContentType === 'raw') {
                    requestOptions.body = body;
                }
            }
            if (sendQuery && queryParameters) {
                if (specifyQuery === 'keypair') {
                    requestOptions.qs = queryParameters.reduce(parametersToKeyValue, {});
                }
                else if (specifyQuery === 'json') {
                    try {
                        JSON.parse(jsonQueryParameter);
                    }
                    catch {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'JSON parameter need to be an valid JSON', {
                            itemIndex,
                        });
                    }
                    requestOptions.qs = (0, n8n_workflow_1.jsonParse)(jsonQueryParameter);
                }
            }
            if (sendHeaders && headerParameters) {
                let additionalHeaders = {};
                if (specifyHeaders === 'keypair') {
                    additionalHeaders = headerParameters.reduce(parametersToKeyValue, {});
                }
                else if (specifyHeaders === 'json') {
                    try {
                        JSON.parse(jsonHeadersParameter);
                    }
                    catch {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'JSON parameter need to be an valid JSON', {
                            itemIndex,
                        });
                    }
                    additionalHeaders = (0, n8n_workflow_1.jsonParse)(jsonHeadersParameter);
                }
                requestOptions.headers = {
                    ...requestOptions.headers,
                    ...(0, utilities_1.keysToLowercase)(additionalHeaders),
                };
            }
            if (autoDetectResponseFormat || responseFormat === 'file') {
                requestOptions.encoding = null;
                requestOptions.json = false;
                requestOptions.useStream = true;
            }
            else if (bodyContentType === 'raw') {
                requestOptions.json = false;
                requestOptions.useStream = true;
            }
            else {
                requestOptions.json = true;
            }
            if (bodyContentType === 'raw') {
                if (requestOptions.headers === undefined) {
                    requestOptions.headers = {};
                }
                const rawContentType = this.getNodeParameter('rawContentType', itemIndex);
                requestOptions.headers['content-type'] = rawContentType;
            }
            const authDataKeys = {};
            if (httpBasicAuth !== undefined) {
                requestOptions.auth = {
                    user: httpBasicAuth.user,
                    pass: httpBasicAuth.password,
                };
                authDataKeys.auth = ['pass'];
            }
            if (httpHeaderAuth !== undefined) {
                requestOptions.headers[httpHeaderAuth.name] = httpHeaderAuth.value;
                authDataKeys.headers = [httpHeaderAuth.name];
            }
            if (httpQueryAuth !== undefined) {
                if (!requestOptions.qs) {
                    requestOptions.qs = {};
                }
                requestOptions.qs[httpQueryAuth.name] = httpQueryAuth.value;
                authDataKeys.qs = [httpQueryAuth.name];
            }
            if (httpDigestAuth !== undefined) {
                requestOptions.auth = {
                    user: httpDigestAuth.user,
                    pass: httpDigestAuth.password,
                    sendImmediately: false,
                };
                authDataKeys.auth = ['pass'];
            }
            if (requestOptions.headers.accept === undefined) {
                if (responseFormat === 'json') {
                    requestOptions.headers.accept = 'application/json,text/*;q=0.99';
                }
                else if (responseFormat === 'text') {
                    requestOptions.headers.accept =
                        'application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, */*;q=0.1';
                }
                else {
                    requestOptions.headers.accept =
                        'application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7';
                }
            }
            try {
                this.sendMessageToUI((0, GenericFunctions_1.sanitizeUiMessage)(requestOptions, authDataKeys));
            }
            catch (e) { }
            if (authentication === 'genericCredentialType' || authentication === 'none') {
                if (oAuth1Api) {
                    const requestOAuth1 = this.helpers.requestOAuth1.call(this, 'oAuth1Api', requestOptions);
                    requestOAuth1.catch(() => { });
                    requestPromises.push(requestOAuth1);
                }
                else if (oAuth2Api) {
                    const requestOAuth2 = this.helpers.requestOAuth2.call(this, 'oAuth2Api', requestOptions, {
                        tokenType: 'Bearer',
                    });
                    requestOAuth2.catch(() => { });
                    requestPromises.push(requestOAuth2);
                }
                else {
                    const request = this.helpers.request(requestOptions);
                    request.catch(() => { });
                    requestPromises.push(request);
                }
            }
            else if (authentication === 'predefinedCredentialType' && nodeCredentialType) {
                const additionalOAuth2Options = (0, GenericFunctions_1.getOAuth2AdditionalParameters)(nodeCredentialType);
                const requestWithAuthentication = this.helpers.requestWithAuthentication.call(this, nodeCredentialType, requestOptions, additionalOAuth2Options && { oauth2: additionalOAuth2Options });
                requestWithAuthentication.catch(() => { });
                requestPromises.push(requestWithAuthentication);
            }
        }
        const promisesResponses = await Promise.allSettled(requestPromises);
        let response;
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            response = promisesResponses.shift();
            if (response.status !== 'fulfilled') {
                if (!this.continueOnFail()) {
                    if (autoDetectResponseFormat && response.reason.error instanceof Buffer) {
                        response.reason.error = Buffer.from(response.reason.error).toString();
                    }
                    throw new n8n_workflow_1.NodeApiError(this.getNode(), response, { itemIndex });
                }
                else {
                    returnItems.push({
                        json: {
                            error: response.reason,
                        },
                        pairedItem: {
                            item: itemIndex,
                        },
                    });
                    continue;
                }
            }
            response = response.value;
            const url = this.getNodeParameter('url', itemIndex);
            let responseFormat = this.getNodeParameter('options.response.response.responseFormat', 0, 'autodetect');
            fullResponse = this.getNodeParameter('options.response.response.fullResponse', 0, false);
            if (autoDetectResponseFormat) {
                const responseContentType = (_k = response.headers['content-type']) !== null && _k !== void 0 ? _k : '';
                if (responseContentType.includes('application/json')) {
                    responseFormat = 'json';
                    const neverError = this.getNodeParameter('options.response.response.neverError', 0, false);
                    const data = await this.helpers
                        .binaryToBuffer(response.body)
                        .then((body) => body.toString());
                    response.body = (0, n8n_workflow_1.jsonParse)(data, {
                        ...(neverError
                            ? { fallbackValue: {} }
                            : { errorMessage: 'Invalid JSON in response body' }),
                    });
                }
                else if (GenericFunctions_1.binaryContentTypes.some((e) => responseContentType.includes(e))) {
                    responseFormat = 'file';
                }
                else {
                    responseFormat = 'text';
                    const data = await this.helpers
                        .binaryToBuffer(response.body)
                        .then((body) => body.toString());
                    response.body = !data ? undefined : data;
                }
            }
            if (autoDetectResponseFormat && !fullResponse) {
                delete response.headers;
                delete response.statusCode;
                delete response.statusMessage;
                response = response.body;
                requestOptions.resolveWithFullResponse = false;
            }
            if (responseFormat === 'file') {
                const outputPropertyName = this.getNodeParameter('options.response.response.outputPropertyName', 0, 'data');
                const newItem = {
                    json: {},
                    binary: {},
                    pairedItem: {
                        item: itemIndex,
                    },
                };
                if (items[itemIndex].binary !== undefined) {
                    Object.assign(newItem.binary, items[itemIndex].binary);
                }
                const fileName = url.split('/').pop();
                if (fullResponse) {
                    const returnItem = {};
                    for (const property of fullResponseProperties) {
                        if (property === 'body') {
                            continue;
                        }
                        returnItem[property] = response[property];
                    }
                    newItem.json = returnItem;
                    newItem.binary[outputPropertyName] = await this.helpers.prepareBinaryData(response.body, fileName);
                }
                else {
                    newItem.json = items[itemIndex].json;
                    newItem.binary[outputPropertyName] = await this.helpers.prepareBinaryData(response, fileName);
                }
                returnItems.push(newItem);
            }
            else if (responseFormat === 'text') {
                const outputPropertyName = this.getNodeParameter('options.response.response.outputPropertyName', 0, 'data');
                if (fullResponse) {
                    const returnItem = {};
                    for (const property of fullResponseProperties) {
                        if (property === 'body') {
                            returnItem[outputPropertyName] = toText(response[property]);
                            continue;
                        }
                        returnItem[property] = response[property];
                    }
                    returnItems.push({
                        json: returnItem,
                        pairedItem: {
                            item: itemIndex,
                        },
                    });
                }
                else {
                    returnItems.push({
                        json: {
                            [outputPropertyName]: toText(response),
                        },
                        pairedItem: {
                            item: itemIndex,
                        },
                    });
                }
            }
            else {
                if (requestOptions.resolveWithFullResponse === true) {
                    const returnItem = {};
                    for (const property of fullResponseProperties) {
                        returnItem[property] = response[property];
                    }
                    if (responseFormat === 'json' && typeof returnItem.body === 'string') {
                        try {
                            returnItem.body = JSON.parse(returnItem.body);
                        }
                        catch (error) {
                            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Response body is not valid JSON. Change "Response Format" to "Text"', { itemIndex });
                        }
                    }
                    returnItems.push({
                        json: returnItem,
                        pairedItem: {
                            item: itemIndex,
                        },
                    });
                }
                else {
                    if (responseFormat === 'json' && typeof response === 'string') {
                        try {
                            response = JSON.parse(response);
                        }
                        catch (error) {
                            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Response body is not valid JSON. Change "Response Format" to "Text"', { itemIndex });
                        }
                    }
                    if (Array.isArray(response)) {
                        response.forEach((item) => returnItems.push({
                            json: item,
                            pairedItem: {
                                item: itemIndex,
                            },
                        }));
                    }
                    else {
                        returnItems.push({
                            json: response,
                            pairedItem: {
                                item: itemIndex,
                            },
                        });
                    }
                }
            }
        }
        returnItems = returnItems.map(GenericFunctions_1.replaceNullValues);
        return this.prepareOutputData(returnItems);
    }
}
exports.HttpRequestV3 = HttpRequestV3;
//# sourceMappingURL=HttpRequestV3.node.js.map