"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Linear = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const IssueDescription_1 = require("./IssueDescription");
const Queries_1 = require("./Queries");
class Linear {
    constructor() {
        this.description = {
            displayName: 'Linear',
            name: 'linear',
            icon: 'file:linear.svg',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Linear API',
            defaults: {
                name: 'Linear',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'linearApi',
                    required: true,
                    testedBy: 'linearApiTest',
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Issue',
                            value: 'issue',
                        },
                    ],
                    default: 'issue',
                },
                ...IssueDescription_1.issueOperations,
                ...IssueDescription_1.issueFields,
            ],
        };
        this.methods = {
            credentialTest: {
                async linearApiTest(credential) {
                    try {
                        await GenericFunctions_1.validateCredentials.call(this, credential.data);
                    }
                    catch (error) {
                        const { error: err } = error;
                        const errors = err.errors;
                        const authenticationError = Boolean(errors.filter((e) => e.extensions.code === 'AUTHENTICATION_ERROR').length);
                        if (authenticationError) {
                            return {
                                status: 'Error',
                                message: 'The security token included in the request is invalid',
                            };
                        }
                    }
                    return {
                        status: 'OK',
                        message: 'Connection successful!',
                    };
                },
            },
            loadOptions: {
                async getTeams() {
                    const returnData = [];
                    const body = {
                        query: Queries_1.query.getTeams(),
                        variables: {
                            $first: 10,
                        },
                    };
                    const teams = await GenericFunctions_1.linearApiRequestAllItems.call(this, 'data.teams', body);
                    for (const team of teams) {
                        returnData.push({
                            name: team.name,
                            value: team.id,
                        });
                    }
                    return returnData;
                },
                async getUsers() {
                    const returnData = [];
                    const body = {
                        query: Queries_1.query.getUsers(),
                        variables: {
                            $first: 10,
                        },
                    };
                    const users = await GenericFunctions_1.linearApiRequestAllItems.call(this, 'data.users', body);
                    for (const user of users) {
                        returnData.push({
                            name: user.name,
                            value: user.id,
                        });
                    }
                    return returnData;
                },
                async getStates() {
                    var _a, _b, _c;
                    let teamId = this.getNodeParameter('teamId', null);
                    if (!teamId) {
                        const updateFields = this.getNodeParameter('updateFields', null);
                        if (!updateFields.teamId) {
                            const issueId = this.getNodeParameter('issueId');
                            const body = {
                                query: Queries_1.query.getIssueTeam(),
                                variables: {
                                    issueId,
                                },
                            };
                            const responseData = await GenericFunctions_1.linearApiRequest.call(this, body);
                            teamId = (_c = (_b = (_a = responseData === null || responseData === void 0 ? void 0 : responseData.data) === null || _a === void 0 ? void 0 : _a.issue) === null || _b === void 0 ? void 0 : _b.team) === null || _c === void 0 ? void 0 : _c.id;
                        }
                        else {
                            teamId = updateFields.teamId;
                        }
                    }
                    const returnData = [];
                    const body = {
                        query: Queries_1.query.getStates(),
                        variables: {
                            $first: 10,
                            filter: {
                                team: {
                                    id: {
                                        eq: teamId,
                                    },
                                },
                            },
                        },
                    };
                    const states = await GenericFunctions_1.linearApiRequestAllItems.call(this, 'data.workflowStates', body);
                    for (const state of states) {
                        returnData.push({
                            name: state.name,
                            value: state.id,
                        });
                    }
                    return returnData.sort(GenericFunctions_1.sort);
                },
            },
        };
    }
    async execute() {
        var _a, _b, _c, _d;
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'issue') {
                    if (operation === 'create') {
                        const teamId = this.getNodeParameter('teamId', i);
                        const title = this.getNodeParameter('title', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const body = {
                            query: Queries_1.query.createIssue(),
                            variables: {
                                teamId,
                                title,
                                ...additionalFields,
                            },
                        };
                        responseData = await GenericFunctions_1.linearApiRequest.call(this, body);
                        responseData = (_a = responseData.data.issueCreate) === null || _a === void 0 ? void 0 : _a.issue;
                    }
                    if (operation === 'delete') {
                        const issueId = this.getNodeParameter('issueId', i);
                        const body = {
                            query: Queries_1.query.deleteIssue(),
                            variables: {
                                issueId,
                            },
                        };
                        responseData = await GenericFunctions_1.linearApiRequest.call(this, body);
                        responseData = (_b = responseData === null || responseData === void 0 ? void 0 : responseData.data) === null || _b === void 0 ? void 0 : _b.issueDelete;
                    }
                    if (operation === 'get') {
                        const issueId = this.getNodeParameter('issueId', i);
                        const body = {
                            query: Queries_1.query.getIssue(),
                            variables: {
                                issueId,
                            },
                        };
                        responseData = await GenericFunctions_1.linearApiRequest.call(this, body);
                        responseData = responseData.data.issue;
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const body = {
                            query: Queries_1.query.getIssues(),
                            variables: {
                                first: 50,
                            },
                        };
                        if (returnAll) {
                            responseData = await GenericFunctions_1.linearApiRequestAllItems.call(this, 'data.issues', body);
                        }
                        else {
                            const limit = this.getNodeParameter('limit', 0);
                            body.variables.first = limit;
                            responseData = await GenericFunctions_1.linearApiRequest.call(this, body);
                            responseData = responseData.data.issues.nodes;
                        }
                    }
                    if (operation === 'update') {
                        const issueId = this.getNodeParameter('issueId', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {
                            query: Queries_1.query.updateIssue(),
                            variables: {
                                issueId,
                                ...updateFields,
                            },
                        };
                        responseData = await GenericFunctions_1.linearApiRequest.call(this, body);
                        responseData = (_d = (_c = responseData === null || responseData === void 0 ? void 0 : responseData.data) === null || _c === void 0 ? void 0 : _c.issueUpdate) === null || _d === void 0 ? void 0 : _d.issue;
                    }
                }
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    const executionErrorData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray({ error: error.message }), { itemData: { item: i } });
                    returnData.push(...executionErrorData);
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.Linear = Linear;
//# sourceMappingURL=Linear.node.js.map