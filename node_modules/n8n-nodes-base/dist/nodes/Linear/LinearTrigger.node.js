"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinearTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class LinearTrigger {
    constructor() {
        this.description = {
            displayName: 'Linear Trigger',
            name: 'linearTrigger',
            icon: 'file:linear.svg',
            group: ['trigger'],
            version: 1,
            subtitle: '={{$parameter["triggerOn"]}}',
            description: 'Starts the workflow when Linear events occur',
            defaults: {
                name: 'Linear Trigger',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'linearApi',
                    required: true,
                    testedBy: 'linearApiTest',
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Team Name or ID',
                    name: 'teamId',
                    type: 'options',
                    description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                    typeOptions: {
                        loadOptionsMethod: 'getTeams',
                    },
                    default: '',
                },
                {
                    displayName: 'Listen to Resources',
                    name: 'resources',
                    type: 'multiOptions',
                    options: [
                        {
                            name: 'Comment Reaction',
                            value: 'reaction',
                        },
                        {
                            name: 'Cycle',
                            value: 'cycle',
                        },
                        {
                            name: 'Issue',
                            value: 'issue',
                        },
                        {
                            name: 'Issue Comment',
                            value: 'comment',
                        },
                        {
                            name: 'Issue Label',
                            value: 'issueLabel',
                        },
                        {
                            name: 'Project',
                            value: 'project',
                        },
                    ],
                    default: [],
                    required: true,
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getTeams() {
                    const returnData = [];
                    const body = {
                        query: `query Teams {
							 teams {
								nodes {
									id
									name
								}
							}
						}`,
                    };
                    const { data: { teams: { nodes }, }, } = await GenericFunctions_1.linearApiRequest.call(this, body);
                    for (const node of nodes) {
                        returnData.push({
                            name: node.name,
                            value: node.id,
                        });
                    }
                    return returnData;
                },
            },
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const webhookData = this.getWorkflowStaticData('node');
                    const teamId = this.getNodeParameter('teamId');
                    const body = {
                        query: `query {
							 webhooks {
									nodes {
										id
										url
										enabled
										team {
											id
											name
										}
									}
							}
						}`,
                    };
                    const { data: { webhooks: { nodes }, }, } = await GenericFunctions_1.linearApiRequest.call(this, body);
                    for (const node of nodes) {
                        if (node.url === webhookUrl && node.team.id === teamId && node.enabled === true) {
                            webhookData.webhookId = node.id;
                            return true;
                        }
                    }
                    return false;
                },
                async create() {
                    const webhookData = this.getWorkflowStaticData('node');
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const teamId = this.getNodeParameter('teamId');
                    const resources = this.getNodeParameter('resources');
                    const body = {
                        query: `
						mutation webhookCreate($url: String!, $teamId: String!, $resources: [String!]!) {
							webhookCreate(
								input: {
									url: $url
									teamId: $teamId
									resourceTypes: $resources
								}
							) {
								success
								webhook {
									id
									enabled
								}
							}
						}`,
                        variables: {
                            url: webhookUrl,
                            teamId,
                            resources: resources.map(GenericFunctions_1.capitalizeFirstLetter),
                        },
                    };
                    const { data: { webhookCreate: { success, webhook: { id }, }, }, } = await GenericFunctions_1.linearApiRequest.call(this, body);
                    if (!success) {
                        return false;
                    }
                    webhookData.webhookId = id;
                    return true;
                },
                async delete() {
                    const webhookData = this.getWorkflowStaticData('node');
                    if (webhookData.webhookId !== undefined) {
                        const body = {
                            query: `
							mutation webhookDelete($id: String!){
								webhookDelete(
									id: $id
								) {
									success
								}
							}`,
                            variables: {
                                id: webhookData.webhookId,
                            },
                        };
                        try {
                            await GenericFunctions_1.linearApiRequest.call(this, body);
                        }
                        catch (error) {
                            return false;
                        }
                        delete webhookData.webhookId;
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        const bodyData = this.getBodyData();
        return {
            workflowData: [this.helpers.returnJsonArray(bodyData)],
        };
    }
}
exports.LinearTrigger = LinearTrigger;
//# sourceMappingURL=LinearTrigger.node.js.map