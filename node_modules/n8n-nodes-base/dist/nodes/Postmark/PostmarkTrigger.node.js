"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostmarkTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class PostmarkTrigger {
    constructor() {
        this.description = {
            displayName: 'Postmark Trigger',
            name: 'postmarkTrigger',
            icon: 'file:postmark.png',
            group: ['trigger'],
            version: 1,
            description: 'Starts the workflow when Postmark events occur',
            defaults: {
                name: 'Postmark Trigger',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'postmarkApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Events',
                    name: 'events',
                    type: 'multiOptions',
                    options: [
                        {
                            name: 'Bounce',
                            value: 'bounce',
                            description: 'Trigger on bounce',
                        },
                        {
                            name: 'Click',
                            value: 'click',
                            description: 'Trigger on click',
                        },
                        {
                            name: 'Delivery',
                            value: 'delivery',
                            description: 'Trigger on delivery',
                        },
                        {
                            name: 'Open',
                            value: 'open',
                            description: 'Trigger webhook on open',
                        },
                        {
                            name: 'Spam Complaint',
                            value: 'spamComplaint',
                            description: 'Trigger on spam complaint',
                        },
                        {
                            name: 'Subscription Change',
                            value: 'subscriptionChange',
                            description: 'Trigger on subscription change',
                        },
                    ],
                    default: [],
                    required: true,
                    description: 'Webhook events that will be enabled for that endpoint',
                },
                {
                    displayName: 'First Open',
                    name: 'firstOpen',
                    description: 'Only fires on first open for event "Open"',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            events: ['open'],
                        },
                    },
                },
                {
                    displayName: 'Include Content',
                    name: 'includeContent',
                    description: 'Whether to include message content for events "Bounce" and "Spam Complaint"',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            events: ['bounce', 'spamComplaint'],
                        },
                    },
                },
            ],
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookData = this.getWorkflowStaticData('node');
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const events = this.getNodeParameter('events');
                    if (events.includes('bounce') || events.includes('spamComplaint')) {
                        if (this.getNodeParameter('includeContent')) {
                            events.push('includeContent');
                        }
                    }
                    if (events.includes('open')) {
                        if (this.getNodeParameter('firstOpen')) {
                            events.push('firstOpen');
                        }
                    }
                    const endpoint = '/webhooks';
                    const responseData = await GenericFunctions_1.postmarkApiRequest.call(this, 'GET', endpoint, {});
                    if (responseData.Webhooks.length === 0) {
                        return false;
                    }
                    for (const webhook of responseData.Webhooks) {
                        if (webhook.Url === webhookUrl &&
                            (0, GenericFunctions_1.eventExists)(events, (0, GenericFunctions_1.convertTriggerObjectToStringArray)(webhook))) {
                            webhookData.webhookId = webhook.ID;
                            return true;
                        }
                    }
                    return false;
                },
                async create() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const endpoint = '/webhooks';
                    const body = {
                        Url: webhookUrl,
                        Triggers: {
                            Open: {
                                Enabled: false,
                                PostFirstOpenOnly: false,
                            },
                            Click: {
                                Enabled: false,
                            },
                            Delivery: {
                                Enabled: false,
                            },
                            Bounce: {
                                Enabled: false,
                                IncludeContent: false,
                            },
                            SpamComplaint: {
                                Enabled: false,
                                IncludeContent: false,
                            },
                            SubscriptionChange: {
                                Enabled: false,
                            },
                        },
                    };
                    const events = this.getNodeParameter('events');
                    if (events.includes('open')) {
                        body.Triggers.Open.Enabled = true;
                        body.Triggers.Open.PostFirstOpenOnly = this.getNodeParameter('firstOpen');
                    }
                    if (events.includes('click')) {
                        body.Triggers.Click.Enabled = true;
                    }
                    if (events.includes('delivery')) {
                        body.Triggers.Delivery.Enabled = true;
                    }
                    if (events.includes('bounce')) {
                        body.Triggers.Bounce.Enabled = true;
                        body.Triggers.Bounce.IncludeContent = this.getNodeParameter('includeContent');
                    }
                    if (events.includes('spamComplaint')) {
                        body.Triggers.SpamComplaint.Enabled = true;
                        body.Triggers.SpamComplaint.IncludeContent = this.getNodeParameter('includeContent');
                    }
                    if (events.includes('subscriptionChange')) {
                        body.Triggers.SubscriptionChange.Enabled = true;
                    }
                    const responseData = await GenericFunctions_1.postmarkApiRequest.call(this, 'POST', endpoint, body);
                    if (responseData.ID === undefined) {
                        return false;
                    }
                    const webhookData = this.getWorkflowStaticData('node');
                    webhookData.webhookId = responseData.ID;
                    return true;
                },
                async delete() {
                    const webhookData = this.getWorkflowStaticData('node');
                    if (webhookData.webhookId !== undefined) {
                        const endpoint = `/webhooks/${webhookData.webhookId}`;
                        const body = {};
                        try {
                            await GenericFunctions_1.postmarkApiRequest.call(this, 'DELETE', endpoint, body);
                        }
                        catch (error) {
                            return false;
                        }
                        delete webhookData.webhookId;
                        delete webhookData.webhookEvents;
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        const req = this.getRequestObject();
        return {
            workflowData: [this.helpers.returnJsonArray(req.body)],
        };
    }
}
exports.PostmarkTrigger = PostmarkTrigger;
//# sourceMappingURL=PostmarkTrigger.node.js.map