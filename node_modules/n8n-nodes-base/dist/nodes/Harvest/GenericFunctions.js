"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllResource = exports.harvestApiRequestAllItems = exports.harvestApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function harvestApiRequest(method, qs, path, body = {}, option = {}, uri) {
    let options = {
        headers: {
            'Harvest-Account-Id': `${this.getNodeParameter('accountId', 0)}`,
            'User-Agent': 'Harvest App',
            Authorization: '',
        },
        method,
        body,
        uri: uri || `https://api.harvestapp.com/v2/${path}`,
        qs,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (Object.keys(options.body).length === 0) {
        delete options.body;
    }
    const authenticationMethod = this.getNodeParameter('authentication', 0);
    try {
        if (authenticationMethod === 'accessToken') {
            const credentials = await this.getCredentials('harvestApi');
            options.headers.Authorization = `Bearer ${credentials.accessToken}`;
            return await this.helpers.request(options);
        }
        else {
            return await this.helpers.requestOAuth2.call(this, 'harvestOAuth2Api', options);
        }
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.harvestApiRequest = harvestApiRequest;
async function harvestApiRequestAllItems(method, qs, uri, resource, body = {}, option = {}) {
    const returnData = [];
    let responseData;
    do {
        responseData = await harvestApiRequest.call(this, method, qs, uri, body, option);
        qs.page = responseData.next_page;
        returnData.push.apply(returnData, responseData[resource]);
    } while (responseData.next_page);
    return returnData;
}
exports.harvestApiRequestAllItems = harvestApiRequestAllItems;
async function getAllResource(resource, i) {
    const endpoint = resource;
    const qs = {};
    const requestMethod = 'GET';
    qs.per_page = 100;
    const additionalFields = this.getNodeParameter('filters', i);
    const returnAll = this.getNodeParameter('returnAll', i);
    Object.assign(qs, additionalFields);
    let responseData = {};
    if (returnAll) {
        responseData[resource] = await harvestApiRequestAllItems.call(this, requestMethod, qs, endpoint, resource);
    }
    else {
        const limit = this.getNodeParameter('limit', i);
        qs.per_page = limit;
        responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);
    }
    return responseData[resource];
}
exports.getAllResource = getAllResource;
//# sourceMappingURL=GenericFunctions.js.map