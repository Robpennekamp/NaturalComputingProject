"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Discourse = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const PostDescription_1 = require("./PostDescription");
const CategoryDescription_1 = require("./CategoryDescription");
const GroupDescription_1 = require("./GroupDescription");
const UserDescription_1 = require("./UserDescription");
const UserGroupDescription_1 = require("./UserGroupDescription");
class Discourse {
    constructor() {
        this.description = {
            displayName: 'Discourse',
            name: 'discourse',
            icon: 'file:discourse.svg',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Discourse API',
            defaults: {
                name: 'Discourse',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'discourseApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Category',
                            value: 'category',
                        },
                        {
                            name: 'Group',
                            value: 'group',
                        },
                        {
                            name: 'Post',
                            value: 'post',
                        },
                        {
                            name: 'User',
                            value: 'user',
                        },
                        {
                            name: 'User Group',
                            value: 'userGroup',
                        },
                    ],
                    default: 'post',
                },
                ...CategoryDescription_1.categoryOperations,
                ...CategoryDescription_1.categoryFields,
                ...GroupDescription_1.groupOperations,
                ...GroupDescription_1.groupFields,
                ...PostDescription_1.postOperations,
                ...PostDescription_1.postFields,
                ...UserDescription_1.userOperations,
                ...UserDescription_1.userFields,
                ...UserGroupDescription_1.userGroupOperations,
                ...UserGroupDescription_1.userGroupFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getCategories() {
                    const returnData = [];
                    const { category_list } = await GenericFunctions_1.discourseApiRequest.call(this, 'GET', '/categories.json');
                    for (const category of category_list.categories) {
                        returnData.push({
                            name: category.name,
                            value: category.id,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'category') {
                    if (operation === 'create') {
                        const name = this.getNodeParameter('name', i);
                        const color = this.getNodeParameter('color', i);
                        const textColor = this.getNodeParameter('textColor', i);
                        const body = {
                            name,
                            color,
                            text_color: textColor,
                        };
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'POST', '/categories.json', body);
                        responseData = responseData.category;
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'GET', '/categories.json', {}, qs);
                        responseData = responseData.category_list.categories;
                        if (!returnAll) {
                            const limit = this.getNodeParameter('limit', i);
                            responseData = responseData.splice(0, limit);
                        }
                    }
                    if (operation === 'update') {
                        const categoryId = this.getNodeParameter('categoryId', i);
                        const name = this.getNodeParameter('name', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {
                            name,
                        };
                        Object.assign(body, updateFields);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'PUT', `/categories/${categoryId}.json`, body);
                        responseData = responseData.category;
                    }
                }
                if (resource === 'group') {
                    if (operation === 'create') {
                        const name = this.getNodeParameter('name', i);
                        const body = {
                            name,
                        };
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'POST', '/admin/groups.json', {
                            group: body,
                        });
                        responseData = responseData.basic_group;
                    }
                    if (operation === 'get') {
                        const name = this.getNodeParameter('name', i);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'GET', `/groups/${name}`, {}, qs);
                        responseData = responseData.group;
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'GET', '/groups.json', {}, qs);
                        responseData = responseData.groups;
                        if (!returnAll) {
                            const limit = this.getNodeParameter('limit', i);
                            responseData = responseData.splice(0, limit);
                        }
                    }
                    if (operation === 'update') {
                        const groupId = this.getNodeParameter('groupId', i);
                        const name = this.getNodeParameter('name', i);
                        const body = {
                            name,
                        };
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'PUT', `/groups/${groupId}.json`, {
                            group: body,
                        });
                    }
                }
                if (resource === 'post') {
                    if (operation === 'create') {
                        const content = this.getNodeParameter('content', i);
                        const title = this.getNodeParameter('title', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const body = {
                            title,
                            raw: content,
                        };
                        Object.assign(body, additionalFields);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'POST', '/posts.json', body);
                    }
                    if (operation === 'get') {
                        const postId = this.getNodeParameter('postId', i);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'GET', `/posts/${postId}`, {}, qs);
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const limit = this.getNodeParameter('limit', i, 0);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'GET', '/posts.json', {}, qs);
                        responseData = responseData.latest_posts;
                        let lastPost = responseData.pop();
                        let previousLastPostID;
                        while (lastPost.id !== previousLastPostID) {
                            if (limit && responseData.length > limit) {
                                break;
                            }
                            const chunk = await GenericFunctions_1.discourseApiRequest.call(this, 'GET', `/posts.json?before=${lastPost.id}`, {}, qs);
                            responseData = responseData.concat(chunk.latest_posts);
                            previousLastPostID = lastPost.id;
                            lastPost = responseData.pop();
                        }
                        responseData.push(lastPost);
                        if (!returnAll) {
                            responseData = responseData.splice(0, limit);
                        }
                    }
                    if (operation === 'update') {
                        const postId = this.getNodeParameter('postId', i);
                        const content = this.getNodeParameter('content', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {
                            raw: content,
                        };
                        Object.assign(body, updateFields);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'PUT', `/posts/${postId}.json`, body);
                        responseData = responseData.post;
                    }
                }
                if (resource === 'user') {
                    if (operation === 'create') {
                        const name = this.getNodeParameter('name', i);
                        const email = this.getNodeParameter('email', i);
                        const password = this.getNodeParameter('password', i);
                        const username = this.getNodeParameter('username', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const body = {
                            name,
                            password,
                            email,
                            username,
                        };
                        Object.assign(body, additionalFields);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'POST', '/users.json', body);
                    }
                    if (operation === 'get') {
                        const by = this.getNodeParameter('by', i);
                        let endpoint = '';
                        if (by === 'username') {
                            const username = this.getNodeParameter('username', i);
                            endpoint = `/users/${username}`;
                        }
                        else if (by === 'externalId') {
                            const externalId = this.getNodeParameter('externalId', i);
                            endpoint = `/u/by-external/${externalId}.json`;
                        }
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'GET', endpoint);
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const flag = this.getNodeParameter('flag', i);
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'GET', `/admin/users/list/${flag}.json`, {}, qs);
                        if (!returnAll) {
                            const limit = this.getNodeParameter('limit', i);
                            responseData = responseData.splice(0, limit);
                        }
                    }
                }
                if (resource === 'userGroup') {
                    if (operation === 'add') {
                        const usernames = this.getNodeParameter('usernames', i);
                        const groupId = this.getNodeParameter('groupId', i);
                        const body = {
                            usernames,
                        };
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'PUT', `/groups/${groupId}/members.json`, body);
                    }
                    if (operation === 'remove') {
                        const usernames = this.getNodeParameter('usernames', i);
                        const groupId = this.getNodeParameter('groupId', i);
                        const body = {
                            usernames,
                        };
                        responseData = await GenericFunctions_1.discourseApiRequest.call(this, 'DELETE', `/groups/${groupId}/members.json`, body);
                    }
                }
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    const executionErrorData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray({ error: error.message }), { itemData: { item: i } });
                    returnData.push(...executionErrorData);
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.Discourse = Discourse;
//# sourceMappingURL=Discourse.node.js.map