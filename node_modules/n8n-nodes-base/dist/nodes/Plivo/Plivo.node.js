"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plivo = void 0;
const SmsDescription_1 = require("./SmsDescription");
const MmsDescription_1 = require("./MmsDescription");
const CallDescription_1 = require("./CallDescription");
const GenericFunctions_1 = require("./GenericFunctions");
class Plivo {
    constructor() {
        this.description = {
            displayName: 'Plivo',
            name: 'plivo',
            icon: 'file:plivo.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Send SMS/MMS messages or make phone calls',
            defaults: {
                name: 'Plivo',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'plivoApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Call',
                            value: 'call',
                        },
                        {
                            name: 'MMS',
                            value: 'mms',
                        },
                        {
                            name: 'SMS',
                            value: 'sms',
                        },
                    ],
                    default: 'sms',
                    required: true,
                },
                ...SmsDescription_1.smsOperations,
                ...SmsDescription_1.smsFields,
                ...MmsDescription_1.mmsOperations,
                ...MmsDescription_1.mmsFields,
                ...CallDescription_1.callOperations,
                ...CallDescription_1.callFields,
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < items.length; i++) {
            let responseData;
            if (resource === 'sms') {
                if (operation === 'send') {
                    const body = {
                        src: this.getNodeParameter('from', i),
                        dst: this.getNodeParameter('to', i),
                        text: this.getNodeParameter('message', i),
                    };
                    responseData = await GenericFunctions_1.plivoApiRequest.call(this, 'POST', '/Message', body);
                }
            }
            else if (resource === 'call') {
                if (operation === 'make') {
                    const body = {
                        from: this.getNodeParameter('from', i),
                        to: this.getNodeParameter('to', i),
                        answer_url: this.getNodeParameter('answer_url', i),
                        answer_method: this.getNodeParameter('answer_method', i),
                    };
                    responseData = await GenericFunctions_1.plivoApiRequest.call(this, 'POST', '/Call', body);
                }
            }
            else if (resource === 'mms') {
                if (operation === 'send') {
                    const body = {
                        src: this.getNodeParameter('from', i),
                        dst: this.getNodeParameter('to', i),
                        text: this.getNodeParameter('message', i),
                        type: 'mms',
                        media_urls: this.getNodeParameter('media_urls', i),
                    };
                    responseData = await GenericFunctions_1.plivoApiRequest.call(this, 'POST', '/Message', body);
                }
            }
            Array.isArray(responseData)
                ? returnData.push(...responseData)
                : returnData.push(responseData);
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Plivo = Plivo;
//# sourceMappingURL=Plivo.node.js.map