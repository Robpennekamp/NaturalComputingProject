import type { IExecuteFunctions, ILoadOptionsFunctions, INodeExecutionData, INodeType, INodeTypeDescription } from 'n8n-workflow';
import type { LoadOption } from './types';
export declare class FreshworksCrm implements INodeType {
    description: INodeTypeDescription;
    methods: {
        loadOptions: {
            getAccounts(this: ILoadOptionsFunctions): Promise<LoadOption[]>;
            getAccountViews(this: ILoadOptionsFunctions): Promise<LoadOption[]>;
            getBusinessTypes(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getCampaigns(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getContactStatuses(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getContactViews(this: ILoadOptionsFunctions): Promise<LoadOption[]>;
            getCurrencies(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getDealPaymentStatuses(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getDealPipelines(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getDealProducts(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getDealReasons(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getDealStages(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getDealTypes(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getDealViews(this: ILoadOptionsFunctions): Promise<LoadOption[]>;
            getIndustryTypes(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getLifecycleStages(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getOutcomes(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getSalesActivityTypes(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getTerritories(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
            getUsers(this: ILoadOptionsFunctions): Promise<{
                name: string;
                value: string;
            }[]>;
        };
    };
    execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]>;
}
