"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJSON = exports.slackApiRequestAllItems = exports.slackApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_get_1 = __importDefault(require("lodash.get"));
async function slackApiRequest(method, resource, body = {}, query = {}, headers = undefined, option = {}) {
    const authenticationMethod = this.getNodeParameter('authentication', 0, 'accessToken');
    let options = {
        method,
        headers: headers || {
            'Content-Type': 'application/json; charset=utf-8',
        },
        body,
        qs: query,
        uri: `https://slack.com/api${resource}`,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (Object.keys(body).length === 0) {
        delete options.body;
    }
    if (Object.keys(query).length === 0) {
        delete options.qs;
    }
    const oAuth2Options = {
        tokenType: 'Bearer',
        property: 'authed_user.access_token',
    };
    try {
        const credentialType = authenticationMethod === 'accessToken' ? 'slackApi' : 'slackOAuth2Api';
        const response = await this.helpers.requestWithAuthentication.call(this, credentialType, options, {
            oauth2: oAuth2Options,
        });
        if (response.ok === false) {
            if (response.error === 'paid_teams_only') {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `Your current Slack plan does not include the resource '${this.getNodeParameter('resource', 0)}'`, {
                    description: 'Hint: Upgrate to the Slack plan that includes the funcionality you want to use.',
                });
            }
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Slack error response: ' + JSON.stringify(response));
        }
        return response;
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.slackApiRequest = slackApiRequest;
async function slackApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    var _a, _b;
    const returnData = [];
    let responseData;
    query.page = 1;
    if (endpoint.includes('files.list')) {
        query.count = 100;
    }
    else {
        query.limit = 100;
    }
    do {
        responseData = await slackApiRequest.call(this, method, endpoint, body, query);
        query.cursor = (0, lodash_get_1.default)(responseData, 'response_metadata.next_cursor');
        query.page++;
        returnData.push.apply(returnData, responseData[propertyName]);
    } while ((((_a = responseData.response_metadata) === null || _a === void 0 ? void 0 : _a.next_cursor) !== undefined &&
        responseData.response_metadata.next_cursor !== '' &&
        responseData.response_metadata.next_cursor !== null) ||
        (((_b = responseData.paging) === null || _b === void 0 ? void 0 : _b.pages) !== undefined &&
            responseData.paging.page !== undefined &&
            responseData.paging.page < responseData.paging.pages));
    return returnData;
}
exports.slackApiRequestAllItems = slackApiRequestAllItems;
function validateJSON(json) {
    let result;
    try {
        result = JSON.parse(json);
    }
    catch (exception) {
        result = undefined;
    }
    return result;
}
exports.validateJSON = validateJSON;
//# sourceMappingURL=GenericFunctions.js.map