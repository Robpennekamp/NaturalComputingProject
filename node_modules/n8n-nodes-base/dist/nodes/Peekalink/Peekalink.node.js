"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Peekalink = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class Peekalink {
    constructor() {
        this.description = {
            displayName: 'Peekalink',
            name: 'peekalink',
            icon: 'file:peekalink.png',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"]',
            description: 'Consume the Peekalink API',
            defaults: {
                name: 'Peekalink',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'peekalinkApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Is Available',
                            value: 'isAvailable',
                            description: 'Check whether preview for a given link is available',
                            action: 'Check whether the preview for a given link is available',
                        },
                        {
                            name: 'Preview',
                            value: 'preview',
                            description: 'Return the preview for a link',
                            action: 'Return the preview for a link',
                        },
                    ],
                    default: 'preview',
                },
                {
                    displayName: 'URL',
                    name: 'url',
                    type: 'string',
                    default: '',
                    required: true,
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let responseData;
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (operation === 'isAvailable') {
                    const url = this.getNodeParameter('url', i);
                    const body = {
                        link: url,
                    };
                    responseData = await GenericFunctions_1.peekalinkApiRequest.call(this, 'POST', '/is-available/', body);
                }
                if (operation === 'preview') {
                    const url = this.getNodeParameter('url', i);
                    const body = {
                        link: url,
                    };
                    responseData = await GenericFunctions_1.peekalinkApiRequest.call(this, 'POST', '/', body);
                }
                if (Array.isArray(responseData)) {
                    returnData.push.apply(returnData, responseData);
                }
                else {
                    returnData.push(responseData);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Peekalink = Peekalink;
//# sourceMappingURL=Peekalink.node.js.map