"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const vm2_1 = require("vm2");
const n8n_workflow_1 = require("n8n-workflow");
class Function {
    constructor() {
        this.description = {
            displayName: 'Function',
            name: 'function',
            hidden: true,
            icon: 'fa:code',
            group: ['transform'],
            version: 1,
            description: 'Run custom function code which gets executed once and allows you to add, remove, change and replace items',
            defaults: {
                name: 'Function',
                color: '#FF9922',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'A newer version of this node type is available, called the ‘Code’ node',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'JavaScript Code',
                    name: 'functionCode',
                    typeOptions: {
                        alwaysOpenEditWindow: true,
                        codeAutocomplete: 'function',
                        editor: 'code',
                        rows: 10,
                    },
                    type: 'string',
                    default: `// Code here will run only once, no matter how many input items there are.
// More info and help:https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.function/
// Tip: You can use luxon for dates and $jmespath for querying JSON structures

// Loop over inputs and add a new field called 'myNewField' to the JSON of each one
for (item of items) {
  item.json.myNewField = 1;
}

// You can write logs to the browser console
console.log('Done!');

return items;`,
                    description: 'The JavaScript code to execute',
                    noDataExpression: true,
                },
            ],
        };
    }
    async execute() {
        let items = this.getInputData();
        items = (0, n8n_workflow_1.deepCopy)(items);
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            items[itemIndex].index = itemIndex;
        }
        const cleanupData = (inputData) => {
            Object.keys(inputData).map((key) => {
                if (inputData[key] !== null && typeof inputData[key] === 'object') {
                    if (inputData[key].constructor.name === 'Object') {
                        inputData[key] = cleanupData(inputData[key]);
                    }
                    else {
                        inputData[key] = (0, n8n_workflow_1.deepCopy)(inputData[key]);
                    }
                }
            });
            return inputData;
        };
        const sandbox = {
            getNodeParameter: this.getNodeParameter,
            getWorkflowStaticData: this.getWorkflowStaticData,
            helpers: this.helpers,
            items,
            $item: (index) => this.getWorkflowDataProxy(index),
            getBinaryDataAsync: async (item) => {
                var _a;
                if ((item === null || item === void 0 ? void 0 : item.binary) && (item === null || item === void 0 ? void 0 : item.index) !== undefined && (item === null || item === void 0 ? void 0 : item.index) !== null) {
                    for (const binaryPropertyName of Object.keys(item.binary)) {
                        item.binary[binaryPropertyName].data = (_a = (await this.helpers.getBinaryDataBuffer(item.index, binaryPropertyName))) === null || _a === void 0 ? void 0 : _a.toString('base64');
                    }
                }
                return item.binary;
            },
            setBinaryDataAsync: async (item, data) => {
                if (!item) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No item was provided to setBinaryDataAsync (item: INodeExecutionData, data: IBinaryKeyData).');
                }
                if (!data) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No data was provided to setBinaryDataAsync (item: INodeExecutionData, data: IBinaryKeyData).');
                }
                for (const binaryPropertyName of Object.keys(data)) {
                    const binaryItem = data[binaryPropertyName];
                    data[binaryPropertyName] = await this.helpers.setBinaryDataBuffer(binaryItem, Buffer.from(binaryItem.data, 'base64'));
                }
                item.binary = data;
            },
        };
        Object.assign(sandbox, sandbox.$item(0));
        const mode = this.getMode();
        const options = {
            console: mode === 'manual' ? 'redirect' : 'inherit',
            sandbox,
            require: {
                external: false,
                builtin: [],
            },
        };
        if (process.env.NODE_FUNCTION_ALLOW_BUILTIN && typeof options.require === 'object') {
            options.require.builtin = process.env.NODE_FUNCTION_ALLOW_BUILTIN.split(',');
        }
        if (process.env.NODE_FUNCTION_ALLOW_EXTERNAL && typeof options.require === 'object') {
            options.require.external = {
                modules: process.env.NODE_FUNCTION_ALLOW_EXTERNAL.split(','),
                transitive: false,
            };
        }
        const vm = new vm2_1.NodeVM(options);
        if (mode === 'manual') {
            vm.on('console.log', this.sendMessageToUI);
        }
        const functionCode = this.getNodeParameter('functionCode', 0);
        try {
            items = await vm.run(`module.exports = async function() {${functionCode}\n}()`, __dirname);
            items = this.helpers.normalizeItems(items);
            if (items === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No data got returned. Always return an Array of items!');
            }
            if (!Array.isArray(items)) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Always an Array of items has to be returned!');
            }
            for (const item of items) {
                if (item.json === undefined) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'All returned items have to contain a property named "json"!');
                }
                if (typeof item.json !== 'object') {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'The json-property has to be an object!');
                }
                item.json = cleanupData(item.json);
                if (item.binary !== undefined) {
                    if (Array.isArray(item.binary) || typeof item.binary !== 'object') {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'The binary-property has to be an object!');
                    }
                }
            }
        }
        catch (error) {
            if (this.continueOnFail()) {
                items = [{ json: { error: error.message } }];
            }
            else {
                const stackLines = error.stack.split('\n');
                if (stackLines.length > 0) {
                    stackLines.shift();
                    const lineParts = stackLines.find((line) => line.includes('Function')).split(':');
                    if (lineParts.length > 2) {
                        const lineNumber = lineParts.splice(-2, 1);
                        if (!isNaN(lineNumber)) {
                            error.message = `${error.message} [Line ${lineNumber}]`;
                        }
                    }
                }
                throw error;
            }
        }
        return this.prepareOutputData(items);
    }
}
exports.Function = Function;
//# sourceMappingURL=Function.node.js.map