"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Twilio = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
class Twilio {
    constructor() {
        this.description = {
            displayName: 'Twilio',
            name: 'twilio',
            icon: 'file:twilio.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Send SMS and WhatsApp messages or make phone calls',
            defaults: {
                name: 'Twilio',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'twilioApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Call',
                            value: 'call',
                        },
                        {
                            name: 'SMS',
                            value: 'sms',
                        },
                    ],
                    default: 'sms',
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    displayOptions: {
                        show: {
                            resource: ['sms'],
                        },
                    },
                    options: [
                        {
                            name: 'Send',
                            value: 'send',
                            description: 'Send SMS/MMS/WhatsApp message',
                            action: 'Send an SMS/MMS/WhatsApp message',
                        },
                    ],
                    default: 'send',
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    displayOptions: {
                        show: {
                            resource: ['call'],
                        },
                    },
                    options: [
                        {
                            name: 'Make',
                            value: 'make',
                            action: 'Make a call',
                        },
                    ],
                    default: 'make',
                },
                {
                    displayName: 'From',
                    name: 'from',
                    type: 'string',
                    default: '',
                    placeholder: '+14155238886',
                    required: true,
                    displayOptions: {
                        show: {
                            operation: ['send', 'make'],
                            resource: ['sms', 'call'],
                        },
                    },
                    description: 'The number from which to send the message',
                },
                {
                    displayName: 'To',
                    name: 'to',
                    type: 'string',
                    default: '',
                    placeholder: '+14155238886',
                    required: true,
                    displayOptions: {
                        show: {
                            operation: ['send', 'make'],
                            resource: ['sms', 'call'],
                        },
                    },
                    description: 'The number to which to send the message',
                },
                {
                    displayName: 'To Whatsapp',
                    name: 'toWhatsapp',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            operation: ['send'],
                            resource: ['sms'],
                        },
                    },
                    description: 'Whether the message should be sent to WhatsApp',
                },
                {
                    displayName: 'Message',
                    name: 'message',
                    type: 'string',
                    default: '',
                    required: true,
                    displayOptions: {
                        show: {
                            operation: ['send'],
                            resource: ['sms'],
                        },
                    },
                    description: 'The message to send',
                },
                {
                    displayName: 'Use TwiML',
                    name: 'twiml',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            operation: ['make'],
                            resource: ['call'],
                        },
                    },
                    description: 'Whether to use the <a href="https://www.twilio.com/docs/voice/twiml">Twilio Markup Language</a> in the message',
                },
                {
                    displayName: 'Message',
                    name: 'message',
                    type: 'string',
                    default: '',
                    required: true,
                    displayOptions: {
                        show: {
                            operation: ['make'],
                            resource: ['call'],
                        },
                    },
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    options: [
                        {
                            displayName: 'Status Callback',
                            name: 'statusCallback',
                            type: 'string',
                            default: '',
                            description: 'Status Callbacks allow you to receive events related to the REST resources managed by Twilio: Rooms, Recordings and Compositions',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        let operation;
        let resource;
        let body;
        let qs;
        let requestMethod;
        let endpoint;
        for (let i = 0; i < items.length; i++) {
            try {
                requestMethod = 'GET';
                endpoint = '';
                body = {};
                qs = {};
                resource = this.getNodeParameter('resource', i);
                operation = this.getNodeParameter('operation', i);
                if (resource === 'sms') {
                    if (operation === 'send') {
                        requestMethod = 'POST';
                        endpoint = '/Messages.json';
                        body.From = this.getNodeParameter('from', i);
                        body.To = this.getNodeParameter('to', i);
                        body.Body = this.getNodeParameter('message', i);
                        body.StatusCallback = this.getNodeParameter('options.statusCallback', i, '');
                        const toWhatsapp = this.getNodeParameter('toWhatsapp', i);
                        if (toWhatsapp) {
                            body.From = `whatsapp:${body.From}`;
                            body.To = `whatsapp:${body.To}`;
                        }
                    }
                    else {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The operation "${operation}" is not known!`, { itemIndex: i });
                    }
                }
                else if (resource === 'call') {
                    if (operation === 'make') {
                        requestMethod = 'POST';
                        endpoint = '/Calls.json';
                        const message = this.getNodeParameter('message', i);
                        const useTwiml = this.getNodeParameter('twiml', i);
                        body.From = this.getNodeParameter('from', i);
                        body.To = this.getNodeParameter('to', i);
                        if (useTwiml) {
                            body.Twiml = message;
                        }
                        else {
                            body.Twiml = `<Response><Say>${(0, GenericFunctions_1.escapeXml)(message)}</Say></Response>`;
                        }
                        body.StatusCallback = this.getNodeParameter('options.statusCallback', i, '');
                    }
                    else {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The operation "${operation}" is not known!`, { itemIndex: i });
                    }
                }
                else {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The resource "${resource}" is not known!`, {
                        itemIndex: i,
                    });
                }
                const responseData = await GenericFunctions_1.twilioApiRequest.call(this, requestMethod, endpoint, body, qs);
                returnData.push(responseData);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Twilio = Twilio;
//# sourceMappingURL=Twilio.node.js.map