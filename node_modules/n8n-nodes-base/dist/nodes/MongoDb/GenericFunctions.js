"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareFields = exports.prepareItems = exports.validateAndResolveMongoCredentials = exports.buildMongoConnectionParams = exports.buildParameterizedConnString = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_get_1 = __importDefault(require("lodash.get"));
const lodash_set_1 = __importDefault(require("lodash.set"));
function buildParameterizedConnString(credentials) {
    if (credentials.port) {
        return `mongodb://${credentials.user}:${credentials.password}@${credentials.host}:${credentials.port}`;
    }
    else {
        return `mongodb+srv://${credentials.user}:${credentials.password}@${credentials.host}`;
    }
}
exports.buildParameterizedConnString = buildParameterizedConnString;
function buildMongoConnectionParams(self, credentials) {
    const sanitizedDbName = credentials.database && credentials.database.trim().length > 0
        ? credentials.database.trim()
        : '';
    if (credentials.configurationType === 'connectionString') {
        if (credentials.connectionString && credentials.connectionString.trim().length > 0) {
            return {
                connectionString: credentials.connectionString.trim(),
                database: sanitizedDbName,
            };
        }
        else {
            throw new n8n_workflow_1.NodeOperationError(self.getNode(), 'Cannot override credentials: valid MongoDB connection string not provided ');
        }
    }
    else {
        return {
            connectionString: buildParameterizedConnString(credentials),
            database: sanitizedDbName,
        };
    }
}
exports.buildMongoConnectionParams = buildMongoConnectionParams;
function validateAndResolveMongoCredentials(self, credentials) {
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(self.getNode(), 'No credentials got returned!');
    }
    else {
        return buildMongoConnectionParams(self, credentials);
    }
}
exports.validateAndResolveMongoCredentials = validateAndResolveMongoCredentials;
function prepareItems(items, fields, updateKey = '', useDotNotation = false, dateFields = []) {
    let data = items;
    if (updateKey) {
        if (!fields.includes(updateKey)) {
            fields.push(updateKey);
        }
        data = items.filter((item) => item.json[updateKey] !== undefined);
    }
    const preperedItems = data.map(({ json }) => {
        const updateItem = {};
        for (const field of fields) {
            let fieldData;
            if (useDotNotation) {
                fieldData = (0, lodash_get_1.default)(json, field, null);
            }
            else {
                fieldData = json[field] !== undefined ? json[field] : null;
            }
            if (fieldData && dateFields.includes(field)) {
                fieldData = new Date(fieldData);
            }
            if (useDotNotation) {
                (0, lodash_set_1.default)(updateItem, field, fieldData);
            }
            else {
                updateItem[field] = fieldData;
            }
        }
        return updateItem;
    });
    return preperedItems;
}
exports.prepareItems = prepareItems;
function prepareFields(fields) {
    return fields
        .split(',')
        .map((field) => field.trim())
        .filter((field) => !!field);
}
exports.prepareFields = prepareFields;
//# sourceMappingURL=GenericFunctions.js.map