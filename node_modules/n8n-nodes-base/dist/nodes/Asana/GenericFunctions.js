"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTaskFields = exports.getColorOptions = exports.getWorkspaces = exports.asanaApiRequestAllItems = exports.asanaApiRequest = void 0;
const lodash_get_1 = __importDefault(require("lodash.get"));
async function asanaApiRequest(method, endpoint, body, query, uri) {
    const authenticationMethod = this.getNodeParameter('authentication', 0);
    const options = {
        headers: {},
        method,
        body: { data: body },
        qs: query,
        url: uri || `https://app.asana.com/api/1.0${endpoint}`,
        json: true,
    };
    const credentialType = authenticationMethod === 'accessToken' ? 'asanaApi' : 'asanaOAuth2Api';
    return this.helpers.requestWithAuthentication.call(this, credentialType, options);
}
exports.asanaApiRequest = asanaApiRequest;
async function asanaApiRequestAllItems(method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    let uri;
    query.limit = 100;
    do {
        responseData = await asanaApiRequest.call(this, method, endpoint, body, query, uri);
        uri = (0, lodash_get_1.default)(responseData, 'next_page.uri');
        returnData.push.apply(returnData, responseData.data);
    } while (responseData.next_page !== null);
    return returnData;
}
exports.asanaApiRequestAllItems = asanaApiRequestAllItems;
async function getWorkspaces() {
    const endpoint = '/workspaces';
    const responseData = await asanaApiRequestAllItems.call(this, 'GET', endpoint, {});
    const returnData = [];
    for (const workspaceData of responseData) {
        if (workspaceData.resource_type !== 'workspace') {
            continue;
        }
        returnData.push({
            name: workspaceData.name,
            value: workspaceData.gid,
        });
    }
    returnData.sort((a, b) => {
        if (a.name < b.name) {
            return -1;
        }
        if (a.name > b.name) {
            return 1;
        }
        return 0;
    });
    return returnData;
}
exports.getWorkspaces = getWorkspaces;
function getColorOptions() {
    return [
        'dark-blue',
        'dark-brown',
        'dark-green',
        'dark-orange',
        'dark-pink',
        'dark-purple',
        'dark-red',
        'dark-teal',
        'dark-warm-gray',
        'light-blue',
        'light-green',
        'light-orange',
        'light-pink',
        'light-purple',
        'light-red',
        'light-teal',
        'light-warm-gray',
        'light-yellow',
        'none',
    ].map((value) => {
        return {
            name: value,
            value,
        };
    });
}
exports.getColorOptions = getColorOptions;
function getTaskFields() {
    return [
        '*',
        'GID',
        'Resource Type',
        'name',
        'Approval Status',
        'Assignee Status',
        'Completed',
        'Completed At',
        'Completed By',
        'Created At',
        'Dependencies',
        'Dependents',
        'Due At',
        'Due On',
        'External',
        'HTML Notes',
        'Liked',
        'Likes',
        'Memberships',
        'Modified At',
        'Notes',
        'Num Likes',
        'Resource Subtype',
        'Start On',
        'Assignee',
        'Custom Fields',
        'Followers',
        'Parent',
        'Permalink URL',
        'Projects',
        'Tags',
        'Workspace',
    ];
}
exports.getTaskFields = getTaskFields;
//# sourceMappingURL=GenericFunctions.js.map