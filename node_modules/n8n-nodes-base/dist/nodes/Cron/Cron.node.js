"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cron = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const cron_1 = require("cron");
class Cron {
    constructor() {
        this.description = {
            displayName: 'Cron',
            name: 'cron',
            icon: 'fa:clock',
            group: ['trigger', 'schedule'],
            version: 1,
            hidden: true,
            description: 'Triggers the workflow at a specific time',
            eventTriggerDescription: '',
            activationMessage: 'Your cron trigger will now trigger executions on the schedule you have defined.',
            defaults: {
                name: 'Cron',
                color: '#29a568',
            },
            inputs: [],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'This workflow will run on the schedule you define here once you <a data-key="activate">activate</a> it.<br><br>For testing, you can also trigger it manually: by going back to the canvas and clicking ‘execute workflow’',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Trigger Times',
                    name: 'triggerTimes',
                    type: 'fixedCollection',
                    typeOptions: {
                        multipleValues: true,
                        multipleValueButtonText: 'Add Time',
                    },
                    default: {},
                    description: 'Triggers for the workflow',
                    placeholder: 'Add Cron Time',
                    options: n8n_workflow_1.NodeHelpers.cronNodeOptions,
                },
            ],
        };
    }
    async trigger() {
        const triggerTimes = this.getNodeParameter('triggerTimes');
        const cronTimes = (triggerTimes.item || []).map(n8n_workflow_1.toCronExpression);
        const executeTrigger = () => {
            this.emit([this.helpers.returnJsonArray([{}])]);
        };
        const timezone = this.getTimezone();
        const cronJobs = cronTimes.map((cronTime) => new cron_1.CronJob(cronTime, executeTrigger, undefined, true, timezone));
        async function closeFunction() {
            for (const cronJob of cronJobs) {
                cronJob.stop();
            }
        }
        async function manualTriggerFunction() {
            executeTrigger();
        }
        return {
            closeFunction,
            manualTriggerFunction,
        };
    }
}
exports.Cron = Cron;
//# sourceMappingURL=Cron.node.js.map