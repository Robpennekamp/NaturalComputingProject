"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RabbitMQTrigger = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const DefaultOptions_1 = require("./DefaultOptions");
const GenericFunctions_1 = require("./GenericFunctions");
class RabbitMQTrigger {
    constructor() {
        this.description = {
            displayName: 'RabbitMQ Trigger',
            name: 'rabbitmqTrigger',
            icon: 'file:rabbitmq.png',
            group: ['trigger'],
            version: 1,
            description: 'Listens to RabbitMQ messages',
            defaults: {
                name: 'RabbitMQ Trigger',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'rabbitmq',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Queue / Topic',
                    name: 'queue',
                    type: 'string',
                    default: '',
                    placeholder: 'queue-name',
                    description: 'The name of the queue to read from',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Content Is Binary',
                            name: 'contentIsBinary',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to save the content as binary',
                        },
                        {
                            displayName: 'Delete From Queue When',
                            name: 'acknowledge',
                            type: 'options',
                            options: [
                                {
                                    name: 'Execution Finishes',
                                    value: 'executionFinishes',
                                    description: 'After the workflow execution finished. No matter if the execution was successful or not.',
                                },
                                {
                                    name: 'Execution Finishes Successfully',
                                    value: 'executionFinishesSuccessfully',
                                    description: 'After the workflow execution finished successfully',
                                },
                                {
                                    name: 'Immediately',
                                    value: 'immediately',
                                    description: 'As soon as the message got received',
                                },
                            ],
                            default: 'immediately',
                            description: 'When to acknowledge the message',
                        },
                        {
                            displayName: 'JSON Parse Body',
                            name: 'jsonParseBody',
                            type: 'boolean',
                            displayOptions: {
                                hide: {
                                    contentIsBinary: [true],
                                },
                            },
                            default: false,
                            description: 'Whether to parse the body to an object',
                        },
                        {
                            displayName: 'Only Content',
                            name: 'onlyContent',
                            type: 'boolean',
                            displayOptions: {
                                hide: {
                                    contentIsBinary: [true],
                                },
                            },
                            default: false,
                            description: 'Whether to return only the content property',
                        },
                        {
                            displayName: 'Parallel Message Processing Limit',
                            name: 'parallelMessages',
                            type: 'number',
                            default: -1,
                            displayOptions: {
                                hide: {
                                    acknowledge: ['immediately'],
                                },
                            },
                            description: 'Max number of executions at a time. Use -1 for no limit.',
                        },
                        ...DefaultOptions_1.rabbitDefaultOptions,
                    ].sort((a, b) => {
                        if (a.displayName.toLowerCase() <
                            b.displayName.toLowerCase()) {
                            return -1;
                        }
                        if (a.displayName.toLowerCase() >
                            b.displayName.toLowerCase()) {
                            return 1;
                        }
                        return 0;
                    }),
                },
            ],
        };
    }
    async trigger() {
        const queue = this.getNodeParameter('queue');
        const options = this.getNodeParameter('options', {});
        const channel = await GenericFunctions_1.rabbitmqConnectQueue.call(this, queue, options);
        let parallelMessages = options.parallelMessages !== undefined && options.parallelMessages !== -1
            ? parseInt(options.parallelMessages, 10)
            : -1;
        if (parallelMessages === 0 || parallelMessages < -1) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Parallel message processing limit must be greater than zero (or -1 for no limit)');
        }
        if (this.getMode() === 'manual') {
            parallelMessages = 1;
        }
        let acknowledgeMode = options.acknowledge ? options.acknowledge : 'immediately';
        if (parallelMessages !== -1 && acknowledgeMode === 'immediately') {
            acknowledgeMode = 'executionFinishes';
        }
        const messageTracker = new GenericFunctions_1.MessageTracker();
        let consumerTag;
        let closeGotCalled = false;
        const startConsumer = async () => {
            if (parallelMessages !== -1) {
                await channel.prefetch(parallelMessages);
            }
            channel.on('close', () => {
                if (!closeGotCalled) {
                    this.emitError(new Error('Connection got closed unexpectedly'));
                }
            });
            const consumerInfo = await channel.consume(queue, async (message) => {
                if (message !== null) {
                    try {
                        if (acknowledgeMode !== 'immediately') {
                            messageTracker.received(message);
                        }
                        let content = message.content.toString();
                        const item = {
                            json: {},
                        };
                        if (options.contentIsBinary === true) {
                            item.binary = {
                                data: await this.helpers.prepareBinaryData(message.content),
                            };
                            item.json = message;
                            message.content = undefined;
                        }
                        else {
                            if (options.jsonParseBody === true) {
                                content = JSON.parse(content);
                            }
                            if (options.onlyContent === true) {
                                item.json = content;
                            }
                            else {
                                message.content = content;
                                item.json = message;
                            }
                        }
                        let responsePromise = undefined;
                        if (acknowledgeMode !== 'immediately') {
                            responsePromise = await this.helpers.createDeferredPromise();
                        }
                        this.emit([[item]], undefined, responsePromise);
                        if (responsePromise) {
                            await responsePromise.promise().then(async (data) => {
                                if (data.data.resultData.error) {
                                    if (acknowledgeMode === 'executionFinishesSuccessfully') {
                                        channel.nack(message);
                                        messageTracker.answered(message);
                                        return;
                                    }
                                }
                                channel.ack(message);
                                messageTracker.answered(message);
                            });
                        }
                        else {
                            channel.ack(message);
                        }
                    }
                    catch (error) {
                        const workflow = this.getWorkflow();
                        const node = this.getNode();
                        if (acknowledgeMode !== 'immediately') {
                            messageTracker.answered(message);
                        }
                        this.logger.error(`There was a problem with the RabbitMQ Trigger node "${node.name}" in workflow "${workflow.id}": "${error.message}"`, {
                            node: node.name,
                            workflowId: workflow.id,
                        });
                    }
                }
            });
            consumerTag = consumerInfo.consumerTag;
        };
        await startConsumer();
        const closeFunction = async () => {
            closeGotCalled = true;
            try {
                return await messageTracker.closeChannel(channel, consumerTag);
            }
            catch (error) {
                const workflow = this.getWorkflow();
                const node = this.getNode();
                this.logger.error(`There was a problem closing the RabbitMQ Trigger node connection "${node.name}" in workflow "${workflow.id}": "${error.message}"`, {
                    node: node.name,
                    workflowId: workflow.id,
                });
            }
        };
        return {
            closeFunction,
        };
    }
}
exports.RabbitMQTrigger = RabbitMQTrigger;
//# sourceMappingURL=RabbitMQTrigger.node.js.map