import type { IDataObject, IExecuteFunctions, ITriggerFunctions } from 'n8n-workflow';
import * as amqplib from 'amqplib';
export declare function rabbitmqConnect(this: IExecuteFunctions | ITriggerFunctions, options: IDataObject): Promise<amqplib.Channel>;
export declare function rabbitmqConnectQueue(this: IExecuteFunctions | ITriggerFunctions, queue: string, options: IDataObject): Promise<amqplib.Channel>;
export declare function rabbitmqConnectExchange(this: IExecuteFunctions | ITriggerFunctions, exchange: string, type: string, options: IDataObject): Promise<amqplib.Channel>;
export declare class MessageTracker {
    messages: number[];
    isClosing: boolean;
    received(message: amqplib.ConsumeMessage): void;
    answered(message: amqplib.ConsumeMessage): void;
    unansweredMessages(): number;
    closeChannel(channel: amqplib.Channel, consumerTag: string): Promise<void>;
}
