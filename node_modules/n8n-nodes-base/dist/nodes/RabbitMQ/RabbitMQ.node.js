"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RabbitMQ = void 0;
const amqplib = __importStar(require("amqplib"));
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
class RabbitMQ {
    constructor() {
        this.description = {
            displayName: 'RabbitMQ',
            name: 'rabbitmq',
            icon: 'file:rabbitmq.png',
            group: ['transform'],
            version: 1,
            description: 'Sends messages to a RabbitMQ topic',
            defaults: {
                name: 'RabbitMQ',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'rabbitmq',
                    required: true,
                    testedBy: 'rabbitmqConnectionTest',
                },
            ],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'hidden',
                    noDataExpression: true,
                    default: 'send_message',
                    options: [
                        {
                            name: 'Send a Message to RabbitMQ',
                            value: 'send_message',
                        },
                    ],
                },
                {
                    displayName: 'Mode',
                    name: 'mode',
                    type: 'options',
                    options: [
                        {
                            name: 'Queue',
                            value: 'queue',
                            description: 'Publish data to queue',
                        },
                        {
                            name: 'Exchange',
                            value: 'exchange',
                            description: 'Publish data to exchange',
                        },
                    ],
                    default: 'queue',
                    description: 'To where data should be moved',
                },
                {
                    displayName: 'Queue / Topic',
                    name: 'queue',
                    type: 'string',
                    displayOptions: {
                        show: {
                            mode: ['queue'],
                        },
                    },
                    default: '',
                    placeholder: 'queue-name',
                    description: 'Name of the queue to publish to',
                },
                {
                    displayName: 'Exchange',
                    name: 'exchange',
                    type: 'string',
                    displayOptions: {
                        show: {
                            mode: ['exchange'],
                        },
                    },
                    default: '',
                    placeholder: 'exchange-name',
                    description: 'Name of the exchange to publish to',
                },
                {
                    displayName: 'Type',
                    name: 'exchangeType',
                    type: 'options',
                    displayOptions: {
                        show: {
                            mode: ['exchange'],
                        },
                    },
                    options: [
                        {
                            name: 'Direct',
                            value: 'direct',
                            description: 'Direct exchange type',
                        },
                        {
                            name: 'Topic',
                            value: 'topic',
                            description: 'Topic exchange type',
                        },
                        {
                            name: 'Headers',
                            value: 'headers',
                            description: 'Headers exchange type',
                        },
                        {
                            name: 'Fanout',
                            value: 'fanout',
                            description: 'Fanout exchange type',
                        },
                    ],
                    default: 'fanout',
                    description: 'Type of exchange',
                },
                {
                    displayName: 'Routing Key',
                    name: 'routingKey',
                    type: 'string',
                    displayOptions: {
                        show: {
                            mode: ['exchange'],
                        },
                    },
                    default: '',
                    placeholder: 'routing-key',
                    description: 'The routing key for the message',
                },
                {
                    displayName: 'Send Input Data',
                    name: 'sendInputData',
                    type: 'boolean',
                    default: true,
                    description: 'Whether to send the the data the node receives as JSON',
                },
                {
                    displayName: 'Message',
                    name: 'message',
                    type: 'string',
                    displayOptions: {
                        show: {
                            sendInputData: [false],
                        },
                    },
                    default: '',
                    description: 'The message to be sent',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Alternate Exchange',
                            name: 'alternateExchange',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/mode': ['exchange'],
                                },
                            },
                            default: '',
                            description: 'An exchange to send messages to if this exchange canâ€™t route them to any queues',
                        },
                        {
                            displayName: 'Arguments',
                            name: 'arguments',
                            placeholder: 'Add Argument',
                            description: 'Arguments to add',
                            type: 'fixedCollection',
                            typeOptions: {
                                multipleValues: true,
                            },
                            default: {},
                            options: [
                                {
                                    name: 'argument',
                                    displayName: 'Argument',
                                    values: [
                                        {
                                            displayName: 'Key',
                                            name: 'key',
                                            type: 'string',
                                            default: '',
                                        },
                                        {
                                            displayName: 'Value',
                                            name: 'value',
                                            type: 'string',
                                            default: '',
                                        },
                                    ],
                                },
                            ],
                        },
                        {
                            displayName: 'Auto Delete Queue',
                            name: 'autoDelete',
                            type: 'boolean',
                            default: false,
                            description: 'Whether the queue will be deleted when the number of consumers drops to zero',
                        },
                        {
                            displayName: 'Durable',
                            name: 'durable',
                            type: 'boolean',
                            default: true,
                            description: 'Whether the queue will survive broker restarts',
                        },
                        {
                            displayName: 'Exclusive',
                            name: 'exclusive',
                            type: 'boolean',
                            displayOptions: {
                                show: {
                                    '/mode': ['queue'],
                                },
                            },
                            default: false,
                            description: 'Whether to scope the queue to the connection',
                        },
                        {
                            displayName: 'Headers',
                            name: 'headers',
                            placeholder: 'Add Header',
                            description: 'Headers to add',
                            type: 'fixedCollection',
                            typeOptions: {
                                multipleValues: true,
                            },
                            default: {},
                            options: [
                                {
                                    name: 'header',
                                    displayName: 'Header',
                                    values: [
                                        {
                                            displayName: 'Key',
                                            name: 'key',
                                            type: 'string',
                                            default: '',
                                        },
                                        {
                                            displayName: 'Value',
                                            name: 'value',
                                            type: 'string',
                                            default: '',
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        };
        this.methods = {
            credentialTest: {
                async rabbitmqConnectionTest(credential) {
                    const credentials = credential.data;
                    try {
                        const credentialKeys = ['hostname', 'port', 'username', 'password', 'vhost'];
                        const credentialData = {};
                        credentialKeys.forEach((key) => {
                            credentialData[key] = credentials[key] === '' ? undefined : credentials[key];
                        });
                        const optsData = {};
                        if (credentials.ssl === true) {
                            credentialData.protocol = 'amqps';
                            optsData.ca =
                                credentials.ca === '' ? undefined : [Buffer.from(credentials.ca)];
                            if (credentials.passwordless === true) {
                                optsData.cert =
                                    credentials.cert === '' ? undefined : Buffer.from(credentials.cert);
                                optsData.key =
                                    credentials.key === '' ? undefined : Buffer.from(credentials.key);
                                optsData.passphrase =
                                    credentials.passphrase === '' ? undefined : credentials.passphrase;
                                optsData.credentials = amqplib.credentials.external();
                            }
                        }
                        const connection = await amqplib.connect(credentialData, optsData);
                        await connection.close();
                    }
                    catch (error) {
                        return {
                            status: 'Error',
                            message: error.message,
                        };
                    }
                    return {
                        status: 'OK',
                        message: 'Connection successful!',
                    };
                },
            },
        };
    }
    async execute() {
        let channel, options;
        try {
            const items = this.getInputData();
            const mode = this.getNodeParameter('mode', 0);
            const returnItems = [];
            if (mode === 'queue') {
                const queue = this.getNodeParameter('queue', 0);
                options = this.getNodeParameter('options', 0, {});
                channel = await GenericFunctions_1.rabbitmqConnectQueue.call(this, queue, options);
                const sendInputData = this.getNodeParameter('sendInputData', 0);
                let message;
                const queuePromises = [];
                for (let i = 0; i < items.length; i++) {
                    if (sendInputData) {
                        message = JSON.stringify(items[i].json);
                    }
                    else {
                        message = this.getNodeParameter('message', i);
                    }
                    let headers = {};
                    if (options.headers &&
                        options.headers.header.length) {
                        const itemOptions = this.getNodeParameter('options', i, {});
                        const additionalHeaders = {};
                        itemOptions.headers.header.forEach((header) => {
                            additionalHeaders[header.key] = header.value;
                        });
                        headers = additionalHeaders;
                    }
                    queuePromises.push(channel.sendToQueue(queue, Buffer.from(message), { headers }));
                }
                const promisesResponses = await Promise.allSettled(queuePromises);
                promisesResponses.forEach((response) => {
                    if (response.status !== 'fulfilled') {
                        if (!this.continueOnFail()) {
                            throw new n8n_workflow_1.NodeApiError(this.getNode(), response);
                        }
                        else {
                            returnItems.push({
                                json: {
                                    error: response.reason,
                                },
                            });
                            return;
                        }
                    }
                    returnItems.push({
                        json: {
                            success: response.value,
                        },
                    });
                });
                await channel.close();
                await channel.connection.close();
            }
            else if (mode === 'exchange') {
                const exchange = this.getNodeParameter('exchange', 0);
                const type = this.getNodeParameter('exchangeType', 0);
                const routingKey = this.getNodeParameter('routingKey', 0);
                options = this.getNodeParameter('options', 0, {});
                channel = await GenericFunctions_1.rabbitmqConnectExchange.call(this, exchange, type, options);
                const sendInputData = this.getNodeParameter('sendInputData', 0);
                let message;
                const exchangePromises = [];
                for (let i = 0; i < items.length; i++) {
                    if (sendInputData) {
                        message = JSON.stringify(items[i].json);
                    }
                    else {
                        message = this.getNodeParameter('message', i);
                    }
                    let headers = {};
                    if (options.headers &&
                        options.headers.header.length) {
                        const itemOptions = this.getNodeParameter('options', i, {});
                        const additionalHeaders = {};
                        itemOptions.headers.header.forEach((header) => {
                            additionalHeaders[header.key] = header.value;
                        });
                        headers = additionalHeaders;
                    }
                    exchangePromises.push(channel.publish(exchange, routingKey, Buffer.from(message), { headers }));
                }
                const promisesResponses = await Promise.allSettled(exchangePromises);
                promisesResponses.forEach((response) => {
                    if (response.status !== 'fulfilled') {
                        if (!this.continueOnFail()) {
                            throw new n8n_workflow_1.NodeApiError(this.getNode(), response);
                        }
                        else {
                            returnItems.push({
                                json: {
                                    error: response.reason,
                                },
                            });
                            return;
                        }
                    }
                    returnItems.push({
                        json: {
                            success: response.value,
                        },
                    });
                });
                await channel.close();
                await channel.connection.close();
            }
            else {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The operation "${mode}" is not known!`);
            }
            return await this.prepareOutputData(returnItems);
        }
        catch (error) {
            if (channel) {
                await channel.close();
                await channel.connection.close();
            }
            throw error;
        }
    }
}
exports.RabbitMQ = RabbitMQ;
//# sourceMappingURL=RabbitMQ.node.js.map