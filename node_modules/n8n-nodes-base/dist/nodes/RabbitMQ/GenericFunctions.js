"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageTracker = exports.rabbitmqConnectExchange = exports.rabbitmqConnectQueue = exports.rabbitmqConnect = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const amqplib = __importStar(require("amqplib"));
async function rabbitmqConnect(options) {
    const credentials = await this.getCredentials('rabbitmq');
    const credentialKeys = ['hostname', 'port', 'username', 'password', 'vhost'];
    const credentialData = {};
    credentialKeys.forEach((key) => {
        credentialData[key] = credentials[key] === '' ? undefined : credentials[key];
    });
    const optsData = {};
    if (credentials.ssl === true) {
        credentialData.protocol = 'amqps';
        optsData.ca = credentials.ca === '' ? undefined : [Buffer.from(credentials.ca)];
        if (credentials.passwordless === true) {
            optsData.cert = credentials.cert === '' ? undefined : Buffer.from(credentials.cert);
            optsData.key = credentials.key === '' ? undefined : Buffer.from(credentials.key);
            optsData.passphrase = credentials.passphrase === '' ? undefined : credentials.passphrase;
            optsData.credentials = amqplib.credentials.external();
        }
    }
    return new Promise(async (resolve, reject) => {
        try {
            const connection = await amqplib.connect(credentialData, optsData);
            connection.on('error', (error) => {
                reject(error);
            });
            const channel = (await connection.createChannel().catch(console.warn));
            if (options.arguments &&
                options.arguments.argument.length) {
                const additionalArguments = {};
                options.arguments.argument.forEach((argument) => {
                    additionalArguments[argument.key] = argument.value;
                });
                options.arguments = additionalArguments;
            }
            resolve(channel);
        }
        catch (error) {
            reject(error);
        }
    });
}
exports.rabbitmqConnect = rabbitmqConnect;
async function rabbitmqConnectQueue(queue, options) {
    const channel = await rabbitmqConnect.call(this, options);
    return new Promise(async (resolve, reject) => {
        try {
            await channel.assertQueue(queue, options);
            resolve(channel);
        }
        catch (error) {
            reject(error);
        }
    });
}
exports.rabbitmqConnectQueue = rabbitmqConnectQueue;
async function rabbitmqConnectExchange(exchange, type, options) {
    const channel = await rabbitmqConnect.call(this, options);
    return new Promise(async (resolve, reject) => {
        try {
            await channel.assertExchange(exchange, type, options);
            resolve(channel);
        }
        catch (error) {
            reject(error);
        }
    });
}
exports.rabbitmqConnectExchange = rabbitmqConnectExchange;
class MessageTracker {
    constructor() {
        this.messages = [];
        this.isClosing = false;
    }
    received(message) {
        this.messages.push(message.fields.deliveryTag);
    }
    answered(message) {
        if (this.messages.length === 0) {
            return;
        }
        const index = this.messages.findIndex((value) => value !== message.fields.deliveryTag);
        this.messages.splice(index);
    }
    unansweredMessages() {
        return this.messages.length;
    }
    async closeChannel(channel, consumerTag) {
        if (this.isClosing) {
            return;
        }
        this.isClosing = true;
        await channel.cancel(consumerTag);
        let count = 0;
        let unansweredMessages = this.unansweredMessages();
        while (unansweredMessages !== 0 && count++ <= 300) {
            await (0, n8n_workflow_1.sleep)(1000);
            unansweredMessages = this.unansweredMessages();
        }
        await channel.close();
        await channel.connection.close();
    }
}
exports.MessageTracker = MessageTracker;
//# sourceMappingURL=GenericFunctions.js.map