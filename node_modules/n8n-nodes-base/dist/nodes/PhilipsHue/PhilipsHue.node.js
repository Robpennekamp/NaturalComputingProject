"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhilipsHue = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const LightDescription_1 = require("./LightDescription");
class PhilipsHue {
    constructor() {
        this.description = {
            displayName: 'Philips Hue',
            name: 'philipsHue',
            icon: 'file:philipshue.png',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Philips Hue API',
            defaults: {
                name: 'Philips Hue',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'philipsHueOAuth2Api',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Light',
                            value: 'light',
                        },
                    ],
                    default: 'light',
                },
                ...LightDescription_1.lightOperations,
                ...LightDescription_1.lightFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getLights() {
                    const returnData = [];
                    const user = await GenericFunctions_1.getUser.call(this);
                    const lights = await GenericFunctions_1.philipsHueApiRequest.call(this, 'GET', `/api/${user}/lights`);
                    const groups = await GenericFunctions_1.philipsHueApiRequest.call(this, 'GET', `/api/${user}/groups`);
                    for (const light of Object.keys(lights)) {
                        let lightName = lights[light].name;
                        const lightId = light;
                        for (const groupId of Object.keys(groups)) {
                            if (groups[groupId].type === 'Room' && groups[groupId].lights.includes(lightId)) {
                                lightName = `${groups[groupId].name}: ${lightName}`;
                            }
                        }
                        returnData.push({
                            name: lightName,
                            value: lightId,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            if (resource === 'light') {
                if (operation === 'update') {
                    const lightId = this.getNodeParameter('lightId', i);
                    const on = this.getNodeParameter('on', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const body = {
                        on,
                    };
                    if (additionalFields.transitiontime) {
                        additionalFields.transitiontime = additionalFields.transitiontime * 100;
                    }
                    if (additionalFields.xy) {
                        additionalFields.xy = additionalFields.xy
                            .split(',')
                            .map((e) => parseFloat(e));
                    }
                    if (additionalFields.xy_inc) {
                        additionalFields.xy_inc = additionalFields.xy_inc
                            .split(',')
                            .map((e) => parseFloat(e));
                    }
                    Object.assign(body, additionalFields);
                    const user = await GenericFunctions_1.getUser.call(this);
                    const data = await GenericFunctions_1.philipsHueApiRequest.call(this, 'PUT', `/api/${user}/lights/${lightId}/state`, body);
                    responseData = {};
                    for (const response of data) {
                        Object.assign(responseData, response.success);
                    }
                }
                if (operation === 'delete') {
                    const lightId = this.getNodeParameter('lightId', i);
                    const user = await GenericFunctions_1.getUser.call(this);
                    responseData = await GenericFunctions_1.philipsHueApiRequest.call(this, 'DELETE', `/api/${user}/lights/${lightId}`);
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const user = await GenericFunctions_1.getUser.call(this);
                    const lights = await GenericFunctions_1.philipsHueApiRequest.call(this, 'GET', `/api/${user}/lights`);
                    responseData = Object.values(lights);
                    if (!returnAll) {
                        const limit = this.getNodeParameter('limit', i);
                        responseData = responseData.splice(0, limit);
                    }
                }
                if (operation === 'get') {
                    const lightId = this.getNodeParameter('lightId', i);
                    const user = await GenericFunctions_1.getUser.call(this);
                    responseData = await GenericFunctions_1.philipsHueApiRequest.call(this, 'GET', `/api/${user}/lights/${lightId}`);
                }
            }
            const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
            returnData.push(...executionData);
        }
        return this.prepareOutputData(returnData);
    }
}
exports.PhilipsHue = PhilipsHue;
//# sourceMappingURL=PhilipsHue.node.js.map