"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TravisCi = void 0;
const BuildDescription_1 = require("./BuildDescription");
const GenericFunctions_1 = require("./GenericFunctions");
class TravisCi {
    constructor() {
        this.description = {
            displayName: 'TravisCI',
            name: 'travisCi',
            icon: 'file:travisci.png',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume TravisCI API',
            defaults: {
                name: 'TravisCI',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'travisCiApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Build',
                            value: 'build',
                        },
                    ],
                    default: 'build',
                },
                ...BuildDescription_1.buildOperations,
                ...BuildDescription_1.buildFields,
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'build') {
                    if (operation === 'get') {
                        const buildId = this.getNodeParameter('buildId', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (additionalFields.include) {
                            qs.include = additionalFields.include;
                        }
                        responseData = await GenericFunctions_1.travisciApiRequest.call(this, 'GET', `/build/${buildId}`, {}, qs);
                    }
                    if (operation === 'getAll') {
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const returnAll = this.getNodeParameter('returnAll', i);
                        if (additionalFields.sortBy) {
                            qs.sort_by = additionalFields.sortBy;
                        }
                        if (additionalFields.sortBy && additionalFields.order) {
                            qs.sort_by = `${additionalFields.sortBy}:${additionalFields.order}`;
                        }
                        if (additionalFields.include) {
                            qs.include = additionalFields.include;
                        }
                        if (returnAll) {
                            responseData = await GenericFunctions_1.travisciApiRequestAllItems.call(this, 'builds', 'GET', '/builds', {}, qs);
                        }
                        else {
                            qs.limit = this.getNodeParameter('limit', i);
                            responseData = await GenericFunctions_1.travisciApiRequest.call(this, 'GET', '/builds', {}, qs);
                            responseData = responseData.builds;
                        }
                    }
                    if (operation === 'cancel') {
                        const buildId = this.getNodeParameter('buildId', i);
                        responseData = await GenericFunctions_1.travisciApiRequest.call(this, 'POST', `/build/${buildId}/cancel`, {}, qs);
                    }
                    if (operation === 'restart') {
                        const buildId = this.getNodeParameter('buildId', i);
                        responseData = await GenericFunctions_1.travisciApiRequest.call(this, 'POST', `/build/${buildId}/restart`, {}, qs);
                    }
                    if (operation === 'trigger') {
                        let slug = this.getNodeParameter('slug', i);
                        const branch = this.getNodeParameter('branch', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        slug = slug.replace(new RegExp(/\//g), '%2F');
                        const request = {
                            branch,
                        };
                        if (additionalFields.message) {
                            request.message = additionalFields.message;
                        }
                        if (additionalFields.mergeMode) {
                            request.merge_mode = additionalFields.mergeMode;
                        }
                        responseData = await GenericFunctions_1.travisciApiRequest.call(this, 'POST', `/repo/${slug}/requests`, JSON.stringify({ request }));
                    }
                }
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    const executionErrorData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray({ error: error.message }), { itemData: { item: i } });
                    returnData.push(...executionErrorData);
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.TravisCi = TravisCi;
//# sourceMappingURL=TravisCi.node.js.map