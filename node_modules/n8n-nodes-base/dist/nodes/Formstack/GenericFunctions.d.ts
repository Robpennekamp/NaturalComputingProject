import type { IDataObject, IExecuteFunctions, IHookFunctions, ILoadOptionsFunctions, IWebhookFunctions, INodePropertyOptions } from 'n8n-workflow';
export interface IFormstackFieldDefinitionType {
    id: string;
    label: string;
    description: string;
    name: string;
    type: string;
    options: unknown;
    required: string;
    uniq: string;
    hidden: string;
    readonly: string;
    colspan: string;
    label_position: string;
    num_columns: string;
    date_format: string;
    time_format: string;
}
export interface IFormstackWebhookResponseBody {
    FormID: string;
    UniqueID: string;
}
export interface IFormstackSubmissionFieldContainer {
    field: string;
    value: string;
}
export declare const enum FormstackFieldFormat {
    ID = "id",
    Label = "label",
    Name = "name"
}
export declare function apiRequest(this: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IWebhookFunctions, method: string, endpoint: string, body?: IDataObject, query?: IDataObject): Promise<any>;
export declare function apiRequestAllItems(this: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IWebhookFunctions, method: string, endpoint: string, body: IDataObject, dataKey: string, query?: IDataObject): Promise<any>;
export declare function getForms(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
export declare function getFields(this: IWebhookFunctions, formID: string): Promise<Record<string, IFormstackFieldDefinitionType>>;
export declare function getSubmission(this: ILoadOptionsFunctions | IWebhookFunctions, uniqueId: string): Promise<IFormstackSubmissionFieldContainer[]>;
