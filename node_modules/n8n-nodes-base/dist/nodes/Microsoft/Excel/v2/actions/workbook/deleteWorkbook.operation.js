"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const utilities_1 = require("../../../../../../utils/utilities");
const transport_1 = require("../../transport");
const common_descriptions_1 = require("../common.descriptions");
const properties = [common_descriptions_1.workbookRLC];
const displayOptions = {
    show: {
        resource: ['workbook'],
        operation: ['deleteWorkbook'],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, properties);
async function execute(items) {
    const returnData = [];
    for (let i = 0; i < items.length; i++) {
        try {
            const workbookId = this.getNodeParameter('workbook', i, undefined, {
                extractValue: true,
            });
            try {
                await transport_1.microsoftApiRequest.call(this, 'DELETE', `/drive/items/${workbookId}`);
            }
            catch (error) {
                if (error === null || error === void 0 ? void 0 : error.description.includes('Lock token does not match existing lock')) {
                    const errorDescription = 'Lock token does not match existing lock, this error could happen if the file is opened in the browser or the Office client, please close file and try again.';
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), error, {
                        itemIndex: i,
                        description: errorDescription,
                    });
                }
                else {
                    throw error;
                }
            }
            const responseData = { success: true };
            if (Array.isArray(responseData)) {
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
            else if (responseData !== undefined) {
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
        }
        catch (error) {
            if (this.continueOnFail()) {
                const executionErrorData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray({ error: error.message }), { itemData: { item: i } });
                returnData.push(...executionErrorData);
                continue;
            }
            throw error;
        }
    }
    return returnData;
}
exports.execute = execute;
//# sourceMappingURL=deleteWorkbook.operation.js.map