"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTableColumns = exports.getWorksheetColumnRowSkipColumnToMatchOn = exports.getWorksheetColumnRow = void 0;
const transport_1 = require("../transport");
async function getWorksheetColumnRow() {
    const workbookId = this.getNodeParameter('workbook', undefined, {
        extractValue: true,
    });
    const worksheetId = this.getNodeParameter('worksheet', undefined, {
        extractValue: true,
    });
    let range = this.getNodeParameter('range', '');
    let columns = [];
    if (range === '') {
        const worksheetData = await transport_1.microsoftApiRequest.call(this, 'GET', `/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/usedRange`, undefined, { select: 'values' });
        columns = worksheetData.values[0];
    }
    else {
        const [rangeFrom, rangeTo] = range.split(':');
        const cellDataFrom = rangeFrom.match(/([a-zA-Z]{1,10})([0-9]{0,10})/) || [];
        const cellDataTo = rangeTo.match(/([a-zA-Z]{1,10})([0-9]{0,10})/) || [];
        range = `${rangeFrom}:${cellDataTo[1]}${cellDataFrom[2]}`;
        const worksheetData = await transport_1.microsoftApiRequest.call(this, 'PATCH', `/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/range(address='${range}')`, { select: 'values' });
        columns = worksheetData.values[0];
    }
    const returnData = [];
    for (const column of columns) {
        returnData.push({
            name: column,
            value: column,
        });
    }
    return returnData;
}
exports.getWorksheetColumnRow = getWorksheetColumnRow;
async function getWorksheetColumnRowSkipColumnToMatchOn() {
    const returnData = await getWorksheetColumnRow.call(this);
    const columnToMatchOn = this.getNodeParameter('columnToMatchOn', 0);
    return returnData.filter((column) => column.value !== columnToMatchOn);
}
exports.getWorksheetColumnRowSkipColumnToMatchOn = getWorksheetColumnRowSkipColumnToMatchOn;
async function getTableColumns() {
    const workbookId = this.getNodeParameter('workbook', undefined, {
        extractValue: true,
    });
    const worksheetId = this.getNodeParameter('worksheet', undefined, {
        extractValue: true,
    });
    const tableId = this.getNodeParameter('table', undefined, {
        extractValue: true,
    });
    const response = await transport_1.microsoftApiRequest.call(this, 'GET', `/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/tables/${tableId}/columns`, {});
    return response.value.map((column) => ({
        name: column.name,
        value: column.name,
    }));
}
exports.getTableColumns = getTableColumns;
//# sourceMappingURL=loadOptions.js.map