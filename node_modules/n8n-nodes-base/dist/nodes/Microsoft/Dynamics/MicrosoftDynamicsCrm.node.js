"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MicrosoftDynamicsCrm = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const descriptions_1 = require("./descriptions");
class MicrosoftDynamicsCrm {
    constructor() {
        this.description = {
            displayName: 'Microsoft Dynamics CRM',
            name: 'microsoftDynamicsCrm',
            icon: 'file:dynamicsCrm.svg',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Microsoft Dynamics CRM API',
            defaults: {
                name: 'Microsoft Dynamics CRM',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'microsoftDynamicsOAuth2Api',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Account',
                            value: 'account',
                        },
                    ],
                    default: 'account',
                },
                ...descriptions_1.accountOperations,
                ...descriptions_1.accountFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getAccountCategories() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'accountcategorycode');
                },
                async getAccountRatingCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'accountratingcode');
                },
                async getAddressTypes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'address1_addresstypecode');
                },
                async getBusinessTypes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'businesstypecode');
                },
                async getCustomerSizeCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'customersizecode');
                },
                async getCustomerTypeCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'customertypecode');
                },
                async getIndustryCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'industrycode');
                },
                async getPaymentTermsCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'paymenttermscode');
                },
                async getPreferredAppointmentDayCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'preferredappointmentdaycode');
                },
                async getPreferredAppointmentTimeCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'preferredappointmenttimecode');
                },
                async getPreferredContactMethodCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'preferredcontactmethodcode');
                },
                async getShippingMethodCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'shippingmethodcode');
                },
                async getTerritoryCodes() {
                    return GenericFunctions_1.getPicklistOptions.call(this, 'account', 'territorycode');
                },
                async getAccountFields() {
                    const fields = await GenericFunctions_1.getEntityFields.call(this, 'account');
                    const isSelectable = (field) => field.IsValidForRead &&
                        field.CanBeSecuredForRead &&
                        field.IsValidODataAttribute &&
                        field.LogicalName !== 'slaid';
                    return fields
                        .filter(isSelectable)
                        .filter((field) => { var _a; return (_a = field.DisplayName.UserLocalizedLabel) === null || _a === void 0 ? void 0 : _a.Label; })
                        .map((field) => ({
                        name: field.DisplayName.UserLocalizedLabel.Label,
                        value: field.LogicalName,
                    }))
                        .sort(GenericFunctions_1.sort);
                },
                async getExpandableAccountFields() {
                    const fields = await GenericFunctions_1.getEntityFields.call(this, 'account');
                    const isSelectable = (field) => field.IsValidForRead &&
                        field.CanBeSecuredForRead &&
                        field.IsValidODataAttribute &&
                        field.AttributeType === 'Lookup' &&
                        field.LogicalName !== 'slaid';
                    return fields
                        .filter(isSelectable)
                        .map((field) => ({
                        name: field.DisplayName.UserLocalizedLabel.Label,
                        value: field.LogicalName,
                    }))
                        .sort(GenericFunctions_1.sort);
                },
            },
        };
    }
    async execute() {
        var _a, _b;
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'account') {
                    if (operation === 'create') {
                        const name = this.getNodeParameter('name', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const options = this.getNodeParameter('options', i);
                        const body = {
                            name,
                            ...additionalFields,
                        };
                        if ((_a = body === null || body === void 0 ? void 0 : body.addresses) === null || _a === void 0 ? void 0 : _a.address) {
                            Object.assign(body, (0, GenericFunctions_1.adjustAddresses)(body.addresses.address));
                            body === null || body === void 0 ? true : delete body.addresses;
                        }
                        if (options.returnFields) {
                            options.returnFields.push('accountid');
                            qs.$select = options.returnFields.join(',');
                        }
                        else {
                            qs.$select = 'accountid';
                        }
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'POST', '/accounts', body, qs);
                    }
                    if (operation === 'delete') {
                        const accountId = this.getNodeParameter('accountId', i);
                        await GenericFunctions_1.microsoftApiRequest.call(this, 'DELETE', `/accounts(${accountId})`, {}, qs);
                        responseData = { success: true };
                    }
                    if (operation === 'get') {
                        const accountId = this.getNodeParameter('accountId', i);
                        const options = this.getNodeParameter('options', i);
                        if (options.returnFields) {
                            qs.$select = options.returnFields.join(',');
                        }
                        if (options.expandFields) {
                            qs.$expand = options.expandFields.join(',');
                        }
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/accounts(${accountId})`, {}, qs);
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const options = this.getNodeParameter('options', i);
                        const filters = this.getNodeParameter('filters', i);
                        if (options.returnFields) {
                            qs.$select = options.returnFields.join(',');
                        }
                        if (options.expandFields) {
                            qs.$expand = options.expandFields.join(',');
                        }
                        if (filters.query) {
                            qs.$filter = filters.query;
                        }
                        if (returnAll) {
                            responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', '/accounts', {}, qs);
                        }
                        else {
                            qs.$top = this.getNodeParameter('limit', 0);
                            responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', '/accounts', {}, qs);
                            responseData = responseData.value;
                        }
                    }
                    if (operation === 'update') {
                        const accountId = this.getNodeParameter('accountId', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const options = this.getNodeParameter('options', i);
                        const body = {
                            ...updateFields,
                        };
                        if ((_b = body === null || body === void 0 ? void 0 : body.addresses) === null || _b === void 0 ? void 0 : _b.address) {
                            Object.assign(body, (0, GenericFunctions_1.adjustAddresses)(body.addresses.address));
                            body === null || body === void 0 ? true : delete body.addresses;
                        }
                        if (options.returnFields) {
                            options.returnFields.push('accountid');
                            qs.$select = options.returnFields.join(',');
                        }
                        else {
                            qs.$select = 'accountid';
                        }
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'PATCH', `/accounts(${accountId})`, body, qs);
                    }
                }
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    const executionErrorData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray({ error: error.message }), { itemData: { item: i } });
                    returnData.push(...executionErrorData);
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.MicrosoftDynamicsCrm = MicrosoftDynamicsCrm;
//# sourceMappingURL=MicrosoftDynamicsCrm.node.js.map