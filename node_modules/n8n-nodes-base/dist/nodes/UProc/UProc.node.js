"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UProc = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const GroupDescription_1 = require("./GroupDescription");
const ToolDescription_1 = require("./ToolDescription");
class UProc {
    constructor() {
        this.description = {
            displayName: 'uProc',
            name: 'uproc',
            icon: 'file:uproc.png',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["tool"]}}',
            description: 'Consume uProc API',
            defaults: {
                name: 'uProc',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'uprocApi',
                    required: true,
                },
            ],
            properties: [
                ...GroupDescription_1.groupOptions,
                ...ToolDescription_1.toolOperations,
                ...ToolDescription_1.toolParameters,
                {
                    displayName: 'Additional Options',
                    name: 'additionalOptions',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    displayOptions: {
                        show: {
                            group: [
                                'audio',
                                'communication',
                                'company',
                                'finance',
                                'geographic',
                                'image',
                                'internet',
                                'personal',
                                'product',
                                'security',
                                'text',
                            ],
                        },
                    },
                    options: [
                        {
                            displayName: 'Data Webhook',
                            name: 'dataWebhook',
                            type: 'string',
                            description: 'URL to send tool response when tool has resolved your request',
                            default: '',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let responseData;
        const group = this.getNodeParameter('group', 0);
        const tool = this.getNodeParameter('tool', 0);
        const additionalOptions = this.getNodeParameter('additionalOptions', 0);
        const dataWebhook = additionalOptions.dataWebhook;
        const fields = ToolDescription_1.toolParameters
            .filter((field) => {
            var _a, _b;
            return (((_b = (_a = field === null || field === void 0 ? void 0 : field.displayOptions) === null || _a === void 0 ? void 0 : _a.show) === null || _b === void 0 ? void 0 : _b.group) &&
                field.displayOptions.show.tool &&
                field.displayOptions.show.group.indexOf(group) !== -1 &&
                field.displayOptions.show.tool.indexOf(tool) !== -1);
        })
            .map((field) => {
            return field.name;
        });
        const _requestPromises = [];
        for (let i = 0; i < length; i++) {
            try {
                const toolKey = tool.replace(/([A-Z]+)/g, '-$1').toLowerCase();
                const body = {
                    processor: toolKey,
                    params: {},
                };
                fields.forEach((field) => {
                    if (field === null || field === void 0 ? void 0 : field.length) {
                        const data = this.getNodeParameter(field, i);
                        body.params[field] = data + '';
                    }
                });
                if (dataWebhook === null || dataWebhook === void 0 ? void 0 : dataWebhook.length) {
                    body.callback = {};
                }
                if (dataWebhook === null || dataWebhook === void 0 ? void 0 : dataWebhook.length) {
                    body.callback.data = dataWebhook;
                }
                responseData = await GenericFunctions_1.uprocApiRequest.call(this, 'POST', body);
                if (Array.isArray(responseData)) {
                    returnData.push.apply(returnData, responseData);
                }
                else {
                    returnData.push(responseData);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.UProc = UProc;
//# sourceMappingURL=UProc.node.js.map