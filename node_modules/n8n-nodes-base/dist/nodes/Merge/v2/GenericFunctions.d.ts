import type { IBinaryKeyData, IDataObject, INodeExecutionData, IPairedItemData } from 'n8n-workflow';
type PairToMatch = {
    field1: string;
    field2: string;
};
export type MatchFieldsOptions = {
    joinMode: MatchFieldsJoinMode;
    outputDataFrom: MatchFieldsOutput;
    multipleMatches: MultipleMatches;
    disableDotNotation: boolean;
    fuzzyCompare?: boolean;
};
export type ClashResolveOptions = {
    resolveClash: ClashResolveMode;
    mergeMode: ClashMergeMode;
    overrideEmpty: boolean;
};
type ClashMergeMode = 'deepMerge' | 'shallowMerge';
type ClashResolveMode = 'addSuffix' | 'preferInput1' | 'preferInput2';
type MultipleMatches = 'all' | 'first';
export type MatchFieldsOutput = 'both' | 'input1' | 'input2';
export type MatchFieldsJoinMode = 'keepEverything' | 'keepMatches' | 'keepNonMatches' | 'enrichInput2' | 'enrichInput1';
type EntryMatches = {
    entry: INodeExecutionData;
    matches: INodeExecutionData[];
};
export declare function addSuffixToEntriesKeys(data: INodeExecutionData[], suffix: string): {
    json: IDataObject;
    binary?: IBinaryKeyData | undefined;
    error?: import("n8n-workflow").NodeOperationError | import("n8n-workflow").NodeApiError | undefined;
    pairedItem?: number | IPairedItemData | IPairedItemData[] | undefined;
    index?: number | undefined;
}[];
export declare function findMatches(input1: INodeExecutionData[], input2: INodeExecutionData[], fieldsToMatch: PairToMatch[], options: MatchFieldsOptions): {
    matched: EntryMatches[];
    matched2: INodeExecutionData[];
    unmatched1: INodeExecutionData[];
    unmatched2: INodeExecutionData[];
};
export declare function selectMergeMethod(clashResolveOptions: ClashResolveOptions): (target: IDataObject, ...source: IDataObject[]) => any;
export declare function mergeMatched(matched: EntryMatches[], clashResolveOptions: ClashResolveOptions, joinMode?: MatchFieldsJoinMode): INodeExecutionData[];
export declare function checkMatchFieldsInput(data: IDataObject[]): PairToMatch[];
export declare function checkInput(input: INodeExecutionData[], fields: string[], disableDotNotation: boolean, inputLabel: string): INodeExecutionData[];
export declare function addSourceField(data: INodeExecutionData[], sourceField: string): {
    json: {
        _source: string;
    };
    binary?: IBinaryKeyData | undefined;
    error?: import("n8n-workflow").NodeOperationError | import("n8n-workflow").NodeApiError | undefined;
    pairedItem?: number | IPairedItemData | IPairedItemData[] | undefined;
    index?: number | undefined;
}[];
export {};
