"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrateDb = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const genericFunctions_1 = require("../Postgres/v1/genericFunctions");
const pg_promise_1 = __importDefault(require("pg-promise"));
class CrateDb {
    constructor() {
        this.description = {
            displayName: 'CrateDB',
            name: 'crateDb',
            icon: 'file:cratedb.png',
            group: ['input'],
            version: 1,
            description: 'Add and update data in CrateDB',
            defaults: {
                name: 'CrateDB',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'crateDb',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Execute Query',
                            value: 'executeQuery',
                            description: 'Execute an SQL query',
                            action: 'Execute a SQL query',
                        },
                        {
                            name: 'Insert',
                            value: 'insert',
                            description: 'Insert rows in database',
                            action: 'Insert rows in database',
                        },
                        {
                            name: 'Update',
                            value: 'update',
                            description: 'Update rows in database',
                            action: 'Update rows in database',
                        },
                    ],
                    default: 'insert',
                },
                {
                    displayName: 'Query',
                    name: 'query',
                    type: 'string',
                    typeOptions: {
                        editor: 'sqlEditor',
                        sqlDialect: 'postgres',
                    },
                    displayOptions: {
                        show: {
                            operation: ['executeQuery'],
                        },
                    },
                    default: '',
                    placeholder: 'SELECT id, name FROM product WHERE quantity > $1 AND price <= $2',
                    required: true,
                    description: 'The SQL query to execute. You can use n8n expressions or $1 and $2 in conjunction with query parameters.',
                },
                {
                    displayName: 'Schema',
                    name: 'schema',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['insert'],
                        },
                    },
                    default: 'doc',
                    required: true,
                    description: 'Name of the schema the table belongs to',
                },
                {
                    displayName: 'Table',
                    name: 'table',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['insert'],
                        },
                    },
                    default: '',
                    required: true,
                    description: 'Name of the table in which to insert data to',
                },
                {
                    displayName: 'Columns',
                    name: 'columns',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['insert'],
                        },
                    },
                    default: '',
                    placeholder: 'id,name,description',
                    description: 'Comma-separated list of the properties which should used as columns for the new rows',
                },
                {
                    displayName: 'Schema',
                    name: 'schema',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['update'],
                        },
                    },
                    default: 'doc',
                    required: true,
                    description: 'Name of the schema the table belongs to',
                },
                {
                    displayName: 'Table',
                    name: 'table',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['update'],
                        },
                    },
                    default: '',
                    required: true,
                    description: 'Name of the table in which to update data in',
                },
                {
                    displayName: 'Update Key',
                    name: 'updateKey',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['update'],
                        },
                    },
                    default: 'id',
                    required: true,
                    description: 'Comma-separated list of the properties which decides which rows in the database should be updated. Normally that would be "id".',
                },
                {
                    displayName: 'Columns',
                    name: 'columns',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['update'],
                        },
                    },
                    default: '',
                    placeholder: 'name,description',
                    description: 'Comma-separated list of the properties which should used as columns for rows to update',
                },
                {
                    displayName: 'Return Fields',
                    name: 'returnFields',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['insert', 'update'],
                        },
                    },
                    default: '*',
                    description: 'Comma-separated list of the fields that the operation will return',
                },
                {
                    displayName: 'Additional Fields',
                    name: 'additionalFields',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    options: [
                        {
                            displayName: 'Mode',
                            name: 'mode',
                            type: 'options',
                            options: [
                                {
                                    name: 'Independently',
                                    value: 'independently',
                                    description: 'Execute each query independently',
                                },
                                {
                                    name: 'Multiple Queries',
                                    value: 'multiple',
                                    description: '<b>Default</b>. Sends multiple queries at once to database.',
                                },
                            ],
                            default: 'multiple',
                            description: 'The way queries should be sent to database. Can be used in conjunction with <b>Continue on Fail</b>. See <a href="https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.cratedb/">the docs</a> for more examples.',
                        },
                        {
                            displayName: 'Query Parameters',
                            name: 'queryParams',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/operation': ['executeQuery'],
                                },
                            },
                            default: '',
                            placeholder: 'quantity,price',
                            description: 'Comma-separated list of properties which should be used as query parameters',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        var _a;
        const credentials = await this.getCredentials('crateDb');
        const pgp = (0, pg_promise_1.default)();
        const config = {
            host: credentials.host,
            port: credentials.port,
            database: credentials.database,
            user: credentials.user,
            password: credentials.password,
            ssl: !['disable', undefined].includes(credentials.ssl),
            sslmode: credentials.ssl || 'disable',
        };
        const db = pgp(config);
        let returnItems = [];
        const items = this.getInputData();
        const operation = this.getNodeParameter('operation', 0);
        if (operation === 'executeQuery') {
            const queryResult = await (0, genericFunctions_1.pgQuery)(this.getNodeParameter, pgp, db, items, this.continueOnFail());
            returnItems = this.helpers.returnJsonArray(queryResult);
        }
        else if (operation === 'insert') {
            const insertData = await (0, genericFunctions_1.pgInsert)(this.getNodeParameter, pgp, db, items, this.continueOnFail());
            for (let i = 0; i < insertData.length; i++) {
                returnItems.push({
                    json: insertData[i],
                });
            }
        }
        else if (operation === 'update') {
            const additionalFields = this.getNodeParameter('additionalFields', 0);
            const mode = (_a = additionalFields.mode) !== null && _a !== void 0 ? _a : 'multiple';
            if (mode === 'independently') {
                const updateItems = await (0, genericFunctions_1.pgUpdate)(this.getNodeParameter, pgp, db, items, this.continueOnFail());
                returnItems = this.helpers.returnJsonArray(updateItems);
            }
            else if (mode === 'multiple') {
                const table = this.getNodeParameter('table', 0);
                const schema = this.getNodeParameter('schema', 0);
                const updateKeys = this.getNodeParameter('updateKey', 0)
                    .split(',')
                    .map((column) => column.trim());
                const columns = this.getNodeParameter('columns', 0)
                    .split(',')
                    .map((column) => column.trim());
                const queryColumns = columns.slice();
                updateKeys.forEach((updateKey) => {
                    if (!queryColumns.includes(updateKey)) {
                        columns.unshift(updateKey);
                        queryColumns.unshift('?' + updateKey);
                    }
                });
                const cs = new pgp.helpers.ColumnSet(queryColumns, { table: { table, schema } });
                const where = ' WHERE ' +
                    updateKeys
                        .map((updateKey) => pgp.as.name(updateKey) + ' = ${' + updateKey + '}')
                        .join(' AND ');
                const returning = (0, genericFunctions_1.generateReturning)(pgp, this.getNodeParameter('returnFields', 0));
                const queries = [];
                for (let i = 0; i < items.length; i++) {
                    const itemCopy = (0, genericFunctions_1.getItemCopy)(items[i], columns);
                    queries.push(pgp.helpers.update(itemCopy, cs) +
                        pgp.as.format(where, itemCopy) +
                        returning);
                }
                const _updateItems = await db.multi(pgp.helpers.concat(queries));
                returnItems = this.helpers.returnJsonArray((0, genericFunctions_1.getItemsCopy)(items, columns));
            }
        }
        else {
            pgp.end();
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The operation "${operation}" is not supported!`);
        }
        pgp.end();
        return this.prepareOutputData(returnItems);
    }
}
exports.CrateDb = CrateDb;
//# sourceMappingURL=CrateDb.node.js.map