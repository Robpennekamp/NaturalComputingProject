"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleTrigger = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const cron_1 = require("cron");
const moment_1 = __importDefault(require("moment"));
const GenericFunctions_1 = require("./GenericFunctions");
class ScheduleTrigger {
    constructor() {
        this.description = {
            displayName: 'Schedule Trigger',
            name: 'scheduleTrigger',
            icon: 'fa:clock',
            group: ['trigger', 'schedule'],
            version: 1,
            description: 'Triggers the workflow on a given schedule',
            eventTriggerDescription: '',
            activationMessage: 'Your schedule trigger will now trigger executions on the schedule you have defined.',
            defaults: {
                name: 'Schedule Trigger',
                color: '#31C49F',
            },
            inputs: [],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'This workflow will run on the schedule you define here once you <a data-key="activate">activate</a> it.<br><br>For testing, you can also trigger it manually: by going back to the canvas and clicking ‘execute workflow’',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Trigger Rules',
                    name: 'rule',
                    placeholder: 'Add Rule',
                    type: 'fixedCollection',
                    typeOptions: {
                        multipleValues: true,
                    },
                    default: {
                        interval: [
                            {
                                field: 'days',
                            },
                        ],
                    },
                    options: [
                        {
                            name: 'interval',
                            displayName: 'Trigger Interval',
                            values: [
                                {
                                    displayName: 'Trigger Interval',
                                    name: 'field',
                                    type: 'options',
                                    default: 'days',
                                    options: [
                                        {
                                            name: 'Seconds',
                                            value: 'seconds',
                                        },
                                        {
                                            name: 'Minutes',
                                            value: 'minutes',
                                        },
                                        {
                                            name: 'Hours',
                                            value: 'hours',
                                        },
                                        {
                                            name: 'Days',
                                            value: 'days',
                                        },
                                        {
                                            name: 'Weeks',
                                            value: 'weeks',
                                        },
                                        {
                                            name: 'Months',
                                            value: 'months',
                                        },
                                        {
                                            name: 'Custom (Cron)',
                                            value: 'cronExpression',
                                        },
                                    ],
                                },
                                {
                                    displayName: 'Seconds Between Triggers',
                                    name: 'secondsInterval',
                                    type: 'number',
                                    default: 30,
                                    displayOptions: {
                                        show: {
                                            field: ['seconds'],
                                        },
                                    },
                                    description: 'Number of seconds between each workflow trigger',
                                },
                                {
                                    displayName: 'Minutes Between Triggers',
                                    name: 'minutesInterval',
                                    type: 'number',
                                    default: 5,
                                    displayOptions: {
                                        show: {
                                            field: ['minutes'],
                                        },
                                    },
                                    description: 'Number of minutes between each workflow trigger',
                                },
                                {
                                    displayName: 'Hours Between Triggers',
                                    name: 'hoursInterval',
                                    type: 'number',
                                    displayOptions: {
                                        show: {
                                            field: ['hours'],
                                        },
                                    },
                                    default: 1,
                                    description: 'Number of hours between each workflow trigger',
                                },
                                {
                                    displayName: 'Days Between Triggers',
                                    name: 'daysInterval',
                                    type: 'number',
                                    displayOptions: {
                                        show: {
                                            field: ['days'],
                                        },
                                    },
                                    default: 1,
                                    description: 'Number of days between each workflow trigger',
                                },
                                {
                                    displayName: 'Weeks Between Triggers',
                                    name: 'weeksInterval',
                                    type: 'number',
                                    displayOptions: {
                                        show: {
                                            field: ['weeks'],
                                        },
                                    },
                                    default: 1,
                                    description: 'Would run every week unless specified otherwise',
                                },
                                {
                                    displayName: 'Months Between Triggers',
                                    name: 'monthsInterval',
                                    type: 'number',
                                    displayOptions: {
                                        show: {
                                            field: ['months'],
                                        },
                                    },
                                    default: 1,
                                    description: 'Would run every month unless specified otherwise',
                                },
                                {
                                    displayName: 'Trigger at Day of Month',
                                    name: 'triggerAtDayOfMonth',
                                    type: 'number',
                                    displayOptions: {
                                        show: {
                                            field: ['months'],
                                        },
                                    },
                                    typeOptions: {
                                        minValue: 1,
                                        maxValue: 31,
                                    },
                                    default: 1,
                                    description: 'The day of the month to trigger (1-31)',
                                    hint: 'If a month doesn’t have this day, the node won’t trigger',
                                },
                                {
                                    displayName: 'Trigger on Weekdays',
                                    name: 'triggerAtDay',
                                    type: 'multiOptions',
                                    displayOptions: {
                                        show: {
                                            field: ['weeks'],
                                        },
                                    },
                                    typeOptions: {
                                        maxValue: 7,
                                    },
                                    options: [
                                        {
                                            name: 'Monday',
                                            value: 1,
                                        },
                                        {
                                            name: 'Tuesday',
                                            value: 2,
                                        },
                                        {
                                            name: 'Wednesday',
                                            value: 3,
                                        },
                                        {
                                            name: 'Thursday',
                                            value: 4,
                                        },
                                        {
                                            name: 'Friday',
                                            value: 5,
                                        },
                                        {
                                            name: 'Saturday',
                                            value: 6,
                                        },
                                        {
                                            name: 'Sunday',
                                            value: 0,
                                        },
                                    ],
                                    default: [0],
                                },
                                {
                                    displayName: 'Trigger at Hour',
                                    name: 'triggerAtHour',
                                    type: 'options',
                                    default: 0,
                                    displayOptions: {
                                        show: {
                                            field: ['days', 'weeks', 'months'],
                                        },
                                    },
                                    options: [
                                        {
                                            name: 'Midnight',
                                            displayName: 'Midnight',
                                            value: 0,
                                        },
                                        {
                                            name: '1am',
                                            displayName: '1am',
                                            value: 1,
                                        },
                                        {
                                            name: '2am',
                                            displayName: '2am',
                                            value: 2,
                                        },
                                        {
                                            name: '3am',
                                            displayName: '3am',
                                            value: 3,
                                        },
                                        {
                                            name: '4am',
                                            displayName: '4am',
                                            value: 4,
                                        },
                                        {
                                            name: '5am',
                                            displayName: '5am',
                                            value: 5,
                                        },
                                        {
                                            name: '6am',
                                            displayName: '6am',
                                            value: 6,
                                        },
                                        {
                                            name: '7am',
                                            displayName: '7am',
                                            value: 7,
                                        },
                                        {
                                            name: '8am',
                                            displayName: '8am',
                                            value: 8,
                                        },
                                        {
                                            name: '9am',
                                            displayName: '9am',
                                            value: 9,
                                        },
                                        {
                                            name: '10am',
                                            displayName: '10am',
                                            value: 10,
                                        },
                                        {
                                            name: '11am',
                                            displayName: '11am',
                                            value: 11,
                                        },
                                        {
                                            name: 'Noon',
                                            displayName: 'Noon',
                                            value: 12,
                                        },
                                        {
                                            name: '1pm',
                                            displayName: '1pm',
                                            value: 13,
                                        },
                                        {
                                            name: '2pm',
                                            displayName: '2pm',
                                            value: 14,
                                        },
                                        {
                                            name: '3pm',
                                            displayName: '3pm',
                                            value: 15,
                                        },
                                        {
                                            name: '4pm',
                                            displayName: '4pm',
                                            value: 16,
                                        },
                                        {
                                            name: '5pm',
                                            displayName: '5pm',
                                            value: 17,
                                        },
                                        {
                                            name: '6pm',
                                            displayName: '6pm',
                                            value: 18,
                                        },
                                        {
                                            name: '7pm',
                                            displayName: '7pm',
                                            value: 19,
                                        },
                                        {
                                            name: '8pm',
                                            displayName: '8pm',
                                            value: 20,
                                        },
                                        {
                                            name: '9pm',
                                            displayName: '9pm',
                                            value: 21,
                                        },
                                        {
                                            name: '10pm',
                                            displayName: '10pm',
                                            value: 22,
                                        },
                                        {
                                            name: '11pm',
                                            displayName: '11pm',
                                            value: 23,
                                        },
                                    ],
                                    description: 'The hour of the day to trigger',
                                },
                                {
                                    displayName: 'Trigger at Minute',
                                    name: 'triggerAtMinute',
                                    type: 'number',
                                    default: 0,
                                    displayOptions: {
                                        show: {
                                            field: ['hours', 'days', 'weeks', 'months'],
                                        },
                                    },
                                    typeOptions: {
                                        minValue: 0,
                                        maxValue: 59,
                                    },
                                    description: 'The minute past the hour to trigger (0-59)',
                                },
                                {
                                    displayName: 'You can find help generating your cron expression <a href="https://crontab.guru/examples.html" target="_blank">here</a>',
                                    name: 'notice',
                                    type: 'notice',
                                    displayOptions: {
                                        show: {
                                            field: ['cronExpression'],
                                        },
                                    },
                                    default: '',
                                },
                                {
                                    displayName: 'Expression',
                                    name: 'expression',
                                    type: 'string',
                                    default: '',
                                    placeholder: 'eg. 0 15 * 1 sun',
                                    displayOptions: {
                                        show: {
                                            field: ['cronExpression'],
                                        },
                                    },
                                    hint: 'Format: [Minute] [Hour] [Day of Month] [Month] [Day of Week]',
                                },
                            ],
                        },
                    ],
                },
            ],
        };
    }
    async trigger() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const rule = this.getNodeParameter('rule', []);
        const interval = rule.interval;
        const timezone = this.getTimezone();
        const cronJobs = [];
        const intervalArr = [];
        const staticData = this.getWorkflowStaticData('node');
        if (!staticData.recurrencyRules) {
            staticData.recurrencyRules = [];
        }
        const executeTrigger = async (recurency) => {
            const resultData = {
                timestamp: moment_1.default.tz(timezone).toISOString(true),
                'Readable date': moment_1.default.tz(timezone).format('MMMM Do YYYY, h:mm:ss a'),
                'Readable time': moment_1.default.tz(timezone).format('h:mm:ss a'),
                'Day of week': moment_1.default.tz(timezone).format('dddd'),
                Year: moment_1.default.tz(timezone).format('YYYY'),
                Month: moment_1.default.tz(timezone).format('MMMM'),
                'Day of month': moment_1.default.tz(timezone).format('DD'),
                Hour: moment_1.default.tz(timezone).format('HH'),
                Minute: moment_1.default.tz(timezone).format('mm'),
                Second: moment_1.default.tz(timezone).format('ss'),
                Timezone: moment_1.default.tz(timezone).format('z Z'),
            };
            if (!recurency.activated) {
                this.emit([this.helpers.returnJsonArray([resultData])]);
            }
            else {
                if ((0, GenericFunctions_1.recurencyCheck)(recurency, staticData.recurrencyRules, timezone)) {
                    this.emit([this.helpers.returnJsonArray([resultData])]);
                }
            }
        };
        for (let i = 0; i < interval.length; i++) {
            let intervalValue = 1000;
            if (interval[i].field === 'cronExpression') {
                const cronExpression = interval[i].expression;
                try {
                    const cronJob = new cron_1.CronJob(cronExpression, async () => executeTrigger({ activated: false }), undefined, true, timezone);
                    cronJobs.push(cronJob);
                }
                catch (error) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Invalid cron expression', {
                        description: 'More information on how to build them at https://crontab.guru/',
                    });
                }
            }
            if (interval[i].field === 'seconds') {
                const seconds = interval[i].secondsInterval;
                intervalValue *= seconds;
                const intervalObj = setInterval(async () => executeTrigger({ activated: false }), intervalValue);
                intervalArr.push(intervalObj);
            }
            if (interval[i].field === 'minutes') {
                const minutes = interval[i].minutesInterval;
                intervalValue *= 60 * minutes;
                const intervalObj = setInterval(async () => executeTrigger({ activated: false }), intervalValue);
                intervalArr.push(intervalObj);
            }
            if (interval[i].field === 'hours') {
                const hour = interval[i].hoursInterval;
                const minute = (_a = interval[i].triggerAtMinute) === null || _a === void 0 ? void 0 : _a.toString();
                const cronTimes = [minute, '*', '*', '*', '*'];
                const cronExpression = cronTimes.join(' ');
                if (hour === 1) {
                    const cronJob = new cron_1.CronJob(cronExpression, async () => executeTrigger({ activated: false }), undefined, true, timezone);
                    cronJobs.push(cronJob);
                }
                else {
                    const cronJob = new cron_1.CronJob(cronExpression, async () => executeTrigger({
                        activated: true,
                        index: i,
                        intervalSize: hour,
                        typeInterval: 'hours',
                    }), undefined, true, timezone);
                    cronJobs.push(cronJob);
                }
            }
            if (interval[i].field === 'days') {
                const day = interval[i].daysInterval;
                const hour = (_b = interval[i].triggerAtHour) === null || _b === void 0 ? void 0 : _b.toString();
                const minute = (_c = interval[i].triggerAtMinute) === null || _c === void 0 ? void 0 : _c.toString();
                const cronTimes = [minute, hour, '*', '*', '*'];
                const cronExpression = cronTimes.join(' ');
                if (day === 1) {
                    const cronJob = new cron_1.CronJob(cronExpression, async () => executeTrigger({ activated: false }), undefined, true, timezone);
                    cronJobs.push(cronJob);
                }
                else {
                    const cronJob = new cron_1.CronJob(cronExpression, async () => executeTrigger({
                        activated: true,
                        index: i,
                        intervalSize: day,
                        typeInterval: 'days',
                    }), undefined, true, timezone);
                    cronJobs.push(cronJob);
                }
            }
            if (interval[i].field === 'weeks') {
                const hour = (_d = interval[i].triggerAtHour) === null || _d === void 0 ? void 0 : _d.toString();
                const minute = (_e = interval[i].triggerAtMinute) === null || _e === void 0 ? void 0 : _e.toString();
                const week = interval[i].weeksInterval;
                const days = interval[i].triggerAtDay;
                const day = days.length === 0 ? '*' : days.join(',');
                const cronTimes = [minute, hour, '*', '*', day];
                const cronExpression = cronTimes.join(' ');
                if (week === 1) {
                    const cronJob = new cron_1.CronJob(cronExpression, async () => executeTrigger({ activated: false }), undefined, true, timezone);
                    cronJobs.push(cronJob);
                }
                else {
                    const cronJob = new cron_1.CronJob(cronExpression, async () => executeTrigger({
                        activated: true,
                        index: i,
                        intervalSize: week,
                        typeInterval: 'weeks',
                    }), undefined, true, timezone);
                    cronJobs.push(cronJob);
                }
            }
            if (interval[i].field === 'months') {
                const month = interval[i].monthsInterval;
                const day = (_f = interval[i].triggerAtDayOfMonth) === null || _f === void 0 ? void 0 : _f.toString();
                const hour = (_g = interval[i].triggerAtHour) === null || _g === void 0 ? void 0 : _g.toString();
                const minute = (_h = interval[i].triggerAtMinute) === null || _h === void 0 ? void 0 : _h.toString();
                const cronTimes = [minute, hour, day, '*', '*'];
                const cronExpression = cronTimes.join(' ');
                if (month === 1) {
                    const cronJob = new cron_1.CronJob(cronExpression, async () => executeTrigger({ activated: false }), undefined, true, timezone);
                    cronJobs.push(cronJob);
                }
                else {
                    const cronJob = new cron_1.CronJob(cronExpression, async () => executeTrigger({
                        activated: true,
                        index: i,
                        intervalSize: month,
                        typeInterval: 'months',
                    }), undefined, true, timezone);
                    cronJobs.push(cronJob);
                }
            }
        }
        async function closeFunction() {
            for (const cronJob of cronJobs) {
                cronJob.stop();
            }
            for (const entry of intervalArr) {
                clearInterval(entry);
            }
        }
        async function manualTriggerFunction() {
            void executeTrigger({ activated: false });
        }
        return {
            closeFunction,
            manualTriggerFunction,
        };
    }
}
exports.ScheduleTrigger = ScheduleTrigger;
//# sourceMappingURL=ScheduleTrigger.node.js.map