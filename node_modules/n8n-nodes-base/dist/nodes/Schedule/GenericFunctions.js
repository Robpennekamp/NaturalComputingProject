"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.recurencyCheck = void 0;
const moment_1 = __importDefault(require("moment"));
function recurencyCheck(recurrency, recurrencyRules, timezone) {
    const recurrencyRuleIndex = recurrency.index;
    const intervalSize = recurrency.intervalSize;
    const typeInterval = recurrency.typeInterval;
    const lastExecution = recurrencyRuleIndex !== undefined ? recurrencyRules[recurrencyRuleIndex] : undefined;
    if (intervalSize &&
        recurrencyRuleIndex !== undefined &&
        (typeInterval === 'weeks' || typeInterval === 'undefined')) {
        if (lastExecution === undefined ||
            moment_1.default.tz(timezone).week() === (intervalSize + lastExecution) % 52 ||
            moment_1.default.tz(timezone).week() === lastExecution) {
            recurrencyRules[recurrencyRuleIndex] = moment_1.default.tz(timezone).week();
            return true;
        }
    }
    else if (intervalSize && recurrencyRuleIndex !== undefined && typeInterval === 'days') {
        if (lastExecution === undefined ||
            moment_1.default.tz(timezone).dayOfYear() === (intervalSize + lastExecution) % 365) {
            recurrencyRules[recurrencyRuleIndex] = moment_1.default.tz(timezone).dayOfYear();
            return true;
        }
    }
    else if (intervalSize && recurrencyRuleIndex !== undefined && typeInterval === 'hours') {
        if (lastExecution === undefined ||
            moment_1.default.tz(timezone).hour() === (intervalSize + lastExecution) % 24) {
            recurrencyRules[recurrencyRuleIndex] = moment_1.default.tz(timezone).hour();
            return true;
        }
    }
    else if (intervalSize && recurrencyRuleIndex !== undefined && typeInterval === 'months') {
        if (lastExecution === undefined ||
            moment_1.default.tz(timezone).month() === (intervalSize + lastExecution) % 12) {
            recurrencyRules[recurrencyRuleIndex] = moment_1.default.tz(timezone).month();
            return true;
        }
    }
    else {
        return true;
    }
    return false;
}
exports.recurencyCheck = recurencyCheck;
//# sourceMappingURL=GenericFunctions.js.map