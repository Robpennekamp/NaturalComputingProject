"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.post = void 0;
const transport_1 = require("../../../transport");
async function post(index) {
    const body = {};
    const qs = {};
    const requestMethod = 'POST';
    const endpoint = 'posts';
    body.channel_id = this.getNodeParameter('channelId', index);
    body.message = this.getNodeParameter('message', index);
    const attachments = this.getNodeParameter('attachments', index, []);
    for (const attachment of attachments) {
        if (attachment.fields !== undefined) {
            if (attachment.fields.item !== undefined) {
                attachment.fields = attachment.fields.item;
            }
            else {
                delete attachment.fields;
            }
        }
    }
    for (const attachment of attachments) {
        if (attachment.actions !== undefined) {
            if (attachment.actions.item !== undefined) {
                attachment.actions = attachment.actions.item;
            }
            else {
                delete attachment.actions;
            }
        }
    }
    for (const attachment of attachments) {
        if (Array.isArray(attachment.actions)) {
            for (const attaction of attachment.actions) {
                if (attaction.type === 'button') {
                    delete attaction.type;
                }
                if (attaction.data_source === 'custom') {
                    delete attaction.data_source;
                }
                if (attaction.options) {
                    attaction.options = attaction.options.option;
                }
                if (attaction.integration.item !== undefined) {
                    attaction.integration = attaction.integration.item;
                    if (Array.isArray(attaction.integration.context.property)) {
                        const tmpcontex = {};
                        for (const attactionintegprop of attaction.integration.context.property) {
                            Object.assign(tmpcontex, { [attactionintegprop.name]: attactionintegprop.value });
                        }
                        delete attaction.integration.context;
                        attaction.integration.context = tmpcontex;
                    }
                }
            }
        }
    }
    body.props = {
        attachments,
    };
    const otherOptions = this.getNodeParameter('otherOptions', index);
    Object.assign(body, otherOptions);
    const responseData = await transport_1.apiRequest.call(this, requestMethod, endpoint, body, qs);
    return this.helpers.returnJsonArray(responseData);
}
exports.post = post;
//# sourceMappingURL=execute.js.map