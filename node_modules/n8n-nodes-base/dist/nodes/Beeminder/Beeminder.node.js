"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Beeminder = void 0;
const Beeminder_node_functions_1 = require("./Beeminder.node.functions");
const GenericFunctions_1 = require("./GenericFunctions");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
class Beeminder {
    constructor() {
        this.description = {
            displayName: 'Beeminder',
            name: 'beeminder',
            group: ['output'],
            version: 1,
            description: 'Consume Beeminder API',
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            defaults: {
                name: 'Beeminder',
            },
            icon: 'file:beeminder.png',
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'beeminderApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    required: true,
                    options: [
                        {
                            name: 'Datapoint',
                            value: 'datapoint',
                        },
                    ],
                    default: 'datapoint',
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Create',
                            value: 'create',
                            description: 'Create datapoint for goal',
                            action: 'Create datapoint for goal',
                        },
                        {
                            name: 'Delete',
                            value: 'delete',
                            description: 'Delete a datapoint',
                            action: 'Delete a datapoint',
                        },
                        {
                            name: 'Get Many',
                            value: 'getAll',
                            description: 'Get many datapoints for a goal',
                            action: 'Get many datapoints for a goal',
                        },
                        {
                            name: 'Update',
                            value: 'update',
                            description: 'Update a datapoint',
                            action: 'Update a datapoint',
                        },
                    ],
                    default: 'create',
                    required: true,
                },
                {
                    displayName: 'Goal Name or ID',
                    name: 'goalName',
                    type: 'options',
                    typeOptions: {
                        loadOptionsMethod: 'getGoals',
                    },
                    displayOptions: {
                        show: {
                            resource: ['datapoint'],
                        },
                    },
                    default: '',
                    description: 'The name of the goal. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
                    required: true,
                },
                {
                    displayName: 'Return All',
                    name: 'returnAll',
                    type: 'boolean',
                    displayOptions: {
                        show: {
                            operation: ['getAll'],
                            resource: ['datapoint'],
                        },
                    },
                    default: false,
                    description: 'Whether to return all results or only up to a given limit',
                },
                {
                    displayName: 'Limit',
                    name: 'limit',
                    type: 'number',
                    displayOptions: {
                        show: {
                            operation: ['getAll'],
                            resource: ['datapoint'],
                            returnAll: [false],
                        },
                    },
                    typeOptions: {
                        minValue: 1,
                        maxValue: 300,
                    },
                    default: 30,
                    description: 'Max number of results to return',
                },
                {
                    displayName: 'Value',
                    name: 'value',
                    type: 'number',
                    default: 1,
                    placeholder: '',
                    description: 'Datapoint value to send',
                    displayOptions: {
                        show: {
                            resource: ['datapoint'],
                            operation: ['create'],
                        },
                    },
                    required: true,
                },
                {
                    displayName: 'Datapoint ID',
                    name: 'datapointId',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            operation: ['update', 'delete'],
                        },
                    },
                    required: true,
                },
                {
                    displayName: 'Additional Fields',
                    name: 'additionalFields',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    displayOptions: {
                        show: {
                            resource: ['datapoint'],
                            operation: ['create'],
                        },
                    },
                    options: [
                        {
                            displayName: 'Comment',
                            name: 'comment',
                            type: 'string',
                            default: '',
                        },
                        {
                            displayName: 'Timestamp',
                            name: 'timestamp',
                            type: 'dateTime',
                            default: '',
                            placeholder: '',
                            description: 'Defaults to "now" if none is passed in, or the existing timestamp if the datapoint is being updated rather than created',
                        },
                        {
                            displayName: 'Request ID',
                            name: 'requestid',
                            type: 'string',
                            default: '',
                            placeholder: '',
                            description: 'String to uniquely identify a datapoint',
                        },
                    ],
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add field',
                    default: {},
                    displayOptions: {
                        show: {
                            resource: ['datapoint'],
                            operation: ['getAll'],
                        },
                    },
                    options: [
                        {
                            displayName: 'Sort',
                            name: 'sort',
                            type: 'string',
                            default: 'id',
                            placeholder: '',
                            description: 'Attribute to sort on',
                        },
                    ],
                },
                {
                    displayName: 'Update Fields',
                    name: 'updateFields',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    displayOptions: {
                        show: {
                            resource: ['datapoint'],
                            operation: ['update'],
                        },
                    },
                    options: [
                        {
                            displayName: 'Value',
                            name: 'value',
                            type: 'number',
                            default: 1,
                            placeholder: '',
                            description: 'Datapoint value to send',
                        },
                        {
                            displayName: 'Comment',
                            name: 'comment',
                            type: 'string',
                            default: '',
                        },
                        {
                            displayName: 'Timestamp',
                            name: 'timestamp',
                            type: 'dateTime',
                            default: '',
                            placeholder: '',
                            description: 'Defaults to "now" if none is passed in, or the existing timestamp if the datapoint is being updated rather than created',
                        },
                    ],
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getGoals() {
                    const credentials = await this.getCredentials('beeminderApi');
                    const endpoint = `/users/${credentials.user}/goals.json`;
                    const returnData = [];
                    const goals = await GenericFunctions_1.beeminderApiRequest.call(this, 'GET', endpoint);
                    for (const goal of goals) {
                        returnData.push({
                            name: goal.slug,
                            value: goal.slug,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const timezone = this.getTimezone();
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        let results;
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'datapoint') {
                    const goalName = this.getNodeParameter('goalName', i);
                    if (operation === 'create') {
                        const value = this.getNodeParameter('value', i);
                        const options = this.getNodeParameter('additionalFields', i);
                        const data = {
                            value,
                            goalName,
                        };
                        Object.assign(data, options);
                        if (data.timestamp) {
                            data.timestamp = moment_timezone_1.default.tz(data.timestamp, timezone).unix();
                        }
                        results = await Beeminder_node_functions_1.createDatapoint.call(this, data);
                        const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(results), { itemData: { item: i } });
                        returnData.push(...executionData);
                    }
                    else if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const options = this.getNodeParameter('options', i);
                        const data = {
                            goalName,
                        };
                        Object.assign(data, options);
                        if (!returnAll) {
                            data.count = this.getNodeParameter('limit', 0);
                        }
                        results = await Beeminder_node_functions_1.getAllDatapoints.call(this, data);
                        const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(results), { itemData: { item: i } });
                        returnData.push(...executionData);
                    }
                    else if (operation === 'update') {
                        const datapointId = this.getNodeParameter('datapointId', i);
                        const options = this.getNodeParameter('updateFields', i);
                        const data = {
                            goalName,
                            datapointId,
                        };
                        Object.assign(data, options);
                        if (data.timestamp) {
                            data.timestamp = moment_timezone_1.default.tz(data.timestamp, timezone).unix();
                        }
                        results = await Beeminder_node_functions_1.updateDatapoint.call(this, data);
                        const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(results), { itemData: { item: i } });
                        returnData.push(...executionData);
                    }
                    else if (operation === 'delete') {
                        const datapointId = this.getNodeParameter('datapointId', i);
                        const data = {
                            goalName,
                            datapointId,
                        };
                        results = await Beeminder_node_functions_1.deleteDatapoint.call(this, data);
                        const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(results), { itemData: { item: i } });
                        returnData.push(...executionData);
                    }
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message, json: {}, itemIndex: i });
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.Beeminder = Beeminder;
//# sourceMappingURL=Beeminder.node.js.map