"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Totp = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const otpauth_1 = __importDefault(require("otpauth"));
class Totp {
    constructor() {
        this.description = {
            displayName: 'TOTP',
            name: 'totp',
            icon: 'fa:fingerprint',
            group: ['transform'],
            version: 1,
            subtitle: '={{ $parameter["operation"] }}',
            description: 'Generate a time-based one-time password',
            defaults: {
                name: 'TOTP',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'totpApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Generate Secret',
                            value: 'generateSecret',
                            action: 'Generate secret',
                        },
                    ],
                    default: 'generateSecret',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    displayOptions: {
                        show: {
                            operation: ['generateSecret'],
                        },
                    },
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Algorithm',
                            name: 'algorithm',
                            type: 'options',
                            default: 'SHA1',
                            description: 'HMAC hashing algorithm. Defaults to SHA1.',
                            options: [
                                {
                                    name: 'SHA1',
                                    value: 'SHA1',
                                },
                                {
                                    name: 'SHA224',
                                    value: 'SHA224',
                                },
                                {
                                    name: 'SHA256',
                                    value: 'SHA256',
                                },
                                {
                                    name: 'SHA3-224',
                                    value: 'SHA3-224',
                                },
                                {
                                    name: 'SHA3-256',
                                    value: 'SHA3-256',
                                },
                                {
                                    name: 'SHA3-384',
                                    value: 'SHA3-384',
                                },
                                {
                                    name: 'SHA3-512',
                                    value: 'SHA3-512',
                                },
                                {
                                    name: 'SHA384',
                                    value: 'SHA384',
                                },
                                {
                                    name: 'SHA512',
                                    value: 'SHA512',
                                },
                            ],
                        },
                        {
                            displayName: 'Digits',
                            name: 'digits',
                            type: 'number',
                            default: 6,
                            description: 'Number of digits in the generated TOTP code. Defaults to 6 digits.',
                        },
                        {
                            displayName: 'Period',
                            name: 'period',
                            type: 'number',
                            default: 30,
                            description: 'How many seconds the generated TOTP code is valid for. Defaults to 30 seconds.',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const operation = this.getNodeParameter('operation', 0);
        const credentials = (await this.getCredentials('totpApi'));
        if (!credentials.label.includes(':')) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Malformed label - expected `issuer:username`');
        }
        const options = this.getNodeParameter('options', 0);
        if (!options.algorithm)
            options.algorithm = 'SHA1';
        if (!options.digits)
            options.digits = 6;
        if (!options.period)
            options.period = 30;
        const [issuer] = credentials.label.split(':');
        const totp = new otpauth_1.default.TOTP({
            issuer,
            label: credentials.label,
            secret: credentials.secret,
            algorithm: options.algorithm,
            digits: options.digits,
            period: options.period,
        });
        const token = totp.generate();
        const secondsRemaining = (options.period * (1 - ((Date.now() / 1000 / options.period) % 1))) | 0;
        if (operation === 'generateSecret') {
            for (let i = 0; i < items.length; i++) {
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray({ token, secondsRemaining }), { itemData: { item: i } });
                returnData.push(...executionData);
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.Totp = Totp;
//# sourceMappingURL=Totp.node.js.map