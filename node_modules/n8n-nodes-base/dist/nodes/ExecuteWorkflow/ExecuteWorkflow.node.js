"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteWorkflow = void 0;
const promises_1 = require("fs/promises");
const n8n_workflow_1 = require("n8n-workflow");
class ExecuteWorkflow {
    constructor() {
        this.description = {
            displayName: 'Execute Workflow',
            name: 'executeWorkflow',
            icon: 'fa:sign-in-alt',
            group: ['transform'],
            version: 1,
            subtitle: '={{"Workflow: " + $parameter["workflowId"]}}',
            description: 'Execute another workflow',
            defaults: {
                name: 'Execute Workflow',
                color: '#ff6d5a',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'hidden',
                    noDataExpression: true,
                    default: 'call_workflow',
                    options: [
                        {
                            name: 'Call Another Workflow',
                            value: 'call_workflow',
                        },
                    ],
                },
                {
                    displayName: 'Source',
                    name: 'source',
                    type: 'options',
                    options: [
                        {
                            name: 'Database',
                            value: 'database',
                            description: 'Load the workflow from the database by ID',
                        },
                        {
                            name: 'Local File',
                            value: 'localFile',
                            description: 'Load the workflow from a locally saved file',
                        },
                        {
                            name: 'Parameter',
                            value: 'parameter',
                            description: 'Load the workflow from a parameter',
                        },
                        {
                            name: 'URL',
                            value: 'url',
                            description: 'Load the workflow from an URL',
                        },
                    ],
                    default: 'database',
                    description: 'Where to get the workflow to execute from',
                },
                {
                    displayName: 'Workflow ID',
                    name: 'workflowId',
                    type: 'string',
                    displayOptions: {
                        show: {
                            source: ['database'],
                        },
                    },
                    default: '',
                    required: true,
                    description: 'The workflow to execute',
                },
                {
                    displayName: 'Workflow Path',
                    name: 'workflowPath',
                    type: 'string',
                    displayOptions: {
                        show: {
                            source: ['localFile'],
                        },
                    },
                    default: '',
                    placeholder: '/data/workflow.json',
                    required: true,
                    description: 'The path to local JSON workflow file to execute',
                },
                {
                    displayName: 'Workflow JSON',
                    name: 'workflowJson',
                    type: 'string',
                    typeOptions: {
                        editor: 'json',
                        rows: 10,
                    },
                    displayOptions: {
                        show: {
                            source: ['parameter'],
                        },
                    },
                    default: '\n\n\n',
                    required: true,
                    description: 'The workflow JSON code to execute',
                },
                {
                    displayName: 'Workflow URL',
                    name: 'workflowUrl',
                    type: 'string',
                    displayOptions: {
                        show: {
                            source: ['url'],
                        },
                    },
                    default: '',
                    placeholder: 'https://example.com/workflow.json',
                    required: true,
                    description: 'The URL from which to load the workflow from',
                },
                {
                    displayName: 'Any data you pass into this node will be output by the Execute Workflow Trigger. <a href="https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow/" target="_blank">More info</a>',
                    name: 'executeWorkflowNotice',
                    type: 'notice',
                    default: '',
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const source = this.getNodeParameter('source', 0);
        const workflowInfo = {};
        try {
            if (source === 'database') {
                workflowInfo.id = this.getNodeParameter('workflowId', 0);
            }
            else if (source === 'localFile') {
                const workflowPath = this.getNodeParameter('workflowPath', 0);
                let workflowJson;
                try {
                    workflowJson = await (0, promises_1.readFile)(workflowPath, { encoding: 'utf8' });
                }
                catch (error) {
                    if (error.code === 'ENOENT') {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The file "${workflowPath}" could not be found.`);
                    }
                    throw error;
                }
                workflowInfo.code = JSON.parse(workflowJson);
            }
            else if (source === 'parameter') {
                const workflowJson = this.getNodeParameter('workflowJson', 0);
                workflowInfo.code = JSON.parse(workflowJson);
            }
            else if (source === 'url') {
                const workflowUrl = this.getNodeParameter('workflowUrl', 0);
                const requestOptions = {
                    headers: {
                        accept: 'application/json,text/*;q=0.99',
                    },
                    method: 'GET',
                    uri: workflowUrl,
                    json: true,
                    gzip: true,
                };
                const response = await this.helpers.request(requestOptions);
                workflowInfo.code = response;
            }
            const receivedData = await this.executeWorkflow(workflowInfo, items);
            return receivedData;
        }
        catch (error) {
            if (this.continueOnFail()) {
                return this.prepareOutputData([{ json: { error: error.message } }]);
            }
            throw error;
        }
    }
}
exports.ExecuteWorkflow = ExecuteWorkflow;
//# sourceMappingURL=ExecuteWorkflow.node.js.map