"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformBinResponse = exports.buildRequestURL = exports.buildBinTestURL = exports.buildBinAPIURL = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const BIN_ID_REGEX = /\b\d{13}-\d{13}\b/g;
function parseBinId(context) {
    const binId = context.getNodeParameter('binId');
    BIN_ID_REGEX.lastIndex = 0;
    const idMatch = BIN_ID_REGEX.exec(binId);
    if (idMatch) {
        return idMatch[0];
    }
    throw new n8n_workflow_1.NodeApiError(context.getNode(), {}, {
        message: 'Bin ID format is not valid',
        description: 'Please check the provided Bin ID and try again.',
        parseXml: false,
    });
}
async function buildBinAPIURL(requestOptions) {
    const binId = parseBinId(this);
    requestOptions.url = `/developers/postbin/api/bin/${binId}`;
    return requestOptions;
}
exports.buildBinAPIURL = buildBinAPIURL;
async function buildBinTestURL(requestOptions) {
    const binId = parseBinId(this);
    requestOptions.url = `/developers/postbin/${binId}`;
    return requestOptions;
}
exports.buildBinTestURL = buildBinTestURL;
async function buildRequestURL(requestOptions) {
    const reqId = this.getNodeParameter('requestId', 'shift');
    const binId = parseBinId(this);
    requestOptions.url = `/developers/postbin/api/bin/${binId}/req/${reqId}`;
    return requestOptions;
}
exports.buildRequestURL = buildRequestURL;
async function transformBinResponse(items, _response) {
    items.forEach((item) => (item.json = {
        binId: item.json.binId,
        nowTimestamp: item.json.now,
        nowIso: new Date(item.json.now).toISOString(),
        expiresTimestamp: item.json.expires,
        expiresIso: new Date(item.json.expires).toISOString(),
        requestUrl: 'https://www.toptal.com/developers/postbin/' + item.json.binId,
        viewUrl: 'https://www.toptal.com/developers/postbin/b/' + item.json.binId,
    }));
    return items;
}
exports.transformBinResponse = transformBinResponse;
//# sourceMappingURL=GenericFunctions.js.map