"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupUpload = exports.getUploadFormData = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const form_data_1 = __importDefault(require("form-data"));
async function getUploadFormData() {
    const mediaPropertyName = (this.getNodeParameter('mediaPropertyName') || '').trim();
    if (!mediaPropertyName)
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Parameter "mediaPropertyName" is not defined');
    const binaryData = this.helpers.assertBinaryData(mediaPropertyName);
    const mediaFileName = this.getNodeParameter('additionalFields').mediaFileName;
    const fileName = mediaFileName || binaryData.fileName;
    if (!fileName)
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No file name given for media upload.');
    const buffer = await this.helpers.getBinaryDataBuffer(mediaPropertyName);
    const formData = new form_data_1.default();
    formData.append('file', buffer, { contentType: binaryData.mimeType, filename: fileName });
    formData.append('messaging_product', 'whatsapp');
    return { fileName, formData };
}
exports.getUploadFormData = getUploadFormData;
async function setupUpload(requestOptions) {
    const uploadData = await getUploadFormData.call(this);
    requestOptions.body = uploadData.formData;
    return requestOptions;
}
exports.setupUpload = setupUpload;
//# sourceMappingURL=MediaFunctions.js.map