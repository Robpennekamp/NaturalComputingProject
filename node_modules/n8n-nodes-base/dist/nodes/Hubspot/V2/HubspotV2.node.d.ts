import type { IExecuteFunctions } from 'n8n-core';
import type { ICredentialsDecrypted, ICredentialTestFunctions, ILoadOptionsFunctions, INodeCredentialTestResult, INodeExecutionData, INodeListSearchResult, INodePropertyOptions, INodeType, INodeTypeBaseDescription, INodeTypeDescription } from 'n8n-workflow';
export declare class HubspotV2 implements INodeType {
    description: INodeTypeDescription;
    constructor(baseDescription: INodeTypeBaseDescription);
    methods: {
        credentialTest: {
            hubspotApiTest(this: ICredentialTestFunctions, credential: ICredentialsDecrypted): Promise<INodeCredentialTestResult>;
        };
        loadOptions: {
            getContactLeadStatuses(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContactLealBasics(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContactLifeCycleStages(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContactOriginalSources(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContactPrefferedLanguages(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContactStatuses(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContactProperties(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContactPropertiesWithType(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContactCustomProperties(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContactNumberOfEmployees(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanyIndustries(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanyleadStatuses(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanylifecycleStages(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanyTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanyTargetAccounts(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanySourceTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanyWebTechnologies(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanyProperties(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanyCustomProperties(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getDealStages(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getDealTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getDealCustomProperties(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getDealProperties(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getDealPropertiesWithType(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getDealPipelines(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getForms(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getSubscriptionTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getTicketCategories(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getTicketPipelines(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getTicketPriorities(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getTicketProperties(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getTicketResolutions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getTicketSources(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getTicketStages(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getOwners(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getCompanies(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
            getContacts(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]>;
        };
        listSearch: {
            searchCompanies(this: ILoadOptionsFunctions): Promise<INodeListSearchResult>;
            searchContacts(this: ILoadOptionsFunctions, filter?: string): Promise<INodeListSearchResult>;
            searchDeals(this: ILoadOptionsFunctions, filter?: string): Promise<INodeListSearchResult>;
            searchEngagements(this: ILoadOptionsFunctions): Promise<INodeListSearchResult>;
            searchTickets(this: ILoadOptionsFunctions): Promise<INodeListSearchResult>;
            searchOwners(this: ILoadOptionsFunctions): Promise<INodeListSearchResult>;
        };
    };
    execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]>;
}
