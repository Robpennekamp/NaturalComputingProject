"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendlyTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class CalendlyTrigger {
    constructor() {
        this.description = {
            displayName: 'Calendly Trigger',
            name: 'calendlyTrigger',
            icon: 'file:calendly.svg',
            group: ['trigger'],
            version: 1,
            description: 'Starts the workflow when Calendly events occur',
            defaults: {
                name: 'Calendly Trigger',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'calendlyApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Scope',
                    name: 'scope',
                    type: 'options',
                    default: 'user',
                    required: true,
                    hint: 'Ignored if you are using an API Key',
                    options: [
                        {
                            name: 'Organization',
                            value: 'organization',
                            description: 'Triggers the webhook for all subscribed events within the organization',
                        },
                        {
                            name: 'User',
                            value: 'user',
                            description: 'Triggers the webhook for subscribed events that belong to the current user',
                        },
                    ],
                },
                {
                    displayName: 'Events',
                    name: 'events',
                    type: 'multiOptions',
                    options: [
                        {
                            name: 'invitee.created',
                            value: 'invitee.created',
                            description: 'Receive notifications when a new Calendly event is created',
                        },
                        {
                            name: 'invitee.canceled',
                            value: 'invitee.canceled',
                            description: 'Receive notifications when a Calendly event is canceled',
                        },
                    ],
                    default: [],
                    required: true,
                },
            ],
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const webhookData = this.getWorkflowStaticData('node');
                    const events = this.getNodeParameter('events');
                    const { apiKey } = (await this.getCredentials('calendlyApi'));
                    const authenticationType = (0, GenericFunctions_1.getAuthenticationType)(apiKey);
                    if (authenticationType === 'apiKey') {
                        const endpoint = '/hooks';
                        const { data } = await GenericFunctions_1.calendlyApiRequest.call(this, 'GET', endpoint, {});
                        for (const webhook of data) {
                            if (webhook.attributes.url === webhookUrl) {
                                for (const event of events) {
                                    if (!webhook.attributes.events.includes(event)) {
                                        return false;
                                    }
                                }
                            }
                            webhookData.webhookId = webhook.id;
                            return true;
                        }
                    }
                    if (authenticationType === 'accessToken') {
                        const scope = this.getNodeParameter('scope', 0);
                        const { resource } = await GenericFunctions_1.calendlyApiRequest.call(this, 'GET', '/users/me');
                        const qs = {};
                        if (scope === 'user') {
                            qs.scope = 'user';
                            qs.organization = resource.current_organization;
                            qs.user = resource.uri;
                        }
                        if (scope === 'organization') {
                            qs.scope = 'organization';
                            qs.organization = resource.current_organization;
                        }
                        const endpoint = '/webhook_subscriptions';
                        const { collection } = await GenericFunctions_1.calendlyApiRequest.call(this, 'GET', endpoint, {}, qs);
                        for (const webhook of collection) {
                            if (webhook.callback_url === webhookUrl) {
                                for (const event of events) {
                                    if (!webhook.events.includes(event)) {
                                        return false;
                                    }
                                }
                            }
                            webhookData.webhookURI = webhook.uri;
                            return true;
                        }
                    }
                    return false;
                },
                async create() {
                    var _a;
                    const webhookData = this.getWorkflowStaticData('node');
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const events = this.getNodeParameter('events');
                    const { apiKey } = (await this.getCredentials('calendlyApi'));
                    const authenticationType = (0, GenericFunctions_1.getAuthenticationType)(apiKey);
                    if (authenticationType === 'apiKey') {
                        const endpoint = '/hooks';
                        const body = {
                            url: webhookUrl,
                            events,
                        };
                        const responseData = await GenericFunctions_1.calendlyApiRequest.call(this, 'POST', endpoint, body);
                        if (responseData.id === undefined) {
                            return false;
                        }
                        webhookData.webhookId = responseData.id;
                    }
                    if (authenticationType === 'accessToken') {
                        const scope = this.getNodeParameter('scope', 0);
                        const { resource } = await GenericFunctions_1.calendlyApiRequest.call(this, 'GET', '/users/me');
                        const body = {
                            url: webhookUrl,
                            events,
                            organization: resource.current_organization,
                            scope,
                        };
                        if (scope === 'user') {
                            body.user = resource.uri;
                        }
                        const endpoint = '/webhook_subscriptions';
                        const responseData = await GenericFunctions_1.calendlyApiRequest.call(this, 'POST', endpoint, body);
                        if ((responseData === null || responseData === void 0 ? void 0 : responseData.resource) === undefined || ((_a = responseData === null || responseData === void 0 ? void 0 : responseData.resource) === null || _a === void 0 ? void 0 : _a.uri) === undefined) {
                            return false;
                        }
                        webhookData.webhookURI = responseData.resource.uri;
                    }
                    return true;
                },
                async delete() {
                    const webhookData = this.getWorkflowStaticData('node');
                    const { apiKey } = (await this.getCredentials('calendlyApi'));
                    const authenticationType = (0, GenericFunctions_1.getAuthenticationType)(apiKey);
                    if (authenticationType === 'apiKey') {
                        if (webhookData.webhookId !== undefined) {
                            const endpoint = `/hooks/${webhookData.webhookId}`;
                            try {
                                await GenericFunctions_1.calendlyApiRequest.call(this, 'DELETE', endpoint);
                            }
                            catch (error) {
                                return false;
                            }
                            delete webhookData.webhookId;
                        }
                    }
                    if (authenticationType === 'accessToken') {
                        if (webhookData.webhookURI !== undefined) {
                            try {
                                await GenericFunctions_1.calendlyApiRequest.call(this, 'DELETE', '', {}, {}, webhookData.webhookURI);
                            }
                            catch (error) {
                                return false;
                            }
                            delete webhookData.webhookURI;
                        }
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        const bodyData = this.getBodyData();
        return {
            workflowData: [this.helpers.returnJsonArray(bodyData)],
        };
    }
}
exports.CalendlyTrigger = CalendlyTrigger;
//# sourceMappingURL=CalendlyTrigger.node.js.map