"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CiscoWebexTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const crypto_1 = require("crypto");
class CiscoWebexTrigger {
    constructor() {
        this.description = {
            displayName: 'Webex by Cisco Trigger',
            name: 'ciscoWebexTrigger',
            icon: 'file:ciscoWebex.png',
            group: ['trigger'],
            version: 1,
            subtitle: '={{$parameter["resource"] + ":" + $parameter["event"]}}',
            description: 'Starts the workflow when Cisco Webex events occur.',
            defaults: {
                name: 'Webex by Cisco Trigger',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'ciscoWebexOAuth2Api',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: '[All]',
                            value: 'all',
                        },
                        {
                            name: 'Attachment Action',
                            value: 'attachmentAction',
                        },
                        {
                            name: 'Meeting',
                            value: 'meeting',
                        },
                        {
                            name: 'Membership',
                            value: 'membership',
                        },
                        {
                            name: 'Message',
                            value: 'message',
                        },
                        {
                            name: 'Recording',
                            value: 'recording',
                        },
                        {
                            name: 'Room',
                            value: 'room',
                        },
                    ],
                    default: 'meeting',
                    required: true,
                },
                ...(0, GenericFunctions_1.getEvents)(),
                {
                    displayName: 'Resolve Data',
                    name: 'resolveData',
                    type: 'boolean',
                    displayOptions: {
                        show: {
                            resource: ['attachmentAction'],
                        },
                    },
                    default: true,
                    description: 'By default the response only contain a reference to the data the user inputed. If this option gets activated, it will resolve the data automatically.',
                },
                {
                    displayName: 'Filters',
                    name: 'filters',
                    type: 'collection',
                    placeholder: 'Add Filter',
                    default: {},
                    options: [
                        {
                            displayName: 'Has Files',
                            name: 'hasFiles',
                            type: 'boolean',
                            displayOptions: {
                                show: {
                                    '/resource': ['message'],
                                    '/event': ['created', 'deleted'],
                                },
                            },
                            default: false,
                            description: 'Whether to limit to messages which contain file content attachments',
                        },
                        {
                            displayName: 'Is Locked',
                            name: 'isLocked',
                            type: 'boolean',
                            displayOptions: {
                                show: {
                                    '/resource': ['room'],
                                    '/event': ['created', 'updated'],
                                },
                            },
                            default: false,
                            description: 'Whether to limit to rooms that are locked',
                        },
                        {
                            displayName: 'Is Moderator',
                            name: 'isModerator',
                            type: 'boolean',
                            displayOptions: {
                                show: {
                                    '/resource': ['membership'],
                                    '/event': ['created', 'updated', 'deleted'],
                                },
                            },
                            default: false,
                            description: 'Whether to limit to moderators of a room',
                        },
                        {
                            displayName: 'Mentioned People',
                            name: 'mentionedPeople',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['message'],
                                    '/event': ['created', 'deleted'],
                                },
                            },
                            default: '',
                            description: 'Limit to messages which contain these mentioned people, by person ID; accepts me as a shorthand for your own person ID; separate multiple values with commas',
                        },
                        {
                            displayName: 'Message ID',
                            name: 'messageId',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['attachmentAction'],
                                    '/event': ['created'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular message, by ID',
                        },
                        {
                            displayName: 'Owned By',
                            name: 'ownedBy',
                            displayOptions: {
                                show: {
                                    '/resource': ['meeting'],
                                },
                            },
                            type: 'string',
                            default: '',
                        },
                        {
                            displayName: 'Person Email',
                            name: 'personEmail',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['membership'],
                                    '/event': ['created', 'updated', 'deleted'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular person, by email',
                        },
                        {
                            displayName: 'Person Email',
                            name: 'personEmail',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['message'],
                                    '/event': ['created', 'deleted'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular person, by email',
                        },
                        {
                            displayName: 'Person ID',
                            name: 'personId',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['attachmentAction'],
                                    '/event': ['created'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular person, by ID',
                        },
                        {
                            displayName: 'Person ID',
                            name: 'personId',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['membership'],
                                    '/event': ['created', 'updated', 'deleted'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular person, by ID',
                        },
                        {
                            displayName: 'Person ID',
                            name: 'personId',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['message'],
                                    '/event': ['created', 'deleted'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular person, by ID',
                        },
                        {
                            displayName: 'Room ID',
                            name: 'roomId',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['attachmentAction'],
                                    '/event': ['created'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular room, by ID',
                        },
                        {
                            displayName: 'Room ID',
                            name: 'roomId',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['membership'],
                                    '/event': ['created', 'updated', 'deleted'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular room, by ID',
                        },
                        {
                            displayName: 'Room ID',
                            name: 'roomId',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/resource': ['message'],
                                    '/event': ['created', 'updated'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular room, by ID',
                        },
                        {
                            displayName: 'Room Type',
                            name: 'roomType',
                            type: 'options',
                            options: [
                                {
                                    name: 'Direct',
                                    value: 'direct',
                                },
                                {
                                    name: 'Group',
                                    value: 'group',
                                },
                            ],
                            displayOptions: {
                                show: {
                                    '/resource': ['message'],
                                    '/event': ['created', 'deleted'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular room type',
                        },
                        {
                            displayName: 'Type',
                            name: 'type',
                            type: 'options',
                            options: [
                                {
                                    name: 'Direct',
                                    value: 'direct',
                                },
                                {
                                    name: 'Group',
                                    value: 'group',
                                },
                            ],
                            displayOptions: {
                                show: {
                                    '/resource': ['room'],
                                    '/event': ['created', 'updated'],
                                },
                            },
                            default: '',
                            description: 'Limit to a particular room type',
                        },
                    ],
                },
            ],
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const webhookData = this.getWorkflowStaticData('node');
                    const resource = this.getNodeParameter('resource');
                    const event = this.getNodeParameter('event');
                    const data = await GenericFunctions_1.webexApiRequestAllItems.call(this, 'items', 'GET', '/webhooks');
                    for (const webhook of data) {
                        if (webhook.url === webhookUrl &&
                            webhook.resource === (0, GenericFunctions_1.mapResource)(resource) &&
                            webhook.event === event &&
                            webhook.status === 'active') {
                            webhookData.webhookId = webhook.id;
                            return true;
                        }
                    }
                    return false;
                },
                async create() {
                    const webhookData = this.getWorkflowStaticData('node');
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const event = this.getNodeParameter('event');
                    const resource = this.getNodeParameter('resource');
                    const filters = this.getNodeParameter('filters', {});
                    const credentials = await this.getCredentials('ciscoWebexOAuth2Api');
                    const secret = (0, GenericFunctions_1.getAutomaticSecret)(credentials);
                    const filter = [];
                    for (const key of Object.keys(filters)) {
                        if (key !== 'ownedBy') {
                            filter.push(`${key}=${filters[key]}`);
                        }
                    }
                    const endpoint = '/webhooks';
                    const body = {
                        name: `n8n-webhook:${webhookUrl}`,
                        targetUrl: webhookUrl,
                        event,
                        resource: (0, GenericFunctions_1.mapResource)(resource),
                    };
                    if (filters.ownedBy) {
                        body.ownedBy = filters.ownedBy;
                    }
                    body.secret = secret;
                    if (filter.length) {
                        body.filter = filter.join('&');
                    }
                    const responseData = await GenericFunctions_1.webexApiRequest.call(this, 'POST', endpoint, body);
                    if (responseData.id === undefined) {
                        return false;
                    }
                    webhookData.webhookId = responseData.id;
                    webhookData.secret = secret;
                    return true;
                },
                async delete() {
                    const webhookData = this.getWorkflowStaticData('node');
                    if (webhookData.webhookId !== undefined) {
                        const endpoint = `/webhooks/${webhookData.webhookId}`;
                        try {
                            await GenericFunctions_1.webexApiRequest.call(this, 'DELETE', endpoint);
                        }
                        catch (error) {
                            return false;
                        }
                        delete webhookData.webhookId;
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        let bodyData = this.getBodyData();
        const webhookData = this.getWorkflowStaticData('node');
        const headers = this.getHeaderData();
        const req = this.getRequestObject();
        const resolveData = this.getNodeParameter('resolveData', false);
        const computedSignature = (0, crypto_1.createHmac)('sha1', webhookData.secret)
            .update(req.rawBody)
            .digest('hex');
        if (headers['x-spark-signature'] !== computedSignature) {
            return {};
        }
        if (resolveData) {
            const { data: { id }, } = bodyData;
            bodyData = await GenericFunctions_1.webexApiRequest.call(this, 'GET', `/attachment/actions/${id}`);
        }
        return {
            workflowData: [this.helpers.returnJsonArray(bodyData)],
        };
    }
}
exports.CiscoWebexTrigger = CiscoWebexTrigger;
//# sourceMappingURL=CiscoWebexTrigger.node.js.map