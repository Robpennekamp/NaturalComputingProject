"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Html = void 0;
const cheerio_1 = __importDefault(require("cheerio"));
const n8n_workflow_1 = require("n8n-workflow");
const placeholder_1 = require("./placeholder");
const utils_1 = require("./utils");
class Html {
    constructor() {
        this.description = {
            displayName: 'HTML',
            name: 'html',
            icon: 'file:html.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{ $parameter["operation"] }}',
            description: 'Work with HTML',
            defaults: {
                name: 'HTML',
            },
            inputs: ['main'],
            outputs: ['main'],
            parameterPane: 'wide',
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Generate HTML Template',
                            value: 'generateHtmlTemplate',
                            action: 'Generate HTML template',
                        },
                        {
                            name: 'Extract HTML Content',
                            value: 'extractHtmlContent',
                            action: 'Extract HTML Content',
                        },
                    ],
                    default: 'generateHtmlTemplate',
                },
                {
                    displayName: 'HTML Template',
                    name: 'html',
                    typeOptions: {
                        editor: 'htmlEditor',
                    },
                    type: 'string',
                    default: placeholder_1.placeholder,
                    noDataExpression: true,
                    description: 'HTML template to render',
                    displayOptions: {
                        show: {
                            operation: ['generateHtmlTemplate'],
                        },
                    },
                },
                {
                    displayName: '<b>Tips</b>: Type ctrl+space for completions. Use <code>{{ }}</code> for expressions and <code>&lt;style&gt;</code> tags for CSS. JS in <code>&lt;script&gt;</code> tags is included but not executed in n8n.',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                    displayOptions: {
                        show: {
                            operation: ['generateHtmlTemplate'],
                        },
                    },
                },
                {
                    displayName: 'Source Data',
                    name: 'sourceData',
                    type: 'options',
                    options: [
                        {
                            name: 'Binary',
                            value: 'binary',
                        },
                        {
                            name: 'JSON',
                            value: 'json',
                        },
                    ],
                    default: 'json',
                    description: 'If HTML should be read from binary or JSON data',
                    displayOptions: {
                        show: {
                            operation: ['extractHtmlContent'],
                        },
                    },
                },
                {
                    displayName: 'Binary Property',
                    name: 'dataPropertyName',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['extractHtmlContent'],
                            sourceData: ['binary'],
                        },
                    },
                    default: 'data',
                    required: true,
                    description: 'Name of the binary property in which the HTML to extract the data from can be found',
                },
                {
                    displayName: 'JSON Property',
                    name: 'dataPropertyName',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['extractHtmlContent'],
                            sourceData: ['json'],
                        },
                    },
                    default: 'data',
                    required: true,
                    description: 'Name of the JSON property in which the HTML to extract the data from can be found. The property can either contain a string or an array of strings.',
                },
                {
                    displayName: 'Extraction Values',
                    name: 'extractionValues',
                    placeholder: 'Add Value',
                    type: 'fixedCollection',
                    typeOptions: {
                        multipleValues: true,
                    },
                    displayOptions: {
                        show: {
                            operation: ['extractHtmlContent'],
                        },
                    },
                    default: {},
                    options: [
                        {
                            name: 'values',
                            displayName: 'Values',
                            values: [
                                {
                                    displayName: 'Key',
                                    name: 'key',
                                    type: 'string',
                                    default: '',
                                    description: 'The key under which the extracted value should be saved',
                                },
                                {
                                    displayName: 'CSS Selector',
                                    name: 'cssSelector',
                                    type: 'string',
                                    default: '',
                                    placeholder: '.price',
                                    description: 'The CSS selector to use',
                                },
                                {
                                    displayName: 'Return Value',
                                    name: 'returnValue',
                                    type: 'options',
                                    options: [
                                        {
                                            name: 'Attribute',
                                            value: 'attribute',
                                            description: 'Get an attribute value like "class" from an element',
                                        },
                                        {
                                            name: 'HTML',
                                            value: 'html',
                                            description: 'Get the HTML the element contains',
                                        },
                                        {
                                            name: 'Text',
                                            value: 'text',
                                            description: 'Get only the text content of the element',
                                        },
                                        {
                                            name: 'Value',
                                            value: 'value',
                                            description: 'Get value of an input, select or textarea',
                                        },
                                    ],
                                    default: 'text',
                                    description: 'What kind of data should be returned',
                                },
                                {
                                    displayName: 'Attribute',
                                    name: 'attribute',
                                    type: 'string',
                                    displayOptions: {
                                        show: {
                                            returnValue: ['attribute'],
                                        },
                                    },
                                    default: '',
                                    placeholder: 'class',
                                    description: 'The name of the attribute to return the value off',
                                },
                                {
                                    displayName: 'Return Array',
                                    name: 'returnArray',
                                    type: 'boolean',
                                    default: false,
                                    description: 'Whether to return the values as an array so if multiple ones get found they also get returned separately. If not set all will be returned as a single string.',
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    displayOptions: {
                        show: {
                            operation: ['extractHtmlContent'],
                        },
                    },
                    options: [
                        {
                            displayName: 'Trim Values',
                            name: 'trimValues',
                            type: 'boolean',
                            default: true,
                            description: 'Whether to remove automatically all spaces and newlines from the beginning and end of the values',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        let item;
        const returnData = [];
        const operation = this.getNodeParameter('operation', 0);
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            try {
                if (operation === 'generateHtmlTemplate') {
                    let html = this.getNodeParameter('html', itemIndex);
                    for (const resolvable of (0, utils_1.getResolvables)(html)) {
                        html = html.replace(resolvable, this.evaluateExpression(resolvable, itemIndex));
                    }
                    const result = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray({ html }), {
                        itemData: { item: itemIndex },
                    });
                    returnData.push(...result);
                }
                else if (operation === 'extractHtmlContent') {
                    const dataPropertyName = this.getNodeParameter('dataPropertyName', itemIndex);
                    const extractionValues = this.getNodeParameter('extractionValues', itemIndex);
                    const options = this.getNodeParameter('options', itemIndex, {});
                    const sourceData = this.getNodeParameter('sourceData', itemIndex);
                    item = items[itemIndex];
                    let htmlArray = [];
                    if (sourceData === 'json') {
                        if (item.json[dataPropertyName] === undefined) {
                            throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No property named "${dataPropertyName}" exists!`, { itemIndex });
                        }
                        htmlArray = item.json[dataPropertyName];
                    }
                    else {
                        this.helpers.assertBinaryData(itemIndex, dataPropertyName);
                        const binaryDataBuffer = await this.helpers.getBinaryDataBuffer(itemIndex, dataPropertyName);
                        htmlArray = binaryDataBuffer.toString('utf-8');
                    }
                    if (!Array.isArray(htmlArray)) {
                        htmlArray = [htmlArray];
                    }
                    for (const html of htmlArray) {
                        const $ = cheerio_1.default.load(html);
                        const newItem = {
                            json: {},
                            pairedItem: {
                                item: itemIndex,
                            },
                        };
                        let htmlElement;
                        for (const valueData of extractionValues.values) {
                            htmlElement = $(valueData.cssSelector);
                            if (valueData.returnArray) {
                                newItem.json[valueData.key] = [];
                                htmlElement.each((i, el) => {
                                    newItem.json[valueData.key].push((0, utils_1.getValue)($(el), valueData, options));
                                });
                            }
                            else {
                                newItem.json[valueData.key] = (0, utils_1.getValue)(htmlElement, valueData, options);
                            }
                        }
                        returnData.push(newItem);
                    }
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({
                        json: {
                            error: error.message,
                        },
                        pairedItem: {
                            item: itemIndex,
                        },
                    });
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.Html = Html;
//# sourceMappingURL=Html.node.js.map