import type { IDataObject, IExecuteFunctions, IExecuteSingleFunctions, IHookFunctions, ILoadOptionsFunctions, INodeExecutionData, INodeProperties, IPollFunctions } from 'n8n-workflow';
export type SortData = {
    key: string;
    type: string;
    direction: string;
    timestamp: boolean;
};
export declare function notionApiRequest(this: IHookFunctions | IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions | IPollFunctions, method: string, resource: string, body?: any, qs?: IDataObject, uri?: string, option?: IDataObject): Promise<any>;
export declare function notionApiRequestAllItems(this: IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions, propertyName: string, method: string, endpoint: string, body?: any, query?: IDataObject): Promise<any>;
export declare function getBlockTypes(): {
    name: string;
    value: string;
}[];
export declare function formatTitle(content: string): {
    title: {
        text: {
            content: string;
        };
    }[];
};
export declare function formatText(content: string): {
    text: {
        text: {
            content: string;
        };
    }[];
};
export declare function formatBlocks(blocks: IDataObject[]): {
    [x: string]: import("n8n-workflow").GenericValue;
    object: string;
    type: IDataObject | IDataObject[] | import("n8n-workflow").GenericValue | import("n8n-workflow").GenericValue[];
}[];
export declare function mapProperties(this: IExecuteFunctions, properties: IDataObject[], timezone: string, version?: number): {};
export declare function mapSorting(data: SortData[]): {
    [x: string]: string;
    direction: string;
}[];
export declare function mapFilters(filtersList: IDataObject[], timezone: string): IDataObject;
export declare function simplifyProperties(properties: any): any;
export declare function getPropertyTitle(properties: {
    [key: string]: any;
}): any;
export declare function simplifyObjects(objects: any, download?: boolean, version?: number): IDataObject[];
export declare function getFormattedChildren(children: IDataObject[]): IDataObject[];
export declare function getConditions(): INodeProperties[];
export type FileRecord = {
    properties: {
        [key: string]: any | {
            id: string;
            type: string;
            files: [{
                external: {
                    url: string;
                };
            } | {
                file: {
                    url: string;
                };
            }];
        };
    };
};
export declare function downloadFiles(this: IExecuteFunctions | IPollFunctions, records: FileRecord[]): Promise<INodeExecutionData[]>;
export declare function extractPageId(page: string): string;
export declare function extractDatabaseId(database: string): string;
export declare function getSearchFilters(resource: string): ({
    displayName: string;
    name: string;
    type: string;
    options: {
        name: string;
        value: string;
    }[];
    displayOptions: {
        show: {
            version: number[];
            resource: string[];
            operation: string[];
            filterType?: undefined;
        };
    };
    default: string;
    typeOptions?: undefined;
    placeholder?: undefined;
} | {
    displayName: string;
    name: string;
    type: string;
    options: {
        name: string;
        value: string;
    }[];
    displayOptions: {
        show: {
            version: number[];
            resource: string[];
            operation: string[];
            filterType: string[];
        };
    };
    default: string;
    typeOptions?: undefined;
    placeholder?: undefined;
} | {
    displayName: string;
    name: string;
    type: string;
    typeOptions: {
        multipleValues: boolean;
    };
    displayOptions: {
        show: {
            version: number[];
            resource: string[];
            operation: string[];
            filterType: string[];
        };
    };
    default: {};
    placeholder: string;
    options: {
        displayName: string;
        name: string;
        values: any[];
    }[];
} | {
    displayName: string;
    name: string;
    type: string;
    displayOptions: {
        show: {
            version: number[];
            resource: string[];
            operation: string[];
            filterType: string[];
        };
    };
    default: string;
    options?: undefined;
    typeOptions?: undefined;
    placeholder?: undefined;
})[];
export declare function validateJSON(json: string | undefined): any;
export declare function extractDatabaseMentionRLC(blockValues: IDataObject[]): void;
