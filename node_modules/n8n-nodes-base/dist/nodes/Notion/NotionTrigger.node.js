"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotionTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const moment_1 = __importDefault(require("moment"));
const SearchFunctions_1 = require("./SearchFunctions");
class NotionTrigger {
    constructor() {
        this.description = {
            displayName: 'Notion Trigger',
            name: 'notionTrigger',
            icon: 'file:notion.svg',
            group: ['trigger'],
            version: 1,
            description: 'Starts the workflow when Notion events occur',
            subtitle: '={{$parameter["event"]}}',
            defaults: {
                name: 'Notion Trigger (Beta)',
            },
            credentials: [
                {
                    name: 'notionApi',
                    required: true,
                },
            ],
            polling: true,
            inputs: [],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Event',
                    name: 'event',
                    type: 'options',
                    options: [
                        {
                            name: 'Page Added to Database',
                            value: 'pageAddedToDatabase',
                        },
                        {
                            name: 'Page Updated in Database',
                            value: 'pagedUpdatedInDatabase',
                        },
                    ],
                    required: true,
                    default: 'pageAddedToDatabase',
                },
                {
                    displayName: 'In Notion, make sure to <a href="https://www.notion.so/help/add-and-manage-connections-with-the-api" target="_blank">add your connection</a> to the pages you want to access.',
                    name: 'notionNotice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Database',
                    name: 'databaseId',
                    type: 'resourceLocator',
                    default: { mode: 'list', value: '' },
                    required: true,
                    modes: [
                        {
                            displayName: 'Database',
                            name: 'list',
                            type: 'list',
                            placeholder: 'Select a Database...',
                            typeOptions: {
                                searchListMethod: 'getDatabases',
                                searchable: true,
                            },
                        },
                        {
                            displayName: 'Link',
                            name: 'url',
                            type: 'string',
                            placeholder: 'https://www.notion.so/0fe2f7de558b471eab07e9d871cdf4a9?v=f2d424ba0c404733a3f500c78c881610',
                            validation: [
                                {
                                    type: 'regex',
                                    properties: {
                                        regex: '(?:https|http)://www.notion.so/(?:[a-z0-9-]{2,}/)?([0-9a-f]{8}[0-9a-f]{4}4[0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}).*',
                                        errorMessage: 'Not a valid Notion Database URL',
                                    },
                                },
                            ],
                            extractValue: {
                                type: 'regex',
                                regex: '(?:https|http)://www.notion.so/(?:[a-z0-9-]{2,}/)?([0-9a-f]{8}[0-9a-f]{4}4[0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12})',
                            },
                        },
                        {
                            displayName: 'ID',
                            name: 'id',
                            type: 'string',
                            placeholder: 'ab1545b247fb49fa92d6f4b49f4d8116',
                            validation: [
                                {
                                    type: 'regex',
                                    properties: {
                                        regex: '^(([0-9a-f]{8}[0-9a-f]{4}4[0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12})|([0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}))[ \t]*',
                                        errorMessage: 'Not a valid Notion Database ID',
                                    },
                                },
                            ],
                            extractValue: {
                                type: 'regex',
                                regex: '^([0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12})',
                            },
                            url: '=https://www.notion.so/{{$value.replace(/-/g, "")}}',
                        },
                    ],
                    displayOptions: {
                        show: {
                            event: ['pageAddedToDatabase', 'pagedUpdatedInDatabase'],
                        },
                    },
                    description: 'The Notion Database to operate on',
                },
                {
                    displayName: 'Simplify',
                    name: 'simple',
                    type: 'boolean',
                    displayOptions: {
                        show: {
                            event: ['pageAddedToDatabase', 'pagedUpdatedInDatabase'],
                        },
                    },
                    default: true,
                    description: 'Whether to return a simplified version of the response instead of the raw data',
                },
            ],
        };
        this.methods = {
            listSearch: {
                getDatabases: SearchFunctions_1.getDatabases,
            },
        };
    }
    async poll() {
        var _a;
        const webhookData = this.getWorkflowStaticData('node');
        const databaseId = this.getNodeParameter('databaseId', '', { extractValue: true });
        const event = this.getNodeParameter('event');
        const simple = this.getNodeParameter('simple');
        const lastTimeChecked = webhookData.lastTimeChecked
            ? (0, moment_1.default)(webhookData.lastTimeChecked)
            : (0, moment_1.default)().set({ second: 0, millisecond: 0 });
        webhookData.lastTimeChecked = (0, moment_1.default)().set({ second: 0, millisecond: 0 });
        const possibleDuplicates = (_a = webhookData.possibleDuplicates) !== null && _a !== void 0 ? _a : [];
        const sortProperty = event === 'pageAddedToDatabase' ? 'created_time' : 'last_edited_time';
        const option = {
            headers: {
                'Notion-Version': '2022-02-22',
            },
        };
        const body = {
            page_size: 1,
            sorts: [
                {
                    timestamp: sortProperty,
                    direction: 'descending',
                },
            ],
            ...(this.getMode() !== 'manual' && {
                filter: {
                    timestamp: sortProperty,
                    [sortProperty]: {
                        on_or_after: lastTimeChecked.utc().format(),
                    },
                },
            }),
        };
        let records = [];
        let hasMore = true;
        let { results: data } = await GenericFunctions_1.notionApiRequest.call(this, 'POST', `/databases/${databaseId}/query`, body, {}, '', option);
        if (this.getMode() === 'manual') {
            if (simple) {
                data = (0, GenericFunctions_1.simplifyObjects)(data, false, 1);
            }
            if (Array.isArray(data) && data.length) {
                return [this.helpers.returnJsonArray(data)];
            }
        }
        if (Array.isArray(data) && data.length && Object.keys(data[0]).length !== 0) {
            do {
                body.page_size = 10;
                const { results, has_more, next_cursor } = await GenericFunctions_1.notionApiRequest.call(this, 'POST', `/databases/${databaseId}/query`, body, {}, '', option);
                records.push(...results);
                hasMore = has_more;
                if (next_cursor !== null) {
                    body.start_cursor = next_cursor;
                }
            } while (!(0, moment_1.default)(records[records.length - 1][sortProperty]).isBefore(lastTimeChecked) &&
                hasMore);
            records = records.filter((record) => !possibleDuplicates.includes(record.id));
            if (records[0]) {
                const latestTimestamp = (0, moment_1.default)(records[0][sortProperty]);
                webhookData.possibleDuplicates = records
                    .filter((record) => (0, moment_1.default)(record[sortProperty]).isSame(latestTimestamp))
                    .map((record) => record.id);
            }
            else {
                webhookData.possibleDuplicates = undefined;
            }
            if (simple) {
                records = (0, GenericFunctions_1.simplifyObjects)(records, false, 1);
            }
            if (Array.isArray(records) && records.length) {
                return [this.helpers.returnJsonArray(records)];
            }
        }
        return null;
    }
}
exports.NotionTrigger = NotionTrigger;
//# sourceMappingURL=NotionTrigger.node.js.map