"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostgresV1 = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const pg_promise_1 = __importDefault(require("pg-promise"));
const genericFunctions_1 = require("./genericFunctions");
const descriptions_1 = require("../../../utils/descriptions");
const versionDescription = {
    displayName: 'Postgres',
    name: 'postgres',
    icon: 'file:postgres.svg',
    group: ['input'],
    version: 1,
    description: 'Get, add and update data in Postgres',
    defaults: {
        name: 'Postgres',
    },
    inputs: ['main'],
    outputs: ['main'],
    credentials: [
        {
            name: 'postgres',
            required: true,
            testedBy: 'postgresConnectionTest',
        },
    ],
    properties: [
        descriptions_1.oldVersionNotice,
        {
            displayName: 'Operation',
            name: 'operation',
            type: 'options',
            noDataExpression: true,
            options: [
                {
                    name: 'Execute Query',
                    value: 'executeQuery',
                    description: 'Execute an SQL query',
                    action: 'Execute a SQL query',
                },
                {
                    name: 'Insert',
                    value: 'insert',
                    description: 'Insert rows in database',
                    action: 'Insert rows in database',
                },
                {
                    name: 'Update',
                    value: 'update',
                    description: 'Update rows in database',
                    action: 'Update rows in database',
                },
            ],
            default: 'insert',
        },
        {
            displayName: 'Query',
            name: 'query',
            type: 'string',
            typeOptions: {
                editor: 'sqlEditor',
                sqlDialect: 'postgres',
            },
            displayOptions: {
                show: {
                    operation: ['executeQuery'],
                },
            },
            default: '',
            placeholder: 'SELECT id, name FROM product WHERE quantity > $1 AND price <= $2',
            required: true,
            description: 'The SQL query to execute. You can use n8n expressions or $1 and $2 in conjunction with query parameters.',
        },
        {
            displayName: 'Schema',
            name: 'schema',
            type: 'string',
            displayOptions: {
                show: {
                    operation: ['insert'],
                },
            },
            default: 'public',
            required: true,
            description: 'Name of the schema the table belongs to',
        },
        {
            displayName: 'Table',
            name: 'table',
            type: 'string',
            displayOptions: {
                show: {
                    operation: ['insert'],
                },
            },
            default: '',
            required: true,
            description: 'Name of the table in which to insert data to',
        },
        {
            displayName: 'Columns',
            name: 'columns',
            type: 'string',
            displayOptions: {
                show: {
                    operation: ['insert'],
                },
            },
            default: '',
            placeholder: 'id:int,name:text,description',
            description: 'Comma-separated list of the properties which should used as columns for the new rows. You can use type casting with colons (:) like id:int.',
        },
        {
            displayName: 'Schema',
            name: 'schema',
            type: 'string',
            displayOptions: {
                show: {
                    operation: ['update'],
                },
            },
            default: 'public',
            description: 'Name of the schema the table belongs to',
        },
        {
            displayName: 'Table',
            name: 'table',
            type: 'string',
            displayOptions: {
                show: {
                    operation: ['update'],
                },
            },
            default: '',
            required: true,
            description: 'Name of the table in which to update data in',
        },
        {
            displayName: 'Update Key',
            name: 'updateKey',
            type: 'string',
            displayOptions: {
                show: {
                    operation: ['update'],
                },
            },
            default: 'id',
            required: true,
            description: 'Comma-separated list of the properties which decides which rows in the database should be updated. Normally that would be "id".',
        },
        {
            displayName: 'Columns',
            name: 'columns',
            type: 'string',
            displayOptions: {
                show: {
                    operation: ['update'],
                },
            },
            default: '',
            placeholder: 'name:text,description',
            description: 'Comma-separated list of the properties which should used as columns for rows to update. You can use type casting with colons (:) like id:int.',
        },
        {
            displayName: 'Return Fields',
            name: 'returnFields',
            type: 'string',
            requiresDataPath: 'multiple',
            displayOptions: {
                show: {
                    operation: ['insert', 'update'],
                },
            },
            default: '*',
            description: 'Comma-separated list of the fields that the operation will return',
        },
        {
            displayName: 'Additional Fields',
            name: 'additionalFields',
            type: 'collection',
            placeholder: 'Add Field',
            default: {},
            options: [
                {
                    displayName: 'Mode',
                    name: 'mode',
                    type: 'options',
                    options: [
                        {
                            name: 'Independently',
                            value: 'independently',
                            description: 'Execute each query independently',
                        },
                        {
                            name: 'Multiple Queries',
                            value: 'multiple',
                            description: '<b>Default</b>. Sends multiple queries at once to database.',
                        },
                        {
                            name: 'Transaction',
                            value: 'transaction',
                            description: 'Executes all queries in a single transaction',
                        },
                    ],
                    default: 'multiple',
                    description: 'The way queries should be sent to database. Can be used in conjunction with <b>Continue on Fail</b>. See <a href="https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.postgres/">the docs</a> for more examples',
                },
                {
                    displayName: 'Output Large-Format Numbers As',
                    name: 'largeNumbersOutput',
                    type: 'options',
                    options: [
                        {
                            name: 'Numbers',
                            value: 'numbers',
                        },
                        {
                            name: 'Text',
                            value: 'text',
                            description: 'Use this if you expect numbers longer than 16 digits (otherwise numbers may be incorrect)',
                        },
                    ],
                    hint: 'Applies to NUMERIC and BIGINT columns only',
                    default: 'text',
                },
                {
                    displayName: 'Query Parameters',
                    name: 'queryParams',
                    type: 'string',
                    displayOptions: {
                        show: {
                            '/operation': ['executeQuery'],
                        },
                    },
                    default: '',
                    placeholder: 'quantity,price',
                    description: 'Comma-separated list of properties which should be used as query parameters',
                },
            ],
        },
    ],
};
class PostgresV1 {
    constructor(baseDescription) {
        this.methods = {
            credentialTest: {
                async postgresConnectionTest(credential) {
                    const credentials = credential.data;
                    try {
                        const pgp = (0, pg_promise_1.default)();
                        const config = {
                            host: credentials.host,
                            port: credentials.port,
                            database: credentials.database,
                            user: credentials.user,
                            password: credentials.password,
                        };
                        if (credentials.allowUnauthorizedCerts === true) {
                            config.ssl = {
                                rejectUnauthorized: false,
                            };
                        }
                        else {
                            config.ssl = !['disable', undefined].includes(credentials.ssl);
                            config.sslmode = credentials.ssl || 'disable';
                        }
                        const db = pgp(config);
                        await db.connect();
                        pgp.end();
                    }
                    catch (error) {
                        return {
                            status: 'Error',
                            message: error.message,
                        };
                    }
                    return {
                        status: 'OK',
                        message: 'Connection successful!',
                    };
                },
            },
        };
        this.description = {
            ...baseDescription,
            ...versionDescription,
        };
    }
    async execute() {
        const credentials = await this.getCredentials('postgres');
        const largeNumbersOutput = this.getNodeParameter('additionalFields.largeNumbersOutput', 0, '');
        const pgp = (0, pg_promise_1.default)();
        if (largeNumbersOutput === 'numbers') {
            pgp.pg.types.setTypeParser(20, (value) => {
                return parseInt(value, 10);
            });
            pgp.pg.types.setTypeParser(1700, (value) => {
                return parseFloat(value);
            });
        }
        const config = {
            host: credentials.host,
            port: credentials.port,
            database: credentials.database,
            user: credentials.user,
            password: credentials.password,
        };
        if (credentials.allowUnauthorizedCerts === true) {
            config.ssl = {
                rejectUnauthorized: false,
            };
        }
        else {
            config.ssl = !['disable', undefined].includes(credentials.ssl);
            config.sslmode = credentials.ssl || 'disable';
        }
        const db = pgp(config);
        let returnItems = [];
        const items = this.getInputData();
        const operation = this.getNodeParameter('operation', 0);
        if (operation === 'executeQuery') {
            const queryResult = await genericFunctions_1.pgQueryV2.call(this, pgp, db, items, this.continueOnFail());
            returnItems = queryResult;
        }
        else if (operation === 'insert') {
            const insertData = await genericFunctions_1.pgInsertV2.call(this, pgp, db, items, this.continueOnFail());
            returnItems = insertData;
        }
        else if (operation === 'update') {
            const updateItems = await (0, genericFunctions_1.pgUpdate)(this.getNodeParameter, pgp, db, items, this.continueOnFail());
            returnItems = (0, genericFunctions_1.wrapData)(updateItems);
        }
        else {
            pgp.end();
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The operation "${operation}" is not supported!`);
        }
        pgp.end();
        return this.prepareOutputData(returnItems);
    }
}
exports.PostgresV1 = PostgresV1;
//# sourceMappingURL=PostgresV1.node.js.map