"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const utilities_1 = require("../../../../../utils/utilities");
const utils_1 = require("../../helpers/utils");
const common_descriptions_1 = require("../common.descriptions");
const properties = [
    {
        displayName: 'Data Mode',
        name: 'dataMode',
        type: 'options',
        options: [
            {
                name: 'Auto-Map Input Data to Columns',
                value: 'autoMapInputData',
                description: 'Use when node input properties names exactly match the table column names',
            },
            {
                name: 'Map Each Column Manually',
                value: 'defineBelow',
                description: 'Set the value for each destination column manually',
            },
        ],
        default: 'autoMapInputData',
        description: 'Whether to map node input properties and the table data automatically or manually',
    },
    {
        displayName: `
		In this mode, make sure incoming data fields are named the same as the columns in your table. If needed, use a 'Set' node before this node to change the field names.
		`,
        name: 'notice',
        type: 'notice',
        default: '',
        displayOptions: {
            show: {
                dataMode: ['autoMapInputData'],
            },
        },
    },
    {
        displayName: 'Values to Send',
        name: 'valuesToSend',
        placeholder: 'Add Value',
        type: 'fixedCollection',
        typeOptions: {
            multipleValueButtonText: 'Add Value',
            multipleValues: true,
        },
        displayOptions: {
            show: {
                dataMode: ['defineBelow'],
            },
        },
        default: {},
        options: [
            {
                displayName: 'Values',
                name: 'values',
                values: [
                    {
                        displayName: 'Column',
                        name: 'column',
                        type: 'options',
                        description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                        typeOptions: {
                            loadOptionsMethod: 'getColumns',
                            loadOptionsDependsOn: ['schema.value', 'table.value'],
                        },
                        default: [],
                    },
                    {
                        displayName: 'Value',
                        name: 'value',
                        type: 'string',
                        default: '',
                    },
                ],
            },
        ],
    },
    common_descriptions_1.optionsCollection,
];
const displayOptions = {
    show: {
        resource: ['database'],
        operation: ['insert'],
    },
    hide: {
        table: [''],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, properties);
async function execute(runQueries, items, nodeOptions, db) {
    items = (0, utils_1.replaceEmptyStringsByNulls)(items, nodeOptions.replaceEmptyStrings);
    const queries = [];
    for (let i = 0; i < items.length; i++) {
        const schema = this.getNodeParameter('schema', i, undefined, {
            extractValue: true,
        });
        const table = this.getNodeParameter('table', i, undefined, {
            extractValue: true,
        });
        const options = this.getNodeParameter('options', i, {});
        let onConflict = '';
        if (options.skipOnConflict) {
            onConflict = ' ON CONFLICT DO NOTHING';
        }
        let query = `INSERT INTO $1:name.$2:name($3:name) VALUES($3:csv)${onConflict}`;
        let values = [schema, table];
        const dataMode = this.getNodeParameter('dataMode', i);
        let item = {};
        if (dataMode === 'autoMapInputData') {
            item = items[i].json;
        }
        if (dataMode === 'defineBelow') {
            const valuesToSend = this.getNodeParameter('valuesToSend', i, [])
                .values;
            item = (0, utils_1.prepareItem)(valuesToSend);
        }
        const tableSchema = await (0, utils_1.getTableSchema)(db, schema, table);
        values.push((0, utils_1.checkItemAgainstSchema)(this.getNode(), item, tableSchema, i));
        const outputColumns = this.getNodeParameter('options.outputColumns', i, ['*']);
        [query, values] = (0, utils_1.addReturning)(query, outputColumns, values);
        queries.push({ query, values });
    }
    return runQueries(queries, items, nodeOptions);
}
exports.execute = execute;
//# sourceMappingURL=insert.operation.js.map