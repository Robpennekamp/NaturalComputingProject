import type { IDataObject, INode, INodeExecutionData } from 'n8n-workflow';
import { NodeOperationError } from 'n8n-workflow';
import type { ColumnInfo, ConstructExecutionMetaData, PgpClient, PgpDatabase, QueryValues, QueryWithValues, SortRule, WhereClause } from './interfaces';
export declare function wrapData(data: IDataObject | IDataObject[]): INodeExecutionData[];
export declare function prepareErrorItem(items: INodeExecutionData[], error: IDataObject | NodeOperationError | Error, index: number): INodeExecutionData;
export declare function parsePostgresError(node: INode, error: any, queries: QueryWithValues[], itemIndex?: number): NodeOperationError;
export declare function addWhereClauses(node: INode, itemIndex: number, query: string, clauses: WhereClause[], replacements: QueryValues, combineConditions: string): [string, QueryValues];
export declare function addSortRules(query: string, rules: SortRule[], replacements: QueryValues): [string, QueryValues];
export declare function addReturning(query: string, outputColumns: string[], replacements: QueryValues): [string, QueryValues];
export declare const configureQueryRunner: (node: INode, constructExecutionMetaData: ConstructExecutionMetaData, continueOnFail: boolean, pgp: PgpClient, db: PgpDatabase) => (queries: QueryWithValues[], items: INodeExecutionData[], options: IDataObject) => Promise<INodeExecutionData[] | {
    json: {
        message: string;
        error: {
            lineNumber: number | undefined;
            node: INode;
            description: string | null | undefined;
            cause: Error | import("n8n-workflow").JsonObject | undefined;
            timestamp: number;
            context: IDataObject;
            name: string;
            message: string;
            stack?: string | undefined;
        };
    };
}[]>;
export declare function replaceEmptyStringsByNulls(items: INodeExecutionData[], replace?: boolean): INodeExecutionData[];
export declare function prepareItem(values: IDataObject[]): IDataObject;
export declare function getTableSchema(db: PgpDatabase, schema: string, table: string): Promise<ColumnInfo[]>;
export declare function checkItemAgainstSchema(node: INode, item: IDataObject, columnsInfo: ColumnInfo[], index: number): IDataObject;
