"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VenafiTlsProtectCloudTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class VenafiTlsProtectCloudTrigger {
    constructor() {
        this.description = {
            displayName: 'Venafi TLS Protect Cloud Trigger',
            name: 'venafiTlsProtectCloudTrigger',
            icon: 'file:../venafi.svg',
            group: ['trigger'],
            version: 1,
            description: 'Starts the workflow when Venafi events occur',
            defaults: {
                name: 'Venafi TLS Protect Cloud Trigger',
            },
            credentials: [
                {
                    name: 'venafiTlsProtectCloudApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            inputs: [],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    typeOptions: {
                        loadOptionsMethod: 'getActivityTypes',
                    },
                    required: true,
                    default: [],
                    description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>. Choose from the list, or specify IDs using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
                },
                {
                    displayName: 'Trigger On',
                    name: 'triggerOn',
                    type: 'multiOptions',
                    typeOptions: {
                        loadOptionsMethod: 'getActivitySubTypes',
                        loadOptionsDependsOn: ['resource'],
                    },
                    required: true,
                    default: [],
                    description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>. Choose from the list, or specify IDs using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>. Choose from the list, or specify IDs using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getActivityTypes() {
                    const activitytypes = await GenericFunctions_1.venafiApiRequest.call(this, 'GET', '/v1/activitytypes');
                    return activitytypes.map(({ key, readableName }) => ({
                        name: readableName,
                        value: key,
                    }));
                },
                async getActivitySubTypes() {
                    const resource = this.getCurrentNodeParameter('resource');
                    const activitytypes = await GenericFunctions_1.venafiApiRequest.call(this, 'GET', '/v1/activitytypes');
                    const activity = activitytypes.find(({ key }) => key === resource);
                    const subActivities = activity.values.map(({ key, readableName }) => ({
                        name: readableName,
                        value: key,
                    }));
                    subActivities.unshift({ name: '[All]', value: '*' });
                    return subActivities;
                },
            },
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const { connectors } = await GenericFunctions_1.venafiApiRequest.call(this, 'GET', '/v1/connectors');
                    for (const connector of connectors) {
                        const { id, properties: { target: { connection: { url }, }, }, } = connector;
                        if (url === webhookUrl) {
                            await GenericFunctions_1.venafiApiRequest.call(this, 'DELETE', `/v1/connectors/${id}`);
                            return false;
                        }
                    }
                    return false;
                },
                async create() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const resource = this.getNodeParameter('resource');
                    const body = {
                        name: `n8n-webhook (${webhookUrl})`,
                        properties: {
                            connectorKind: 'WEBHOOK',
                            target: {
                                type: 'generic',
                                connection: {
                                    url: webhookUrl,
                                },
                            },
                            filter: {
                                activityTypes: [resource],
                            },
                        },
                    };
                    const responseData = await GenericFunctions_1.venafiApiRequest.call(this, 'POST', '/v1/connectors', body);
                    if (responseData.id === undefined) {
                        return false;
                    }
                    const webhookData = this.getWorkflowStaticData('node');
                    webhookData.webhookId = responseData.id;
                    return true;
                },
                async delete() {
                    const webhookData = this.getWorkflowStaticData('node');
                    if (webhookData.webhookId !== undefined) {
                        try {
                            await GenericFunctions_1.venafiApiRequest.call(this, 'DELETE', `/v1/connectors/${webhookData.webhookId}`);
                        }
                        catch (error) {
                            return false;
                        }
                        delete webhookData.webhookId;
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        const bodyData = this.getBodyData();
        const triggerOn = this.getNodeParameter('triggerOn');
        if (Object.keys(bodyData).length === 1 && bodyData.message) {
            const res = this.getResponseObject();
            res.status(200).end();
            return {
                noWebhookResponse: true,
            };
        }
        if (!triggerOn.includes('*') && !triggerOn.includes(bodyData.eventName))
            return {};
        return {
            workflowData: [this.helpers.returnJsonArray(bodyData)],
        };
    }
}
exports.VenafiTlsProtectCloudTrigger = VenafiTlsProtectCloudTrigger;
//# sourceMappingURL=VenafiTlsProtectCloudTrigger.node.js.map