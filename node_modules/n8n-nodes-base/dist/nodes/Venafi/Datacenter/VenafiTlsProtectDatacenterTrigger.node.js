"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VenafiTlsProtectDatacenterTrigger = void 0;
const moment_1 = __importDefault(require("moment"));
const GenericFunctions_1 = require("./GenericFunctions");
class VenafiTlsProtectDatacenterTrigger {
    constructor() {
        this.description = {
            displayName: 'Venafi TLS Protect Datacenter Trigger',
            name: 'venafiTlsProtectDatacenterTrigger',
            icon: 'file:../venafi.svg',
            group: ['trigger'],
            version: 1,
            subtitle: '={{$parameter["triggerOn"]}}',
            description: 'Starts the workflow when Venafi events occur',
            defaults: {
                name: 'Venafi TLS Protect Datacenterâ€‹',
            },
            credentials: [
                {
                    name: 'venafiTlsProtectDatacenterApi',
                    required: true,
                },
            ],
            polling: true,
            inputs: [],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Trigger On',
                    name: 'triggerOn',
                    type: 'options',
                    options: [
                        {
                            name: 'Certificate Expired',
                            value: 'certificateExpired',
                        },
                    ],
                    required: true,
                    default: 'certificateExpired',
                },
            ],
        };
    }
    async poll() {
        const webhookData = this.getWorkflowStaticData('node');
        const qs = {};
        const now = (0, moment_1.default)().format();
        qs.ValidToGreater = webhookData.lastTimeChecked || now;
        qs.ValidToLess = now;
        const { Certificates: certificates } = await GenericFunctions_1.venafiApiRequest.call(this, 'GET', '/vedsdk/certificates', {}, qs);
        webhookData.lastTimeChecked = qs.ValidToLess;
        if (Array.isArray(certificates) && certificates.length !== 0) {
            return [this.helpers.returnJsonArray(certificates)];
        }
        return null;
    }
}
exports.VenafiTlsProtectDatacenterTrigger = VenafiTlsProtectDatacenterTrigger;
//# sourceMappingURL=VenafiTlsProtectDatacenterTrigger.node.js.map