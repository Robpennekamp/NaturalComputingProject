"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zoom = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const MeetingDescription_1 = require("./MeetingDescription");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
class Zoom {
    constructor() {
        this.description = {
            displayName: 'Zoom',
            name: 'zoom',
            group: ['input'],
            version: 1,
            description: 'Consume Zoom API',
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            defaults: {
                name: 'Zoom',
            },
            icon: 'file:zoom.svg',
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'zoomApi',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: ['accessToken'],
                        },
                    },
                },
                {
                    name: 'zoomOAuth2Api',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: ['oAuth2'],
                        },
                    },
                },
            ],
            properties: [
                {
                    displayName: 'Authentication',
                    name: 'authentication',
                    type: 'options',
                    options: [
                        {
                            name: 'Access Token',
                            value: 'accessToken',
                        },
                        {
                            name: 'OAuth2',
                            value: 'oAuth2',
                        },
                    ],
                    default: 'accessToken',
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Meeting',
                            value: 'meeting',
                        },
                    ],
                    default: 'meeting',
                },
                ...MeetingDescription_1.meetingOperations,
                ...MeetingDescription_1.meetingFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getTimezones() {
                    const returnData = [];
                    for (const timezone of moment_timezone_1.default.tz.names()) {
                        const timezoneName = timezone;
                        const timezoneId = timezone;
                        returnData.push({
                            name: timezoneName,
                            value: timezoneId,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        let qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < items.length; i++) {
            try {
                qs = {};
                if (resource === 'meeting') {
                    if (operation === 'get') {
                        const meetingId = this.getNodeParameter('meetingId', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (additionalFields.showPreviousOccurrences) {
                            qs.show_previous_occurrences = additionalFields.showPreviousOccurrences;
                        }
                        if (additionalFields.occurrenceId) {
                            qs.occurrence_id = additionalFields.occurrenceId;
                        }
                        responseData = await GenericFunctions_1.zoomApiRequest.call(this, 'GET', `/meetings/${meetingId}`, {}, qs);
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const filters = this.getNodeParameter('filters', i);
                        if (filters.type) {
                            qs.type = filters.type;
                        }
                        if (returnAll) {
                            responseData = await GenericFunctions_1.zoomApiRequestAllItems.call(this, 'meetings', 'GET', '/users/me/meetings', {}, qs);
                        }
                        else {
                            qs.page_size = this.getNodeParameter('limit', i);
                            responseData = await GenericFunctions_1.zoomApiRequest.call(this, 'GET', '/users/me/meetings', {}, qs);
                            responseData = responseData.meetings;
                        }
                    }
                    if (operation === 'delete') {
                        const meetingId = this.getNodeParameter('meetingId', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (additionalFields.scheduleForReminder) {
                            qs.schedule_for_reminder = additionalFields.scheduleForReminder;
                        }
                        if (additionalFields.occurrenceId) {
                            qs.occurrence_id = additionalFields.occurrenceId;
                        }
                        responseData = await GenericFunctions_1.zoomApiRequest.call(this, 'DELETE', `/meetings/${meetingId}`, {}, qs);
                        responseData = { success: true };
                    }
                    if (operation === 'create') {
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const body = {};
                        if (additionalFields.settings) {
                            const settingValues = {};
                            const settings = additionalFields.settings;
                            if (settings.cnMeeting) {
                                settingValues.cn_meeting = settings.cnMeeting;
                            }
                            if (settings.inMeeting) {
                                settingValues.in_meeting = settings.inMeeting;
                            }
                            if (settings.joinBeforeHost) {
                                settingValues.join_before_host = settings.joinBeforeHost;
                            }
                            if (settings.muteUponEntry) {
                                settingValues.mute_upon_entry = settings.muteUponEntry;
                            }
                            if (settings.watermark) {
                                settingValues.watermark = settings.watermark;
                            }
                            if (settings.audio) {
                                settingValues.audio = settings.audio;
                            }
                            if (settings.alternativeHosts) {
                                settingValues.alternative_hosts = settings.alternativeHosts;
                            }
                            if (settings.participantVideo) {
                                settingValues.participant_video = settings.participantVideo;
                            }
                            if (settings.hostVideo) {
                                settingValues.host_video = settings.hostVideo;
                            }
                            if (settings.autoRecording) {
                                settingValues.auto_recording = settings.autoRecording;
                            }
                            if (settings.registrationType) {
                                settingValues.registration_type = settings.registrationType;
                            }
                            body.settings = settingValues;
                        }
                        body.topic = this.getNodeParameter('topic', i);
                        if (additionalFields.type) {
                            body.type = additionalFields.type;
                        }
                        if (additionalFields.startTime) {
                            if (additionalFields.timeZone) {
                                body.start_time = (0, moment_timezone_1.default)(additionalFields.startTime).format('YYYY-MM-DDTHH:mm:ss');
                            }
                            else {
                                body.start_time = moment_timezone_1.default
                                    .tz(additionalFields.startTime, this.getTimezone())
                                    .format();
                            }
                        }
                        if (additionalFields.duration) {
                            body.duration = additionalFields.duration;
                        }
                        if (additionalFields.scheduleFor) {
                            body.schedule_for = additionalFields.scheduleFor;
                        }
                        if (additionalFields.timeZone) {
                            body.timezone = additionalFields.timeZone;
                        }
                        if (additionalFields.password) {
                            body.password = additionalFields.password;
                        }
                        if (additionalFields.agenda) {
                            body.agenda = additionalFields.agenda;
                        }
                        responseData = await GenericFunctions_1.zoomApiRequest.call(this, 'POST', '/users/me/meetings', body, qs);
                    }
                    if (operation === 'update') {
                        const meetingId = this.getNodeParameter('meetingId', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {};
                        if (updateFields.settings) {
                            const settingValues = {};
                            const settings = updateFields.settings;
                            if (settings.cnMeeting) {
                                settingValues.cn_meeting = settings.cnMeeting;
                            }
                            if (settings.inMeeting) {
                                settingValues.in_meeting = settings.inMeeting;
                            }
                            if (settings.joinBeforeHost) {
                                settingValues.join_before_host = settings.joinBeforeHost;
                            }
                            if (settings.muteUponEntry) {
                                settingValues.mute_upon_entry = settings.muteUponEntry;
                            }
                            if (settings.watermark) {
                                settingValues.watermark = settings.watermark;
                            }
                            if (settings.audio) {
                                settingValues.audio = settings.audio;
                            }
                            if (settings.alternativeHosts) {
                                settingValues.alternative_hosts = settings.alternativeHosts;
                            }
                            if (settings.participantVideo) {
                                settingValues.participant_video = settings.participantVideo;
                            }
                            if (settings.hostVideo) {
                                settingValues.host_video = settings.hostVideo;
                            }
                            if (settings.autoRecording) {
                                settingValues.auto_recording = settings.autoRecording;
                            }
                            if (settings.registrationType) {
                                settingValues.registration_type = settings.registrationType;
                            }
                            body.settings = settingValues;
                        }
                        if (updateFields.topic) {
                            body.topic = updateFields.topic;
                        }
                        if (updateFields.type) {
                            body.type = updateFields.type;
                        }
                        if (updateFields.startTime) {
                            body.start_time = updateFields.startTime;
                        }
                        if (updateFields.duration) {
                            body.duration = updateFields.duration;
                        }
                        if (updateFields.scheduleFor) {
                            body.schedule_for = updateFields.scheduleFor;
                        }
                        if (updateFields.timeZone) {
                            body.timezone = updateFields.timeZone;
                        }
                        if (updateFields.password) {
                            body.password = updateFields.password;
                        }
                        if (updateFields.agenda) {
                            body.agenda = updateFields.agenda;
                        }
                        responseData = await GenericFunctions_1.zoomApiRequest.call(this, 'PATCH', `/meetings/${meetingId}`, body, qs);
                        responseData = { success: true };
                    }
                }
                const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: i } });
                returnData.push(...executionData);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    const executionErrorData = {
                        json: {},
                        error: error.message,
                        itemIndex: i,
                    };
                    returnData.push(executionErrorData);
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.Zoom = Zoom;
//# sourceMappingURL=Zoom.node.js.map