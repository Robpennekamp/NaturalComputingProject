"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zoomApiRequestAllItems = exports.zoomApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function zoomApiRequest(method, resource, body = {}, query = {}, headers = undefined, option = {}) {
    const authenticationMethod = this.getNodeParameter('authentication', 0, 'accessToken');
    let options = {
        method,
        headers: headers || {
            'Content-Type': 'application/json',
        },
        body,
        qs: query,
        uri: `https://api.zoom.us/v2${resource}`,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (Object.keys(body).length === 0) {
        delete options.body;
    }
    if (Object.keys(query).length === 0) {
        delete options.qs;
    }
    try {
        if (authenticationMethod === 'accessToken') {
            return await this.helpers.requestWithAuthentication.call(this, 'zoomApi', options);
        }
        else {
            return await this.helpers.requestOAuth2.call(this, 'zoomOAuth2Api', options);
        }
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.zoomApiRequest = zoomApiRequest;
async function wait() {
    return new Promise((resolve, _reject) => {
        setTimeout(() => {
            resolve(true);
        }, 1000);
    });
}
async function zoomApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.page_number = 0;
    do {
        responseData = await zoomApiRequest.call(this, method, endpoint, body, query);
        query.page_number++;
        returnData.push.apply(returnData, responseData[propertyName]);
        await wait();
    } while (responseData.page_count !== responseData.page_number);
    return returnData;
}
exports.zoomApiRequestAllItems = zoomApiRequestAllItems;
//# sourceMappingURL=GenericFunctions.js.map