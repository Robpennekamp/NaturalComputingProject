"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadRecordAttachments = exports.apiRequestAllItems = exports.apiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function apiRequest(method, endpoint, body, query, uri, option = {}) {
    const authenticationMethod = this.getNodeParameter('authentication', 0);
    const credentials = await this.getCredentials(authenticationMethod);
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    const baseUrl = credentials.host;
    query = query || {};
    const options = {
        method,
        body,
        qs: query,
        uri: uri || baseUrl.endsWith('/') ? `${baseUrl.slice(0, -1)}${endpoint}` : `${baseUrl}${endpoint}`,
        json: true,
    };
    if (Object.keys(option).length !== 0) {
        Object.assign(options, option);
    }
    if (Object.keys(body).length === 0) {
        delete options.body;
    }
    return this.helpers.requestWithAuthentication.call(this, authenticationMethod, options);
}
exports.apiRequest = apiRequest;
async function apiRequestAllItems(method, endpoint, body, query) {
    const version = this.getNode().typeVersion;
    if (query === undefined) {
        query = {};
    }
    query.limit = 100;
    query.offset = (query === null || query === void 0 ? void 0 : query.offset) ? query.offset : 0;
    const returnData = [];
    let responseData;
    do {
        responseData = await apiRequest.call(this, method, endpoint, body, query);
        version === 1
            ? returnData.push(...responseData)
            : returnData.push(...responseData.list);
        query.offset += query.limit;
    } while (version === 1 ? responseData.length !== 0 : responseData.pageInfo.isLastPage !== true);
    return returnData;
}
exports.apiRequestAllItems = apiRequestAllItems;
async function downloadRecordAttachments(records, fieldNames) {
    const elements = [];
    for (const record of records) {
        const element = { json: {}, binary: {} };
        element.json = record;
        for (const fieldName of fieldNames) {
            if (record[fieldName]) {
                for (const [index, attachment] of (0, n8n_workflow_1.jsonParse)(record[fieldName]).entries()) {
                    const file = await apiRequest.call(this, 'GET', '', {}, {}, attachment.url, {
                        json: false,
                        encoding: null,
                    });
                    element.binary[`${fieldName}_${index}`] = await this.helpers.prepareBinaryData(Buffer.from(file), attachment.title, attachment.mimetype);
                }
            }
        }
        if (Object.keys(element.binary).length === 0) {
            delete element.binary;
        }
        elements.push(element);
    }
    return elements;
}
exports.downloadRecordAttachments = downloadRecordAttachments;
//# sourceMappingURL=GenericFunctions.js.map