import type { IExecuteSingleFunctions, IHookFunctions, IHttpRequestOptions, IWebhookFunctions, JsonObject } from 'n8n-workflow';
export declare namespace SendInBlueNode {
    const INTERCEPTORS: Map<string, (body: JsonObject) => void>;
    namespace Validators {
        function validateAndCompileAttachmentsData(this: IExecuteSingleFunctions, requestOptions: IHttpRequestOptions): Promise<IHttpRequestOptions>;
        function validateAndCompileTags(this: IExecuteSingleFunctions, requestOptions: IHttpRequestOptions): Promise<IHttpRequestOptions>;
        function validateAndCompileCCEmails(this: IExecuteSingleFunctions, requestOptions: IHttpRequestOptions): Promise<IHttpRequestOptions>;
        function validateAndCompileBCCEmails(this: IExecuteSingleFunctions, requestOptions: IHttpRequestOptions): Promise<IHttpRequestOptions>;
        function validateAndCompileReceipientEmails(this: IExecuteSingleFunctions, requestOptions: IHttpRequestOptions): Promise<IHttpRequestOptions>;
        function validateAndCompileSenderEmail(this: IExecuteSingleFunctions, requestOptions: IHttpRequestOptions): Promise<IHttpRequestOptions>;
        function validateAndCompileTemplateParameters(this: IExecuteSingleFunctions, requestOptions: IHttpRequestOptions): Promise<IHttpRequestOptions>;
    }
}
export declare namespace SendInBlueWebhookApi {
    interface WebhookDetails {
        url: string;
        id: number;
        description: string;
        events: string[];
        type: string;
        createdAt: string;
        modifiedAt: string;
    }
    interface WebhookId {
        id: string;
    }
    interface Webhooks {
        webhooks: WebhookDetails[];
    }
    export const supportedAuthMap: Map<string, (ref: IWebhookFunctions) => Promise<string>>;
    export const fetchWebhooks: (ref: IHookFunctions, type: string) => Promise<Webhooks>;
    export const createWebHook: (ref: IHookFunctions, type: string, events: string[], url: string) => Promise<WebhookId>;
    export const deleteWebhook: (ref: IHookFunctions, webhookId: string) => Promise<any>;
    export {};
}
