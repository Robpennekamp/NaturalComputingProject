"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleApi = void 0;
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const axios_1 = __importDefault(require("axios"));
class GoogleApi {
    constructor() {
        this.name = 'googleApi';
        this.displayName = 'Google Service Account API';
        this.documentationUrl = 'google/service-account';
        this.icon = 'file:Google.svg';
        this.properties = [
            {
                displayName: 'Service Account Email',
                name: 'email',
                type: 'string',
                placeholder: 'name@email.com',
                default: '',
                description: 'The Google Service account similar to user-808@project.iam.gserviceaccount.com',
                required: true,
            },
            {
                displayName: 'Private Key',
                name: 'privateKey',
                type: 'string',
                default: '',
                placeholder: '-----BEGIN PRIVATE KEY-----\nXIYEvQIBADANBg<...>0IhA7TMoGYPQc=\n-----END PRIVATE KEY-----\n',
                description: 'Enter the private key located in the JSON file downloaded from Google Cloud Console',
                required: true,
                typeOptions: {
                    password: true,
                },
            },
            {
                displayName: 'Impersonate a User',
                name: 'inpersonate',
                type: 'boolean',
                default: false,
            },
            {
                displayName: 'Email',
                name: 'delegatedEmail',
                type: 'string',
                default: '',
                displayOptions: {
                    show: {
                        inpersonate: [true],
                    },
                },
                description: 'The email address of the user for which the application is requesting delegated access',
            },
            {
                displayName: 'Set up for use in HTTP Request node',
                name: 'httpNode',
                type: 'boolean',
                default: false,
            },
            {
                displayName: "When using the HTTP Request node, you must specify the scopes you want to send. In other nodes, they're added automatically",
                name: 'httpWarning',
                type: 'notice',
                default: '',
                displayOptions: {
                    show: {
                        httpNode: [true],
                    },
                },
            },
            {
                displayName: 'Scope(s)',
                name: 'scopes',
                type: 'string',
                default: '',
                description: 'You can find the scopes for services <a href="https://developers.google.com/identity/protocols/oauth2/scopes" target="_blank">here</a>',
                displayOptions: {
                    show: {
                        httpNode: [true],
                    },
                },
            },
        ];
    }
    async authenticate(credentials, requestOptions) {
        if (!credentials.httpNode)
            return requestOptions;
        const privateKey = credentials.privateKey.replace(/\\n/g, '\n').trim();
        const credentialsScopes = credentials.scopes.replace(/\\n/g, '\n').trim();
        credentials.email = credentials.email.trim();
        const regex = /[,\s\n]+/;
        const scopes = credentialsScopes
            .split(regex)
            .filter((scope) => scope)
            .join(' ');
        const now = (0, moment_timezone_1.default)().unix();
        const signature = jsonwebtoken_1.default.sign({
            iss: credentials.email,
            sub: credentials.delegatedEmail || credentials.email,
            scope: scopes,
            aud: 'https://oauth2.googleapis.com/token',
            iat: now,
            exp: now + 3600,
        }, privateKey, {
            algorithm: 'RS256',
            header: {
                kid: privateKey,
                typ: 'JWT',
                alg: 'RS256',
            },
        });
        const axiosRequestConfig = {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            method: 'POST',
            data: new URLSearchParams({
                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
                assertion: signature,
            }).toString(),
            url: 'https://oauth2.googleapis.com/token',
        };
        const result = await (0, axios_1.default)(axiosRequestConfig);
        const { access_token } = result.data;
        const requestOptionsWithAuth = {
            ...requestOptions,
            headers: {
                ...requestOptions.headers,
                Authorization: `Bearer ${access_token}`,
            },
        };
        return requestOptionsWithAuth;
    }
}
exports.GoogleApi = GoogleApi;
//# sourceMappingURL=GoogleApi.credentials.js.map