"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keysToLowercase = exports.wrapData = exports.fuzzyCompare = exports.processJsonInput = exports.updateDisplayOptions = exports.flatten = exports.chunk = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_1 = require("lodash");
function chunk(array, size = 1) {
    const length = array == null ? 0 : array.length;
    if (!length || size < 1) {
        return [];
    }
    let index = 0;
    let resIndex = 0;
    const result = new Array(Math.ceil(length / size));
    while (index < length) {
        result[resIndex++] = array.slice(index, (index += size));
    }
    return result;
}
exports.chunk = chunk;
function flatten(nestedArray) {
    const result = [];
    (function loop(array) {
        for (let i = 0; i < array.length; i++) {
            if (Array.isArray(array[i])) {
                loop(array[i]);
            }
            else {
                result.push(array[i]);
            }
        }
    })(nestedArray);
    return result;
}
exports.flatten = flatten;
function updateDisplayOptions(displayOptions, properties) {
    return properties.map((nodeProperty) => {
        return {
            ...nodeProperty,
            displayOptions: (0, lodash_1.merge)({}, nodeProperty.displayOptions, displayOptions),
        };
    });
}
exports.updateDisplayOptions = updateDisplayOptions;
function processJsonInput(jsonData, inputName) {
    let values;
    const input = `'${inputName}' ` || '';
    if (typeof jsonData === 'string') {
        try {
            values = (0, n8n_workflow_1.jsonParse)(jsonData);
        }
        catch (error) {
            throw new Error(`Input ${input}must contain a valid JSON`);
        }
    }
    else if (typeof jsonData === 'object') {
        values = jsonData;
    }
    else {
        throw new Error(`Input ${input}must contain a valid JSON`);
    }
    return values;
}
exports.processJsonInput = processJsonInput;
function isFalsy(value) {
    if ((0, lodash_1.isNull)(value))
        return true;
    if (typeof value === 'string' && value === '')
        return true;
    if (Array.isArray(value) && value.length === 0)
        return true;
    return false;
}
const parseStringAndCompareToObject = (str, arr) => {
    try {
        const parsedArray = (0, n8n_workflow_1.jsonParse)(str);
        return (0, lodash_1.isEqual)(parsedArray, arr);
    }
    catch (error) {
        return false;
    }
};
const fuzzyCompare = (useFuzzyCompare, compareVersion = 1) => {
    if (!useFuzzyCompare) {
        return (item1, item2) => (0, lodash_1.isEqual)(item1, item2);
    }
    return (item1, item2) => {
        if (!(0, lodash_1.isNull)(item1) && !(0, lodash_1.isNull)(item2) && typeof item1 === typeof item2) {
            return (0, lodash_1.isEqual)(item1, item2);
        }
        if (compareVersion >= 2) {
            if ((0, lodash_1.isNull)(item1) && ((0, lodash_1.isNull)(item2) || item2 === 0 || item2 === '0')) {
                return true;
            }
            if ((0, lodash_1.isNull)(item2) && ((0, lodash_1.isNull)(item1) || item1 === 0 || item1 === '0')) {
                return true;
            }
        }
        if (isFalsy(item1) && isFalsy(item2))
            return true;
        if (isFalsy(item1) && item2 === undefined)
            return true;
        if (item1 === undefined && isFalsy(item2))
            return true;
        if (typeof item1 === 'number' && typeof item2 === 'string') {
            return item1.toString() === item2;
        }
        if (typeof item1 === 'string' && typeof item2 === 'number') {
            return item1 === item2.toString();
        }
        if (!(0, lodash_1.isNull)(item1) && typeof item1 === 'object' && typeof item2 === 'string') {
            return parseStringAndCompareToObject(item2, item1);
        }
        if (!(0, lodash_1.isNull)(item2) && typeof item1 === 'string' && typeof item2 === 'object') {
            return parseStringAndCompareToObject(item1, item2);
        }
        if (typeof item1 === 'boolean' && typeof item2 === 'string') {
            if (item1 === true && item2.toLocaleLowerCase() === 'true')
                return true;
            if (item1 === false && item2.toLocaleLowerCase() === 'false')
                return true;
        }
        if (typeof item2 === 'boolean' && typeof item1 === 'string') {
            if (item2 === true && item1.toLocaleLowerCase() === 'true')
                return true;
            if (item2 === false && item1.toLocaleLowerCase() === 'false')
                return true;
        }
        if (typeof item1 === 'boolean' && typeof item2 === 'number') {
            if (item1 === true && item2 === 1)
                return true;
            if (item1 === false && item2 === 0)
                return true;
        }
        if (typeof item2 === 'boolean' && typeof item1 === 'number') {
            if (item2 === true && item1 === 1)
                return true;
            if (item2 === false && item1 === 0)
                return true;
        }
        if (typeof item1 === 'boolean' && typeof item2 === 'string') {
            if (item1 === true && item2 === '1')
                return true;
            if (item1 === false && item2 === '0')
                return true;
        }
        if (typeof item2 === 'boolean' && typeof item1 === 'string') {
            if (item2 === true && item1 === '1')
                return true;
            if (item2 === false && item1 === '0')
                return true;
        }
        return (0, lodash_1.isEqual)(item1, item2);
    };
};
exports.fuzzyCompare = fuzzyCompare;
function wrapData(data) {
    if (!Array.isArray(data)) {
        return [{ json: data }];
    }
    return data.map((item) => ({
        json: item,
    }));
}
exports.wrapData = wrapData;
const keysToLowercase = (headers) => {
    if (typeof headers !== 'object' || Array.isArray(headers) || headers === null)
        return headers;
    return Object.entries(headers).reduce((acc, [key, value]) => {
        acc[key.toLowerCase()] = value;
        return acc;
    }, {});
};
exports.keysToLowercase = keysToLowercase;
//# sourceMappingURL=utilities.js.map