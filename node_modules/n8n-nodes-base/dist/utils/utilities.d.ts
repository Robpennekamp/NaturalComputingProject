import type { IDataObject, IDisplayOptions, INodeExecutionData, INodeProperties } from 'n8n-workflow';
export declare function chunk(array: any[], size?: number): any[];
export declare function flatten(nestedArray: any[][]): any[];
export declare function updateDisplayOptions(displayOptions: IDisplayOptions, properties: INodeProperties[]): {
    displayOptions: IDisplayOptions;
    displayName: string;
    name: string;
    type: import("n8n-workflow").NodePropertyTypes;
    typeOptions?: import("n8n-workflow").INodePropertyTypeOptions | undefined;
    default: import("n8n-workflow").NodeParameterValueType;
    description?: string | undefined;
    hint?: string | undefined;
    options?: (INodeProperties | import("n8n-workflow").INodePropertyOptions | import("n8n-workflow").INodePropertyCollection)[] | undefined;
    placeholder?: string | undefined;
    isNodeSetting?: boolean | undefined;
    noDataExpression?: boolean | undefined;
    required?: boolean | undefined;
    routing?: import("n8n-workflow").INodePropertyRouting | undefined;
    credentialTypes?: ("extends:oAuth2Api" | "extends:oAuth1Api" | "has:authenticate" | "has:genericAuth")[] | undefined;
    extractValue?: import("n8n-workflow").INodePropertyValueExtractorRegex | undefined;
    modes?: import("n8n-workflow").INodePropertyMode[] | undefined;
    requiresDataPath?: "single" | "multiple" | undefined;
}[];
export declare function processJsonInput<T>(jsonData: T, inputName?: string): unknown;
export declare const fuzzyCompare: (useFuzzyCompare: boolean, compareVersion?: number) => <T, U>(item1: T, item2: U) => boolean;
export declare function wrapData(data: IDataObject | IDataObject[]): INodeExecutionData[];
export declare const keysToLowercase: <T>(headers: T) => IDataObject | T;
