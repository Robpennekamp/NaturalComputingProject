{"version":3,"file":"flatted-8b14da7d.js","sources":["../../../../node_modules/.pnpm/flatted@3.2.7/node_modules/flatted/esm/index.js"],"sourcesContent":["/*! (c) 2020 Andrea Giammarchi */\n\nconst {parse: $parse, stringify: $stringify} = JSON;\nconst {keys} = Object;\n\nconst Primitive = String;   // it could be Number\nconst primitive = 'string'; // it could be 'number'\n\nconst ignore = {};\nconst object = 'object';\n\nconst noop = (_, value) => value;\n\nconst primitives = value => (\n  value instanceof Primitive ? Primitive(value) : value\n);\n\nconst Primitives = (_, value) => (\n  typeof value === primitive ? new Primitive(value) : value\n);\n\nconst revive = (input, parsed, output, $) => {\n  const lazy = [];\n  for (let ke = keys(output), {length} = ke, y = 0; y < length; y++) {\n    const k = ke[y];\n    const value = output[k];\n    if (value instanceof Primitive) {\n      const tmp = input[value];\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({k, a: [input, parsed, tmp, $]});\n      }\n      else\n        output[k] = $.call(output, k, tmp);\n    }\n    else if (output[k] !== ignore)\n      output[k] = $.call(output, k, value);\n  }\n  for (let {length} = lazy, i = 0; i < length; i++) {\n    const {k, a} = lazy[i];\n    output[k] = $.call(output, k, revive.apply(null, a));\n  }\n  return output;\n};\n\nconst set = (known, input, value) => {\n  const index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\n\nexport const parse = (text, reviver) => {\n  const input = $parse(text, Primitives).map(primitives);\n  const value = input[0];\n  const $ = reviver || noop;\n  const tmp = typeof value === object && value ?\n              revive(input, new Set, value, $) :\n              value;\n  return $.call({'': tmp}, '', tmp);\n};\n\nexport const stringify = (value, replacer, space) => {\n  const $ = replacer && typeof replacer === object ?\n            (k, v) => (k === '' || -1 < replacer.indexOf(k) ? v : void 0) :\n            (replacer || noop);\n  const known = new Map;\n  const input = [];\n  const output = [];\n  let i = +set(known, input, $.call({'': value}, '', value));\n  let firstRun = !i;\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n  return '[' + output.join(',') + ']';\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n    const after = $.call(this, key, value);\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n    return after;\n  }\n};\n\nexport const toJSON = any => $parse(stringify(any));\nexport const fromJSON = any => parse($stringify(any));\n"],"names":["$parse","$stringify","keys","Primitive","primitive","ignore","object","noop","_","value","primitives","Primitives","revive","input","parsed","output","$","lazy","ke","length","y","k","tmp","i","a","parse","text","reviver"],"mappings":"AAAA,iCAEA,KAAM,CAAC,MAAOA,EAAQ,UAAWC,CAAU,EAAI,KACzC,CAAC,KAAAC,CAAI,EAAI,OAETC,EAAY,OACZC,EAAY,SAEZC,EAAS,CAAA,EACTC,EAAS,SAETC,EAAO,CAACC,EAAGC,IAAUA,EAErBC,EAAaD,GACjBA,aAAiBN,EAAYA,EAAUM,CAAK,EAAIA,EAG5CE,EAAa,CAACH,EAAGC,IACrB,OAAOA,IAAUL,EAAY,IAAID,EAAUM,CAAK,EAAIA,EAGhDG,EAAS,CAACC,EAAOC,EAAQC,EAAQC,IAAM,CAC3C,MAAMC,EAAO,CAAA,EACb,QAASC,EAAKhB,EAAKa,CAAM,EAAG,CAAC,OAAAI,CAAM,EAAID,EAAIE,EAAI,EAAGA,EAAID,EAAQC,IAAK,CACjE,MAAMC,EAAIH,EAAGE,CAAC,EACRX,EAAQM,EAAOM,CAAC,EACtB,GAAIZ,aAAiBN,EAAW,CAC9B,MAAMmB,EAAMT,EAAMJ,CAAK,EACnB,OAAOa,IAAQhB,GAAU,CAACQ,EAAO,IAAIQ,CAAG,GAC1CR,EAAO,IAAIQ,CAAG,EACdP,EAAOM,CAAC,EAAIhB,EACZY,EAAK,KAAK,CAAC,EAAAI,EAAG,EAAG,CAACR,EAAOC,EAAQQ,EAAKN,CAAC,CAAC,CAAC,GAGzCD,EAAOM,CAAC,EAAIL,EAAE,KAAKD,EAAQM,EAAGC,CAAG,CACpC,MACQP,EAAOM,CAAC,IAAMhB,IACrBU,EAAOM,CAAC,EAAIL,EAAE,KAAKD,EAAQM,EAAGZ,CAAK,EACtC,CACD,OAAS,CAAC,OAAAU,CAAM,EAAIF,EAAMM,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAChD,KAAM,CAAC,EAAAF,EAAG,EAAAG,CAAC,EAAIP,EAAKM,CAAC,EACrBR,EAAOM,CAAC,EAAIL,EAAE,KAAKD,EAAQM,EAAGT,EAAO,MAAM,KAAMY,CAAC,CAAC,CACpD,CACD,OAAOT,CACT,EAQaU,EAAQ,CAACC,EAAMC,IAAY,CACtC,MAAMd,EAAQb,EAAO0B,EAAMf,CAAU,EAAE,IAAID,CAAU,EAC/CD,EAAQI,EAAM,CAAC,EACfG,EAAIW,GAAWpB,EACfe,EAAM,OAAOb,IAAUH,GAAUG,EAC3BG,EAAOC,EAAO,IAAI,IAAKJ,EAAOO,CAAC,EAC/BP,EACZ,OAAOO,EAAE,KAAK,CAAC,GAAIM,CAAG,EAAG,GAAIA,CAAG,CAClC"}