{"version":3,"file":"RunDataJson-d0759af6.js","sources":["../../src/components/RunDataJsonActions.vue","../../src/components/RunDataJson.vue"],"sourcesContent":["<template>\n\t<div :class=\"$style.actionsGroup\">\n\t\t<n8n-icon-button\n\t\t\tv-if=\"noSelection\"\n\t\t\t:title=\"$locale.baseText('runData.copyToClipboard')\"\n\t\t\ticon=\"copy\"\n\t\t\ttype=\"tertiary\"\n\t\t\t:circle=\"false\"\n\t\t\t@click=\"handleCopyClick({ command: 'value' })\"\n\t\t/>\n\t\t<el-dropdown v-else trigger=\"click\" @command=\"handleCopyClick\">\n\t\t\t<span class=\"el-dropdown-link\">\n\t\t\t\t<n8n-icon-button\n\t\t\t\t\t:title=\"$locale.baseText('runData.copyToClipboard')\"\n\t\t\t\t\ticon=\"copy\"\n\t\t\t\t\ttype=\"tertiary\"\n\t\t\t\t\t:circle=\"false\"\n\t\t\t\t/>\n\t\t\t</span>\n\t\t\t<template #dropdown>\n\t\t\t\t<el-dropdown-menu>\n\t\t\t\t\t<el-dropdown-item :command=\"{ command: 'value' }\">\n\t\t\t\t\t\t{{ $locale.baseText('runData.copyValue') }}\n\t\t\t\t\t</el-dropdown-item>\n\t\t\t\t\t<el-dropdown-item :command=\"{ command: 'itemPath' }\" divided>\n\t\t\t\t\t\t{{ $locale.baseText('runData.copyItemPath') }}\n\t\t\t\t\t</el-dropdown-item>\n\t\t\t\t\t<el-dropdown-item :command=\"{ command: 'parameterPath' }\">\n\t\t\t\t\t\t{{ $locale.baseText('runData.copyParameterPath') }}\n\t\t\t\t\t</el-dropdown-item>\n\t\t\t\t</el-dropdown-menu>\n\t\t\t</template>\n\t\t</el-dropdown>\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport type { PropType } from 'vue';\nimport mixins from 'vue-typed-mixins';\nimport jp from 'jsonpath';\nimport type { INodeUi } from '@/Interface';\nimport type { IDataObject } from 'n8n-workflow';\nimport { copyPaste } from '@/mixins/copyPaste';\nimport { pinData } from '@/mixins/pinData';\nimport { nodeHelpers } from '@/mixins/nodeHelpers';\nimport { genericHelpers } from '@/mixins/genericHelpers';\nimport { clearJsonKey, convertPath, executionDataToJson } from '@/utils';\nimport { mapStores } from 'pinia';\nimport { useWorkflowsStore } from '@/stores/workflows.store';\nimport { useNDVStore } from '@/stores/ndv.store';\n\ntype JsonPathData = {\n\tpath: string;\n\tstartPath: string;\n};\n\n// A path that does not exist so that nothing is selected by default\nexport const nonExistingJsonPath = '_!^&*';\n\nexport default mixins(genericHelpers, nodeHelpers, pinData, copyPaste).extend({\n\tname: 'run-data-json-actions',\n\tprops: {\n\t\tnode: {\n\t\t\ttype: Object as PropType<INodeUi>,\n\t\t},\n\t\tpaneType: {\n\t\t\ttype: String,\n\t\t},\n\t\tsessionId: {\n\t\t\ttype: String,\n\t\t},\n\t\tcurrentOutputIndex: {\n\t\t\ttype: Number,\n\t\t},\n\t\trunIndex: {\n\t\t\ttype: Number,\n\t\t},\n\t\tdisplayMode: {\n\t\t\ttype: String,\n\t\t},\n\t\tdistanceFromActive: {\n\t\t\ttype: Number,\n\t\t},\n\t\tselectedJsonPath: {\n\t\t\ttype: String,\n\t\t\tdefault: nonExistingJsonPath,\n\t\t},\n\t\tjsonData: {\n\t\t\ttype: Array as PropType<IDataObject[]>,\n\t\t\trequired: true,\n\t\t},\n\t},\n\tcomputed: {\n\t\t...mapStores(useNDVStore, useWorkflowsStore),\n\t\tactiveNode(): INodeUi | null {\n\t\t\treturn this.ndvStore.activeNode;\n\t\t},\n\t\tnoSelection() {\n\t\t\treturn this.selectedJsonPath === nonExistingJsonPath;\n\t\t},\n\t\tnormalisedJsonPath(): string {\n\t\t\treturn this.noSelection ? '[\"\"]' : this.selectedJsonPath;\n\t\t},\n\t},\n\tmethods: {\n\t\tgetJsonValue(): string {\n\t\t\tlet selectedValue = jp.query(this.jsonData, `$${this.normalisedJsonPath}`)[0];\n\t\t\tif (this.noSelection) {\n\t\t\t\tif (this.hasPinData) {\n\t\t\t\t\tselectedValue = clearJsonKey(this.pinData as object);\n\t\t\t\t} else {\n\t\t\t\t\tselectedValue = executionDataToJson(\n\t\t\t\t\t\tthis.getNodeInputData(this.node, this.runIndex, this.currentOutputIndex),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet value = '';\n\t\t\tif (typeof selectedValue === 'object') {\n\t\t\t\tvalue = JSON.stringify(selectedValue, null, 2);\n\t\t\t} else {\n\t\t\t\tvalue = selectedValue.toString();\n\t\t\t}\n\n\t\t\treturn value;\n\t\t},\n\t\tgetJsonItemPath(): JsonPathData {\n\t\t\tconst newPath = convertPath(this.normalisedJsonPath);\n\t\t\tlet startPath = '';\n\t\t\tlet path = '';\n\n\t\t\tconst pathParts = newPath.split(']');\n\t\t\tconst index = pathParts[0].slice(1);\n\t\t\tpath = pathParts.slice(1).join(']');\n\t\t\tstartPath = `$item(${index}).$node[\"${this.node!.name}\"].json`;\n\n\t\t\treturn { path, startPath };\n\t\t},\n\t\tgetJsonParameterPath(): JsonPathData {\n\t\t\tconst newPath = convertPath(this.normalisedJsonPath);\n\t\t\tconst path = newPath.split(']').slice(1).join(']');\n\t\t\tlet startPath = `$node[\"${this.node!.name}\"].json`;\n\n\t\t\tif (this.distanceFromActive === 1) {\n\t\t\t\tstartPath = '$json';\n\t\t\t}\n\n\t\t\treturn { path, startPath };\n\t\t},\n\t\thandleCopyClick(commandData: { command: string }) {\n\t\t\tlet value: string;\n\t\t\tif (commandData.command === 'value') {\n\t\t\t\tvalue = this.getJsonValue();\n\n\t\t\t\tthis.$showToast({\n\t\t\t\t\ttitle: this.$locale.baseText('runData.copyValue.toast'),\n\t\t\t\t\tmessage: '',\n\t\t\t\t\ttype: 'success',\n\t\t\t\t\tduration: 2000,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet startPath = '';\n\t\t\t\tlet path = '';\n\t\t\t\tif (commandData.command === 'itemPath') {\n\t\t\t\t\tconst jsonItemPath = this.getJsonItemPath();\n\t\t\t\t\tstartPath = jsonItemPath.startPath;\n\t\t\t\t\tpath = jsonItemPath.path;\n\n\t\t\t\t\tthis.$showToast({\n\t\t\t\t\t\ttitle: this.$locale.baseText('runData.copyItemPath.toast'),\n\t\t\t\t\t\tmessage: '',\n\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\tduration: 2000,\n\t\t\t\t\t});\n\t\t\t\t} else if (commandData.command === 'parameterPath') {\n\t\t\t\t\tconst jsonParameterPath = this.getJsonParameterPath();\n\t\t\t\t\tstartPath = jsonParameterPath.startPath;\n\t\t\t\t\tpath = jsonParameterPath.path;\n\n\t\t\t\t\tthis.$showToast({\n\t\t\t\t\t\ttitle: this.$locale.baseText('runData.copyParameterPath.toast'),\n\t\t\t\t\t\tmessage: '',\n\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\tduration: 2000,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (!path.startsWith('[') && !path.startsWith('.') && path) {\n\t\t\t\t\tpath += '.';\n\t\t\t\t}\n\t\t\t\tvalue = `{{ ${startPath + path} }}`;\n\t\t\t}\n\n\t\t\tconst copyType = {\n\t\t\t\tvalue: 'selection',\n\t\t\t\titemPath: 'item_path',\n\t\t\t\tparameterPath: 'parameter_path',\n\t\t\t}[commandData.command];\n\n\t\t\tthis.$telemetry.track('User copied ndv data', {\n\t\t\t\tnode_type: this.activeNode.type,\n\t\t\t\tsession_id: this.sessionId,\n\t\t\t\trun_index: this.runIndex,\n\t\t\t\tview: 'json',\n\t\t\t\tcopy_type: copyType,\n\t\t\t\tworkflow_id: this.workflowsStore.workflowId,\n\t\t\t\tpane: this.paneType,\n\t\t\t\tin_execution_log: this.isReadOnly,\n\t\t\t});\n\n\t\t\tthis.copyToClipboard(value);\n\t\t},\n\t},\n});\n</script>\n\n<style lang=\"scss\" module>\n.actionsGroup {\n\tposition: sticky;\n\theight: 0;\n\toverflow: visible;\n\tz-index: 10;\n\ttop: 0;\n\tpadding-right: var(--spacing-s);\n\topacity: 0;\n\ttransition: opacity 0.3s ease;\n\ttext-align: right;\n}\n</style>\n","<template>\n\t<div :class=\"$style.jsonDisplay\">\n\t\t<run-data-json-actions\n\t\t\tv-if=\"!editMode.enabled\"\n\t\t\t:node=\"node\"\n\t\t\t:sessioId=\"sessionId\"\n\t\t\t:displayMode=\"displayMode\"\n\t\t\t:distanceFromActive=\"distanceFromActive\"\n\t\t\t:selectedJsonPath=\"selectedJsonPath\"\n\t\t\t:jsonData=\"jsonData\"\n\t\t\t:paneType=\"paneType\"\n\t\t/>\n\t\t<draggable\n\t\t\ttype=\"mapping\"\n\t\t\ttargetDataKey=\"mappable\"\n\t\t\t:disabled=\"!mappingEnabled\"\n\t\t\t@dragstart=\"onDragStart\"\n\t\t\t@dragend=\"onDragEnd\"\n\t\t>\n\t\t\t<template #preview=\"{ canDrop, el }\">\n\t\t\t\t<MappingPill v-if=\"el\" :html=\"getShortKey(el)\" :can-drop=\"canDrop\" />\n\t\t\t</template>\n\t\t\t<template>\n\t\t\t\t<vue-json-pretty\n\t\t\t\t\t:data=\"jsonData\"\n\t\t\t\t\t:deep=\"10\"\n\t\t\t\t\t:showLength=\"true\"\n\t\t\t\t\t:selected-value.sync=\"selectedJsonPath\"\n\t\t\t\t\trootPath=\"\"\n\t\t\t\t\tselectableType=\"single\"\n\t\t\t\t\tclass=\"json-data\"\n\t\t\t\t>\n\t\t\t\t\t<template #nodeKey=\"{ node }\">\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tdata-target=\"mappable\"\n\t\t\t\t\t\t\t:data-value=\"getJsonParameterPath(node.path)\"\n\t\t\t\t\t\t\t:data-name=\"node.key\"\n\t\t\t\t\t\t\t:data-path=\"node.path\"\n\t\t\t\t\t\t\t:data-depth=\"node.level\"\n\t\t\t\t\t\t\t:class=\"{\n\t\t\t\t\t\t\t\t[$style.mappable]: mappingEnabled,\n\t\t\t\t\t\t\t\t[$style.dragged]: draggingPath === node.path,\n\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t>\"{{ node.key }}\"</span\n\t\t\t\t\t\t>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #nodeValue=\"{ node }\">\n\t\t\t\t\t\t<span v-if=\"isNaN(node.index)\" class=\"ph-no-capture\">{{\n\t\t\t\t\t\t\tgetContent(node.content)\n\t\t\t\t\t\t}}</span>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tv-else\n\t\t\t\t\t\t\tdata-target=\"mappable\"\n\t\t\t\t\t\t\t:data-value=\"getJsonParameterPath(node.path)\"\n\t\t\t\t\t\t\t:data-name=\"getListItemName(node.path)\"\n\t\t\t\t\t\t\t:data-path=\"node.path\"\n\t\t\t\t\t\t\t:data-depth=\"node.level\"\n\t\t\t\t\t\t\t:class=\"{\n\t\t\t\t\t\t\t\t[$style.mappable]: mappingEnabled,\n\t\t\t\t\t\t\t\t[$style.dragged]: draggingPath === node.path,\n\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\tclass=\"ph-no-capture\"\n\t\t\t\t\t\t\t>{{ getContent(node.content) }}</span\n\t\t\t\t\t\t>\n\t\t\t\t\t</template>\n\t\t\t\t</vue-json-pretty>\n\t\t\t</template>\n\t\t</draggable>\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport type { PropType } from 'vue';\nimport mixins from 'vue-typed-mixins';\nimport VueJsonPretty from 'vue-json-pretty';\nimport type { IDataObject, INodeExecutionData } from 'n8n-workflow';\nimport Draggable from '@/components/Draggable.vue';\nimport { executionDataToJson, isString, shorten } from '@/utils';\nimport type { INodeUi } from '@/Interface';\nimport { externalHooks } from '@/mixins/externalHooks';\nimport { mapStores } from 'pinia';\nimport { useNDVStore } from '@/stores/ndv.store';\nimport MappingPill from './MappingPill.vue';\nimport { getMappedExpression } from '@/utils/mappingUtils';\nimport { useWorkflowsStore } from '@/stores/workflows.store';\nimport { nonExistingJsonPath } from '@/components/RunDataJsonActions.vue';\n\nconst runDataJsonActions = async () => import('@/components/RunDataJsonActions.vue');\n\nexport default mixins(externalHooks).extend({\n\tname: 'run-data-json',\n\tcomponents: {\n\t\tVueJsonPretty,\n\t\tDraggable,\n\t\trunDataJsonActions,\n\t\tMappingPill,\n\t},\n\tprops: {\n\t\teditMode: {\n\t\t\ttype: Object as () => { enabled?: boolean; value?: string },\n\t\t},\n\t\tsessionId: {\n\t\t\ttype: String,\n\t\t},\n\t\tpaneType: {\n\t\t\ttype: String,\n\t\t},\n\t\tnode: {\n\t\t\ttype: Object as PropType<INodeUi>,\n\t\t},\n\t\tinputData: {\n\t\t\ttype: Array as PropType<INodeExecutionData[]>,\n\t\t},\n\t\tmappingEnabled: {\n\t\t\ttype: Boolean,\n\t\t},\n\t\tdistanceFromActive: {\n\t\t\ttype: Number,\n\t\t},\n\t\trunIndex: {\n\t\t\ttype: Number,\n\t\t},\n\t\ttotalRuns: {\n\t\t\ttype: Number,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tselectedJsonPath: nonExistingJsonPath,\n\t\t\tdraggingPath: null as null | string,\n\t\t\tdisplayMode: 'json',\n\t\t};\n\t},\n\tcomputed: {\n\t\t...mapStores(useNDVStore, useWorkflowsStore),\n\t\tjsonData(): IDataObject[] {\n\t\t\treturn executionDataToJson(this.inputData);\n\t\t},\n\t},\n\tmethods: {\n\t\tgetShortKey(el: HTMLElement): string {\n\t\t\tif (!el) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\treturn shorten(el.dataset.name || '', 16, 2);\n\t\t},\n\t\tgetJsonParameterPath(path: string): string {\n\t\t\tconst subPath = path.replace(/^(\\[\"?\\d\"?])/, ''); // remove item position\n\n\t\t\treturn getMappedExpression({\n\t\t\t\tnodeName: this.node.name,\n\t\t\t\tdistanceFromActive: this.distanceFromActive,\n\t\t\t\tpath: subPath,\n\t\t\t});\n\t\t},\n\t\tonDragStart(el: HTMLElement) {\n\t\t\tif (el && el.dataset.path) {\n\t\t\t\tthis.draggingPath = el.dataset.path;\n\t\t\t}\n\n\t\t\tthis.ndvStore.resetMappingTelemetry();\n\t\t},\n\t\tonDragEnd(el: HTMLElement) {\n\t\t\tthis.draggingPath = null;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst mappingTelemetry = this.ndvStore.mappingTelemetry;\n\t\t\t\tconst telemetryPayload = {\n\t\t\t\t\tsrc_node_type: this.node.type,\n\t\t\t\t\tsrc_field_name: el.dataset.name || '',\n\t\t\t\t\tsrc_nodes_back: this.distanceFromActive,\n\t\t\t\t\tsrc_run_index: this.runIndex,\n\t\t\t\t\tsrc_runs_total: this.totalRuns,\n\t\t\t\t\tsrc_field_nest_level: el.dataset.depth || 0,\n\t\t\t\t\tsrc_view: 'json',\n\t\t\t\t\tsrc_element: el,\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\t...mappingTelemetry,\n\t\t\t\t};\n\n\t\t\t\tvoid this.$externalHooks().run('runDataJson.onDragEnd', telemetryPayload);\n\n\t\t\t\tthis.$telemetry.track('User dragged data for mapping', telemetryPayload);\n\t\t\t}, 1000); // ensure dest data gets set if drop\n\t\t},\n\t\tgetContent(value: unknown): string {\n\t\t\treturn isString(value) ? `\"${value}\"` : JSON.stringify(value);\n\t\t},\n\t\tgetListItemName(path: string): string {\n\t\t\treturn path.replace(/^(\\[\"?\\d\"?]\\.?)/g, '');\n\t\t},\n\t},\n});\n</script>\n\n<style lang=\"scss\" module>\n.jsonDisplay {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tpadding-left: var(--spacing-s);\n\tright: 0;\n\toverflow-y: auto;\n\tline-height: 1.5;\n\tword-break: normal;\n\theight: 100%;\n\tpadding-bottom: var(--spacing-3xl);\n\tbackground-color: var(--color-background-base);\n\n\t&:hover {\n\t\t/* Shows .actionsGroup element from <run-data-json-actions /> child component */\n\t\t> div:first-child {\n\t\t\topacity: 1;\n\t\t}\n\t}\n}\n\n.mappable {\n\tcursor: grab;\n\n\t&:hover {\n\t\tbackground-color: var(--color-json-highlight);\n\t}\n}\n\n.dragged {\n\t&,\n\t&:hover {\n\t\tbackground-color: var(--color-primary-tint-2);\n\t}\n}\n</style>\n\n<style lang=\"scss\">\n.vjs-tree {\n\tcolor: var(--color-json-default);\n}\n\n.vjs-tree-node {\n\t&:hover {\n\t\tbackground-color: transparent;\n\t}\n\n\t&.is-highlight {\n\t\tbackground-color: var(--color-json-highlight);\n\t}\n}\n\n.vjs-key,\n.vjs-value {\n\t> span {\n\t\tcolor: var(--color-text-dark);\n\t\tline-height: 1.7;\n\t\tborder-radius: var(--border-radius-base);\n\t}\n}\n\n.vjs-value {\n\t> span {\n\t\tpadding: 0 var(--spacing-5xs) 0 var(--spacing-5xs);\n\t\tmargin-left: var(--spacing-5xs);\n\t}\n}\n\n.vjs-tree .vjs-value-null {\n\t&,\n\tspan {\n\t\tcolor: var(--color-json-null);\n\t}\n}\n\n.vjs-tree .vjs-value-boolean {\n\t&,\n\tspan {\n\t\tcolor: var(--color-json-boolean);\n\t}\n}\n\n.vjs-tree .vjs-value-number {\n\t&,\n\tspan {\n\t\tcolor: var(--color-json-number);\n\t}\n}\n\n.vjs-tree .vjs-value-string {\n\t&,\n\tspan {\n\t\tcolor: var(--color-json-string);\n\t}\n}\n\n.vjs-tree .vjs-key {\n\tcolor: var(--color-json-key);\n}\n\n.vjs-tree .vjs-tree__brackets {\n\tcolor: var(--color-json-brackets);\n}\n\n.vjs-tree .vjs-tree__brackets:hover {\n\tcolor: var(--color-json-brackets-hover);\n}\n\n.vjs-tree .vjs-tree__content.has-line {\n\tborder-left: 1px dotted var(--color-json-line);\n}\n</style>\n"],"names":["nonExistingJsonPath","_sfc_main$1","mixins","genericHelpers","nodeHelpers","pinData","copyPaste","mapStores","useNDVStore","useWorkflowsStore","selectedValue","jp","clearJsonKey","executionDataToJson","value","newPath","convertPath","startPath","path","pathParts","index","commandData","jsonItemPath","jsonParameterPath","copyType","runDataJsonActions","__vitePreload","_sfc_main","externalHooks","VueJsonPretty","Draggable","MappingPill","el","shorten","subPath","getMappedExpression","mappingTelemetry","telemetryPayload","isString"],"mappings":"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"}