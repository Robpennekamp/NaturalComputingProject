{"version":3,"file":"esprima-next-d1b163ef.js","sources":["../../../../node_modules/.pnpm/esprima-next@5.8.4/node_modules/esprima-next/dist/esm/esprima.js"],"sourcesContent":["var Syntax;\r\n(function (Syntax) {\r\n    Syntax[\"AssignmentExpression\"] = \"AssignmentExpression\";\r\n    Syntax[\"AssignmentPattern\"] = \"AssignmentPattern\";\r\n    Syntax[\"ArrayExpression\"] = \"ArrayExpression\";\r\n    Syntax[\"ArrayPattern\"] = \"ArrayPattern\";\r\n    Syntax[\"ArrowFunctionExpression\"] = \"ArrowFunctionExpression\";\r\n    Syntax[\"AwaitExpression\"] = \"AwaitExpression\";\r\n    Syntax[\"BlockStatement\"] = \"BlockStatement\";\r\n    Syntax[\"BinaryExpression\"] = \"BinaryExpression\";\r\n    Syntax[\"BreakStatement\"] = \"BreakStatement\";\r\n    Syntax[\"CallExpression\"] = \"CallExpression\";\r\n    Syntax[\"CatchClause\"] = \"CatchClause\";\r\n    Syntax[\"ChainExpression\"] = \"ChainExpression\";\r\n    Syntax[\"ClassBody\"] = \"ClassBody\";\r\n    Syntax[\"ClassDeclaration\"] = \"ClassDeclaration\";\r\n    Syntax[\"ClassExpression\"] = \"ClassExpression\";\r\n    Syntax[\"ConditionalExpression\"] = \"ConditionalExpression\";\r\n    Syntax[\"ContinueStatement\"] = \"ContinueStatement\";\r\n    Syntax[\"Decorator\"] = \"Decorator\";\r\n    Syntax[\"DoWhileStatement\"] = \"DoWhileStatement\";\r\n    Syntax[\"DebuggerStatement\"] = \"DebuggerStatement\";\r\n    Syntax[\"EmptyStatement\"] = \"EmptyStatement\";\r\n    Syntax[\"ExportAllDeclaration\"] = \"ExportAllDeclaration\";\r\n    Syntax[\"ExportDefaultDeclaration\"] = \"ExportDefaultDeclaration\";\r\n    Syntax[\"ExportNamedDeclaration\"] = \"ExportNamedDeclaration\";\r\n    Syntax[\"ExportSpecifier\"] = \"ExportSpecifier\";\r\n    Syntax[\"ExpressionStatement\"] = \"ExpressionStatement\";\r\n    Syntax[\"ForStatement\"] = \"ForStatement\";\r\n    Syntax[\"ForOfStatement\"] = \"ForOfStatement\";\r\n    Syntax[\"ForInStatement\"] = \"ForInStatement\";\r\n    Syntax[\"FunctionDeclaration\"] = \"FunctionDeclaration\";\r\n    Syntax[\"FunctionExpression\"] = \"FunctionExpression\";\r\n    Syntax[\"Identifier\"] = \"Identifier\";\r\n    Syntax[\"IfStatement\"] = \"IfStatement\";\r\n    Syntax[\"ImportAttribute\"] = \"ImportAttribute\";\r\n    Syntax[\"ImportExpression\"] = \"ImportExpression\";\r\n    Syntax[\"ImportDeclaration\"] = \"ImportDeclaration\";\r\n    Syntax[\"ImportDefaultSpecifier\"] = \"ImportDefaultSpecifier\";\r\n    Syntax[\"ImportNamespaceSpecifier\"] = \"ImportNamespaceSpecifier\";\r\n    Syntax[\"ImportSpecifier\"] = \"ImportSpecifier\";\r\n    Syntax[\"Literal\"] = \"Literal\";\r\n    Syntax[\"LabeledStatement\"] = \"LabeledStatement\";\r\n    Syntax[\"LogicalExpression\"] = \"LogicalExpression\";\r\n    Syntax[\"MemberExpression\"] = \"MemberExpression\";\r\n    Syntax[\"MetaProperty\"] = \"MetaProperty\";\r\n    Syntax[\"MethodDefinition\"] = \"MethodDefinition\";\r\n    Syntax[\"NewExpression\"] = \"NewExpression\";\r\n    Syntax[\"ObjectExpression\"] = \"ObjectExpression\";\r\n    Syntax[\"ObjectPattern\"] = \"ObjectPattern\";\r\n    Syntax[\"Program\"] = \"Program\";\r\n    Syntax[\"Property\"] = \"Property\";\r\n    Syntax[\"PrivateIdentifier\"] = \"PrivateIdentifier\";\r\n    Syntax[\"RestElement\"] = \"RestElement\";\r\n    Syntax[\"ReturnStatement\"] = \"ReturnStatement\";\r\n    Syntax[\"SequenceExpression\"] = \"SequenceExpression\";\r\n    Syntax[\"SpreadElement\"] = \"SpreadElement\";\r\n    Syntax[\"StaticBlock\"] = \"StaticBlock\";\r\n    Syntax[\"Super\"] = \"Super\";\r\n    Syntax[\"SwitchCase\"] = \"SwitchCase\";\r\n    Syntax[\"SwitchStatement\"] = \"SwitchStatement\";\r\n    Syntax[\"TaggedTemplateExpression\"] = \"TaggedTemplateExpression\";\r\n    Syntax[\"TemplateElement\"] = \"TemplateElement\";\r\n    Syntax[\"TemplateLiteral\"] = \"TemplateLiteral\";\r\n    Syntax[\"ThisExpression\"] = \"ThisExpression\";\r\n    Syntax[\"ThrowStatement\"] = \"ThrowStatement\";\r\n    Syntax[\"TryStatement\"] = \"TryStatement\";\r\n    Syntax[\"UnaryExpression\"] = \"UnaryExpression\";\r\n    Syntax[\"UpdateExpression\"] = \"UpdateExpression\";\r\n    Syntax[\"VariableDeclaration\"] = \"VariableDeclaration\";\r\n    Syntax[\"VariableDeclarator\"] = \"VariableDeclarator\";\r\n    Syntax[\"WhileStatement\"] = \"WhileStatement\";\r\n    Syntax[\"WithStatement\"] = \"WithStatement\";\r\n    Syntax[\"YieldExpression\"] = \"YieldExpression\";\r\n})(Syntax || (Syntax = {}));\n\nclass CommentHandler {\r\n    constructor() {\r\n        this.attach = false;\r\n        this.comments = [];\r\n        this.stack = [];\r\n        this.leading = [];\r\n        this.trailing = [];\r\n    }\r\n    insertInnerComments(node, metadata) {\r\n        //  innnerComments for properties empty block\r\n        //  `function a() {/** comments **\\/}`\r\n        if (node.type === Syntax.BlockStatement && node.body.length === 0) {\r\n            const innerComments = [];\r\n            for (let i = this.leading.length - 1; i >= 0; --i) {\r\n                const entry = this.leading[i];\r\n                if (metadata.end.offset >= entry.start) {\r\n                    innerComments.unshift(entry.comment);\r\n                    this.leading.splice(i, 1);\r\n                    this.trailing.splice(i, 1);\r\n                }\r\n            }\r\n            if (innerComments.length) {\r\n                node.innerComments = innerComments;\r\n            }\r\n        }\r\n    }\r\n    findTrailingComments(metadata) {\r\n        let trailingComments = [];\r\n        if (this.trailing.length > 0) {\r\n            for (let i = this.trailing.length - 1; i >= 0; --i) {\r\n                const entry = this.trailing[i];\r\n                if (entry.start >= metadata.end.offset) {\r\n                    trailingComments.unshift(entry.comment);\r\n                }\r\n            }\r\n            this.trailing.length = 0;\r\n            return trailingComments;\r\n        }\r\n        const last = this.stack[this.stack.length - 1];\r\n        if (last && last.node.trailingComments) {\r\n            const firstComment = last.node.trailingComments[0];\r\n            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\r\n                trailingComments = last.node.trailingComments;\r\n                delete last.node.trailingComments;\r\n            }\r\n        }\r\n        return trailingComments;\r\n    }\r\n    findLeadingComments(metadata) {\r\n        const leadingComments = [];\r\n        let target;\r\n        while (this.stack.length > 0) {\r\n            const entry = this.stack[this.stack.length - 1];\r\n            if (entry && entry.start >= metadata.start.offset) {\r\n                target = entry.node;\r\n                this.stack.pop();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (target) {\r\n            const count = target.leadingComments ? target.leadingComments.length : 0;\r\n            for (let i = count - 1; i >= 0; --i) {\r\n                const comment = target.leadingComments[i];\r\n                if (comment.range[1] <= metadata.start.offset) {\r\n                    leadingComments.unshift(comment);\r\n                    target.leadingComments.splice(i, 1);\r\n                }\r\n            }\r\n            if (target.leadingComments && target.leadingComments.length === 0) {\r\n                delete target.leadingComments;\r\n            }\r\n            return leadingComments;\r\n        }\r\n        for (let i = this.leading.length - 1; i >= 0; --i) {\r\n            const entry = this.leading[i];\r\n            if (entry.start <= metadata.start.offset) {\r\n                leadingComments.unshift(entry.comment);\r\n                this.leading.splice(i, 1);\r\n            }\r\n        }\r\n        return leadingComments;\r\n    }\r\n    visitNode(node, metadata) {\r\n        if (node.type === Syntax.Program && node.body.length > 0) {\r\n            return;\r\n        }\r\n        this.insertInnerComments(node, metadata);\r\n        const trailingComments = this.findTrailingComments(metadata);\r\n        const leadingComments = this.findLeadingComments(metadata);\r\n        if (leadingComments.length > 0) {\r\n            node.leadingComments = leadingComments;\r\n        }\r\n        if (trailingComments.length > 0) {\r\n            node.trailingComments = trailingComments;\r\n        }\r\n        this.stack.push({\r\n            node: node,\r\n            start: metadata.start.offset\r\n        });\r\n    }\r\n    visitComment(node, metadata) {\r\n        const type = (node.type[0] === 'L') ? 'Line' : 'Block';\r\n        const comment = {\r\n            type: type,\r\n            value: node.value\r\n        };\r\n        if (node.range) {\r\n            comment.range = node.range;\r\n        }\r\n        if (node.loc) {\r\n            comment.loc = node.loc;\r\n        }\r\n        this.comments.push(comment);\r\n        if (this.attach) {\r\n            const entry = {\r\n                comment: {\r\n                    type: type,\r\n                    value: node.value,\r\n                    range: [metadata.start.offset, metadata.end.offset]\r\n                },\r\n                start: metadata.start.offset\r\n            };\r\n            if (node.loc) {\r\n                entry.comment.loc = node.loc;\r\n            }\r\n            node.type = type;\r\n            this.leading.push(entry);\r\n            this.trailing.push(entry);\r\n        }\r\n    }\r\n    visit(node, metadata) {\r\n        if (node.type === 'LineComment') {\r\n            this.visitComment(node, metadata);\r\n        }\r\n        else if (node.type === 'BlockComment') {\r\n            this.visitComment(node, metadata);\r\n        }\r\n        else if (this.attach) {\r\n            this.visitNode(node, metadata);\r\n        }\r\n    }\r\n}\n\n// See also tools/generate-unicode-regex.js.\r\nconst Regex = {\r\n    // Unicode v12.1.0 NonAsciiIdentifierStart:\r\n    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/,\r\n    // Unicode v12.1.0 NonAsciiIdentifierPart:\r\n    // eslint-disable-next-line no-misleading-character-class\r\n    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CFA\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDD30-\\uDD39\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF50\\uDFE0-\\uDFF6]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD46\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E\\uDC5F\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCE9\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD7\\uDDDA-\\uDDE1\\uDDE3\\uDDE4\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF4F-\\uDF87\\uDF8F-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD00-\\uDD2C\\uDD30-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\r\n};\r\nconst Character = {\r\n    fromCodePoint(cp) {\r\n        return (cp < 0x10000) ? String.fromCharCode(cp) :\r\n            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\r\n                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\r\n    },\r\n    isStringWellFormedUnicode(text) {\r\n        for (let i = 0; i < text.length; i++) {\r\n            let c = text.charCodeAt(i);\r\n            if (c >= 0xD800 && c <= 0xDBFF) {\r\n                if (i === text.length - 1) {\r\n                    return false;\r\n                }\r\n                i++;\r\n                c = text.charCodeAt(i);\r\n                if (c < 0xDC00 && c > 0xDFFF) {\r\n                    return false;\r\n                }\r\n            }\r\n            else if (c >= 0xDC00 && c <= 0xDFFF) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    // https://tc39.github.io/ecma262/#sec-white-space\r\n    isWhiteSpace(cp) {\r\n        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\r\n            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\r\n    },\r\n    // https://tc39.github.io/ecma262/#sec-line-terminators\r\n    isLineTerminator(cp) {\r\n        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\r\n    },\r\n    // https://tc39.github.io/ecma262/#sec-names-and-keywords\r\n    isIdentifierStart(cp) {\r\n        return (cp === 0x24) || (cp === 0x5F) || // $ (dollar) and _ (underscore)\r\n            (cp >= 0x41 && cp <= 0x5A) || // A..Z\r\n            (cp >= 0x61 && cp <= 0x7A) || // a..z\r\n            (cp === 0x5C) || // \\ (backslash)\r\n            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(Character.fromCodePoint(cp)));\r\n    },\r\n    isIdentifierPart(cp) {\r\n        return (cp === 0x24) || (cp === 0x5F) || // $ (dollar) and _ (underscore)\r\n            (cp >= 0x41 && cp <= 0x5A) || // A..Z\r\n            (cp >= 0x61 && cp <= 0x7A) || // a..z\r\n            (cp >= 0x30 && cp <= 0x39) || // 0..9\r\n            (cp === 0x5C) || // \\ (backslash)\r\n            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(Character.fromCodePoint(cp)));\r\n    },\r\n    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\r\n    isDecimalDigit(cp) {\r\n        return (cp >= 0x30 && cp <= 0x39); // 0..9\r\n    },\r\n    isDecimalDigitChar(ch) {\r\n        return ch.length === 1 && Character.isDecimalDigit(ch.charCodeAt(0));\r\n    },\r\n    isHexDigit(cp) {\r\n        return (cp >= 0x30 && cp <= 0x39) || // 0..9\r\n            (cp >= 0x41 && cp <= 0x46) || // A..F\r\n            (cp >= 0x61 && cp <= 0x66); // a..f\r\n    },\r\n    isHexDigitChar(ch) {\r\n        return ch.length === 1 && Character.isHexDigit(ch.charCodeAt(0));\r\n    },\r\n    isOctalDigit(cp) {\r\n        return (cp >= 0x30 && cp <= 0x37); // 0..7\r\n    },\r\n    isOctalDigitChar(ch) {\r\n        return ch.length === 1 && Character.isOctalDigit(ch.charCodeAt(0));\r\n    }\r\n};\n\nvar JSXSyntax;\r\n(function (JSXSyntax) {\r\n    JSXSyntax[\"JSXAttribute\"] = \"JSXAttribute\";\r\n    JSXSyntax[\"JSXClosingElement\"] = \"JSXClosingElement\";\r\n    JSXSyntax[\"JSXClosingFragment\"] = \"JSXClosingFragment\";\r\n    JSXSyntax[\"JSXElement\"] = \"JSXElement\";\r\n    JSXSyntax[\"JSXEmptyExpression\"] = \"JSXEmptyExpression\";\r\n    JSXSyntax[\"JSXExpressionContainer\"] = \"JSXExpressionContainer\";\r\n    JSXSyntax[\"JSXIdentifier\"] = \"JSXIdentifier\";\r\n    JSXSyntax[\"JSXMemberExpression\"] = \"JSXMemberExpression\";\r\n    JSXSyntax[\"JSXNamespacedName\"] = \"JSXNamespacedName\";\r\n    JSXSyntax[\"JSXOpeningElement\"] = \"JSXOpeningElement\";\r\n    JSXSyntax[\"JSXOpeningFragment\"] = \"JSXOpeningFragment\";\r\n    JSXSyntax[\"JSXSpreadAttribute\"] = \"JSXSpreadAttribute\";\r\n    JSXSyntax[\"JSXText\"] = \"JSXText\";\r\n})(JSXSyntax || (JSXSyntax = {}));\n\nclass JSXClosingElement {\r\n    constructor(name) {\r\n        this.type = JSXSyntax.JSXClosingElement;\r\n        this.name = name;\r\n    }\r\n}\r\nclass JSXClosingFragment {\r\n    constructor() {\r\n        this.type = JSXSyntax.JSXClosingFragment;\r\n    }\r\n}\r\nclass JSXElement {\r\n    constructor(openingElement, children, closingElement) {\r\n        this.type = JSXSyntax.JSXElement;\r\n        this.openingElement = openingElement;\r\n        this.children = children;\r\n        this.closingElement = closingElement;\r\n    }\r\n}\r\nclass JSXEmptyExpression {\r\n    constructor() {\r\n        this.type = JSXSyntax.JSXEmptyExpression;\r\n    }\r\n}\r\nclass JSXExpressionContainer {\r\n    constructor(expression) {\r\n        this.type = JSXSyntax.JSXExpressionContainer;\r\n        this.expression = expression;\r\n    }\r\n}\r\nclass JSXIdentifier {\r\n    constructor(name) {\r\n        this.type = JSXSyntax.JSXIdentifier;\r\n        this.name = name;\r\n    }\r\n}\r\nclass JSXMemberExpression {\r\n    constructor(object, property) {\r\n        this.type = JSXSyntax.JSXMemberExpression;\r\n        this.object = object;\r\n        this.property = property;\r\n    }\r\n}\r\nclass JSXAttribute {\r\n    constructor(name, value) {\r\n        this.type = JSXSyntax.JSXAttribute;\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n}\r\nclass JSXNamespacedName {\r\n    constructor(namespace, name) {\r\n        this.type = JSXSyntax.JSXNamespacedName;\r\n        this.namespace = namespace;\r\n        this.name = name;\r\n    }\r\n}\r\nclass JSXOpeningElement {\r\n    constructor(name, selfClosing, attributes) {\r\n        this.type = JSXSyntax.JSXOpeningElement;\r\n        this.name = name;\r\n        this.selfClosing = selfClosing;\r\n        this.attributes = attributes;\r\n    }\r\n}\r\nclass JSXOpeningFragment {\r\n    constructor(selfClosing) {\r\n        this.type = JSXSyntax.JSXOpeningFragment;\r\n        this.selfClosing = selfClosing;\r\n    }\r\n}\r\nclass JSXSpreadAttribute {\r\n    constructor(argument) {\r\n        this.type = JSXSyntax.JSXSpreadAttribute;\r\n        this.argument = argument;\r\n    }\r\n}\r\nclass JSXText {\r\n    constructor(value, raw) {\r\n        this.type = JSXSyntax.JSXText;\r\n        this.value = value;\r\n        this.raw = raw;\r\n    }\r\n}\n\nclass ArrayExpression {\r\n    constructor(elements) {\r\n        this.type = Syntax.ArrayExpression;\r\n        this.elements = elements;\r\n    }\r\n}\r\nclass ArrayPattern {\r\n    constructor(elements) {\r\n        this.type = Syntax.ArrayPattern;\r\n        this.elements = elements;\r\n    }\r\n}\r\nclass ArrowFunctionExpression {\r\n    constructor(params, body, expression, isAsync) {\r\n        this.type = Syntax.ArrowFunctionExpression;\r\n        this.id = null;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = false;\r\n        this.expression = expression;\r\n        this.async = isAsync;\r\n    }\r\n}\r\nclass AssignmentExpression {\r\n    constructor(operator, left, right) {\r\n        this.type = Syntax.AssignmentExpression;\r\n        this.operator = operator;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\nclass AssignmentPattern {\r\n    constructor(left, right) {\r\n        this.type = Syntax.AssignmentPattern;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\nclass AsyncFunctionDeclaration {\r\n    constructor(id, params, body, generator) {\r\n        this.type = Syntax.FunctionDeclaration;\r\n        this.id = id;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = generator;\r\n        this.expression = false;\r\n        this.async = true;\r\n    }\r\n}\r\nclass AwaitExpression {\r\n    constructor(argument) {\r\n        this.type = Syntax.AwaitExpression;\r\n        this.argument = argument;\r\n    }\r\n}\r\nclass BigIntLiteral {\r\n    constructor(value, raw, bigint) {\r\n        this.type = Syntax.Literal;\r\n        this.value = value;\r\n        this.raw = raw;\r\n        this.bigint = bigint;\r\n    }\r\n}\r\nclass BinaryExpression {\r\n    constructor(operator, left, right) {\r\n        this.type = Syntax.BinaryExpression;\r\n        this.operator = operator;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\nclass BlockStatement {\r\n    constructor(body) {\r\n        this.type = Syntax.BlockStatement;\r\n        this.body = body;\r\n    }\r\n}\r\nclass BreakStatement {\r\n    constructor(label) {\r\n        this.type = Syntax.BreakStatement;\r\n        this.label = label;\r\n    }\r\n}\r\nclass CallExpression {\r\n    constructor(callee, args, optional) {\r\n        this.type = Syntax.CallExpression;\r\n        this.callee = callee;\r\n        this.arguments = args;\r\n        this.optional = optional;\r\n    }\r\n}\r\nclass CatchClause {\r\n    constructor(param, body) {\r\n        this.type = Syntax.CatchClause;\r\n        this.param = param;\r\n        this.body = body;\r\n    }\r\n}\r\nclass ChainExpression {\r\n    constructor(expression) {\r\n        this.type = Syntax.ChainExpression;\r\n        this.expression = expression;\r\n    }\r\n}\r\nclass ClassBody {\r\n    constructor(body) {\r\n        this.type = Syntax.ClassBody;\r\n        this.body = body;\r\n    }\r\n}\r\nclass ClassDeclaration {\r\n    constructor(id, superClass, body, decorators) {\r\n        this.type = Syntax.ClassDeclaration;\r\n        this.id = id;\r\n        this.superClass = superClass;\r\n        this.body = body;\r\n        this.decorators = decorators;\r\n    }\r\n}\r\nclass ClassExpression {\r\n    constructor(id, superClass, body, decorators) {\r\n        this.type = Syntax.ClassExpression;\r\n        this.id = id;\r\n        this.superClass = superClass;\r\n        this.body = body;\r\n        this.decorators = decorators;\r\n    }\r\n}\r\nclass ConditionalExpression {\r\n    constructor(test, consequent, alternate) {\r\n        this.type = Syntax.ConditionalExpression;\r\n        this.test = test;\r\n        this.consequent = consequent;\r\n        this.alternate = alternate;\r\n    }\r\n}\r\nclass ContinueStatement {\r\n    constructor(label) {\r\n        this.type = Syntax.ContinueStatement;\r\n        this.label = label;\r\n    }\r\n}\r\nclass DebuggerStatement {\r\n    constructor() {\r\n        this.type = Syntax.DebuggerStatement;\r\n    }\r\n}\r\nclass Decorator {\r\n    constructor(expression) {\r\n        this.type = Syntax.Decorator;\r\n        this.expression = expression;\r\n    }\r\n}\r\nclass Directive {\r\n    constructor(expression, directive) {\r\n        this.type = Syntax.ExpressionStatement;\r\n        this.expression = expression;\r\n        this.directive = directive;\r\n    }\r\n}\r\nclass DoWhileStatement {\r\n    constructor(body, test) {\r\n        this.type = Syntax.DoWhileStatement;\r\n        this.body = body;\r\n        this.test = test;\r\n    }\r\n}\r\nclass EmptyStatement {\r\n    constructor() {\r\n        this.type = Syntax.EmptyStatement;\r\n    }\r\n}\r\nclass ExportAllDeclaration {\r\n    constructor(source, exported, assertions) {\r\n        this.type = Syntax.ExportAllDeclaration;\r\n        this.source = source;\r\n        this.exported = exported;\r\n        this.assertions = assertions;\r\n    }\r\n}\r\nclass ExportDefaultDeclaration {\r\n    constructor(declaration) {\r\n        this.type = Syntax.ExportDefaultDeclaration;\r\n        this.declaration = declaration;\r\n    }\r\n}\r\nclass ExportNamedDeclaration {\r\n    constructor(declaration, specifiers, source, assertions) {\r\n        this.type = Syntax.ExportNamedDeclaration;\r\n        this.declaration = declaration;\r\n        this.specifiers = specifiers;\r\n        this.source = source;\r\n        this.assertions = assertions;\r\n    }\r\n}\r\nclass ExportSpecifier {\r\n    constructor(local, exported) {\r\n        this.type = Syntax.ExportSpecifier;\r\n        this.exported = exported;\r\n        this.local = local;\r\n    }\r\n}\r\nclass ExpressionStatement {\r\n    constructor(expression) {\r\n        this.type = Syntax.ExpressionStatement;\r\n        this.expression = expression;\r\n    }\r\n}\r\nclass ForInStatement {\r\n    constructor(left, right, body) {\r\n        this.type = Syntax.ForInStatement;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.body = body;\r\n        this.each = false;\r\n    }\r\n}\r\nclass ForOfStatement {\r\n    constructor(left, right, body, _await) {\r\n        this.type = Syntax.ForOfStatement;\r\n        this.await = _await;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.body = body;\r\n    }\r\n}\r\nclass ForStatement {\r\n    constructor(init, test, update, body) {\r\n        this.type = Syntax.ForStatement;\r\n        this.init = init;\r\n        this.test = test;\r\n        this.update = update;\r\n        this.body = body;\r\n    }\r\n}\r\nclass FunctionDeclaration {\r\n    constructor(id, params, body, generator) {\r\n        this.type = Syntax.FunctionDeclaration;\r\n        this.id = id;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = generator;\r\n        this.expression = false;\r\n        this.async = false;\r\n    }\r\n}\r\nclass FunctionExpression {\r\n    constructor(id, params, body, generator, isAsync) {\r\n        this.type = Syntax.FunctionExpression;\r\n        this.id = id;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = generator;\r\n        this.expression = false;\r\n        this.async = isAsync;\r\n    }\r\n}\r\nclass Identifier {\r\n    constructor(name) {\r\n        this.type = Syntax.Identifier;\r\n        this.name = name;\r\n    }\r\n}\r\nclass IfStatement {\r\n    constructor(test, consequent, alternate) {\r\n        this.type = Syntax.IfStatement;\r\n        this.test = test;\r\n        this.consequent = consequent;\r\n        this.alternate = alternate;\r\n    }\r\n}\r\nclass ImportAttribute {\r\n    constructor(key, value) {\r\n        this.type = Syntax.ImportAttribute;\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n}\r\nclass ImportExpression {\r\n    constructor(source, attributes) {\r\n        this.type = Syntax.ImportExpression;\r\n        this.source = source;\r\n        this.attributes = attributes;\r\n    }\r\n}\r\nclass ImportDeclaration {\r\n    constructor(specifiers, source, assertions) {\r\n        this.type = Syntax.ImportDeclaration;\r\n        this.specifiers = specifiers;\r\n        this.source = source;\r\n        this.assertions = assertions;\r\n    }\r\n}\r\nclass ImportDefaultSpecifier {\r\n    constructor(local) {\r\n        this.type = Syntax.ImportDefaultSpecifier;\r\n        this.local = local;\r\n    }\r\n}\r\nclass ImportNamespaceSpecifier {\r\n    constructor(local) {\r\n        this.type = Syntax.ImportNamespaceSpecifier;\r\n        this.local = local;\r\n    }\r\n}\r\nclass ImportSpecifier {\r\n    constructor(local, imported) {\r\n        this.type = Syntax.ImportSpecifier;\r\n        this.local = local;\r\n        this.imported = imported;\r\n    }\r\n}\r\nclass LabeledStatement {\r\n    constructor(label, body) {\r\n        this.type = Syntax.LabeledStatement;\r\n        this.label = label;\r\n        this.body = body;\r\n    }\r\n}\r\nclass Literal {\r\n    constructor(value, raw) {\r\n        this.type = Syntax.Literal;\r\n        this.value = value;\r\n        this.raw = raw;\r\n    }\r\n}\r\nclass LogicalExpression {\r\n    constructor(operator, left, right) {\r\n        this.type = Syntax.LogicalExpression;\r\n        this.operator = operator;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\nclass MemberExpression {\r\n    constructor(computed, object, property, optional) {\r\n        this.type = Syntax.MemberExpression;\r\n        this.computed = computed;\r\n        this.object = object;\r\n        this.property = property;\r\n        this.optional = optional;\r\n    }\r\n}\r\nclass MetaProperty {\r\n    constructor(meta, property) {\r\n        this.type = Syntax.MetaProperty;\r\n        this.meta = meta;\r\n        this.property = property;\r\n    }\r\n}\r\nclass MethodDefinition {\r\n    constructor(key, computed, value, kind, isStatic, decorators) {\r\n        this.type = Syntax.MethodDefinition;\r\n        this.key = key;\r\n        this.computed = computed;\r\n        this.value = value;\r\n        this.kind = kind;\r\n        this.static = isStatic;\r\n        this.decorators = decorators;\r\n    }\r\n}\r\nclass Module {\r\n    constructor(body) {\r\n        this.type = Syntax.Program;\r\n        this.body = body;\r\n        this.sourceType = 'module';\r\n    }\r\n}\r\nclass NewExpression {\r\n    constructor(callee, args) {\r\n        this.type = Syntax.NewExpression;\r\n        this.callee = callee;\r\n        this.arguments = args;\r\n    }\r\n}\r\nclass ObjectExpression {\r\n    constructor(properties) {\r\n        this.type = Syntax.ObjectExpression;\r\n        this.properties = properties;\r\n    }\r\n}\r\nclass ObjectPattern {\r\n    constructor(properties) {\r\n        this.type = Syntax.ObjectPattern;\r\n        this.properties = properties;\r\n    }\r\n}\r\nclass PrivateIdentifier {\r\n    constructor(name) {\r\n        this.type = Syntax.PrivateIdentifier;\r\n        this.name = name;\r\n    }\r\n}\r\nclass Program {\r\n    constructor(sourceType, body) {\r\n        this.type = Syntax.Program;\r\n        this.sourceType = sourceType;\r\n        this.body = body;\r\n    }\r\n}\r\nclass Property {\r\n    constructor(kind, key, computed, value, method, shorthand) {\r\n        this.type = Syntax.Property;\r\n        this.key = key;\r\n        this.computed = computed;\r\n        this.value = value;\r\n        this.kind = kind;\r\n        this.method = method;\r\n        this.shorthand = shorthand;\r\n    }\r\n}\r\nclass PropertyDefinition {\r\n    constructor(key, computed, value, isStatic, decorators) {\r\n        this.type = Syntax.Property;\r\n        this.key = key;\r\n        this.computed = computed;\r\n        this.value = value;\r\n        this.static = isStatic;\r\n        this.decorators = decorators;\r\n    }\r\n}\r\nclass RegexLiteral {\r\n    constructor(value, raw, pattern, flags) {\r\n        this.type = Syntax.Literal;\r\n        this.value = value;\r\n        this.raw = raw;\r\n        this.regex = { pattern, flags };\r\n    }\r\n}\r\nclass RestElement {\r\n    constructor(argument) {\r\n        this.type = Syntax.RestElement;\r\n        this.argument = argument;\r\n    }\r\n}\r\nclass ReturnStatement {\r\n    constructor(argument) {\r\n        this.type = Syntax.ReturnStatement;\r\n        this.argument = argument;\r\n    }\r\n}\r\nclass Script {\r\n    constructor(body) {\r\n        this.type = Syntax.Program;\r\n        this.body = body;\r\n        this.sourceType = 'script';\r\n    }\r\n}\r\nclass SequenceExpression {\r\n    constructor(expressions) {\r\n        this.type = Syntax.SequenceExpression;\r\n        this.expressions = expressions;\r\n    }\r\n}\r\nclass SpreadElement {\r\n    constructor(argument) {\r\n        this.type = Syntax.SpreadElement;\r\n        this.argument = argument;\r\n    }\r\n}\r\nclass StaticBlock {\r\n    constructor(body) {\r\n        this.type = Syntax.StaticBlock;\r\n        this.body = body;\r\n    }\r\n}\r\nclass Super {\r\n    constructor() {\r\n        this.type = Syntax.Super;\r\n    }\r\n}\r\nclass SwitchCase {\r\n    constructor(test, consequent) {\r\n        this.type = Syntax.SwitchCase;\r\n        this.test = test;\r\n        this.consequent = consequent;\r\n    }\r\n}\r\nclass SwitchStatement {\r\n    constructor(discriminant, cases) {\r\n        this.type = Syntax.SwitchStatement;\r\n        this.discriminant = discriminant;\r\n        this.cases = cases;\r\n    }\r\n}\r\nclass TaggedTemplateExpression {\r\n    constructor(tag, quasi) {\r\n        this.type = Syntax.TaggedTemplateExpression;\r\n        this.tag = tag;\r\n        this.quasi = quasi;\r\n    }\r\n}\r\nclass TemplateElement {\r\n    constructor(value, tail) {\r\n        this.type = Syntax.TemplateElement;\r\n        this.value = value;\r\n        this.tail = tail;\r\n    }\r\n}\r\nclass TemplateLiteral {\r\n    constructor(quasis, expressions) {\r\n        this.type = Syntax.TemplateLiteral;\r\n        this.quasis = quasis;\r\n        this.expressions = expressions;\r\n    }\r\n}\r\nclass ThisExpression {\r\n    constructor() {\r\n        this.type = Syntax.ThisExpression;\r\n    }\r\n}\r\nclass ThrowStatement {\r\n    constructor(argument) {\r\n        this.type = Syntax.ThrowStatement;\r\n        this.argument = argument;\r\n    }\r\n}\r\nclass TryStatement {\r\n    constructor(block, handler, finalizer) {\r\n        this.type = Syntax.TryStatement;\r\n        this.block = block;\r\n        this.handler = handler;\r\n        this.finalizer = finalizer;\r\n    }\r\n}\r\nclass UnaryExpression {\r\n    constructor(operator, argument) {\r\n        this.type = Syntax.UnaryExpression;\r\n        this.operator = operator;\r\n        this.argument = argument;\r\n        this.prefix = true;\r\n    }\r\n}\r\nclass UpdateExpression {\r\n    constructor(operator, argument, prefix) {\r\n        this.type = Syntax.UpdateExpression;\r\n        this.operator = operator;\r\n        this.argument = argument;\r\n        this.prefix = prefix;\r\n    }\r\n}\r\nclass VariableDeclaration {\r\n    constructor(declarations, kind) {\r\n        this.type = Syntax.VariableDeclaration;\r\n        this.declarations = declarations;\r\n        this.kind = kind;\r\n    }\r\n}\r\nclass VariableDeclarator {\r\n    constructor(id, init) {\r\n        this.type = Syntax.VariableDeclarator;\r\n        this.id = id;\r\n        this.init = init;\r\n    }\r\n}\r\nclass WhileStatement {\r\n    constructor(test, body) {\r\n        this.type = Syntax.WhileStatement;\r\n        this.test = test;\r\n        this.body = body;\r\n    }\r\n}\r\nclass WithStatement {\r\n    constructor(object, body) {\r\n        this.type = Syntax.WithStatement;\r\n        this.object = object;\r\n        this.body = body;\r\n    }\r\n}\r\nclass YieldExpression {\r\n    constructor(argument, delegate) {\r\n        this.type = Syntax.YieldExpression;\r\n        this.argument = argument;\r\n        this.delegate = delegate;\r\n    }\r\n}\n\nvar nodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ArrayExpression: ArrayExpression,\n    ArrayPattern: ArrayPattern,\n    ArrowFunctionExpression: ArrowFunctionExpression,\n    AssignmentExpression: AssignmentExpression,\n    AssignmentPattern: AssignmentPattern,\n    AsyncFunctionDeclaration: AsyncFunctionDeclaration,\n    AwaitExpression: AwaitExpression,\n    BigIntLiteral: BigIntLiteral,\n    BinaryExpression: BinaryExpression,\n    BlockStatement: BlockStatement,\n    BreakStatement: BreakStatement,\n    CallExpression: CallExpression,\n    CatchClause: CatchClause,\n    ChainExpression: ChainExpression,\n    ClassBody: ClassBody,\n    ClassDeclaration: ClassDeclaration,\n    ClassExpression: ClassExpression,\n    ConditionalExpression: ConditionalExpression,\n    ContinueStatement: ContinueStatement,\n    DebuggerStatement: DebuggerStatement,\n    Decorator: Decorator,\n    Directive: Directive,\n    DoWhileStatement: DoWhileStatement,\n    EmptyStatement: EmptyStatement,\n    ExportAllDeclaration: ExportAllDeclaration,\n    ExportDefaultDeclaration: ExportDefaultDeclaration,\n    ExportNamedDeclaration: ExportNamedDeclaration,\n    ExportSpecifier: ExportSpecifier,\n    ExpressionStatement: ExpressionStatement,\n    ForInStatement: ForInStatement,\n    ForOfStatement: ForOfStatement,\n    ForStatement: ForStatement,\n    FunctionDeclaration: FunctionDeclaration,\n    FunctionExpression: FunctionExpression,\n    Identifier: Identifier,\n    IfStatement: IfStatement,\n    ImportAttribute: ImportAttribute,\n    ImportExpression: ImportExpression,\n    ImportDeclaration: ImportDeclaration,\n    ImportDefaultSpecifier: ImportDefaultSpecifier,\n    ImportNamespaceSpecifier: ImportNamespaceSpecifier,\n    ImportSpecifier: ImportSpecifier,\n    LabeledStatement: LabeledStatement,\n    Literal: Literal,\n    LogicalExpression: LogicalExpression,\n    MemberExpression: MemberExpression,\n    MetaProperty: MetaProperty,\n    MethodDefinition: MethodDefinition,\n    Module: Module,\n    NewExpression: NewExpression,\n    ObjectExpression: ObjectExpression,\n    ObjectPattern: ObjectPattern,\n    PrivateIdentifier: PrivateIdentifier,\n    Program: Program,\n    Property: Property,\n    PropertyDefinition: PropertyDefinition,\n    RegexLiteral: RegexLiteral,\n    RestElement: RestElement,\n    ReturnStatement: ReturnStatement,\n    Script: Script,\n    SequenceExpression: SequenceExpression,\n    SpreadElement: SpreadElement,\n    StaticBlock: StaticBlock,\n    Super: Super,\n    SwitchCase: SwitchCase,\n    SwitchStatement: SwitchStatement,\n    TaggedTemplateExpression: TaggedTemplateExpression,\n    TemplateElement: TemplateElement,\n    TemplateLiteral: TemplateLiteral,\n    ThisExpression: ThisExpression,\n    ThrowStatement: ThrowStatement,\n    TryStatement: TryStatement,\n    UnaryExpression: UnaryExpression,\n    UpdateExpression: UpdateExpression,\n    VariableDeclaration: VariableDeclaration,\n    VariableDeclarator: VariableDeclarator,\n    WhileStatement: WhileStatement,\n    WithStatement: WithStatement,\n    YieldExpression: YieldExpression\n});\n\n// Ensure the condition is true, otherwise throw an error.\r\n// This is only to have a better contract semantic, i.e. another safety net\r\n// to catch a logic error. The condition shall be fulfilled in normal case.\r\n// Do NOT use this to enforce a certain condition on any user input.\r\nfunction assert(condition, message) {\r\n    /* istanbul ignore if */\r\n    if (!condition) {\r\n        throw new Error('ASSERT: ' + message);\r\n    }\r\n}\n\nclass ErrorHandler {\r\n    constructor() {\r\n        this.errors = [];\r\n        this.tolerant = false;\r\n    }\r\n    recordError(error) {\r\n        this.errors.push(error);\r\n    }\r\n    tolerate(error) {\r\n        if (this.tolerant) {\r\n            this.recordError(error);\r\n        }\r\n        else {\r\n            throw error;\r\n        }\r\n    }\r\n    constructError(msg, column) {\r\n        let error = new Error(msg);\r\n        try {\r\n            throw error;\r\n        }\r\n        catch (base) {\r\n            /* istanbul ignore else */\r\n            if (Object.create && Object.defineProperty) {\r\n                error = Object.create(base);\r\n                Object.defineProperty(error, 'column', { value: column });\r\n            }\r\n        }\r\n        /* istanbul ignore next */\r\n        return error;\r\n    }\r\n    createError(index, line, col, description) {\r\n        const msg = 'Line ' + line + ': ' + description;\r\n        const _error = this.constructError(msg, col);\r\n        _error.index = index;\r\n        _error.lineNumber = line;\r\n        _error.description = description;\r\n        const error = _error;\r\n        return error;\r\n    }\r\n    throwError(index, line, col, description) {\r\n        throw this.createError(index, line, col, description);\r\n    }\r\n    tolerateError(index, line, col, description) {\r\n        const error = this.createError(index, line, col, description);\r\n        if (this.tolerant) {\r\n            this.recordError(error);\r\n        }\r\n        else {\r\n            throw error;\r\n        }\r\n    }\r\n}\n\n// Error messages should be identical to V8.\r\nconst Messages = {\r\n    AsyncFunctionInSingleStatementContext: 'Async functions can only be declared at the top level or inside a block.',\r\n    BadImportCallArity: 'Unexpected token',\r\n    BadGetterArity: 'Getter must not have any formal parameters',\r\n    BadSetterArity: 'Setter must have exactly one formal parameter',\r\n    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\r\n    CannotUseImportMetaOutsideAModule: 'Cannot use \\'import.meta\\' outside a module',\r\n    ConstructorIsAsync: 'Class constructor may not be an async method',\r\n    ConstructorIsPrivate: 'Class constructor may not be a private method',\r\n    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\r\n    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\r\n    DefaultRestParameter: 'Unexpected token =',\r\n    DefaultRestProperty: 'Unexpected token =',\r\n    DuplicateBinding: 'Duplicate binding %0',\r\n    DuplicateConstructor: 'A class may only have one constructor',\r\n    DuplicateParameter: 'Duplicate parameter name not allowed in this context',\r\n    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\r\n    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\r\n    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\r\n    IllegalBreak: 'Illegal break statement',\r\n    IllegalContinue: 'Illegal continue statement',\r\n    IllegalExportDeclaration: 'Unexpected token',\r\n    IllegalImportDeclaration: 'Unexpected token',\r\n    IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\r\n    IllegalReturn: 'Illegal return statement',\r\n    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\r\n    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\r\n    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\r\n    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\r\n    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\r\n    InvalidModuleSpecifier: 'Unexpected token',\r\n    InvalidRegExp: 'Invalid regular expression',\r\n    InvalidTaggedTemplateOnOptionalChain: 'Invalid tagged template on optional chain',\r\n    InvalidUnicodeEscapeSequence: 'Invalid Unicode escape sequence',\r\n    LetInLexicalBinding: 'let is disallowed as a lexically bound name',\r\n    MissingFromClause: 'Unexpected token',\r\n    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\r\n    NewlineAfterThrow: 'Illegal newline after throw',\r\n    NoAsAfterImportNamespace: 'Unexpected token',\r\n    NoAsAndFromEscapeSequences: 'The `as` and `from` contextual keywords must not contain Unicode escape sequences.',\r\n    NoCatchOrFinally: 'Missing catch or finally after try',\r\n    NoSemicolonAfterDecorator: \"Decorators must not be followed by a semicolon.\",\r\n    NumericSeperatorOneUnderscore: 'Numeric separator must be exactly one underscore',\r\n    NumericSeperatorNotAllowedHere: 'Numeric separator is not allowed here',\r\n    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\r\n    PropertyAfterRestProperty: 'Unexpected token',\r\n    Redeclaration: '%0 \\'%1\\' has already been declared',\r\n    StaticPrototype: 'Classes may not have static property named prototype',\r\n    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\r\n    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\r\n    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\r\n    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\r\n    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\r\n    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\r\n    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\r\n    StrictModeWith: 'Strict mode code may not include a with statement',\r\n    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\r\n    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\r\n    StrictReservedWord: 'Use of future reserved word in strict mode',\r\n    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\r\n    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\r\n    TemplateEscape89: '\\\\8 and \\\\9 are not allowed in template strings.',\r\n    UnexpectedEOS: 'Unexpected end of input',\r\n    UnexpectedIdentifier: 'Unexpected identifier',\r\n    UnexpectedNumber: 'Unexpected number',\r\n    UnexpectedReserved: 'Unexpected reserved word',\r\n    UnexpectedString: 'Unexpected string',\r\n    UnexpectedSuper: '\\'super\\' keyword unexpected here',\r\n    UnexpectedTemplate: 'Unexpected quasi %0',\r\n    UnexpectedToken: 'Unexpected token %0',\r\n    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\r\n    UnknownLabel: 'Undefined label \\'%0\\'',\r\n    UnterminatedRegExp: 'Invalid regular expression: missing /'\r\n};\n\nfunction hexValue(ch) {\r\n    return '0123456789abcdef'.indexOf(ch.toLowerCase());\r\n}\r\nfunction octalValue(ch) {\r\n    return '01234567'.indexOf(ch);\r\n}\r\nclass Scanner {\r\n    constructor(code, handler) {\r\n        this.source = code;\r\n        this.errorHandler = handler;\r\n        this.trackComment = false;\r\n        this.isModule = false;\r\n        this.length = code.length;\r\n        this.index = 0;\r\n        this.lineNumber = (code.length > 0) ? 1 : 0;\r\n        this.lineStart = 0;\r\n        this.curlyStack = [];\r\n    }\r\n    saveState() {\r\n        return {\r\n            index: this.index,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            curlyStack: this.curlyStack.slice()\r\n        };\r\n    }\r\n    restoreState(state) {\r\n        this.index = state.index;\r\n        this.lineNumber = state.lineNumber;\r\n        this.lineStart = state.lineStart;\r\n        this.curlyStack = state.curlyStack;\r\n    }\r\n    eof() {\r\n        return this.index >= this.length;\r\n    }\r\n    throwUnexpectedToken(message = Messages.UnexpectedTokenIllegal) {\r\n        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\r\n    }\r\n    tolerateUnexpectedToken(message = Messages.UnexpectedTokenIllegal) {\r\n        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-comments\r\n    skipSingleLineComment(offset) {\r\n        let comments = [];\r\n        let start, loc;\r\n        if (this.trackComment) {\r\n            comments = [];\r\n            start = this.index - offset;\r\n            loc = {\r\n                start: {\r\n                    line: this.lineNumber,\r\n                    column: this.index - this.lineStart - offset\r\n                },\r\n                end: {}\r\n            };\r\n        }\r\n        while (!this.eof()) {\r\n            const ch = this.source.charCodeAt(this.index);\r\n            ++this.index;\r\n            if (Character.isLineTerminator(ch)) {\r\n                if (this.trackComment) {\r\n                    loc.end = {\r\n                        line: this.lineNumber,\r\n                        column: this.index - this.lineStart - 1\r\n                    };\r\n                    const entry = {\r\n                        multiLine: false,\r\n                        slice: [start + offset, this.index - 1],\r\n                        range: [start, this.index - 1],\r\n                        loc: loc\r\n                    };\r\n                    comments.push(entry);\r\n                }\r\n                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\r\n                    ++this.index;\r\n                }\r\n                ++this.lineNumber;\r\n                this.lineStart = this.index;\r\n                return comments;\r\n            }\r\n        }\r\n        if (this.trackComment) {\r\n            loc.end = {\r\n                line: this.lineNumber,\r\n                column: this.index - this.lineStart\r\n            };\r\n            const entry = {\r\n                multiLine: false,\r\n                slice: [start + offset, this.index],\r\n                range: [start, this.index],\r\n                loc: loc\r\n            };\r\n            comments.push(entry);\r\n        }\r\n        return comments;\r\n    }\r\n    skipMultiLineComment() {\r\n        let comments = [];\r\n        let start, loc;\r\n        if (this.trackComment) {\r\n            comments = [];\r\n            start = this.index - 2;\r\n            loc = {\r\n                start: {\r\n                    line: this.lineNumber,\r\n                    column: this.index - this.lineStart - 2\r\n                },\r\n                end: {}\r\n            };\r\n        }\r\n        while (!this.eof()) {\r\n            const ch = this.source.charCodeAt(this.index);\r\n            if (Character.isLineTerminator(ch)) {\r\n                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\r\n                    ++this.index;\r\n                }\r\n                ++this.lineNumber;\r\n                ++this.index;\r\n                this.lineStart = this.index;\r\n            }\r\n            else if (ch === 0x2A) {\r\n                // Block comment ends with '*/'.\r\n                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\r\n                    this.index += 2;\r\n                    if (this.trackComment) {\r\n                        loc.end = {\r\n                            line: this.lineNumber,\r\n                            column: this.index - this.lineStart\r\n                        };\r\n                        const entry = {\r\n                            multiLine: true,\r\n                            slice: [start + 2, this.index - 2],\r\n                            range: [start, this.index],\r\n                            loc: loc\r\n                        };\r\n                        comments.push(entry);\r\n                    }\r\n                    return comments;\r\n                }\r\n                ++this.index;\r\n            }\r\n            else {\r\n                ++this.index;\r\n            }\r\n        }\r\n        // Ran off the end of the file - the whole thing is a comment\r\n        if (this.trackComment) {\r\n            loc.end = {\r\n                line: this.lineNumber,\r\n                column: this.index - this.lineStart\r\n            };\r\n            const entry = {\r\n                multiLine: true,\r\n                slice: [start + 2, this.index],\r\n                range: [start, this.index],\r\n                loc: loc\r\n            };\r\n            comments.push(entry);\r\n        }\r\n        this.tolerateUnexpectedToken();\r\n        return comments;\r\n    }\r\n    scanComments() {\r\n        let comments;\r\n        if (this.trackComment) {\r\n            comments = [];\r\n        }\r\n        let start = (this.index === 0);\r\n        while (!this.eof()) {\r\n            let ch = this.source.charCodeAt(this.index);\r\n            if (Character.isWhiteSpace(ch)) {\r\n                ++this.index;\r\n            }\r\n            else if (Character.isLineTerminator(ch)) {\r\n                ++this.index;\r\n                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\r\n                    ++this.index;\r\n                }\r\n                ++this.lineNumber;\r\n                this.lineStart = this.index;\r\n                start = true;\r\n            }\r\n            else if (ch === 0x2F) { // U+002F is '/'\r\n                ch = this.source.charCodeAt(this.index + 1);\r\n                if (ch === 0x2F) {\r\n                    this.index += 2;\r\n                    const comment = this.skipSingleLineComment(2);\r\n                    if (this.trackComment) {\r\n                        comments = comments.concat(comment);\r\n                    }\r\n                    start = true;\r\n                }\r\n                else if (ch === 0x2A) { // U+002A is '*'\r\n                    this.index += 2;\r\n                    const comment = this.skipMultiLineComment();\r\n                    if (this.trackComment) {\r\n                        comments = comments.concat(comment);\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else if (start && ch === 0x2D) { // U+002D is '-'\r\n                // U+003E is '>'\r\n                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\r\n                    // '-->' is a single-line comment\r\n                    this.index += 3;\r\n                    const comment = this.skipSingleLineComment(3);\r\n                    if (this.trackComment) {\r\n                        comments = comments.concat(comment);\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else if (ch === 0x3C && !this.isModule) { // U+003C is '<'\r\n                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\r\n                    this.index += 4; // `<!--`\r\n                    const comment = this.skipSingleLineComment(4);\r\n                    if (this.trackComment) {\r\n                        comments = comments.concat(comment);\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return comments;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-future-reserved-words\r\n    isFutureReservedWord(id) {\r\n        switch (id) {\r\n            case 'enum':\r\n            case 'export':\r\n            case 'import':\r\n            case 'super':\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    isStrictModeReservedWord(id) {\r\n        switch (id) {\r\n            case 'implements':\r\n            case 'interface':\r\n            case 'package':\r\n            case 'private':\r\n            case 'protected':\r\n            case 'public':\r\n            case 'static':\r\n            case 'yield':\r\n            case 'let':\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    isRestrictedWord(id) {\r\n        return id === 'eval' || id === 'arguments';\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-keywords\r\n    isKeyword(id) {\r\n        switch (id.length) {\r\n            case 2:\r\n                return (id === 'if') || (id === 'in') || (id === 'do');\r\n            case 3:\r\n                return (id === 'var') || (id === 'for') || (id === 'new') ||\r\n                    (id === 'try') || (id === 'let');\r\n            case 4:\r\n                return (id === 'this') || (id === 'else') || (id === 'case') ||\r\n                    (id === 'void') || (id === 'with') || (id === 'enum');\r\n            case 5:\r\n                return (id === 'while') || (id === 'break') || (id === 'catch') ||\r\n                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\r\n                    (id === 'class') || (id === 'super');\r\n            case 6:\r\n                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\r\n                    (id === 'switch') || (id === 'export') || (id === 'import');\r\n            case 7:\r\n                return (id === 'default') || (id === 'finally') || (id === 'extends');\r\n            case 8:\r\n                return (id === 'function') || (id === 'continue') || (id === 'debugger');\r\n            case 10:\r\n                return (id === 'instanceof');\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    codePointAt(i) {\r\n        let cp = this.source.charCodeAt(i);\r\n        if (cp >= 0xD800 && cp <= 0xDBFF) {\r\n            const second = this.source.charCodeAt(i + 1);\r\n            if (second >= 0xDC00 && second <= 0xDFFF) {\r\n                const first = cp;\r\n                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n            }\r\n        }\r\n        return cp;\r\n    }\r\n    scanHexEscape(prefix) {\r\n        const len = (prefix === 'u') ? 4 : 2;\r\n        let code = 0;\r\n        for (let i = 0; i < len; ++i) {\r\n            if (!this.eof() && Character.isHexDigit(this.source.charCodeAt(this.index))) {\r\n                code = code * 16 + hexValue(this.source[this.index++]);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        return String.fromCharCode(code);\r\n    }\r\n    tryToScanUnicodeCodePointEscape() {\r\n        let ch = this.source[this.index];\r\n        let code = 0;\r\n        // At least, one hex digit is required.\r\n        if (ch === '}') {\r\n            return null;\r\n        }\r\n        while (!this.eof()) {\r\n            ch = this.source[this.index++];\r\n            if (!Character.isHexDigit(ch.charCodeAt(0))) {\r\n                break;\r\n            }\r\n            code = code * 16 + hexValue(ch);\r\n        }\r\n        if (code > 0x10FFFF || ch !== '}') {\r\n            return null;\r\n        }\r\n        return Character.fromCodePoint(code);\r\n    }\r\n    scanUnicodeCodePointEscape() {\r\n        const result = this.tryToScanUnicodeCodePointEscape();\r\n        if (result === null) {\r\n            return this.throwUnexpectedToken();\r\n        }\r\n        return result;\r\n    }\r\n    getIdentifier() {\r\n        const start = this.index++;\r\n        while (!this.eof()) {\r\n            const ch = this.source.charCodeAt(this.index);\r\n            if (ch === 0x5C) {\r\n                // Blackslash (U+005C) marks Unicode escape sequence.\r\n                this.index = start;\r\n                return this.getComplexIdentifier();\r\n            }\r\n            else if (ch >= 0xD800 && ch < 0xDFFF) {\r\n                // Need to handle surrogate pairs.\r\n                this.index = start;\r\n                return this.getComplexIdentifier();\r\n            }\r\n            if (Character.isIdentifierPart(ch)) {\r\n                ++this.index;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return this.source.slice(start, this.index);\r\n    }\r\n    getComplexIdentifier() {\r\n        let cp = this.codePointAt(this.index);\r\n        let id = Character.fromCodePoint(cp);\r\n        this.index += id.length;\r\n        // '\\u' (U+005C, U+0075) denotes an escaped character.\r\n        let ch;\r\n        if (cp === 0x5C) {\r\n            if (this.source.charCodeAt(this.index) !== 0x75) {\r\n                this.throwUnexpectedToken();\r\n            }\r\n            ++this.index;\r\n            if (this.source[this.index] === '{') {\r\n                ++this.index;\r\n                ch = this.scanUnicodeCodePointEscape();\r\n            }\r\n            else {\r\n                ch = this.scanHexEscape('u');\r\n                if (ch === null || ch === '\\\\' || !Character.isIdentifierStart(ch.charCodeAt(0))) {\r\n                    this.throwUnexpectedToken();\r\n                }\r\n            }\r\n            id = ch;\r\n        }\r\n        while (!this.eof()) {\r\n            cp = this.codePointAt(this.index);\r\n            if (!Character.isIdentifierPart(cp)) {\r\n                break;\r\n            }\r\n            ch = Character.fromCodePoint(cp);\r\n            id += ch;\r\n            this.index += ch.length;\r\n            // '\\u' (U+005C, U+0075) denotes an escaped character.\r\n            if (cp === 0x5C) {\r\n                id = id.substr(0, id.length - 1);\r\n                if (this.source.charCodeAt(this.index) !== 0x75) {\r\n                    this.throwUnexpectedToken();\r\n                }\r\n                ++this.index;\r\n                if (this.source[this.index] === '{') {\r\n                    ++this.index;\r\n                    ch = this.scanUnicodeCodePointEscape();\r\n                }\r\n                else {\r\n                    ch = this.scanHexEscape('u');\r\n                    if (ch === null || ch === '\\\\' || !Character.isIdentifierPart(ch.charCodeAt(0))) {\r\n                        this.throwUnexpectedToken();\r\n                    }\r\n                }\r\n                id += ch;\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n    octalToDecimal(ch) {\r\n        // \\0 is not octal escape sequence\r\n        let octal = (ch !== '0');\r\n        let code = octalValue(ch);\r\n        if (!this.eof() && Character.isOctalDigit(this.source.charCodeAt(this.index))) {\r\n            octal = true;\r\n            code = code * 8 + octalValue(this.source[this.index++]);\r\n            // 3 digits are only allowed when string starts\r\n            // with 0, 1, 2, 3\r\n            if ('0123'.indexOf(ch) >= 0 && !this.eof() && Character.isOctalDigit(this.source.charCodeAt(this.index))) {\r\n                code = code * 8 + octalValue(this.source[this.index++]);\r\n            }\r\n        }\r\n        return {\r\n            code: code,\r\n            octal: octal\r\n        };\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-names-and-keywords\r\n    scanIdentifier() {\r\n        let type;\r\n        const start = this.index;\r\n        // Backslash (U+005C) starts an escaped character.\r\n        const escaped = this.source.charCodeAt(start) === 0x5C;\r\n        const id = escaped ? this.getComplexIdentifier() : this.getIdentifier();\r\n        // There is no keyword or literal with only one character.\r\n        // Thus, it must be an identifier.\r\n        if (id.length === 1) {\r\n            type = 3 /* Token.Identifier */;\r\n        }\r\n        else if (this.isKeyword(id)) {\r\n            type = 4 /* Token.Keyword */;\r\n        }\r\n        else if (id === 'null') {\r\n            type = 5 /* Token.NullLiteral */;\r\n        }\r\n        else if (id === 'true' || id === 'false') {\r\n            type = 1 /* Token.BooleanLiteral */;\r\n        }\r\n        else {\r\n            type = 3 /* Token.Identifier */;\r\n        }\r\n        if (type !== 3 /* Token.Identifier */ && (start + id.length !== this.index)) {\r\n            const restore = this.index;\r\n            this.index = start;\r\n            this.tolerateUnexpectedToken(Messages.InvalidEscapedReservedWord);\r\n            this.index = restore;\r\n        }\r\n        return {\r\n            type: type,\r\n            value: id,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index,\r\n            escaped: escaped\r\n        };\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-punctuators\r\n    scanPunctuator() {\r\n        const start = this.index;\r\n        // Check for most common single-character punctuators.\r\n        let str = this.source[this.index];\r\n        switch (str) {\r\n            case '(':\r\n            case '{':\r\n                if (str === '{') {\r\n                    this.curlyStack.push('{');\r\n                }\r\n                ++this.index;\r\n                break;\r\n            case '.':\r\n                ++this.index;\r\n                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\r\n                    // Spread operator: ...\r\n                    this.index += 2;\r\n                    str = '...';\r\n                }\r\n                break;\r\n            case '}':\r\n                ++this.index;\r\n                this.curlyStack.pop();\r\n                break;\r\n            case '?':\r\n                ++this.index;\r\n                if (this.source[this.index] === '?') {\r\n                    ++this.index;\r\n                    if (this.source[this.index] === '=') {\r\n                        ++this.index;\r\n                        str = '??=';\r\n                    }\r\n                    else {\r\n                        str = '??';\r\n                    }\r\n                }\r\n                if (this.source[this.index] === '.' && !/^\\d$/.test(this.source[this.index + 1])) {\r\n                    // \"?.\" in \"foo?.3:0\" should not be treated as optional chaining.\r\n                    // See https://github.com/tc39/proposal-optional-chaining#notes\r\n                    ++this.index;\r\n                    str = '?.';\r\n                }\r\n                break;\r\n            case '#':\r\n            case ')':\r\n            case ';':\r\n            case ',':\r\n            case '[':\r\n            case ']':\r\n            case ':':\r\n            case '~':\r\n            case '@':\r\n                ++this.index;\r\n                break;\r\n            default:\r\n                // 4-character punctuator.\r\n                str = this.source.substr(this.index, 4);\r\n                if (str === '>>>=') {\r\n                    this.index += 4;\r\n                }\r\n                else {\r\n                    // 3-character punctuators.\r\n                    str = str.substr(0, 3);\r\n                    if (str === '===' || str === '!==' || str === '>>>' ||\r\n                        str === '<<=' || str === '>>=' || str === '**=' ||\r\n                        str === '&&=' || str === '||=') {\r\n                        this.index += 3;\r\n                    }\r\n                    else {\r\n                        // 2-character punctuators.\r\n                        str = str.substr(0, 2);\r\n                        if (str === '&&' || str === '||' ||\r\n                            str === '==' || str === '!=' ||\r\n                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\r\n                            str === '++' || str === '--' ||\r\n                            str === '<<' || str === '>>' ||\r\n                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\r\n                            str === '<=' || str === '>=' || str === '=>' ||\r\n                            str === '**') {\r\n                            this.index += 2;\r\n                        }\r\n                        else {\r\n                            // 1-character punctuators.\r\n                            str = this.source[this.index];\r\n                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\r\n                                ++this.index;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n        if (this.index === start) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n        return {\r\n            type: 7 /* Token.Punctuator */,\r\n            value: str,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\r\n    scanHexLiteral(start) {\r\n        let num = this.scanLiteralPart(Character.isHexDigitChar);\r\n        if (num.length === 0) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n        if (this.source[this.index] === 'n') {\r\n            this.index++;\r\n            return {\r\n                type: 6 /* Token.NumericLiteral */,\r\n                value: BigInt('0x' + num),\r\n                lineNumber: this.lineNumber,\r\n                lineStart: this.lineStart,\r\n                start: start,\r\n                end: this.index\r\n            };\r\n        }\r\n        if (Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n        return {\r\n            type: 6 /* Token.NumericLiteral */,\r\n            value: parseInt('0x' + num, 16),\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n    scanBinaryLiteral(start) {\r\n        let ch;\r\n        let num = this.scanLiteralPart(c => c === '0' || c === '1');\r\n        if (num.length === 0) {\r\n            // only 0b or 0B\r\n            this.throwUnexpectedToken();\r\n        }\r\n        if (this.source[this.index] === 'n') {\r\n            this.index++;\r\n            return {\r\n                type: 6 /* Token.NumericLiteral */,\r\n                value: BigInt('0b' + num),\r\n                lineNumber: this.lineNumber,\r\n                lineStart: this.lineStart,\r\n                start: start,\r\n                end: this.index\r\n            };\r\n        }\r\n        if (!this.eof()) {\r\n            ch = this.source.charCodeAt(this.index);\r\n            /* istanbul ignore else */\r\n            if (Character.isIdentifierStart(ch) || Character.isDecimalDigit(ch)) {\r\n                this.throwUnexpectedToken();\r\n            }\r\n        }\r\n        return {\r\n            type: 6 /* Token.NumericLiteral */,\r\n            value: parseInt(num, 2),\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n    scanOctalLiteral(prefix, start) {\r\n        let num = '';\r\n        let octal = false;\r\n        if (Character.isOctalDigit(prefix.charCodeAt(0))) {\r\n            octal = true;\r\n            num = '0' + this.source[this.index++];\r\n        }\r\n        else {\r\n            ++this.index;\r\n        }\r\n        num += this.scanLiteralPart(Character.isOctalDigitChar);\r\n        if (!octal && num.length === 0) {\r\n            // only 0o or 0O\r\n            this.throwUnexpectedToken();\r\n        }\r\n        if (this.source[this.index] === 'n') {\r\n            this.index++;\r\n            return {\r\n                type: 6 /* Token.NumericLiteral */,\r\n                value: BigInt('0o' + num),\r\n                lineNumber: this.lineNumber,\r\n                lineStart: this.lineStart,\r\n                start: start,\r\n                end: this.index\r\n            };\r\n        }\r\n        if (Character.isIdentifierStart(this.source.charCodeAt(this.index)) || Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n        return {\r\n            type: 6 /* Token.NumericLiteral */,\r\n            value: parseInt(num, 8),\r\n            octal: octal,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n    isImplicitOctalLiteral() {\r\n        // Implicit octal, unless there is a non-octal digit.\r\n        // (Annex B.1.1 on Numeric Literals)\r\n        for (let i = this.index + 1; i < this.length; ++i) {\r\n            const ch = this.source[i];\r\n            if (ch === '8' || ch === '9' || ch === 'n') {\r\n                return false;\r\n            }\r\n            if (!Character.isOctalDigit(ch.charCodeAt(0))) {\r\n                return true;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    scanLiteralPart(check) {\r\n        let num = '';\r\n        if (this.source[this.index] === '_')\r\n            this.throwUnexpectedToken(Messages.NumericSeperatorNotAllowedHere);\r\n        while (this.source[this.index] && (check(this.source[this.index]) || this.source[this.index] === '_')) {\r\n            if (this.source[this.index] !== '_')\r\n                num += this.source[this.index];\r\n            this.index++;\r\n            if (this.source[this.index - 1] === '_' && this.source[this.index] === '_')\r\n                this.throwUnexpectedToken(Messages.NumericSeperatorOneUnderscore);\r\n        }\r\n        if (this.source[this.index - 1] === '_')\r\n            this.throwUnexpectedToken(Messages.NumericSeperatorNotAllowedHere);\r\n        return num;\r\n    }\r\n    scanNumericLiteral() {\r\n        const start = this.index;\r\n        let ch = this.source[start];\r\n        assert(Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\r\n        let num = '';\r\n        if (ch !== '.') {\r\n            num = this.source[this.index++];\r\n            ch = this.source[this.index];\r\n            // Hex number starts with '0x'.\r\n            // Octal number starts with '0'.\r\n            // Octal number in ES6 starts with '0o'.\r\n            // Binary number in ES6 starts with '0b'.\r\n            if (num === '0') {\r\n                if (ch === 'x' || ch === 'X') {\r\n                    ++this.index;\r\n                    return this.scanHexLiteral(start);\r\n                }\r\n                if (ch === 'b' || ch === 'B') {\r\n                    ++this.index;\r\n                    return this.scanBinaryLiteral(start);\r\n                }\r\n                if (ch === 'o' || ch === 'O') {\r\n                    return this.scanOctalLiteral(ch, start);\r\n                }\r\n                if (ch && Character.isOctalDigit(ch.charCodeAt(0))) {\r\n                    if (this.isImplicitOctalLiteral()) {\r\n                        return this.scanOctalLiteral(ch, start);\r\n                    }\r\n                }\r\n            }\r\n            this.index--;\r\n            num = this.scanLiteralPart(Character.isDecimalDigitChar);\r\n            ch = this.source[this.index];\r\n        }\r\n        if (ch === '.') {\r\n            num += this.source[this.index++];\r\n            num += this.scanLiteralPart(Character.isDecimalDigitChar);\r\n            ch = this.source[this.index];\r\n        }\r\n        if (ch === 'e' || ch === 'E') {\r\n            num += this.source[this.index++];\r\n            ch = this.source[this.index];\r\n            if (ch === '+' || ch === '-') {\r\n                num += this.source[this.index++];\r\n            }\r\n            if (Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n                num += this.scanLiteralPart(Character.isDecimalDigitChar);\r\n            }\r\n            else {\r\n                this.throwUnexpectedToken();\r\n            }\r\n        }\r\n        else if (ch === 'n') {\r\n            if (num.length > 1 && num[0] === '0') {\r\n                this.throwUnexpectedToken();\r\n            }\r\n            this.index++;\r\n            return {\r\n                type: 6 /* Token.NumericLiteral */,\r\n                value: BigInt(num),\r\n                lineNumber: this.lineNumber,\r\n                lineStart: this.lineStart,\r\n                start: start,\r\n                end: this.index\r\n            };\r\n        }\r\n        if (Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n        return {\r\n            type: 6 /* Token.NumericLiteral */,\r\n            value: parseFloat(num),\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-literals-string-literals\r\n    scanStringLiteral() {\r\n        const start = this.index;\r\n        let quote = this.source[start];\r\n        assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\r\n        ++this.index;\r\n        let octal = false;\r\n        let str = '';\r\n        while (!this.eof()) {\r\n            let ch = this.source[this.index++];\r\n            if (ch === quote) {\r\n                quote = '';\r\n                break;\r\n            }\r\n            else if (ch === '\\\\') {\r\n                ch = this.source[this.index++];\r\n                if (!ch || !Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                    switch (ch) {\r\n                        case 'u':\r\n                            if (this.source[this.index] === '{') {\r\n                                ++this.index;\r\n                                str += this.scanUnicodeCodePointEscape();\r\n                            }\r\n                            else {\r\n                                const unescapedChar = this.scanHexEscape(ch);\r\n                                if (unescapedChar === null) {\r\n                                    this.throwUnexpectedToken();\r\n                                }\r\n                                str += unescapedChar;\r\n                            }\r\n                            break;\r\n                        case 'x':\r\n                            const unescaped = this.scanHexEscape(ch);\r\n                            if (unescaped === null) {\r\n                                this.throwUnexpectedToken(Messages.InvalidHexEscapeSequence);\r\n                            }\r\n                            str += unescaped;\r\n                            break;\r\n                        case 'n':\r\n                            str += '\\n';\r\n                            break;\r\n                        case 'r':\r\n                            str += '\\r';\r\n                            break;\r\n                        case 't':\r\n                            str += '\\t';\r\n                            break;\r\n                        case 'b':\r\n                            str += '\\b';\r\n                            break;\r\n                        case 'f':\r\n                            str += '\\f';\r\n                            break;\r\n                        case 'v':\r\n                            str += '\\x0B';\r\n                            break;\r\n                        case '8':\r\n                        case '9':\r\n                            str += ch;\r\n                            this.tolerateUnexpectedToken();\r\n                            break;\r\n                        default:\r\n                            if (ch && Character.isOctalDigit(ch.charCodeAt(0))) {\r\n                                const octToDec = this.octalToDecimal(ch);\r\n                                octal = octToDec.octal || octal;\r\n                                str += String.fromCharCode(octToDec.code);\r\n                            }\r\n                            else {\r\n                                str += ch;\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    ++this.lineNumber;\r\n                    if (ch === '\\r' && this.source[this.index] === '\\n') {\r\n                        ++this.index;\r\n                    }\r\n                    this.lineStart = this.index;\r\n                }\r\n            }\r\n            else if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                break;\r\n            }\r\n            else {\r\n                str += ch;\r\n            }\r\n        }\r\n        if (quote !== '') {\r\n            this.index = start;\r\n            this.throwUnexpectedToken();\r\n        }\r\n        return {\r\n            type: 8 /* Token.StringLiteral */,\r\n            value: str,\r\n            octal: octal,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\r\n    scanTemplate() {\r\n        let cooked = '';\r\n        let terminated = false;\r\n        const start = this.index;\r\n        const head = (this.source[start] === '`');\r\n        let tail = false;\r\n        let notEscapeSequenceHead = null;\r\n        let rawOffset = 2;\r\n        ++this.index;\r\n        while (!this.eof()) {\r\n            let ch = this.source[this.index++];\r\n            if (ch === '`') {\r\n                rawOffset = 1;\r\n                tail = true;\r\n                terminated = true;\r\n                break;\r\n            }\r\n            else if (ch === '$') {\r\n                if (this.source[this.index] === '{') {\r\n                    this.curlyStack.push('${');\r\n                    ++this.index;\r\n                    terminated = true;\r\n                    break;\r\n                }\r\n                cooked += ch;\r\n            }\r\n            else if (notEscapeSequenceHead !== null) {\r\n                continue;\r\n            }\r\n            else if (ch === '\\\\') {\r\n                ch = this.source[this.index++];\r\n                if (!Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                    switch (ch) {\r\n                        case 'n':\r\n                            cooked += '\\n';\r\n                            break;\r\n                        case 'r':\r\n                            cooked += '\\r';\r\n                            break;\r\n                        case 't':\r\n                            cooked += '\\t';\r\n                            break;\r\n                        case 'u':\r\n                            if (this.source[this.index] === '{') {\r\n                                ++this.index;\r\n                                const unicodeCodePointEscape = this.tryToScanUnicodeCodePointEscape();\r\n                                if (unicodeCodePointEscape === null) {\r\n                                    notEscapeSequenceHead = 'u';\r\n                                }\r\n                                else {\r\n                                    cooked += unicodeCodePointEscape;\r\n                                }\r\n                            }\r\n                            else {\r\n                                const unescapedChar = this.scanHexEscape(ch);\r\n                                if (unescapedChar === null) {\r\n                                    notEscapeSequenceHead = 'u';\r\n                                }\r\n                                else {\r\n                                    cooked += unescapedChar;\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 'x':\r\n                            const unescaped = this.scanHexEscape(ch);\r\n                            if (unescaped === null) {\r\n                                notEscapeSequenceHead = 'x';\r\n                            }\r\n                            else {\r\n                                cooked += unescaped;\r\n                            }\r\n                            break;\r\n                        case 'b':\r\n                            cooked += '\\b';\r\n                            break;\r\n                        case 'f':\r\n                            cooked += '\\f';\r\n                            break;\r\n                        case 'v':\r\n                            cooked += '\\v';\r\n                            break;\r\n                        default:\r\n                            if (ch === '0') {\r\n                                if (Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n                                    // NotEscapeSequence: \\01 \\02 and so on\r\n                                    notEscapeSequenceHead = '0';\r\n                                }\r\n                                else {\r\n                                    cooked += '\\0';\r\n                                }\r\n                            }\r\n                            else if (Character.isDecimalDigitChar(ch)) {\r\n                                // NotEscapeSequence: \\1 \\2\r\n                                notEscapeSequenceHead = ch;\r\n                            }\r\n                            else {\r\n                                cooked += ch;\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    ++this.lineNumber;\r\n                    if (ch === '\\r' && this.source[this.index] === '\\n') {\r\n                        ++this.index;\r\n                    }\r\n                    this.lineStart = this.index;\r\n                }\r\n            }\r\n            else if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                ++this.lineNumber;\r\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\r\n                    ++this.index;\r\n                }\r\n                this.lineStart = this.index;\r\n                cooked += '\\n';\r\n            }\r\n            else {\r\n                cooked += ch;\r\n            }\r\n        }\r\n        if (!terminated) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n        if (!head) {\r\n            this.curlyStack.pop();\r\n        }\r\n        return {\r\n            type: 10 /* Token.Template */,\r\n            value: this.source.slice(start + 1, this.index - rawOffset),\r\n            cooked: notEscapeSequenceHead === null ? cooked : null,\r\n            head: head,\r\n            tail: tail,\r\n            notEscapeSequenceHead: notEscapeSequenceHead,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\r\n    testRegExp(pattern, flags) {\r\n        // The BMP character to use as a replacement for astral symbols when\r\n        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\r\n        // approximation.\r\n        // Note: replacing with '\\uFFFF' enables false positives in unlikely\r\n        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\r\n        // pattern that would not be detected by this substitution.\r\n        const astralSubstitute = '\\uFFFF';\r\n        let tmp = pattern;\r\n        if (flags.indexOf('u') >= 0) {\r\n            tmp = tmp\r\n                // Replace every Unicode escape sequence with the equivalent\r\n                // BMP character or a constant ASCII code point in the case of\r\n                // astral symbols. (See the above note on `astralSubstitute`\r\n                // for more information.)\r\n                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, ($0, $1, $2) => {\r\n                const codePoint = parseInt($1 || $2, 16);\r\n                if (codePoint > 0x10FFFF) {\r\n                    this.throwUnexpectedToken(Messages.InvalidRegExp);\r\n                }\r\n                if (codePoint <= 0xFFFF) {\r\n                    return String.fromCharCode(codePoint);\r\n                }\r\n                return astralSubstitute;\r\n            })\r\n                // Replace each paired surrogate with a single ASCII symbol to\r\n                // avoid throwing on regular expressions that are only valid in\r\n                // combination with the \"u\" flag.\r\n                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\r\n        }\r\n        // First, detect invalid regular expressions.\r\n        try {\r\n            RegExp(tmp);\r\n        }\r\n        catch (e) {\r\n            this.throwUnexpectedToken(Messages.InvalidRegExp);\r\n        }\r\n        // Return a regular expression object for this pattern-flag pair, or\r\n        // `null` in case the current environment doesn't support the flags it\r\n        // uses.\r\n        try {\r\n            return new RegExp(pattern, flags);\r\n        }\r\n        catch (exception) {\r\n            /* istanbul ignore next */\r\n            return null;\r\n        }\r\n    }\r\n    scanRegExpBody() {\r\n        let ch = this.source[this.index];\r\n        assert(ch === '/', 'Regular expression literal must start with a slash');\r\n        let str = this.source[this.index++];\r\n        let classMarker = false;\r\n        let terminated = false;\r\n        while (!this.eof()) {\r\n            ch = this.source[this.index++];\r\n            str += ch;\r\n            if (ch === '\\\\') {\r\n                ch = this.source[this.index++];\r\n                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\r\n                if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                    this.throwUnexpectedToken(Messages.UnterminatedRegExp);\r\n                }\r\n                str += ch;\r\n            }\r\n            else if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                this.throwUnexpectedToken(Messages.UnterminatedRegExp);\r\n            }\r\n            else if (classMarker) {\r\n                if (ch === ']') {\r\n                    classMarker = false;\r\n                }\r\n            }\r\n            else {\r\n                if (ch === '/') {\r\n                    terminated = true;\r\n                    break;\r\n                }\r\n                else if (ch === '[') {\r\n                    classMarker = true;\r\n                }\r\n            }\r\n        }\r\n        if (!terminated) {\r\n            this.throwUnexpectedToken(Messages.UnterminatedRegExp);\r\n        }\r\n        // Exclude leading and trailing slash.\r\n        return str.substr(1, str.length - 2);\r\n    }\r\n    scanRegExpFlags() {\r\n        let str = '';\r\n        let flags = '';\r\n        while (!this.eof()) {\r\n            let ch = this.source[this.index];\r\n            if (!Character.isIdentifierPart(ch.charCodeAt(0))) {\r\n                break;\r\n            }\r\n            ++this.index;\r\n            if (ch === '\\\\' && !this.eof()) {\r\n                ch = this.source[this.index];\r\n                if (ch === 'u') {\r\n                    ++this.index;\r\n                    let restore = this.index;\r\n                    const char = this.scanHexEscape('u');\r\n                    if (char !== null) {\r\n                        flags += char;\r\n                        for (str += '\\\\u'; restore < this.index; ++restore) {\r\n                            str += this.source[restore];\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.index = restore;\r\n                        flags += 'u';\r\n                        str += '\\\\u';\r\n                    }\r\n                    this.tolerateUnexpectedToken();\r\n                }\r\n                else {\r\n                    str += '\\\\';\r\n                    this.tolerateUnexpectedToken();\r\n                }\r\n            }\r\n            else {\r\n                flags += ch;\r\n                str += ch;\r\n            }\r\n        }\r\n        return flags;\r\n    }\r\n    scanRegExp() {\r\n        const start = this.index;\r\n        const pattern = this.scanRegExpBody();\r\n        const flags = this.scanRegExpFlags();\r\n        const value = this.testRegExp(pattern, flags);\r\n        return {\r\n            type: 9 /* Token.RegularExpression */,\r\n            value: '',\r\n            pattern: pattern,\r\n            flags: flags,\r\n            regex: value,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n    lex() {\r\n        if (this.eof()) {\r\n            return {\r\n                type: 2 /* Token.EOF */,\r\n                value: '',\r\n                lineNumber: this.lineNumber,\r\n                lineStart: this.lineStart,\r\n                start: this.index,\r\n                end: this.index\r\n            };\r\n        }\r\n        const cp = this.source.charCodeAt(this.index);\r\n        if (Character.isIdentifierStart(cp)) {\r\n            return this.scanIdentifier();\r\n        }\r\n        // Very common: ( and ) and ;\r\n        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\r\n            return this.scanPunctuator();\r\n        }\r\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\r\n        if (cp === 0x27 || cp === 0x22) {\r\n            return this.scanStringLiteral();\r\n        }\r\n        // Dot (.) U+002E can also start a floating-point number, hence the need\r\n        // to check the next character.\r\n        if (cp === 0x2E) {\r\n            if (Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\r\n                return this.scanNumericLiteral();\r\n            }\r\n            return this.scanPunctuator();\r\n        }\r\n        if (Character.isDecimalDigit(cp)) {\r\n            return this.scanNumericLiteral();\r\n        }\r\n        // Template literals start with ` (U+0060) for template head\r\n        // or } (U+007D) for template middle or template tail.\r\n        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\r\n            return this.scanTemplate();\r\n        }\r\n        // Possible identifier start in a surrogate pair.\r\n        if (cp >= 0xD800 && cp < 0xDFFF) {\r\n            if (Character.isIdentifierStart(this.codePointAt(this.index))) {\r\n                return this.scanIdentifier();\r\n            }\r\n        }\r\n        return this.scanPunctuator();\r\n    }\r\n}\n\nconst TokenName = {};\r\nTokenName[1 /* Token.BooleanLiteral */] = 'Boolean';\r\nTokenName[2 /* Token.EOF */] = '<end>';\r\nTokenName[3 /* Token.Identifier */] = 'Identifier';\r\nTokenName[4 /* Token.Keyword */] = 'Keyword';\r\nTokenName[5 /* Token.NullLiteral */] = 'Null';\r\nTokenName[6 /* Token.NumericLiteral */] = 'Numeric';\r\nTokenName[7 /* Token.Punctuator */] = 'Punctuator';\r\nTokenName[8 /* Token.StringLiteral */] = 'String';\r\nTokenName[9 /* Token.RegularExpression */] = 'RegularExpression';\r\nTokenName[10 /* Token.Template */] = 'Template';\n\nconst ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\r\n/* eslint-disable @typescript-eslint/unbound-method */\r\nclass Parser {\r\n    constructor(code, options = {}, delegate) {\r\n        this.config = {\r\n            range: (typeof options.range === 'boolean') && options.range,\r\n            loc: (typeof options.loc === 'boolean') && options.loc,\r\n            source: null,\r\n            tokens: (typeof options.tokens === 'boolean') && options.tokens,\r\n            comment: (typeof options.comment === 'boolean') && options.comment,\r\n            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\r\n        };\r\n        if (this.config.loc && options.source && options.source !== null) {\r\n            this.config.source = String(options.source);\r\n        }\r\n        this.delegate = delegate;\r\n        this.errorHandler = new ErrorHandler();\r\n        this.errorHandler.tolerant = this.config.tolerant == true;\r\n        this.scanner = new Scanner(code, this.errorHandler);\r\n        this.scanner.trackComment = this.config.comment == true;\r\n        this.operatorPrecedence = {\r\n            ')': 0,\r\n            ';': 0,\r\n            ',': 0,\r\n            '=': 0,\r\n            ']': 0,\r\n            '??': 5,\r\n            '||': 6,\r\n            '&&': 7,\r\n            '|': 8,\r\n            '^': 9,\r\n            '&': 10,\r\n            '==': 11,\r\n            '!=': 11,\r\n            '===': 11,\r\n            '!==': 11,\r\n            '<': 12,\r\n            '>': 12,\r\n            '<=': 12,\r\n            '>=': 12,\r\n            '<<': 13,\r\n            '>>': 13,\r\n            '>>>': 13,\r\n            '+': 14,\r\n            '-': 14,\r\n            '*': 15,\r\n            '/': 15,\r\n            '%': 15\r\n        };\r\n        this.lookahead = {\r\n            type: 2 /* Token.EOF */,\r\n            value: '',\r\n            lineNumber: this.scanner.lineNumber,\r\n            lineStart: 0,\r\n            start: 0,\r\n            end: 0\r\n        };\r\n        this.hasLineTerminator = false;\r\n        this.context = {\r\n            isModule: false,\r\n            isAsync: false,\r\n            allowIn: true,\r\n            allowStrictDirective: true,\r\n            allowSuper: false,\r\n            allowYield: true,\r\n            firstCoverInitializedNameError: null,\r\n            isAssignmentTarget: false,\r\n            isBindingElement: false,\r\n            inConstructor: false,\r\n            inFunctionBody: false,\r\n            inIteration: false,\r\n            inSwitch: false,\r\n            inClassConstructor: false,\r\n            labelSet: {},\r\n            strict: false,\r\n            decorators: null\r\n        };\r\n        this.tokens = [];\r\n        this.startMarker = {\r\n            index: 0,\r\n            line: this.scanner.lineNumber,\r\n            column: 0\r\n        };\r\n        this.lastMarker = {\r\n            index: 0,\r\n            line: this.scanner.lineNumber,\r\n            column: 0\r\n        };\r\n        this.nextToken();\r\n        this.lastMarker = {\r\n            index: this.scanner.index,\r\n            line: this.scanner.lineNumber,\r\n            column: this.scanner.index - this.scanner.lineStart\r\n        };\r\n    }\r\n    throwError(messageFormat, ...values) {\r\n        const args = values.slice();\r\n        const msg = messageFormat.replace(/%(\\d)/g, (whole, idx) => {\r\n            assert(idx < args.length, 'Message reference must be in range');\r\n            return args[idx];\r\n        });\r\n        const index = this.lastMarker.index;\r\n        const line = this.lastMarker.line;\r\n        const column = this.lastMarker.column + 1;\r\n        throw this.errorHandler.createError(index, line, column, msg);\r\n    }\r\n    tolerateError(messageFormat, ...values) {\r\n        const args = values.slice();\r\n        const msg = messageFormat.replace(/%(\\d)/g, (whole, idx) => {\r\n            assert(idx < args.length, 'Message reference must be in range');\r\n            return args[idx];\r\n        });\r\n        const index = this.lastMarker.index;\r\n        const line = this.scanner.lineNumber;\r\n        const column = this.lastMarker.column + 1;\r\n        this.errorHandler.tolerateError(index, line, column, msg);\r\n    }\r\n    // Throw an exception because of the token.\r\n    unexpectedTokenError(token, message) {\r\n        let msg = message || Messages.UnexpectedToken;\r\n        let value;\r\n        if (token) {\r\n            if (!message) {\r\n                msg = (token.type === 2 /* Token.EOF */) ? Messages.UnexpectedEOS :\r\n                    (token.type === 3 /* Token.Identifier */) ? Messages.UnexpectedIdentifier :\r\n                        (token.type === 6 /* Token.NumericLiteral */) ? Messages.UnexpectedNumber :\r\n                            (token.type === 8 /* Token.StringLiteral */) ? Messages.UnexpectedString :\r\n                                (token.type === 10 /* Token.Template */) ? Messages.UnexpectedTemplate :\r\n                                    Messages.UnexpectedToken;\r\n                if (token.type === 4 /* Token.Keyword */) {\r\n                    if (this.scanner.isFutureReservedWord(token.value)) {\r\n                        msg = Messages.UnexpectedReserved;\r\n                    }\r\n                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\r\n                        msg = Messages.StrictReservedWord;\r\n                    }\r\n                }\r\n            }\r\n            value = token.value;\r\n        }\r\n        else {\r\n            value = 'ILLEGAL';\r\n        }\r\n        msg = msg.replace('%0', value);\r\n        if (token && typeof token.lineNumber === 'number') {\r\n            const index = token.start;\r\n            const line = token.lineNumber;\r\n            const lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\r\n            const column = token.start - lastMarkerLineStart + 1;\r\n            return this.errorHandler.createError(index, line, column, msg);\r\n        }\r\n        else {\r\n            const index = this.lastMarker.index;\r\n            const line = this.lastMarker.line;\r\n            const column = this.lastMarker.column + 1;\r\n            return this.errorHandler.createError(index, line, column, msg);\r\n        }\r\n    }\r\n    throwUnexpectedToken(token, message) {\r\n        throw this.unexpectedTokenError(token, message);\r\n    }\r\n    tolerateUnexpectedToken(token, message) {\r\n        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\r\n    }\r\n    tolerateInvalidLoopStatement() {\r\n        if (this.matchKeyword(\"class\") || this.matchKeyword(\"function\")) {\r\n            this.tolerateError(Messages.UnexpectedToken, this.lookahead);\r\n        }\r\n    }\r\n    collectComments() {\r\n        if (!this.config.comment) {\r\n            this.scanner.scanComments();\r\n        }\r\n        else {\r\n            const comments = this.scanner.scanComments();\r\n            if (comments.length > 0 && this.delegate) {\r\n                for (let i = 0; i < comments.length; ++i) {\r\n                    const e = comments[i];\r\n                    const node = {\r\n                        type: e.multiLine ? 'BlockComment' : 'LineComment',\r\n                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\r\n                    };\r\n                    if (this.config.range) {\r\n                        node.range = e.range;\r\n                    }\r\n                    if (this.config.loc) {\r\n                        node.loc = e.loc;\r\n                    }\r\n                    const metadata = {\r\n                        start: {\r\n                            line: e.loc.start.line,\r\n                            column: e.loc.start.column,\r\n                            offset: e.range[0]\r\n                        },\r\n                        end: {\r\n                            line: e.loc.end.line,\r\n                            column: e.loc.end.column,\r\n                            offset: e.range[1]\r\n                        }\r\n                    };\r\n                    this.delegate(node, metadata);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // From internal representation to an external structure\r\n    getTokenRaw(token) {\r\n        return this.scanner.source.slice(token.start, token.end);\r\n    }\r\n    convertToken(token) {\r\n        const t = {\r\n            type: TokenName[token.type],\r\n            value: this.getTokenRaw(token)\r\n        };\r\n        if (this.config.range) {\r\n            t.range = [token.start, token.end];\r\n        }\r\n        if (this.config.loc) {\r\n            t.loc = {\r\n                start: {\r\n                    line: this.startMarker.line,\r\n                    column: this.startMarker.column\r\n                },\r\n                end: {\r\n                    line: this.scanner.lineNumber,\r\n                    column: this.scanner.index - this.scanner.lineStart\r\n                }\r\n            };\r\n        }\r\n        if (token.type === 9 /* Token.RegularExpression */) {\r\n            const pattern = token.pattern;\r\n            const flags = token.flags;\r\n            t.regex = { pattern, flags };\r\n        }\r\n        return t;\r\n    }\r\n    nextToken() {\r\n        const token = this.lookahead;\r\n        this.lastMarker.index = this.scanner.index;\r\n        this.lastMarker.line = this.scanner.lineNumber;\r\n        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        this.collectComments();\r\n        if (this.scanner.index !== this.startMarker.index) {\r\n            this.startMarker.index = this.scanner.index;\r\n            this.startMarker.line = this.scanner.lineNumber;\r\n            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        }\r\n        const next = this.scanner.lex();\r\n        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);\r\n        if (next && this.context.strict && next.type === 3 /* Token.Identifier */) {\r\n            if (this.scanner.isStrictModeReservedWord(next.value)) {\r\n                next.type = 4 /* Token.Keyword */;\r\n            }\r\n        }\r\n        this.lookahead = next;\r\n        if (this.config.tokens && next.type !== 2 /* Token.EOF */) {\r\n            this.tokens.push(this.convertToken(next));\r\n        }\r\n        return token;\r\n    }\r\n    nextRegexToken() {\r\n        this.collectComments();\r\n        const token = this.scanner.scanRegExp();\r\n        if (this.config.tokens) {\r\n            // Pop the previous token, '/' or '/='\r\n            // This is added from the lookahead token.\r\n            this.tokens.pop();\r\n            this.tokens.push(this.convertToken(token));\r\n        }\r\n        // Prime the next lookahead.\r\n        this.lookahead = token;\r\n        this.nextToken();\r\n        return token;\r\n    }\r\n    createNode() {\r\n        return {\r\n            index: this.startMarker.index,\r\n            line: this.startMarker.line,\r\n            column: this.startMarker.column\r\n        };\r\n    }\r\n    startNode(token, lastLineStart = 0) {\r\n        let column = token.start - token.lineStart;\r\n        let line = token.lineNumber;\r\n        if (column < 0) {\r\n            column += lastLineStart;\r\n            line--;\r\n        }\r\n        return {\r\n            index: token.start,\r\n            line: line,\r\n            column: column\r\n        };\r\n    }\r\n    finalize(marker, node) {\r\n        if (this.config.range) {\r\n            node.range = [marker.index, this.lastMarker.index];\r\n        }\r\n        if (this.config.loc) {\r\n            node.loc = {\r\n                start: {\r\n                    line: marker.line,\r\n                    column: marker.column,\r\n                },\r\n                end: {\r\n                    line: this.lastMarker.line,\r\n                    column: this.lastMarker.column\r\n                }\r\n            };\r\n            if (this.config.source) {\r\n                node.loc.source = this.config.source;\r\n            }\r\n        }\r\n        if (this.delegate) {\r\n            const metadata = {\r\n                start: {\r\n                    line: marker.line,\r\n                    column: marker.column,\r\n                    offset: marker.index\r\n                },\r\n                end: {\r\n                    line: this.lastMarker.line,\r\n                    column: this.lastMarker.column,\r\n                    offset: this.lastMarker.index\r\n                }\r\n            };\r\n            this.delegate(node, metadata);\r\n        }\r\n        return node;\r\n    }\r\n    // Expect the next token to match the specified punctuator.\r\n    // If not, an exception will be thrown.\r\n    expect(value) {\r\n        const token = this.nextToken();\r\n        if (token.type !== 7 /* Token.Punctuator */ || token.value !== value) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n    }\r\n    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\r\n    expectCommaSeparator() {\r\n        if (this.config.tolerant) {\r\n            const token = this.lookahead;\r\n            if (token.type === 7 /* Token.Punctuator */ && token.value === ',') {\r\n                this.nextToken();\r\n            }\r\n            else if (token.type === 7 /* Token.Punctuator */ && token.value === ';') {\r\n                this.nextToken();\r\n                this.tolerateUnexpectedToken(token);\r\n            }\r\n            else {\r\n                this.tolerateUnexpectedToken(token, Messages.UnexpectedToken);\r\n            }\r\n        }\r\n        else {\r\n            this.expect(',');\r\n        }\r\n    }\r\n    // Expect the next token to match the specified keyword.\r\n    // If not, an exception will be thrown.\r\n    expectKeyword(keyword) {\r\n        const token = this.nextToken();\r\n        if (token.type !== 4 /* Token.Keyword */ || token.value !== keyword) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n    }\r\n    // Return true if the next token matches the specified punctuator.\r\n    match(value) {\r\n        return this.lookahead.type === 7 /* Token.Punctuator */ && this.lookahead.value === value;\r\n    }\r\n    // Return true if the next token matches the specified keyword\r\n    matchKeyword(keyword) {\r\n        return this.lookahead.type === 4 /* Token.Keyword */ && this.lookahead.value === keyword;\r\n    }\r\n    // Return true if the next token matches the specified contextual keyword\r\n    // (where an identifier is sometimes a keyword depending on the context)\r\n    matchContextualKeyword(keyword) {\r\n        return this.lookahead.type === 3 /* Token.Identifier */ && this.lookahead.value === keyword;\r\n    }\r\n    // Return true if the next token is an assignment operator\r\n    matchAssign() {\r\n        if (this.lookahead.type !== 7 /* Token.Punctuator */) {\r\n            return false;\r\n        }\r\n        const op = this.lookahead.value;\r\n        return op === '=' ||\r\n            op === '*=' ||\r\n            op === '**=' ||\r\n            op === '/=' ||\r\n            op === '%=' ||\r\n            op === '+=' ||\r\n            op === '-=' ||\r\n            op === '<<=' ||\r\n            op === '>>=' ||\r\n            op === '>>>=' ||\r\n            op === '&=' ||\r\n            op === '^=' ||\r\n            op === '|=' ||\r\n            op === '&&=' ||\r\n            op === '||=' ||\r\n            op === '??=';\r\n    }\r\n    // Cover grammar support.\r\n    //\r\n    // When an assignment expression position starts with an left parenthesis, the determination of the type\r\n    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\r\n    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\r\n    //\r\n    // There are three productions that can be parsed in a parentheses pair that needs to be determined\r\n    // after the outermost pair is closed. They are:\r\n    //\r\n    //   1. AssignmentExpression\r\n    //   2. BindingElements\r\n    //   3. AssignmentTargets\r\n    //\r\n    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\r\n    // binding element or assignment target.\r\n    //\r\n    // The three productions have the relationship:\r\n    //\r\n    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\r\n    //\r\n    // with a single exception that CoverInitializedName when used directly in an Expression, generates\r\n    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\r\n    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\r\n    //\r\n    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\r\n    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\r\n    // the CoverInitializedName check is conducted.\r\n    //\r\n    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\r\n    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\r\n    // pattern. The CoverInitializedName check is deferred.\r\n    isolateCoverGrammar(parseFunction) {\r\n        const previousIsBindingElement = this.context.isBindingElement;\r\n        const previousIsAssignmentTarget = this.context.isAssignmentTarget;\r\n        const previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\r\n        this.context.isBindingElement = true;\r\n        this.context.isAssignmentTarget = true;\r\n        this.context.firstCoverInitializedNameError = null;\r\n        const result = parseFunction.call(this);\r\n        if (this.context.firstCoverInitializedNameError !== null) {\r\n            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\r\n        }\r\n        this.context.isBindingElement = previousIsBindingElement;\r\n        this.context.isAssignmentTarget = previousIsAssignmentTarget;\r\n        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\r\n        return result;\r\n    }\r\n    inheritCoverGrammar(parseFunction) {\r\n        const previousIsBindingElement = this.context.isBindingElement;\r\n        const previousIsAssignmentTarget = this.context.isAssignmentTarget;\r\n        const previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\r\n        this.context.isBindingElement = true;\r\n        this.context.isAssignmentTarget = true;\r\n        this.context.firstCoverInitializedNameError = null;\r\n        const result = parseFunction.call(this);\r\n        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\r\n        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\r\n        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\r\n        return result;\r\n    }\r\n    consumeSemicolon() {\r\n        if (this.match(';')) {\r\n            this.nextToken();\r\n        }\r\n        else if (!this.hasLineTerminator) {\r\n            if (this.lookahead.type !== 2 /* Token.EOF */ && !this.match('}')) {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n            this.lastMarker.index = this.startMarker.index;\r\n            this.lastMarker.line = this.startMarker.line;\r\n            this.lastMarker.column = this.startMarker.column;\r\n        }\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-primary-expression\r\n    parsePrimaryExpression() {\r\n        const node = this.createNode();\r\n        let expr;\r\n        let token, raw;\r\n        switch (this.lookahead.type) {\r\n            case 3 /* Token.Identifier */:\r\n                if ((this.context.isModule || this.context.isAsync) && this.lookahead.value === 'await') {\r\n                    this.tolerateUnexpectedToken(this.lookahead);\r\n                }\r\n                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Identifier(this.nextToken().value));\r\n                break;\r\n            case 6 /* Token.NumericLiteral */:\r\n            case 8 /* Token.StringLiteral */:\r\n                if (this.context.strict && this.lookahead.octal) {\r\n                    this.tolerateUnexpectedToken(this.lookahead, Messages.StrictOctalLiteral);\r\n                }\r\n                this.context.isAssignmentTarget = false;\r\n                this.context.isBindingElement = false;\r\n                token = this.nextToken();\r\n                raw = this.getTokenRaw(token);\r\n                if (typeof token.value === 'bigint')\r\n                    expr = this.finalize(node, new BigIntLiteral(token.value, raw, token.value.toString()));\r\n                else\r\n                    expr = this.finalize(node, new Literal(token.value, raw));\r\n                break;\r\n            case 1 /* Token.BooleanLiteral */:\r\n                this.context.isAssignmentTarget = false;\r\n                this.context.isBindingElement = false;\r\n                token = this.nextToken();\r\n                raw = this.getTokenRaw(token);\r\n                expr = this.finalize(node, new Literal(token.value === 'true', raw));\r\n                break;\r\n            case 5 /* Token.NullLiteral */:\r\n                this.context.isAssignmentTarget = false;\r\n                this.context.isBindingElement = false;\r\n                token = this.nextToken();\r\n                raw = this.getTokenRaw(token);\r\n                expr = this.finalize(node, new Literal(null, raw));\r\n                break;\r\n            case 10 /* Token.Template */:\r\n                expr = this.parseTemplateLiteral({ isTagged: false });\r\n                break;\r\n            case 7 /* Token.Punctuator */:\r\n                switch (this.lookahead.value) {\r\n                    case '(':\r\n                        this.context.isBindingElement = false;\r\n                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\r\n                        break;\r\n                    case '[':\r\n                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\r\n                        break;\r\n                    case '{':\r\n                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\r\n                        break;\r\n                    case '/':\r\n                    case '/=':\r\n                        this.context.isAssignmentTarget = false;\r\n                        this.context.isBindingElement = false;\r\n                        this.scanner.index = this.startMarker.index;\r\n                        token = this.nextRegexToken();\r\n                        raw = this.getTokenRaw(token);\r\n                        expr = this.finalize(node, new RegexLiteral(token.regex, raw, token.pattern, token.flags));\r\n                        break;\r\n                    case '#':\r\n                        this.nextToken();\r\n                        expr = this.finalize(node, new PrivateIdentifier(this.nextToken().value));\r\n                        break;\r\n                    case \"@\":\r\n                        let decorators = this.parseDecorators();\r\n                        this.context.decorators = decorators;\r\n                        this.parsePrimaryExpression();\r\n                        this.context.decorators = null;\r\n                        expr = this.finalize(node, new PrivateIdentifier(this.nextToken().value));\r\n                        break;\r\n                    default:\r\n                        expr = this.throwUnexpectedToken(this.nextToken());\r\n                }\r\n                break;\r\n            case 4 /* Token.Keyword */:\r\n                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\r\n                    expr = this.parseIdentifierName();\r\n                }\r\n                else if (!this.context.strict && this.matchKeyword('let')) {\r\n                    expr = this.finalize(node, new Identifier(this.nextToken().value));\r\n                }\r\n                else {\r\n                    this.context.isAssignmentTarget = false;\r\n                    this.context.isBindingElement = false;\r\n                    if (this.matchKeyword('function')) {\r\n                        expr = this.parseFunctionExpression();\r\n                    }\r\n                    else if (this.matchKeyword('this')) {\r\n                        this.nextToken();\r\n                        expr = this.finalize(node, new ThisExpression());\r\n                    }\r\n                    else if (this.matchKeyword('class')) {\r\n                        expr = this.parseClassExpression();\r\n                    }\r\n                    else if (this.matchKeyword('new')) {\r\n                        expr = this.parseNewExpression();\r\n                    }\r\n                    else if (this.matchImportCall()) {\r\n                        expr = this.parseImportCall();\r\n                    }\r\n                    else if (this.matchImportMeta()) {\r\n                        if (!this.context.isModule) {\r\n                            this.tolerateUnexpectedToken(this.lookahead, Messages.CannotUseImportMetaOutsideAModule);\r\n                        }\r\n                        expr = this.parseImportMeta();\r\n                    }\r\n                    else {\r\n                        expr = this.throwUnexpectedToken(this.nextToken());\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                expr = this.throwUnexpectedToken(this.nextToken());\r\n        }\r\n        return expr;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-array-initializer\r\n    parseSpreadElement() {\r\n        const node = this.createNode();\r\n        this.expect('...');\r\n        const arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n        return this.finalize(node, new SpreadElement(arg));\r\n    }\r\n    parseArrayInitializer() {\r\n        const node = this.createNode();\r\n        const elements = [];\r\n        this.expect('[');\r\n        while (!this.match(']')) {\r\n            if (this.match(',')) {\r\n                this.nextToken();\r\n                elements.push(null);\r\n            }\r\n            else if (this.match('...')) {\r\n                const element = this.parseSpreadElement();\r\n                if (!this.match(']')) {\r\n                    this.context.isAssignmentTarget = false;\r\n                    this.context.isBindingElement = false;\r\n                    this.expect(',');\r\n                }\r\n                elements.push(element);\r\n            }\r\n            else {\r\n                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\r\n                if (!this.match(']')) {\r\n                    this.expect(',');\r\n                }\r\n            }\r\n        }\r\n        this.expect(']');\r\n        return this.finalize(node, new ArrayExpression(elements));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-object-initializer\r\n    parsePropertyMethod(params) {\r\n        this.context.isAssignmentTarget = false;\r\n        this.context.isBindingElement = false;\r\n        const previousStrict = this.context.strict;\r\n        const previousAllowStrictDirective = this.context.allowStrictDirective;\r\n        this.context.allowStrictDirective = params.simple;\r\n        const body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\r\n        if (this.context.strict && params.firstRestricted) {\r\n            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\r\n        }\r\n        if (this.context.strict && params.stricted) {\r\n            this.tolerateUnexpectedToken(params.stricted, params.message);\r\n        }\r\n        this.context.strict = previousStrict;\r\n        this.context.allowStrictDirective = previousAllowStrictDirective;\r\n        return body;\r\n    }\r\n    parsePropertyMethodFunction(isGenerator) {\r\n        const node = this.createNode();\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.allowYield = true;\r\n        const params = this.parseFormalParameters();\r\n        const method = this.parsePropertyMethod(params);\r\n        this.context.allowYield = previousAllowYield;\r\n        return this.finalize(node, new FunctionExpression(null, params.params, method, isGenerator, false));\r\n    }\r\n    parsePropertyMethodAsyncFunction(isGenerator) {\r\n        const node = this.createNode();\r\n        const previousAllowYield = this.context.allowYield;\r\n        const previousIsAsync = this.context.isAsync;\r\n        this.context.allowYield = false;\r\n        this.context.isAsync = true;\r\n        const params = this.parseFormalParameters();\r\n        const method = this.parsePropertyMethod(params);\r\n        this.context.allowYield = previousAllowYield;\r\n        this.context.isAsync = previousIsAsync;\r\n        return this.finalize(node, new FunctionExpression(null, params.params, method, isGenerator, true));\r\n    }\r\n    parseObjectPropertyKey(isPrivate = false) {\r\n        const node = this.createNode();\r\n        const token = this.nextToken();\r\n        let key;\r\n        switch (token.type) {\r\n            case 8 /* Token.StringLiteral */:\r\n            case 6 /* Token.NumericLiteral */:\r\n                if (this.context.strict && token.octal) {\r\n                    this.tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);\r\n                }\r\n                const raw = this.getTokenRaw(token);\r\n                if (typeof token.value === 'bigint')\r\n                    key = this.finalize(node, new BigIntLiteral(token.value, raw, token.value.toString()));\r\n                else\r\n                    key = this.finalize(node, new Literal(token.value, raw));\r\n                break;\r\n            case 3 /* Token.Identifier */:\r\n            case 1 /* Token.BooleanLiteral */:\r\n            case 5 /* Token.NullLiteral */:\r\n            case 4 /* Token.Keyword */:\r\n                key = this.finalize(node, isPrivate ? new PrivateIdentifier(token.value) : new Identifier(token.value));\r\n                break;\r\n            case 7 /* Token.Punctuator */:\r\n                if (token.value === '[') {\r\n                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                    this.expect(']');\r\n                }\r\n                else {\r\n                    key = this.throwUnexpectedToken(token);\r\n                }\r\n                break;\r\n            default:\r\n                key = this.throwUnexpectedToken(token);\r\n        }\r\n        return key;\r\n    }\r\n    isPropertyKey(key, value) {\r\n        return (key.type === Syntax.Identifier && key.name === value) ||\r\n            (key.type === Syntax.Literal && key.value === value);\r\n    }\r\n    parseObjectProperty(hasProto) {\r\n        const node = this.createNode();\r\n        const token = this.lookahead;\r\n        let kind;\r\n        let key = null;\r\n        let value = null;\r\n        let computed = false;\r\n        let method = false;\r\n        let shorthand = false;\r\n        let isAsync = false;\r\n        let isGenerator = false;\r\n        if (token.type === 3 /* Token.Identifier */) {\r\n            const id = token.value;\r\n            this.nextToken();\r\n            computed = this.match('[');\r\n            isAsync = !this.hasLineTerminator && (id === 'async') &&\r\n                !this.match(':') && !this.match('(') && !this.match(',');\r\n            isGenerator = this.match('*');\r\n            if (isGenerator) {\r\n                this.nextToken();\r\n            }\r\n            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Identifier(id));\r\n        }\r\n        else if (this.match('*')) {\r\n            this.nextToken();\r\n        }\r\n        else {\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n        }\r\n        const lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\r\n        if (token.type === 3 /* Token.Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\r\n            kind = 'get';\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            this.context.allowYield = false;\r\n            value = this.parseGetterMethod();\r\n        }\r\n        else if (token.type === 3 /* Token.Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\r\n            kind = 'set';\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            value = this.parseSetterMethod();\r\n        }\r\n        else if (token.type === 7 /* Token.Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\r\n            kind = 'init';\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            value = this.parseGeneratorMethod(false);\r\n            method = true;\r\n        }\r\n        else {\r\n            if (!key) {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n            kind = 'init';\r\n            if (this.match(':') && !isAsync) {\r\n                if (!computed && this.isPropertyKey(key, '__proto__')) {\r\n                    if (hasProto.value) {\r\n                        this.tolerateError(Messages.DuplicateProtoProperty);\r\n                    }\r\n                    hasProto.value = true;\r\n                }\r\n                this.nextToken();\r\n                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n            }\r\n            else if (this.match('(')) {\r\n                value = isAsync ? this.parsePropertyMethodAsyncFunction(isGenerator) : this.parsePropertyMethodFunction(isGenerator);\r\n                method = true;\r\n            }\r\n            else if (token.type === 3 /* Token.Identifier */) {\r\n                const id = this.finalize(node, new Identifier(token.value));\r\n                if (this.match('=')) {\r\n                    this.context.firstCoverInitializedNameError = this.lookahead;\r\n                    this.nextToken();\r\n                    shorthand = true;\r\n                    const init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                    value = this.finalize(node, new AssignmentPattern(id, init));\r\n                }\r\n                else {\r\n                    shorthand = true;\r\n                    value = id;\r\n                }\r\n            }\r\n            else {\r\n                this.throwUnexpectedToken(this.nextToken());\r\n            }\r\n        }\r\n        return this.finalize(node, new Property(kind, key, computed, value, method, shorthand));\r\n    }\r\n    parseObjectInitializer() {\r\n        const node = this.createNode();\r\n        this.expect('{');\r\n        const properties = [];\r\n        const hasProto = { value: false };\r\n        while (!this.match('}')) {\r\n            const property = this.match('...') ? this.parseSpreadElement() : this.parseObjectProperty(hasProto);\r\n            properties.push(property);\r\n            if (!this.match('}') && (!property.method || this.match(','))) {\r\n                this.expectCommaSeparator();\r\n            }\r\n        }\r\n        this.expect('}');\r\n        return this.finalize(node, new ObjectExpression(properties));\r\n    }\r\n    // https://tc39.es/proposal-template-literal-revision/#sec-static-semantics-template-early-errors\r\n    throwTemplateLiteralEarlyErrors(token) {\r\n        switch (token.notEscapeSequenceHead) {\r\n            case 'u':\r\n                return this.throwUnexpectedToken(token, Messages.InvalidUnicodeEscapeSequence);\r\n            case 'x':\r\n                return this.throwUnexpectedToken(token, Messages.InvalidHexEscapeSequence);\r\n            case '8':\r\n            case '9':\r\n                return this.throwUnexpectedToken(token, Messages.TemplateEscape89);\r\n            default: // For 0-7\r\n                return this.throwUnexpectedToken(token, Messages.TemplateOctalLiteral);\r\n        }\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-template-literals\r\n    parseTemplateHead(options) {\r\n        assert(this.lookahead.head, 'Template literal must start with a template head');\r\n        const node = this.createNode();\r\n        const token = this.nextToken();\r\n        if (!options.isTagged && token.notEscapeSequenceHead !== null) {\r\n            this.throwTemplateLiteralEarlyErrors(token);\r\n        }\r\n        const raw = token.value;\r\n        const cooked = token.cooked;\r\n        return this.finalize(node, new TemplateElement({ raw, cooked }, token.tail));\r\n    }\r\n    parseTemplateElement(options) {\r\n        if (this.lookahead.type !== 10 /* Token.Template */) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n        const node = this.createNode();\r\n        const token = this.nextToken();\r\n        if (!options.isTagged && token.notEscapeSequenceHead !== null) {\r\n            this.throwTemplateLiteralEarlyErrors(token);\r\n        }\r\n        const raw = token.value;\r\n        const cooked = token.cooked;\r\n        return this.finalize(node, new TemplateElement({ raw, cooked }, token.tail));\r\n    }\r\n    parseTemplateLiteral(options) {\r\n        const node = this.createNode();\r\n        const expressions = [];\r\n        const quasis = [];\r\n        let quasi = this.parseTemplateHead(options);\r\n        quasis.push(quasi);\r\n        while (!quasi.tail) {\r\n            expressions.push(this.parseExpression());\r\n            quasi = this.parseTemplateElement(options);\r\n            quasis.push(quasi);\r\n        }\r\n        return this.finalize(node, new TemplateLiteral(quasis, expressions));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-grouping-operator\r\n    reinterpretExpressionAsPattern(expr) {\r\n        switch (expr.type) {\r\n            case Syntax.Identifier:\r\n            case Syntax.MemberExpression:\r\n            case Syntax.RestElement:\r\n            case Syntax.AssignmentPattern:\r\n                break;\r\n            case Syntax.SpreadElement:\r\n                expr.type = Syntax.RestElement;\r\n                this.reinterpretExpressionAsPattern(expr.argument);\r\n                break;\r\n            case Syntax.ArrayExpression:\r\n                expr.type = Syntax.ArrayPattern;\r\n                for (let i = 0; i < expr.elements.length; i++) {\r\n                    if (expr.elements[i] !== null) {\r\n                        this.reinterpretExpressionAsPattern(expr.elements[i]);\r\n                    }\r\n                }\r\n                break;\r\n            case Syntax.ObjectExpression:\r\n                expr.type = Syntax.ObjectPattern;\r\n                for (let i = 0; i < expr.properties.length; i++) {\r\n                    const property = expr.properties[i];\r\n                    this.reinterpretExpressionAsPattern(property.type === Syntax.SpreadElement ? property : property.value);\r\n                }\r\n                break;\r\n            case Syntax.AssignmentExpression:\r\n                expr.type = Syntax.AssignmentPattern;\r\n                delete expr.operator;\r\n                this.reinterpretExpressionAsPattern(expr.left);\r\n                break;\r\n        }\r\n    }\r\n    parseGroupExpression() {\r\n        let expr;\r\n        this.expect('(');\r\n        if (this.match(')')) {\r\n            this.nextToken();\r\n            if (!this.match('=>')) {\r\n                this.expect('=>');\r\n            }\r\n            expr = {\r\n                type: ArrowParameterPlaceHolder,\r\n                params: [],\r\n                async: false\r\n            };\r\n        }\r\n        else {\r\n            const startToken = this.lookahead;\r\n            const params = [];\r\n            if (this.match('...')) {\r\n                expr = this.parseRestElement(params);\r\n                this.expect(')');\r\n                if (!this.match('=>')) {\r\n                    this.expect('=>');\r\n                }\r\n                expr = {\r\n                    type: ArrowParameterPlaceHolder,\r\n                    params: [expr],\r\n                    async: false\r\n                };\r\n            }\r\n            else {\r\n                let arrow = false;\r\n                this.context.isBindingElement = true;\r\n                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n                if (this.match(',')) {\r\n                    const expressions = [];\r\n                    this.context.isAssignmentTarget = false;\r\n                    expressions.push(expr);\r\n                    while (this.lookahead.type !== 2 /* Token.EOF */) {\r\n                        if (!this.match(',')) {\r\n                            break;\r\n                        }\r\n                        this.nextToken();\r\n                        if (this.match(')')) {\r\n                            this.nextToken();\r\n                            for (let i = 0; i < expressions.length; i++) {\r\n                                this.reinterpretExpressionAsPattern(expressions[i]);\r\n                            }\r\n                            arrow = true;\r\n                            expr = {\r\n                                type: ArrowParameterPlaceHolder,\r\n                                params: expressions,\r\n                                async: false\r\n                            };\r\n                        }\r\n                        else if (this.match('...')) {\r\n                            if (!this.context.isBindingElement) {\r\n                                this.throwUnexpectedToken(this.lookahead);\r\n                            }\r\n                            expressions.push(this.parseRestElement(params));\r\n                            this.expect(')');\r\n                            if (!this.match('=>')) {\r\n                                this.expect('=>');\r\n                            }\r\n                            this.context.isBindingElement = false;\r\n                            for (let i = 0; i < expressions.length; i++) {\r\n                                this.reinterpretExpressionAsPattern(expressions[i]);\r\n                            }\r\n                            arrow = true;\r\n                            expr = {\r\n                                type: ArrowParameterPlaceHolder,\r\n                                params: expressions,\r\n                                async: false\r\n                            };\r\n                        }\r\n                        else {\r\n                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\r\n                        }\r\n                        if (arrow) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!arrow) {\r\n                        expr = this.finalize(this.startNode(startToken), new SequenceExpression(expressions));\r\n                    }\r\n                }\r\n                if (!arrow) {\r\n                    this.expect(')');\r\n                    if (this.match('=>')) {\r\n                        if (expr.type === Syntax.Identifier && expr.name === 'yield') {\r\n                            arrow = true;\r\n                            expr = {\r\n                                type: ArrowParameterPlaceHolder,\r\n                                params: [expr],\r\n                                async: false\r\n                            };\r\n                        }\r\n                        if (!arrow) {\r\n                            if (!this.context.isBindingElement) {\r\n                                this.throwUnexpectedToken(this.lookahead);\r\n                            }\r\n                            if (expr.type === Syntax.SequenceExpression) {\r\n                                for (let i = 0; i < expr.expressions.length; i++) {\r\n                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\r\n                                }\r\n                            }\r\n                            else {\r\n                                this.reinterpretExpressionAsPattern(expr);\r\n                            }\r\n                            const parameters = (expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]);\r\n                            expr = {\r\n                                type: ArrowParameterPlaceHolder,\r\n                                params: parameters,\r\n                                async: false\r\n                            };\r\n                        }\r\n                    }\r\n                    this.context.isBindingElement = false;\r\n                }\r\n            }\r\n        }\r\n        return expr;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\r\n    parseArguments() {\r\n        this.expect('(');\r\n        const args = [];\r\n        if (!this.match(')')) {\r\n            while (true) {\r\n                const expr = this.match('...') ? this.parseSpreadElement() :\r\n                    this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                args.push(expr);\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n                this.expectCommaSeparator();\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.expect(')');\r\n        return args;\r\n    }\r\n    isIdentifierName(token) {\r\n        return token.type === 3 /* Token.Identifier */ ||\r\n            token.type === 4 /* Token.Keyword */ ||\r\n            token.type === 1 /* Token.BooleanLiteral */ ||\r\n            token.type === 5 /* Token.NullLiteral */;\r\n    }\r\n    parseIdentifierName(allowPrivateField = false) {\r\n        let isPrivateField = false;\r\n        let node = this.createNode();\r\n        let token = this.nextToken();\r\n        if (token.value === '#' && allowPrivateField) {\r\n            token = this.nextToken();\r\n            isPrivateField = true;\r\n        }\r\n        if (!this.isIdentifierName(token)) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n        return this.finalize(node, isPrivateField ? new PrivateIdentifier(token.value) : new Identifier(token.value));\r\n    }\r\n    parseNewExpression() {\r\n        const node = this.createNode();\r\n        const id = this.parseIdentifierName();\r\n        assert(id.name === 'new', 'New expression must start with `new`');\r\n        let expr;\r\n        if (this.match('.')) {\r\n            this.nextToken();\r\n            if (this.lookahead.type === 3 /* Token.Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {\r\n                const property = this.parseIdentifierName();\r\n                expr = new MetaProperty(id, property);\r\n            }\r\n            else {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n        }\r\n        else if (this.matchKeyword('import')) {\r\n            this.throwUnexpectedToken(this.lookahead);\r\n        }\r\n        else {\r\n            const callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\r\n            const args = this.match('(') ? this.parseArguments() : [];\r\n            expr = new NewExpression(callee, args);\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n        }\r\n        return this.finalize(node, expr);\r\n    }\r\n    parseAsyncArgument() {\r\n        const arg = this.parseAssignmentExpression();\r\n        this.context.firstCoverInitializedNameError = null;\r\n        return arg;\r\n    }\r\n    parseAsyncArguments() {\r\n        this.expect('(');\r\n        const args = [];\r\n        if (!this.match(')')) {\r\n            while (true) {\r\n                const expr = this.match('...') ? this.parseSpreadElement() :\r\n                    this.isolateCoverGrammar(this.parseAsyncArgument);\r\n                args.push(expr);\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n                this.expectCommaSeparator();\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.expect(')');\r\n        return args;\r\n    }\r\n    matchImportCall() {\r\n        let match = this.matchKeyword('import');\r\n        if (match) {\r\n            const state = this.scanner.saveState();\r\n            this.scanner.scanComments();\r\n            const next = this.scanner.lex();\r\n            this.scanner.restoreState(state);\r\n            match = (next.type === 7 /* Token.Punctuator */) && (next.value === '(');\r\n        }\r\n        return match;\r\n    }\r\n    parseImportCall() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('import');\r\n        this.expect(\"(\");\r\n        const source = this.parseAssignmentExpression();\r\n        let attributes = null;\r\n        if (this.match(\",\")) {\r\n            this.nextToken();\r\n            attributes = this.parseObjectInitializer();\r\n        }\r\n        if (!this.match(\")\") && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n        }\r\n        else {\r\n            this.expect(\")\");\r\n            if (this.match(\";\")) {\r\n                this.nextToken();\r\n            }\r\n        }\r\n        return this.finalize(node, new ImportExpression(source, attributes));\r\n    }\r\n    matchImportMeta() {\r\n        let match = this.matchKeyword('import');\r\n        if (match) {\r\n            const state = this.scanner.saveState();\r\n            this.scanner.scanComments();\r\n            const dot = this.scanner.lex();\r\n            if ((dot.type === 7 /* Token.Punctuator */) && (dot.value === '.')) {\r\n                this.scanner.scanComments();\r\n                const meta = this.scanner.lex();\r\n                match = (meta.type === 3 /* Token.Identifier */) && (meta.value === 'meta');\r\n                if (match) {\r\n                    if (meta.end - meta.start !== 'meta'.length) {\r\n                        this.tolerateUnexpectedToken(meta, Messages.InvalidEscapedReservedWord);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                match = false;\r\n            }\r\n            this.scanner.restoreState(state);\r\n        }\r\n        return match;\r\n    }\r\n    parseImportMeta() {\r\n        const node = this.createNode();\r\n        const id = this.parseIdentifierName(); // 'import', already ensured by matchImportMeta\r\n        this.expect('.');\r\n        const property = this.parseIdentifierName(); // 'meta', already ensured by matchImportMeta\r\n        this.context.isAssignmentTarget = false;\r\n        return this.finalize(node, new MetaProperty(id, property));\r\n    }\r\n    parseLeftHandSideExpressionAllowCall() {\r\n        const startToken = this.lookahead;\r\n        const maybeAsync = this.matchContextualKeyword('async');\r\n        const previousAllowIn = this.context.allowIn;\r\n        this.context.allowIn = true;\r\n        let expr;\r\n        const isSuper = this.matchKeyword('super');\r\n        if (isSuper && this.context.inFunctionBody) {\r\n            expr = this.createNode();\r\n            this.nextToken();\r\n            expr = this.finalize(expr, new Super());\r\n            if (!this.match('(') && !this.match('.') && !this.match('[')) {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n        }\r\n        else {\r\n            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\r\n        }\r\n        if (isSuper && this.match('(') && (!this.context.inClassConstructor || !this.context.allowSuper)) {\r\n            this.tolerateError(Messages.UnexpectedSuper);\r\n        }\r\n        let hasOptional = false;\r\n        while (true) {\r\n            let optional = false;\r\n            if (this.match('?.')) {\r\n                optional = true;\r\n                hasOptional = true;\r\n                this.expect('?.');\r\n            }\r\n            if (this.match('(')) {\r\n                const asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = false;\r\n                const args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\r\n                if (expr.type === Syntax.ImportExpression && args.length !== 1) {\r\n                    this.tolerateError(Messages.BadImportCallArity);\r\n                }\r\n                expr = this.finalize(this.startNode(startToken), new CallExpression(expr, args, optional));\r\n                if (asyncArrow && this.match('=>')) {\r\n                    for (let i = 0; i < args.length; ++i) {\r\n                        this.reinterpretExpressionAsPattern(args[i]);\r\n                    }\r\n                    expr = {\r\n                        type: ArrowParameterPlaceHolder,\r\n                        params: args,\r\n                        async: true\r\n                    };\r\n                }\r\n            }\r\n            else if (this.match('[')) {\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = !optional;\r\n                this.expect('[');\r\n                const property = this.isolateCoverGrammar(this.parseExpression);\r\n                this.expect(']');\r\n                expr = this.finalize(this.startNode(startToken), new MemberExpression(true, expr, property, optional));\r\n            }\r\n            else if (this.lookahead.type === 10 /* Token.Template */ && this.lookahead.head) {\r\n                // Optional template literal is not included in the spec.\r\n                // https://github.com/tc39/proposal-optional-chaining/issues/54\r\n                if (optional) {\r\n                    this.throwUnexpectedToken(this.lookahead);\r\n                }\r\n                if (hasOptional) {\r\n                    this.throwError(Messages.InvalidTaggedTemplateOnOptionalChain);\r\n                }\r\n                const quasi = this.parseTemplateLiteral({ isTagged: true });\r\n                expr = this.finalize(this.startNode(startToken), new TaggedTemplateExpression(expr, quasi));\r\n            }\r\n            else if (this.match('.') || optional) {\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = !optional;\r\n                if (!optional) {\r\n                    this.expect('.');\r\n                }\r\n                const property = this.parseIdentifierName(true);\r\n                expr = this.finalize(this.startNode(startToken), new MemberExpression(false, expr, property, optional));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        this.context.allowIn = previousAllowIn;\r\n        if (hasOptional) {\r\n            return new ChainExpression(expr);\r\n        }\r\n        return expr;\r\n    }\r\n    parseSuper() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('super');\r\n        if (!this.match('[') && !this.match('.')) {\r\n            this.throwUnexpectedToken(this.lookahead);\r\n        }\r\n        return this.finalize(node, new Super());\r\n    }\r\n    parseLeftHandSideExpression() {\r\n        assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\r\n        const node = this.startNode(this.lookahead);\r\n        let expr = (this.matchKeyword('super') && this.context.inFunctionBody)\r\n            ? this.parseSuper()\r\n            : this.inheritCoverGrammar(this.matchKeyword('new')\r\n                ? this.parseNewExpression\r\n                : this.parsePrimaryExpression);\r\n        let hasOptional = false;\r\n        while (true) {\r\n            let optional = false;\r\n            if (this.match('?.')) {\r\n                optional = true;\r\n                hasOptional = true;\r\n                this.expect('?.');\r\n            }\r\n            if (this.match('[')) {\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = !optional;\r\n                this.expect('[');\r\n                const property = this.isolateCoverGrammar(this.parseExpression);\r\n                this.expect(']');\r\n                expr = this.finalize(node, new MemberExpression(true, expr, property, optional));\r\n            }\r\n            else if (this.lookahead.type === 10 /* Token.Template */ && this.lookahead.head) {\r\n                // Optional template literal is not included in the spec.\r\n                // https://github.com/tc39/proposal-optional-chaining/issues/54\r\n                if (optional) {\r\n                    this.throwUnexpectedToken(this.lookahead);\r\n                }\r\n                if (hasOptional) {\r\n                    this.throwError(Messages.InvalidTaggedTemplateOnOptionalChain);\r\n                }\r\n                const quasi = this.parseTemplateLiteral({ isTagged: true });\r\n                expr = this.finalize(node, new TaggedTemplateExpression(expr, quasi));\r\n            }\r\n            else if (this.match('.') || optional) {\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = !optional;\r\n                if (!optional) {\r\n                    this.expect('.');\r\n                }\r\n                const property = this.parseIdentifierName();\r\n                expr = this.finalize(node, new MemberExpression(false, expr, property, optional));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (hasOptional) {\r\n            return new ChainExpression(expr);\r\n        }\r\n        return expr;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-update-expressions\r\n    parseUpdateExpression() {\r\n        let expr;\r\n        const startToken = this.lookahead;\r\n        if (this.match('++') || this.match('--')) {\r\n            const node = this.startNode(startToken);\r\n            const token = this.nextToken();\r\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\r\n            if (this.context.strict && expr.type === Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\r\n                this.tolerateError(Messages.StrictLHSPrefix);\r\n            }\r\n            if (!this.context.isAssignmentTarget) {\r\n                this.tolerateError(Messages.InvalidLHSInAssignment);\r\n            }\r\n            const prefix = true;\r\n            expr = this.finalize(node, new UpdateExpression(token.value, expr, prefix));\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n        }\r\n        else {\r\n            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Token.Punctuator */) {\r\n                if (this.match('++') || this.match('--')) {\r\n                    if (this.context.strict && expr.type === Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\r\n                        this.tolerateError(Messages.StrictLHSPostfix);\r\n                    }\r\n                    if (!this.context.isAssignmentTarget) {\r\n                        this.tolerateError(Messages.InvalidLHSInAssignment);\r\n                    }\r\n                    this.context.isAssignmentTarget = false;\r\n                    this.context.isBindingElement = false;\r\n                    const operator = this.nextToken().value;\r\n                    const prefix = false;\r\n                    expr = this.finalize(this.startNode(startToken), new UpdateExpression(operator, expr, prefix));\r\n                }\r\n            }\r\n        }\r\n        return expr;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-unary-operators\r\n    parseAwaitExpression() {\r\n        const node = this.createNode();\r\n        this.nextToken();\r\n        const argument = this.parseUnaryExpression();\r\n        return this.finalize(node, new AwaitExpression(argument));\r\n    }\r\n    parseUnaryExpression() {\r\n        let expr;\r\n        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\r\n            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\r\n            const node = this.startNode(this.lookahead);\r\n            const token = this.nextToken();\r\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\r\n            expr = this.finalize(node, new UnaryExpression(token.value, expr));\r\n            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\r\n                this.tolerateError(Messages.StrictDelete);\r\n            }\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n        }\r\n        else if (((this.context.isModule && !this.context.inFunctionBody) || this.context.isAsync) && this.matchContextualKeyword('await')) {\r\n            expr = this.parseAwaitExpression();\r\n        }\r\n        else {\r\n            expr = this.parseUpdateExpression();\r\n        }\r\n        return expr;\r\n    }\r\n    parseExponentiationExpression() {\r\n        const startToken = this.lookahead;\r\n        // -1 ** 2 is not accepted, but (-1) ** 2\r\n        // However, the AST for both cases is identical\r\n        // We distinguish the two cases by explicitly checking for a parenthesis.\r\n        const isLeftParenthesized = this.match('(');\r\n        let expr = this.inheritCoverGrammar(this.parseUnaryExpression);\r\n        const exponentAllowed = expr.type !== Syntax.UnaryExpression || isLeftParenthesized;\r\n        if (exponentAllowed && this.match('**')) {\r\n            this.nextToken();\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n            const left = expr;\r\n            const right = this.isolateCoverGrammar(this.parseExponentiationExpression);\r\n            expr = this.finalize(this.startNode(startToken), new BinaryExpression('**', left, right));\r\n        }\r\n        return expr;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-exp-operator\r\n    // https://tc39.github.io/ecma262/#sec-multiplicative-operators\r\n    // https://tc39.github.io/ecma262/#sec-additive-operators\r\n    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\r\n    // https://tc39.github.io/ecma262/#sec-relational-operators\r\n    // https://tc39.github.io/ecma262/#sec-equality-operators\r\n    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\r\n    // https://tc39.github.io/ecma262/#sec-binary-logical-operators\r\n    binaryPrecedence(token) {\r\n        const op = token.value;\r\n        let precedence;\r\n        if (token.type === 7 /* Token.Punctuator */) {\r\n            precedence = this.operatorPrecedence[op] || 0;\r\n        }\r\n        else if (token.type === 4 /* Token.Keyword */) {\r\n            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 12 : 0;\r\n        }\r\n        else {\r\n            precedence = 0;\r\n        }\r\n        return precedence;\r\n    }\r\n    parseBinaryExpression() {\r\n        const startToken = this.lookahead;\r\n        let expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\r\n        let allowAndOr = true;\r\n        let allowNullishCoalescing = true;\r\n        const updateNullishCoalescingRestrictions = (token) => {\r\n            if (token.value === '&&' || token.value === '||') {\r\n                allowNullishCoalescing = false;\r\n            }\r\n            if (token.value === '??') {\r\n                allowAndOr = false;\r\n            }\r\n        };\r\n        const token = this.lookahead;\r\n        let prec = this.binaryPrecedence(token);\r\n        if (prec > 0) {\r\n            updateNullishCoalescingRestrictions(token);\r\n            this.nextToken();\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n            const markers = [startToken, this.lookahead];\r\n            let left = expr;\r\n            let right = this.isolateCoverGrammar(this.parseExponentiationExpression);\r\n            const stack = [left, token.value, right];\r\n            const precedences = [prec];\r\n            while (true) {\r\n                prec = this.binaryPrecedence(this.lookahead);\r\n                if (prec <= 0) {\r\n                    break;\r\n                }\r\n                if ((!allowAndOr && (this.lookahead.value === '&&' || this.lookahead.value === '||')) ||\r\n                    (!allowNullishCoalescing && this.lookahead.value === '??')) {\r\n                    this.throwUnexpectedToken(this.lookahead);\r\n                }\r\n                updateNullishCoalescingRestrictions(this.lookahead);\r\n                // Reduce: make a binary expression from the three topmost entries.\r\n                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {\r\n                    right = stack.pop();\r\n                    const operator = stack.pop();\r\n                    precedences.pop();\r\n                    left = stack.pop();\r\n                    markers.pop();\r\n                    const marker = markers[markers.length - 1];\r\n                    const node = this.startNode(marker, marker.lineStart);\r\n                    const logical = (operator === '||' || operator === '&&' || operator === '??');\r\n                    stack.push(this.finalize(node, logical ? new LogicalExpression(operator, left, right) : new BinaryExpression(operator, left, right)));\r\n                }\r\n                // Shift.\r\n                stack.push(this.nextToken().value);\r\n                precedences.push(prec);\r\n                markers.push(this.lookahead);\r\n                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\r\n            }\r\n            // Final reduce to clean-up the stack.\r\n            let i = stack.length - 1;\r\n            expr = stack[i];\r\n            let lastMarker = markers.pop();\r\n            while (i > 1) {\r\n                const marker = markers.pop();\r\n                const lastLineStart = lastMarker && lastMarker.lineStart;\r\n                const node = this.startNode(marker, lastLineStart);\r\n                const operator = stack[i - 1];\r\n                const logical = (operator === '||' || operator === '&&' || operator === '??');\r\n                expr = this.finalize(node, logical ? new LogicalExpression(operator, stack[i - 2], expr) : new BinaryExpression(operator, stack[i - 2], expr));\r\n                i -= 2;\r\n                lastMarker = marker;\r\n            }\r\n        }\r\n        return expr;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-conditional-operator\r\n    parseConditionalExpression() {\r\n        const startToken = this.lookahead;\r\n        let expr = this.inheritCoverGrammar(this.parseBinaryExpression);\r\n        if (this.match('?')) {\r\n            this.nextToken();\r\n            const previousAllowIn = this.context.allowIn;\r\n            this.context.allowIn = true;\r\n            const consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n            this.context.allowIn = previousAllowIn;\r\n            this.expect(':');\r\n            const alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n            expr = this.finalize(this.startNode(startToken), new ConditionalExpression(expr, consequent, alternate));\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n        }\r\n        return expr;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-assignment-operators\r\n    checkPatternParam(options, param) {\r\n        switch (param.type) {\r\n            case Syntax.Identifier:\r\n                this.validateParam(options, param, param.name);\r\n                break;\r\n            case Syntax.RestElement:\r\n                this.checkPatternParam(options, param.argument);\r\n                break;\r\n            case Syntax.AssignmentPattern:\r\n                this.checkPatternParam(options, param.left);\r\n                break;\r\n            case Syntax.ArrayPattern:\r\n                for (let i = 0; i < param.elements.length; i++) {\r\n                    if (param.elements[i] !== null) {\r\n                        this.checkPatternParam(options, param.elements[i]);\r\n                    }\r\n                }\r\n                break;\r\n            case Syntax.ObjectPattern:\r\n                for (let i = 0; i < param.properties.length; i++) {\r\n                    const property = param.properties[i];\r\n                    this.checkPatternParam(options, (property.type === Syntax.RestElement) ? property : property.value);\r\n                }\r\n                break;\r\n        }\r\n        options.simple = options.simple && (param instanceof Identifier);\r\n    }\r\n    reinterpretAsCoverFormalsList(expr) {\r\n        let params = [expr];\r\n        const options = {\r\n            simple: true,\r\n            paramSet: {}\r\n        };\r\n        let asyncArrow = false;\r\n        switch (expr.type) {\r\n            case Syntax.Identifier:\r\n                break;\r\n            case ArrowParameterPlaceHolder:\r\n                params = expr.params;\r\n                asyncArrow = expr.async;\r\n                break;\r\n            default:\r\n                return null;\r\n        }\r\n        for (let i = 0; i < params.length; ++i) {\r\n            const param = params[i];\r\n            if (param.type === Syntax.AssignmentPattern) {\r\n                if (param.right.type === Syntax.YieldExpression) {\r\n                    if (param.right.argument) {\r\n                        this.throwUnexpectedToken(this.lookahead);\r\n                    }\r\n                    param.right.type = Syntax.Identifier;\r\n                    param.right.name = 'yield';\r\n                    delete param.right.argument;\r\n                    delete param.right.delegate;\r\n                }\r\n            }\r\n            else if (asyncArrow && param.type === Syntax.Identifier && param.name === 'await') {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n            this.checkPatternParam(options, param);\r\n            params[i] = param;\r\n        }\r\n        if (this.context.strict || !this.context.allowYield) {\r\n            for (let i = 0; i < params.length; ++i) {\r\n                const param = params[i];\r\n                if (param.type === Syntax.YieldExpression) {\r\n                    this.throwUnexpectedToken(this.lookahead);\r\n                }\r\n            }\r\n        }\r\n        if (options.hasDuplicateParameterNames) {\r\n            const token = this.context.strict ? options.stricted : options.firstRestricted;\r\n            this.throwUnexpectedToken(token, Messages.DuplicateParameter);\r\n        }\r\n        return {\r\n            simple: options.simple,\r\n            params: params,\r\n            stricted: options.stricted,\r\n            firstRestricted: options.firstRestricted,\r\n            message: options.message\r\n        };\r\n    }\r\n    parseAssignmentExpression() {\r\n        let expr;\r\n        if (!this.context.allowYield && this.matchKeyword('yield')) {\r\n            expr = this.parseYieldExpression();\r\n        }\r\n        else {\r\n            const startToken = this.lookahead;\r\n            let token = startToken;\r\n            expr = this.parseConditionalExpression();\r\n            if (token.type === 3 /* Token.Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {\r\n                if (this.lookahead.type === 3 /* Token.Identifier */ || this.matchKeyword('yield')) {\r\n                    const arg = this.parsePrimaryExpression();\r\n                    this.reinterpretExpressionAsPattern(arg);\r\n                    expr = {\r\n                        type: ArrowParameterPlaceHolder,\r\n                        params: [arg],\r\n                        async: true\r\n                    };\r\n                }\r\n            }\r\n            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\r\n                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\r\n                this.context.isAssignmentTarget = false;\r\n                this.context.isBindingElement = false;\r\n                const isAsync = expr.async;\r\n                const list = this.reinterpretAsCoverFormalsList(expr);\r\n                if (list) {\r\n                    if (this.hasLineTerminator) {\r\n                        this.tolerateUnexpectedToken(this.lookahead);\r\n                    }\r\n                    this.context.firstCoverInitializedNameError = null;\r\n                    const previousStrict = this.context.strict;\r\n                    const previousAllowStrictDirective = this.context.allowStrictDirective;\r\n                    this.context.allowStrictDirective = list.simple;\r\n                    const previousAllowYield = this.context.allowYield;\r\n                    const previousIsAsync = this.context.isAsync;\r\n                    this.context.allowYield = true;\r\n                    this.context.isAsync = isAsync;\r\n                    const node = this.startNode(startToken);\r\n                    this.expect('=>');\r\n                    let body;\r\n                    if (this.match('{')) {\r\n                        const previousAllowIn = this.context.allowIn;\r\n                        this.context.allowIn = true;\r\n                        body = this.parseFunctionSourceElements();\r\n                        this.context.allowIn = previousAllowIn;\r\n                    }\r\n                    else {\r\n                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                    }\r\n                    const expression = body.type !== Syntax.BlockStatement;\r\n                    if (this.context.strict && list.firstRestricted) {\r\n                        this.throwUnexpectedToken(list.firstRestricted, list.message);\r\n                    }\r\n                    if (this.context.strict && list.stricted) {\r\n                        this.tolerateUnexpectedToken(list.stricted, list.message);\r\n                    }\r\n                    expr = this.finalize(node, new ArrowFunctionExpression(list.params, body, expression, isAsync));\r\n                    this.context.strict = previousStrict;\r\n                    this.context.allowStrictDirective = previousAllowStrictDirective;\r\n                    this.context.allowYield = previousAllowYield;\r\n                    this.context.isAsync = previousIsAsync;\r\n                }\r\n            }\r\n            else {\r\n                if (this.matchAssign()) {\r\n                    if (!this.context.isAssignmentTarget) {\r\n                        this.tolerateError(Messages.InvalidLHSInAssignment);\r\n                    }\r\n                    if (this.context.strict && expr.type === Syntax.Identifier) {\r\n                        const id = expr;\r\n                        if (this.scanner.isRestrictedWord(id.name)) {\r\n                            this.tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);\r\n                        }\r\n                        if (this.scanner.isStrictModeReservedWord(id.name)) {\r\n                            this.tolerateUnexpectedToken(token, Messages.StrictReservedWord);\r\n                        }\r\n                    }\r\n                    if (!this.match('=')) {\r\n                        this.context.isAssignmentTarget = false;\r\n                        this.context.isBindingElement = false;\r\n                    }\r\n                    else {\r\n                        this.reinterpretExpressionAsPattern(expr);\r\n                    }\r\n                    token = this.nextToken();\r\n                    const operator = token.value;\r\n                    const right = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                    expr = this.finalize(this.startNode(startToken), new AssignmentExpression(operator, expr, right));\r\n                    this.context.firstCoverInitializedNameError = null;\r\n                }\r\n            }\r\n        }\r\n        return expr;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-comma-operator\r\n    parseExpression() {\r\n        const startToken = this.lookahead;\r\n        let expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n        if (this.match(',')) {\r\n            const expressions = [];\r\n            expressions.push(expr);\r\n            while (this.lookahead.type !== 2 /* Token.EOF */) {\r\n                if (!this.match(',')) {\r\n                    break;\r\n                }\r\n                this.nextToken();\r\n                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\r\n            }\r\n            expr = this.finalize(this.startNode(startToken), new SequenceExpression(expressions));\r\n        }\r\n        return expr;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-block\r\n    parseStatementListItem() {\r\n        let statement;\r\n        this.context.isAssignmentTarget = true;\r\n        this.context.isBindingElement = true;\r\n        if (this.lookahead.type === 4 /* Token.Keyword */) {\r\n            switch (this.lookahead.value) {\r\n                case 'export':\r\n                    if (!this.context.isModule) {\r\n                        this.tolerateUnexpectedToken(this.lookahead, Messages.IllegalExportDeclaration);\r\n                    }\r\n                    statement = this.parseExportDeclaration();\r\n                    break;\r\n                case 'import':\r\n                    if (this.matchImportCall()) {\r\n                        statement = this.parseExpressionStatement();\r\n                    }\r\n                    else if (this.matchImportMeta()) {\r\n                        statement = this.parseStatement();\r\n                    }\r\n                    else {\r\n                        if (!this.context.isModule) {\r\n                            this.tolerateUnexpectedToken(this.lookahead, Messages.IllegalImportDeclaration);\r\n                        }\r\n                        statement = this.parseImportDeclaration();\r\n                    }\r\n                    break;\r\n                case 'const':\r\n                    statement = this.parseLexicalDeclaration({ inFor: false });\r\n                    break;\r\n                case 'function':\r\n                    statement = this.parseFunctionDeclaration();\r\n                    break;\r\n                case 'class':\r\n                    statement = this.parseClassDeclaration();\r\n                    break;\r\n                case 'let':\r\n                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\r\n                    break;\r\n                default:\r\n                    statement = this.parseStatement();\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            statement = this.parseStatement();\r\n        }\r\n        return statement;\r\n    }\r\n    parseBlock() {\r\n        const node = this.createNode();\r\n        this.expect('{');\r\n        const block = [];\r\n        while (true) {\r\n            if (this.match('}')) {\r\n                break;\r\n            }\r\n            block.push(this.parseStatementListItem());\r\n        }\r\n        this.expect('}');\r\n        return this.finalize(node, new BlockStatement(block));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\r\n    parseLexicalBinding(kind, options) {\r\n        const node = this.createNode();\r\n        const params = [];\r\n        const id = this.parsePattern(params, kind);\r\n        if (this.context.strict && id.type === Syntax.Identifier) {\r\n            if (this.scanner.isRestrictedWord(id.name)) {\r\n                this.tolerateError(Messages.StrictVarName);\r\n            }\r\n        }\r\n        let init = null;\r\n        if (kind === 'const') {\r\n            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\r\n                if (this.match('=')) {\r\n                    this.nextToken();\r\n                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                }\r\n                else {\r\n                    this.throwError(Messages.DeclarationMissingInitializer, 'const');\r\n                }\r\n            }\r\n        }\r\n        else if ((!options.inFor && id.type !== Syntax.Identifier) || this.match('=')) {\r\n            this.expect('=');\r\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n        }\r\n        return this.finalize(node, new VariableDeclarator(id, init));\r\n    }\r\n    parseBindingList(kind, options) {\r\n        const list = [this.parseLexicalBinding(kind, options)];\r\n        while (this.match(',')) {\r\n            this.nextToken();\r\n            list.push(this.parseLexicalBinding(kind, options));\r\n        }\r\n        return list;\r\n    }\r\n    isLexicalDeclaration() {\r\n        const state = this.scanner.saveState();\r\n        this.scanner.scanComments();\r\n        const next = this.scanner.lex();\r\n        this.scanner.restoreState(state);\r\n        return (next.type === 3 /* Token.Identifier */) ||\r\n            (next.type === 7 /* Token.Punctuator */ && next.value === '[') ||\r\n            (next.type === 7 /* Token.Punctuator */ && next.value === '{') ||\r\n            (next.type === 4 /* Token.Keyword */ && next.value === 'let') ||\r\n            (next.type === 4 /* Token.Keyword */ && next.value === 'yield');\r\n    }\r\n    parseLexicalDeclaration(options) {\r\n        const node = this.createNode();\r\n        const kind = this.nextToken().value;\r\n        assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\r\n        const declarations = this.parseBindingList(kind, options);\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, new VariableDeclaration(declarations, kind));\r\n    }\r\n    /**\r\n     * This function checks to see if a property is initialized in a Class\r\n     * e.g.\r\n     * publicProp = 123;\r\n     * @returns {Boolean}\r\n     */\r\n    isInitializedProperty() {\r\n        let state = this.scanner.saveState();\r\n        this.scanner.scanComments();\r\n        let next = this.scanner.lex();\r\n        this.scanner.restoreState(state);\r\n        return this.lookahead.type === 3 && next.value === '=';\r\n    }\r\n    /**\r\n     * This function checks to see if a property is declared in a Class\r\n     * e.g.\r\n     * publicProp;\r\n     * @returns {Boolean}\r\n     */\r\n    isDeclaredProperty() {\r\n        let state = this.scanner.saveState();\r\n        this.scanner.scanComments();\r\n        let next = this.scanner.lex();\r\n        this.scanner.restoreState(state);\r\n        return this.lookahead.type === 3 && next.value === ';'\r\n            || this.lookahead.type === 3 && next.lineNumber !== this.startMarker.line;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\r\n    parseBindingRestElement(params, kind) {\r\n        const node = this.createNode();\r\n        this.expect('...');\r\n        const arg = this.parsePattern(params, kind);\r\n        return this.finalize(node, new RestElement(arg));\r\n    }\r\n    parseArrayPattern(params, kind) {\r\n        const node = this.createNode();\r\n        this.expect('[');\r\n        const elements = [];\r\n        while (!this.match(']')) {\r\n            if (this.match(',')) {\r\n                this.nextToken();\r\n                elements.push(null);\r\n            }\r\n            else {\r\n                if (this.match('...')) {\r\n                    elements.push(this.parseBindingRestElement(params, kind));\r\n                    break;\r\n                }\r\n                else {\r\n                    elements.push(this.parsePatternWithDefault(params, kind));\r\n                }\r\n                if (!this.match(']')) {\r\n                    this.expect(',');\r\n                }\r\n            }\r\n        }\r\n        this.expect(']');\r\n        return this.finalize(node, new ArrayPattern(elements));\r\n    }\r\n    parsePropertyPattern(params, kind) {\r\n        const node = this.createNode();\r\n        let computed = false;\r\n        let shorthand = false;\r\n        const method = false;\r\n        let key;\r\n        let value;\r\n        if (this.lookahead.type === 3 /* Token.Identifier */) {\r\n            const keyToken = this.lookahead;\r\n            key = this.parseVariableIdentifier();\r\n            const init = this.finalize(node, new Identifier(keyToken.value));\r\n            if (this.match('=')) {\r\n                params.push(keyToken);\r\n                shorthand = true;\r\n                this.nextToken();\r\n                const expr = this.parseAssignmentExpression();\r\n                value = this.finalize(this.startNode(keyToken), new AssignmentPattern(init, expr));\r\n            }\r\n            else if (!this.match(':')) {\r\n                params.push(keyToken);\r\n                shorthand = true;\r\n                value = init;\r\n            }\r\n            else {\r\n                this.expect(':');\r\n                value = this.parsePatternWithDefault(params, kind);\r\n            }\r\n        }\r\n        else {\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            this.expect(':');\r\n            value = this.parsePatternWithDefault(params, kind);\r\n        }\r\n        return this.finalize(node, new Property('init', key, computed, value, method, shorthand));\r\n    }\r\n    parseRestProperty(params) {\r\n        const node = this.createNode();\r\n        this.expect('...');\r\n        const arg = this.parsePattern(params);\r\n        if (this.match('=')) {\r\n            this.throwError(Messages.DefaultRestProperty);\r\n        }\r\n        if (!this.match('}')) {\r\n            this.throwError(Messages.PropertyAfterRestProperty);\r\n        }\r\n        return this.finalize(node, new RestElement(arg));\r\n    }\r\n    parseObjectPattern(params, kind) {\r\n        const node = this.createNode();\r\n        const properties = [];\r\n        this.expect('{');\r\n        while (!this.match('}')) {\r\n            properties.push(this.match('...') ? this.parseRestProperty(params) : this.parsePropertyPattern(params, kind));\r\n            if (!this.match('}')) {\r\n                this.expect(',');\r\n            }\r\n        }\r\n        this.expect('}');\r\n        return this.finalize(node, new ObjectPattern(properties));\r\n    }\r\n    parsePattern(params, kind) {\r\n        let pattern;\r\n        if (this.match('[')) {\r\n            pattern = this.parseArrayPattern(params, kind);\r\n        }\r\n        else if (this.match('{')) {\r\n            pattern = this.parseObjectPattern(params, kind);\r\n        }\r\n        else {\r\n            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\r\n                this.tolerateUnexpectedToken(this.lookahead, Messages.LetInLexicalBinding);\r\n            }\r\n            params.push(this.lookahead);\r\n            pattern = this.parseVariableIdentifier(kind);\r\n        }\r\n        return pattern;\r\n    }\r\n    parsePatternWithDefault(params, kind) {\r\n        const startToken = this.lookahead;\r\n        let pattern = this.parsePattern(params, kind);\r\n        if (this.match('=')) {\r\n            this.nextToken();\r\n            const previousAllowYield = this.context.allowYield;\r\n            this.context.allowYield = true;\r\n            const right = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n            this.context.allowYield = previousAllowYield;\r\n            pattern = this.finalize(this.startNode(startToken), new AssignmentPattern(pattern, right));\r\n        }\r\n        return pattern;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-variable-statement\r\n    parseVariableIdentifier(kind) {\r\n        const node = this.createNode();\r\n        const token = this.nextToken();\r\n        if (token.type === 4 /* Token.Keyword */ && token.value === 'yield') {\r\n            if (this.context.strict) {\r\n                this.tolerateUnexpectedToken(token, Messages.StrictReservedWord);\r\n            }\r\n            else if (!this.context.allowYield) {\r\n                this.throwUnexpectedToken(token);\r\n            }\r\n        }\r\n        else if (token.type !== 3 /* Token.Identifier */) {\r\n            if (this.context.strict && token.type === 4 /* Token.Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {\r\n                this.tolerateUnexpectedToken(token, Messages.StrictReservedWord);\r\n            }\r\n            else {\r\n                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\r\n                    this.throwUnexpectedToken(token);\r\n                }\r\n            }\r\n        }\r\n        else if ((this.context.isModule || this.context.isAsync) && token.type === 3 /* Token.Identifier */ && token.value === 'await') {\r\n            this.tolerateUnexpectedToken(token);\r\n        }\r\n        return this.finalize(node, new Identifier(token.value));\r\n    }\r\n    parseVariableDeclaration(options) {\r\n        const node = this.createNode();\r\n        const params = [];\r\n        const id = this.parsePattern(params, 'var');\r\n        if (this.context.strict && id.type === Syntax.Identifier) {\r\n            if (this.scanner.isRestrictedWord(id.name)) {\r\n                this.tolerateError(Messages.StrictVarName);\r\n            }\r\n        }\r\n        let init = null;\r\n        if (this.match('=')) {\r\n            this.nextToken();\r\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n        }\r\n        else if (id.type !== Syntax.Identifier && !options.inFor) {\r\n            this.expect('=');\r\n        }\r\n        return this.finalize(node, new VariableDeclarator(id, init));\r\n    }\r\n    parseVariableDeclarationList(options) {\r\n        const opt = { inFor: options.inFor };\r\n        const list = [];\r\n        list.push(this.parseVariableDeclaration(opt));\r\n        while (this.match(',')) {\r\n            this.nextToken();\r\n            list.push(this.parseVariableDeclaration(opt));\r\n        }\r\n        return list;\r\n    }\r\n    parseVariableStatement() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('var');\r\n        const declarations = this.parseVariableDeclarationList({ inFor: false });\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, new VariableDeclaration(declarations, 'var'));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-empty-statement\r\n    parseEmptyStatement() {\r\n        const node = this.createNode();\r\n        this.expect(';');\r\n        return this.finalize(node, new EmptyStatement());\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-expression-statement\r\n    parseExpressionStatement() {\r\n        const node = this.createNode();\r\n        const expr = this.parseExpression();\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, new ExpressionStatement(expr));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-if-statement\r\n    parseIfClause() {\r\n        if (this.context.strict && this.matchKeyword('function')) {\r\n            this.tolerateError(Messages.StrictFunction);\r\n        }\r\n        return this.parseStatement();\r\n    }\r\n    parseIfStatement() {\r\n        const node = this.createNode();\r\n        let consequent;\r\n        let alternate = null;\r\n        this.expectKeyword('if');\r\n        this.expect('(');\r\n        const test = this.parseExpression();\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n            consequent = this.finalize(this.createNode(), new EmptyStatement());\r\n        }\r\n        else {\r\n            this.expect(')');\r\n            consequent = this.parseIfClause();\r\n            if (this.matchKeyword('else')) {\r\n                this.nextToken();\r\n                alternate = this.parseIfClause();\r\n            }\r\n        }\r\n        return this.finalize(node, new IfStatement(test, consequent, alternate));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-do-while-statement\r\n    parseDoWhileStatement() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('do');\r\n        this.tolerateInvalidLoopStatement();\r\n        const previousInIteration = this.context.inIteration;\r\n        this.context.inIteration = true;\r\n        const body = this.parseStatement();\r\n        this.context.inIteration = previousInIteration;\r\n        this.expectKeyword('while');\r\n        this.expect('(');\r\n        const test = this.parseExpression();\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n        }\r\n        else {\r\n            this.expect(')');\r\n            if (this.match(';')) {\r\n                this.nextToken();\r\n            }\r\n        }\r\n        return this.finalize(node, new DoWhileStatement(body, test));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-while-statement\r\n    parseWhileStatement() {\r\n        const node = this.createNode();\r\n        let body;\r\n        this.expectKeyword('while');\r\n        this.expect('(');\r\n        const test = this.parseExpression();\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n            body = this.finalize(this.createNode(), new EmptyStatement());\r\n        }\r\n        else {\r\n            this.expect(')');\r\n            const previousInIteration = this.context.inIteration;\r\n            this.context.inIteration = true;\r\n            body = this.parseStatement();\r\n            this.context.inIteration = previousInIteration;\r\n        }\r\n        return this.finalize(node, new WhileStatement(test, body));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-for-statement\r\n    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\r\n    parseForStatement() {\r\n        let init = null;\r\n        let test = null;\r\n        let update = null;\r\n        let forIn = true;\r\n        let left, right;\r\n        let _await = false;\r\n        const node = this.createNode();\r\n        this.expectKeyword('for');\r\n        if (this.matchContextualKeyword('await')) {\r\n            if (!this.context.isAsync) {\r\n                this.tolerateUnexpectedToken(this.lookahead);\r\n            }\r\n            _await = true;\r\n            this.nextToken();\r\n        }\r\n        this.expect('(');\r\n        if (this.match(';')) {\r\n            this.nextToken();\r\n        }\r\n        else {\r\n            if (this.matchKeyword('var')) {\r\n                init = this.createNode();\r\n                this.nextToken();\r\n                const previousAllowIn = this.context.allowIn;\r\n                this.context.allowIn = false;\r\n                const declarations = this.parseVariableDeclarationList({ inFor: true });\r\n                this.context.allowIn = previousAllowIn;\r\n                if (!_await && declarations.length === 1 && this.matchKeyword('in')) {\r\n                    const decl = declarations[0];\r\n                    if (decl.init && (decl.id.type === Syntax.ArrayPattern || decl.id.type === Syntax.ObjectPattern || this.context.strict)) {\r\n                        this.tolerateError(Messages.ForInOfLoopInitializer, 'for-in');\r\n                    }\r\n                    init = this.finalize(init, new VariableDeclaration(declarations, 'var'));\r\n                    this.nextToken();\r\n                    left = init;\r\n                    right = this.parseExpression();\r\n                    init = null;\r\n                }\r\n                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\r\n                    init = this.finalize(init, new VariableDeclaration(declarations, 'var'));\r\n                    this.nextToken();\r\n                    left = init;\r\n                    right = this.parseAssignmentExpression();\r\n                    init = null;\r\n                    forIn = false;\r\n                }\r\n                else {\r\n                    init = this.finalize(init, new VariableDeclaration(declarations, 'var'));\r\n                    this.expect(';');\r\n                }\r\n            }\r\n            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\r\n                init = this.createNode();\r\n                const kind = this.nextToken().value;\r\n                if (!this.context.strict && this.lookahead.value === 'in') {\r\n                    init = this.finalize(init, new Identifier(kind));\r\n                    this.nextToken();\r\n                    left = init;\r\n                    right = this.parseExpression();\r\n                    init = null;\r\n                }\r\n                else {\r\n                    const previousAllowIn = this.context.allowIn;\r\n                    this.context.allowIn = false;\r\n                    const declarations = this.parseBindingList(kind, { inFor: true });\r\n                    this.context.allowIn = previousAllowIn;\r\n                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\r\n                        init = this.finalize(init, new VariableDeclaration(declarations, kind));\r\n                        this.nextToken();\r\n                        left = init;\r\n                        right = this.parseExpression();\r\n                        init = null;\r\n                    }\r\n                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\r\n                        init = this.finalize(init, new VariableDeclaration(declarations, kind));\r\n                        this.nextToken();\r\n                        left = init;\r\n                        right = this.parseAssignmentExpression();\r\n                        init = null;\r\n                        forIn = false;\r\n                    }\r\n                    else {\r\n                        this.consumeSemicolon();\r\n                        init = this.finalize(init, new VariableDeclaration(declarations, kind));\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const initStartToken = this.lookahead;\r\n                const previousIsBindingElement = this.context.isBindingElement;\r\n                const previousIsAssignmentTarget = this.context.isAssignmentTarget;\r\n                const previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\r\n                const previousAllowIn = this.context.allowIn;\r\n                this.context.allowIn = false;\r\n                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n                this.context.allowIn = previousAllowIn;\r\n                if (this.matchKeyword('in')) {\r\n                    if (!this.context.isAssignmentTarget || init.type === Syntax.AssignmentExpression) {\r\n                        this.tolerateError(Messages.InvalidLHSInForIn);\r\n                    }\r\n                    this.nextToken();\r\n                    this.reinterpretExpressionAsPattern(init);\r\n                    left = init;\r\n                    right = this.parseExpression();\r\n                    init = null;\r\n                }\r\n                else if (this.matchContextualKeyword('of')) {\r\n                    if (!this.context.isAssignmentTarget || init.type === Syntax.AssignmentExpression) {\r\n                        this.tolerateError(Messages.InvalidLHSInForLoop);\r\n                    }\r\n                    this.nextToken();\r\n                    this.reinterpretExpressionAsPattern(init);\r\n                    left = init;\r\n                    right = this.parseAssignmentExpression();\r\n                    init = null;\r\n                    forIn = false;\r\n                }\r\n                else {\r\n                    // The `init` node was not parsed isolated, but we would have wanted it to.\r\n                    this.context.isBindingElement = previousIsBindingElement;\r\n                    this.context.isAssignmentTarget = previousIsAssignmentTarget;\r\n                    this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\r\n                    if (this.match(',')) {\r\n                        const initSeq = [init];\r\n                        while (this.match(',')) {\r\n                            this.nextToken();\r\n                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\r\n                        }\r\n                        init = this.finalize(this.startNode(initStartToken), new SequenceExpression(initSeq));\r\n                    }\r\n                    this.expect(';');\r\n                }\r\n            }\r\n        }\r\n        if (typeof left === 'undefined') {\r\n            if (!this.match(';')) {\r\n                test = this.isolateCoverGrammar(this.parseExpression);\r\n            }\r\n            this.expect(';');\r\n            if (!this.match(')')) {\r\n                update = this.isolateCoverGrammar(this.parseExpression);\r\n            }\r\n        }\r\n        let body;\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n            body = this.finalize(this.createNode(), new EmptyStatement());\r\n        }\r\n        else {\r\n            this.expect(')');\r\n            this.tolerateInvalidLoopStatement();\r\n            const previousInIteration = this.context.inIteration;\r\n            this.context.inIteration = true;\r\n            body = this.isolateCoverGrammar(this.parseStatement);\r\n            this.context.inIteration = previousInIteration;\r\n        }\r\n        return (typeof left === 'undefined') ?\r\n            this.finalize(node, new ForStatement(init, test, update, body)) :\r\n            forIn ? this.finalize(node, new ForInStatement(left, right, body)) :\r\n                this.finalize(node, new ForOfStatement(left, right, body, _await));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-continue-statement\r\n    parseContinueStatement() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('continue');\r\n        let label = null;\r\n        if (this.lookahead.type === 3 /* Token.Identifier */ && !this.hasLineTerminator) {\r\n            const id = this.parseVariableIdentifier();\r\n            label = id;\r\n            const key = '$' + id.name;\r\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\r\n                this.throwError(Messages.UnknownLabel, id.name);\r\n            }\r\n        }\r\n        this.consumeSemicolon();\r\n        if (label === null && !this.context.inIteration) {\r\n            this.throwError(Messages.IllegalContinue);\r\n        }\r\n        return this.finalize(node, new ContinueStatement(label));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-break-statement\r\n    parseBreakStatement() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('break');\r\n        let label = null;\r\n        if (this.lookahead.type === 3 /* Token.Identifier */ && !this.hasLineTerminator) {\r\n            const id = this.parseVariableIdentifier();\r\n            const key = '$' + id.name;\r\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\r\n                this.throwError(Messages.UnknownLabel, id.name);\r\n            }\r\n            label = id;\r\n        }\r\n        this.consumeSemicolon();\r\n        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\r\n            this.throwError(Messages.IllegalBreak);\r\n        }\r\n        return this.finalize(node, new BreakStatement(label));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-return-statement\r\n    parseReturnStatement() {\r\n        if (!this.context.inFunctionBody) {\r\n            this.tolerateError(Messages.IllegalReturn);\r\n        }\r\n        const node = this.createNode();\r\n        this.expectKeyword('return');\r\n        const hasArgument = (!this.match(';') && !this.match('}') &&\r\n            !this.hasLineTerminator && this.lookahead.type !== 2 /* Token.EOF */) ||\r\n            this.lookahead.type === 8 /* Token.StringLiteral */ ||\r\n            this.lookahead.type === 10 /* Token.Template */;\r\n        const argument = hasArgument ? this.parseExpression() : null;\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, new ReturnStatement(argument));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-with-statement\r\n    parseWithStatement() {\r\n        if (this.context.strict) {\r\n            this.tolerateError(Messages.StrictModeWith);\r\n        }\r\n        const node = this.createNode();\r\n        let body;\r\n        this.expectKeyword('with');\r\n        this.expect('(');\r\n        const object = this.parseExpression();\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n            body = this.finalize(this.createNode(), new EmptyStatement());\r\n        }\r\n        else {\r\n            this.expect(')');\r\n            body = this.parseStatement();\r\n        }\r\n        return this.finalize(node, new WithStatement(object, body));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-switch-statement\r\n    parseSwitchCase() {\r\n        const node = this.createNode();\r\n        let test;\r\n        if (this.matchKeyword('default')) {\r\n            this.nextToken();\r\n            test = null;\r\n        }\r\n        else {\r\n            this.expectKeyword('case');\r\n            test = this.parseExpression();\r\n        }\r\n        this.expect(':');\r\n        const consequent = [];\r\n        while (true) {\r\n            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\r\n                break;\r\n            }\r\n            consequent.push(this.parseStatementListItem());\r\n        }\r\n        return this.finalize(node, new SwitchCase(test, consequent));\r\n    }\r\n    parseSwitchStatement() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('switch');\r\n        this.expect('(');\r\n        const discriminant = this.parseExpression();\r\n        this.expect(')');\r\n        const previousInSwitch = this.context.inSwitch;\r\n        this.context.inSwitch = true;\r\n        const cases = [];\r\n        let defaultFound = false;\r\n        this.expect('{');\r\n        while (true) {\r\n            if (this.match('}')) {\r\n                break;\r\n            }\r\n            const clause = this.parseSwitchCase();\r\n            if (clause.test === null) {\r\n                if (defaultFound) {\r\n                    this.throwError(Messages.MultipleDefaultsInSwitch);\r\n                }\r\n                defaultFound = true;\r\n            }\r\n            cases.push(clause);\r\n        }\r\n        this.expect('}');\r\n        this.context.inSwitch = previousInSwitch;\r\n        return this.finalize(node, new SwitchStatement(discriminant, cases));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-labelled-statements\r\n    parseLabelledStatement() {\r\n        const node = this.createNode();\r\n        const expr = this.parseExpression();\r\n        let statement;\r\n        if ((expr.type === Syntax.Identifier) && this.match(':')) {\r\n            this.nextToken();\r\n            const id = expr;\r\n            const key = '$' + id.name;\r\n            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\r\n                this.throwError(Messages.Redeclaration, 'Label', id.name);\r\n            }\r\n            this.context.labelSet[key] = true;\r\n            let body;\r\n            if (this.matchKeyword('class')) {\r\n                this.tolerateUnexpectedToken(this.lookahead);\r\n                body = this.parseClassDeclaration();\r\n            }\r\n            else if (this.matchKeyword('function')) {\r\n                const token = this.lookahead;\r\n                const declaration = this.parseFunctionDeclaration();\r\n                if (this.context.strict) {\r\n                    this.tolerateUnexpectedToken(token, Messages.StrictFunction);\r\n                }\r\n                else if (declaration.generator) {\r\n                    this.tolerateUnexpectedToken(token, Messages.GeneratorInLegacyContext);\r\n                }\r\n                body = declaration;\r\n            }\r\n            else {\r\n                body = this.parseStatement();\r\n            }\r\n            delete this.context.labelSet[key];\r\n            statement = new LabeledStatement(id, body);\r\n        }\r\n        else {\r\n            this.consumeSemicolon();\r\n            statement = new ExpressionStatement(expr);\r\n        }\r\n        return this.finalize(node, statement);\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-throw-statement\r\n    parseThrowStatement() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('throw');\r\n        if (this.hasLineTerminator) {\r\n            this.throwError(Messages.NewlineAfterThrow);\r\n        }\r\n        const argument = this.parseExpression();\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, new ThrowStatement(argument));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-try-statement\r\n    parseCatchClause() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('catch');\r\n        let param = null;\r\n        if (this.match('(')) {\r\n            this.expect('(');\r\n            if (this.match(')')) {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n            const params = [];\r\n            param = this.parsePattern(params);\r\n            const paramMap = {};\r\n            for (let i = 0; i < params.length; i++) {\r\n                const key = '$' + params[i].value;\r\n                if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\r\n                    this.tolerateError(Messages.DuplicateBinding, params[i].value);\r\n                }\r\n                paramMap[key] = true;\r\n            }\r\n            if (this.context.strict && param.type === Syntax.Identifier) {\r\n                if (this.scanner.isRestrictedWord(param.name)) {\r\n                    this.tolerateError(Messages.StrictCatchVariable);\r\n                }\r\n            }\r\n            this.expect(')');\r\n        }\r\n        const body = this.parseBlock();\r\n        return this.finalize(node, new CatchClause(param, body));\r\n    }\r\n    parseFinallyClause() {\r\n        this.expectKeyword('finally');\r\n        return this.parseBlock();\r\n    }\r\n    parseTryStatement() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('try');\r\n        const block = this.parseBlock();\r\n        const handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\r\n        const finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\r\n        if (!handler && !finalizer) {\r\n            this.throwError(Messages.NoCatchOrFinally);\r\n        }\r\n        return this.finalize(node, new TryStatement(block, handler, finalizer));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-debugger-statement\r\n    parseDebuggerStatement() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('debugger');\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, new DebuggerStatement());\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\r\n    parseStatement() {\r\n        let statement;\r\n        switch (this.lookahead.type) {\r\n            case 1 /* Token.BooleanLiteral */:\r\n            case 5 /* Token.NullLiteral */:\r\n            case 6 /* Token.NumericLiteral */:\r\n            case 8 /* Token.StringLiteral */:\r\n            case 10 /* Token.Template */:\r\n            case 9 /* Token.RegularExpression */:\r\n                statement = this.parseExpressionStatement();\r\n                break;\r\n            case 7 /* Token.Punctuator */:\r\n                const value = this.lookahead.value;\r\n                if (value === '{') {\r\n                    statement = this.parseBlock();\r\n                }\r\n                else if (value === '(') {\r\n                    statement = this.parseExpressionStatement();\r\n                }\r\n                else if (value === ';') {\r\n                    statement = this.parseEmptyStatement();\r\n                }\r\n                else {\r\n                    statement = this.parseExpressionStatement();\r\n                }\r\n                break;\r\n            case 3 /* Token.Identifier */:\r\n                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\r\n                break;\r\n            case 4 /* Token.Keyword */:\r\n                switch (this.lookahead.value) {\r\n                    case 'break':\r\n                        statement = this.parseBreakStatement();\r\n                        break;\r\n                    case 'continue':\r\n                        statement = this.parseContinueStatement();\r\n                        break;\r\n                    case 'debugger':\r\n                        statement = this.parseDebuggerStatement();\r\n                        break;\r\n                    case 'do':\r\n                        statement = this.parseDoWhileStatement();\r\n                        break;\r\n                    case 'for':\r\n                        statement = this.parseForStatement();\r\n                        break;\r\n                    case 'function':\r\n                        statement = this.parseFunctionDeclaration();\r\n                        break;\r\n                    case 'if':\r\n                        statement = this.parseIfStatement();\r\n                        break;\r\n                    case 'return':\r\n                        statement = this.parseReturnStatement();\r\n                        break;\r\n                    case 'switch':\r\n                        statement = this.parseSwitchStatement();\r\n                        break;\r\n                    case 'throw':\r\n                        statement = this.parseThrowStatement();\r\n                        break;\r\n                    case 'try':\r\n                        statement = this.parseTryStatement();\r\n                        break;\r\n                    case 'var':\r\n                        statement = this.parseVariableStatement();\r\n                        break;\r\n                    case 'while':\r\n                        statement = this.parseWhileStatement();\r\n                        break;\r\n                    case 'with':\r\n                        statement = this.parseWithStatement();\r\n                        break;\r\n                    default:\r\n                        statement = this.parseExpressionStatement();\r\n                        break;\r\n                }\r\n                break;\r\n            default:\r\n                statement = this.throwUnexpectedToken(this.lookahead);\r\n        }\r\n        return statement;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-function-definitions\r\n    parseFunctionSourceElements() {\r\n        const node = this.createNode();\r\n        this.expect('{');\r\n        const body = this.parseDirectivePrologues();\r\n        const previousLabelSet = this.context.labelSet;\r\n        const previousInIteration = this.context.inIteration;\r\n        const previousInSwitch = this.context.inSwitch;\r\n        const previousInFunctionBody = this.context.inFunctionBody;\r\n        this.context.labelSet = {};\r\n        this.context.inIteration = false;\r\n        this.context.inSwitch = false;\r\n        this.context.inFunctionBody = true;\r\n        while (this.lookahead.type !== 2 /* Token.EOF */) {\r\n            if (this.match('}')) {\r\n                break;\r\n            }\r\n            body.push(this.parseStatementListItem());\r\n        }\r\n        this.expect('}');\r\n        this.context.labelSet = previousLabelSet;\r\n        this.context.inIteration = previousInIteration;\r\n        this.context.inSwitch = previousInSwitch;\r\n        this.context.inFunctionBody = previousInFunctionBody;\r\n        return this.finalize(node, new BlockStatement(body));\r\n    }\r\n    validateParam(options, param, name) {\r\n        const key = '$' + name;\r\n        if (this.context.strict) {\r\n            if (this.scanner.isRestrictedWord(name)) {\r\n                options.stricted = param;\r\n                options.message = Messages.StrictParamName;\r\n            }\r\n            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\r\n                options.stricted = param;\r\n                options.hasDuplicateParameterNames = true;\r\n            }\r\n        }\r\n        else if (!options.firstRestricted) {\r\n            if (this.scanner.isRestrictedWord(name)) {\r\n                options.firstRestricted = param;\r\n                options.message = Messages.StrictParamName;\r\n            }\r\n            else if (this.scanner.isStrictModeReservedWord(name)) {\r\n                options.firstRestricted = param;\r\n                options.message = Messages.StrictReservedWord;\r\n            }\r\n            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\r\n                options.stricted = param;\r\n                options.hasDuplicateParameterNames = true;\r\n            }\r\n        }\r\n        /* istanbul ignore next */\r\n        if (typeof Object.defineProperty === 'function') {\r\n            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\r\n        }\r\n        else {\r\n            options.paramSet[key] = true;\r\n        }\r\n    }\r\n    parseRestElement(params) {\r\n        const node = this.createNode();\r\n        this.expect('...');\r\n        const arg = this.parsePattern(params);\r\n        if (this.match('=')) {\r\n            this.throwError(Messages.DefaultRestParameter);\r\n        }\r\n        if (!this.match(')')) {\r\n            this.throwError(Messages.ParameterAfterRestParameter);\r\n        }\r\n        return this.finalize(node, new RestElement(arg));\r\n    }\r\n    parseFormalParameter(options) {\r\n        const params = [];\r\n        const param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\r\n        for (let i = 0; i < params.length; i++) {\r\n            this.validateParam(options, params[i], params[i].value);\r\n        }\r\n        options.simple = options.simple && (param instanceof Identifier);\r\n        options.params.push(param);\r\n    }\r\n    parseFormalParameters(firstRestricted) {\r\n        const options = {\r\n            simple: true,\r\n            hasDuplicateParameterNames: false,\r\n            params: [],\r\n            firstRestricted: firstRestricted\r\n        };\r\n        this.expect('(');\r\n        if (!this.match(')')) {\r\n            options.paramSet = {};\r\n            while (this.lookahead.type !== 2 /* Token.EOF */) {\r\n                this.parseFormalParameter(options);\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n                this.expect(',');\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.expect(')');\r\n        if (options.hasDuplicateParameterNames) {\r\n            if (this.context.strict || this.context.isAsync || !options.simple) {\r\n                this.throwError(Messages.DuplicateParameter);\r\n            }\r\n        }\r\n        return {\r\n            simple: options.simple,\r\n            params: options.params,\r\n            stricted: options.stricted,\r\n            firstRestricted: options.firstRestricted,\r\n            message: options.message\r\n        };\r\n    }\r\n    matchAsyncFunction() {\r\n        let match = this.matchContextualKeyword('async');\r\n        if (match) {\r\n            const state = this.scanner.saveState();\r\n            this.scanner.scanComments();\r\n            const next = this.scanner.lex();\r\n            this.scanner.restoreState(state);\r\n            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Token.Keyword */) && (next.value === 'function');\r\n        }\r\n        return match;\r\n    }\r\n    parseFunctionDeclaration(identifierIsOptional) {\r\n        const node = this.createNode();\r\n        const isAsync = this.matchContextualKeyword('async');\r\n        if (isAsync) {\r\n            if (this.context.inIteration) {\r\n                this.tolerateError(Messages.AsyncFunctionInSingleStatementContext);\r\n            }\r\n            this.nextToken();\r\n        }\r\n        this.expectKeyword('function');\r\n        const isGenerator = this.match('*');\r\n        if (isGenerator) {\r\n            this.nextToken();\r\n        }\r\n        let message;\r\n        let id = null;\r\n        let firstRestricted = null;\r\n        if (!identifierIsOptional || !this.match('(')) {\r\n            const token = this.lookahead;\r\n            id = this.parseVariableIdentifier();\r\n            if (this.context.strict) {\r\n                if (this.scanner.isRestrictedWord(token.value)) {\r\n                    this.tolerateUnexpectedToken(token, Messages.StrictFunctionName);\r\n                }\r\n            }\r\n            else {\r\n                if (this.scanner.isRestrictedWord(token.value)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictFunctionName;\r\n                }\r\n                else if (this.scanner.isStrictModeReservedWord(token.value)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictReservedWord;\r\n                }\r\n            }\r\n        }\r\n        const previousIsAsync = this.context.isAsync;\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.isAsync = isAsync;\r\n        this.context.allowYield = !isGenerator;\r\n        const formalParameters = this.parseFormalParameters(firstRestricted);\r\n        const params = formalParameters.params;\r\n        const stricted = formalParameters.stricted;\r\n        firstRestricted = formalParameters.firstRestricted;\r\n        if (formalParameters.message) {\r\n            message = formalParameters.message;\r\n        }\r\n        const previousStrict = this.context.strict;\r\n        const previousAllowStrictDirective = this.context.allowStrictDirective;\r\n        this.context.allowStrictDirective = formalParameters.simple;\r\n        const body = this.parseFunctionSourceElements();\r\n        if (this.context.strict && firstRestricted) {\r\n            this.throwUnexpectedToken(firstRestricted, message);\r\n        }\r\n        if (this.context.strict && stricted) {\r\n            this.tolerateUnexpectedToken(stricted, message);\r\n        }\r\n        this.context.strict = previousStrict;\r\n        this.context.allowStrictDirective = previousAllowStrictDirective;\r\n        this.context.isAsync = previousIsAsync;\r\n        this.context.allowYield = previousAllowYield;\r\n        return isAsync\r\n            ? this.finalize(node, new AsyncFunctionDeclaration(id, params, body, isGenerator))\r\n            : this.finalize(node, new FunctionDeclaration(id, params, body, isGenerator));\r\n    }\r\n    parseFunctionExpression() {\r\n        const node = this.createNode();\r\n        const isAsync = this.matchContextualKeyword('async');\r\n        if (isAsync) {\r\n            this.nextToken();\r\n        }\r\n        this.expectKeyword('function');\r\n        const isGenerator = this.match('*');\r\n        if (isGenerator) {\r\n            this.nextToken();\r\n        }\r\n        let message;\r\n        let id = null;\r\n        let firstRestricted;\r\n        const previousIsAsync = this.context.isAsync;\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.isAsync = isAsync;\r\n        this.context.allowYield = !isGenerator;\r\n        if (!this.match('(')) {\r\n            const token = this.lookahead;\r\n            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\r\n            if (this.context.strict) {\r\n                if (this.scanner.isRestrictedWord(token.value)) {\r\n                    this.tolerateUnexpectedToken(token, Messages.StrictFunctionName);\r\n                }\r\n            }\r\n            else {\r\n                if (this.scanner.isRestrictedWord(token.value)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictFunctionName;\r\n                }\r\n                else if (this.scanner.isStrictModeReservedWord(token.value)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictReservedWord;\r\n                }\r\n            }\r\n        }\r\n        const formalParameters = this.parseFormalParameters(firstRestricted);\r\n        const params = formalParameters.params;\r\n        const stricted = formalParameters.stricted;\r\n        firstRestricted = formalParameters.firstRestricted;\r\n        if (formalParameters.message) {\r\n            message = formalParameters.message;\r\n        }\r\n        const previousStrict = this.context.strict;\r\n        const previousAllowStrictDirective = this.context.allowStrictDirective;\r\n        this.context.allowStrictDirective = formalParameters.simple;\r\n        const body = this.parseFunctionSourceElements();\r\n        if (this.context.strict && firstRestricted) {\r\n            this.throwUnexpectedToken(firstRestricted, message);\r\n        }\r\n        if (this.context.strict && stricted) {\r\n            this.tolerateUnexpectedToken(stricted, message);\r\n        }\r\n        this.context.strict = previousStrict;\r\n        this.context.allowStrictDirective = previousAllowStrictDirective;\r\n        this.context.isAsync = previousIsAsync;\r\n        this.context.allowYield = previousAllowYield;\r\n        return this.finalize(node, new FunctionExpression(id, params, body, isGenerator, isAsync));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\r\n    parseDirective() {\r\n        const token = this.lookahead;\r\n        const node = this.createNode();\r\n        const expr = this.parseExpression();\r\n        const directive = (expr.type === Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, directive ? new Directive(expr, directive) : new ExpressionStatement(expr));\r\n    }\r\n    parseDirectivePrologues() {\r\n        let firstRestricted = null;\r\n        const body = [];\r\n        while (true) {\r\n            const token = this.lookahead;\r\n            if (token.type !== 8 /* Token.StringLiteral */) {\r\n                break;\r\n            }\r\n            const statement = this.parseDirective();\r\n            body.push(statement);\r\n            const directive = statement.directive;\r\n            if (typeof directive !== 'string') {\r\n                break;\r\n            }\r\n            if (directive === 'use strict') {\r\n                this.context.strict = true;\r\n                if (firstRestricted) {\r\n                    this.tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);\r\n                }\r\n                if (!this.context.allowStrictDirective) {\r\n                    this.tolerateUnexpectedToken(token, Messages.IllegalLanguageModeDirective);\r\n                }\r\n            }\r\n            else {\r\n                if (!firstRestricted && token.octal) {\r\n                    firstRestricted = token;\r\n                }\r\n            }\r\n        }\r\n        return body;\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-method-definitions\r\n    qualifiedPropertyName(token) {\r\n        switch (token.type) {\r\n            case 3 /* Token.Identifier */:\r\n            case 8 /* Token.StringLiteral */:\r\n            case 1 /* Token.BooleanLiteral */:\r\n            case 5 /* Token.NullLiteral */:\r\n            case 6 /* Token.NumericLiteral */:\r\n            case 4 /* Token.Keyword */:\r\n                return true;\r\n            case 7 /* Token.Punctuator */:\r\n                return token.value === '[' || token.value === '#';\r\n        }\r\n        return false;\r\n    }\r\n    parseGetterMethod() {\r\n        const node = this.createNode();\r\n        const isGenerator = false;\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.allowYield = !isGenerator;\r\n        const formalParameters = this.parseFormalParameters();\r\n        if (formalParameters.params.length > 0) {\r\n            this.tolerateError(Messages.BadGetterArity);\r\n        }\r\n        const method = this.parsePropertyMethod(formalParameters);\r\n        this.context.allowYield = previousAllowYield;\r\n        return this.finalize(node, new FunctionExpression(null, formalParameters.params, method, isGenerator, false));\r\n    }\r\n    parseSetterMethod() {\r\n        const node = this.createNode();\r\n        const isGenerator = false;\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.allowYield = !isGenerator;\r\n        const formalParameters = this.parseFormalParameters();\r\n        if (formalParameters.params.length !== 1) {\r\n            this.tolerateError(Messages.BadSetterArity);\r\n        }\r\n        else if (formalParameters.params[0] instanceof RestElement) {\r\n            this.tolerateError(Messages.BadSetterRestParameter);\r\n        }\r\n        const method = this.parsePropertyMethod(formalParameters);\r\n        this.context.allowYield = previousAllowYield;\r\n        return this.finalize(node, new FunctionExpression(null, formalParameters.params, method, isGenerator, false));\r\n    }\r\n    parseGeneratorMethod(isAsync) {\r\n        const node = this.createNode();\r\n        const isGenerator = true;\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.allowYield = true;\r\n        const params = this.parseFormalParameters();\r\n        this.context.allowYield = false;\r\n        const method = this.parsePropertyMethod(params);\r\n        this.context.allowYield = previousAllowYield;\r\n        return this.finalize(node, new FunctionExpression(null, params.params, method, isGenerator, isAsync));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-generator-function-definitions\r\n    isStartOfExpression() {\r\n        let start = true;\r\n        const value = this.lookahead.value;\r\n        switch (this.lookahead.type) {\r\n            case 7 /* Token.Punctuator */:\r\n                start = (value === '[') || (value === '(') || (value === '{') ||\r\n                    (value === '+') || (value === '-') ||\r\n                    (value === '!') || (value === '~') ||\r\n                    (value === '++') || (value === '--') ||\r\n                    (value === '/') || (value === '/='); // regular expression literal\r\n                break;\r\n            case 4 /* Token.Keyword */:\r\n                start = (value === 'class') || (value === 'delete') ||\r\n                    (value === 'function') || (value === 'let') || (value === 'new') ||\r\n                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\r\n                    (value === 'void') || (value === 'yield');\r\n                break;\r\n        }\r\n        return start;\r\n    }\r\n    parseYieldExpression() {\r\n        const node = this.createNode();\r\n        this.expectKeyword('yield');\r\n        let argument = null;\r\n        let delegate = false;\r\n        if (!this.hasLineTerminator) {\r\n            const previousAllowYield = this.context.allowYield;\r\n            this.context.allowYield = false;\r\n            delegate = this.match('*');\r\n            if (delegate) {\r\n                this.nextToken();\r\n                argument = this.parseAssignmentExpression();\r\n            }\r\n            else if (this.isStartOfExpression()) {\r\n                argument = this.parseAssignmentExpression();\r\n            }\r\n            this.context.allowYield = previousAllowYield;\r\n        }\r\n        return this.finalize(node, new YieldExpression(argument, delegate));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-class-definitions\r\n    parseStaticBlock() {\r\n        const node = this.createNode();\r\n        this.expect('{');\r\n        const block = [];\r\n        while (true) {\r\n            if (this.match('}')) {\r\n                break;\r\n            }\r\n            block.push(this.parseStatementListItem());\r\n        }\r\n        this.expect('}');\r\n        return this.finalize(node, new StaticBlock(block));\r\n    }\r\n    parseDecorator() {\r\n        const node = this.createNode();\r\n        this.expect(\"@\");\r\n        const previousStrict = this.context.strict;\r\n        const previousAllowYield = this.context.allowYield;\r\n        const previousIsAsync = this.context.isAsync;\r\n        this.context.strict = false;\r\n        this.context.allowYield = true;\r\n        this.context.isAsync = false;\r\n        const expression = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n        this.context.strict = previousStrict;\r\n        this.context.allowYield = previousAllowYield;\r\n        this.context.isAsync = previousIsAsync;\r\n        if (this.match(\";\")) {\r\n            this.throwError(Messages.NoSemicolonAfterDecorator);\r\n        }\r\n        return this.finalize(node, new Decorator(expression));\r\n    }\r\n    parseDecorators() {\r\n        let decorators = null;\r\n        while (this.match(\"@\")) {\r\n            if (decorators == null)\r\n                decorators = [];\r\n            decorators.push(this.parseDecorator());\r\n        }\r\n        return decorators;\r\n    }\r\n    parseClassElement(hasConstructor) {\r\n        let token = this.lookahead;\r\n        const node = this.createNode();\r\n        const previousInConstructor = this.context.inConstructor;\r\n        let kind = '';\r\n        let key = null;\r\n        let value = null;\r\n        let computed = false;\r\n        let method = false;\r\n        let isStatic = false;\r\n        let isAsync = false;\r\n        let isGenerator = false;\r\n        let isPrivate = false;\r\n        const decorators = this.parseDecorators();\r\n        if (decorators) {\r\n            token = this.lookahead;\r\n        }\r\n        if (this.match('*')) {\r\n            this.nextToken();\r\n        }\r\n        else {\r\n            computed = this.match('[');\r\n            if (this.match('#')) {\r\n                isPrivate = true;\r\n                this.nextToken();\r\n                token = this.lookahead;\r\n            }\r\n            key = this.parseObjectPropertyKey(isPrivate);\r\n            const id = key;\r\n            this.context.inConstructor = token.type === 3 /* Token.Identifier */ && token.value === 'constructor';\r\n            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\r\n                token = this.lookahead;\r\n                isStatic = true;\r\n                computed = this.match('[');\r\n                if (this.match('*')) {\r\n                    this.nextToken();\r\n                    if (this.match('#')) {\r\n                        isPrivate = true;\r\n                        this.nextToken();\r\n                        token = this.lookahead;\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.match('#')) {\r\n                        isPrivate = true;\r\n                        this.nextToken();\r\n                        token = this.lookahead;\r\n                    }\r\n                    key = this.parseObjectPropertyKey(isPrivate);\r\n                }\r\n            }\r\n            if (id.name === 'static' && this.match('{')) {\r\n                return this.parseStaticBlock();\r\n            }\r\n            if ((token.type === 3 /* Token.Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {\r\n                const punctuator = this.lookahead.value;\r\n                if (punctuator !== ':' && punctuator !== '(') {\r\n                    isAsync = true;\r\n                    isGenerator = this.match(\"*\");\r\n                    if (isGenerator) {\r\n                        this.nextToken();\r\n                    }\r\n                    token = this.lookahead;\r\n                    computed = this.match('[');\r\n                    if (this.match('*')) {\r\n                        this.nextToken();\r\n                        if (this.match('#')) {\r\n                            isPrivate = true;\r\n                            this.nextToken();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.match('#')) {\r\n                            isPrivate = true;\r\n                            this.nextToken();\r\n                            token = this.lookahead;\r\n                        }\r\n                        key = this.parseObjectPropertyKey(isPrivate);\r\n                    }\r\n                    if (token.type === 3 /* Token.Identifier */ && token.value === 'constructor' && !isStatic) {\r\n                        this.tolerateUnexpectedToken(token, Messages.ConstructorIsAsync);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (token.type === 3 /* Token.Identifier */ && token.value === 'constructor' && isPrivate) {\r\n            this.tolerateUnexpectedToken(token, Messages.ConstructorIsPrivate);\r\n        }\r\n        const lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\r\n        if (token.type === 3 /* Token.Identifier */ || token.type === 8 /* Token.StringLiteral */) {\r\n            if (token.value === 'get' && lookaheadPropertyKey) {\r\n                kind = 'get';\r\n                if (this.match('#')) {\r\n                    isPrivate = true;\r\n                    this.nextToken();\r\n                    token = this.lookahead;\r\n                }\r\n                computed = this.match('[');\r\n                key = this.parseObjectPropertyKey(isPrivate);\r\n                this.context.allowYield = false;\r\n                value = this.parseGetterMethod();\r\n            }\r\n            else if (token.value === 'set' && lookaheadPropertyKey) {\r\n                kind = 'set';\r\n                if (this.match('#')) {\r\n                    isPrivate = true;\r\n                    this.nextToken();\r\n                    token = this.lookahead;\r\n                }\r\n                computed = this.match('[');\r\n                key = this.parseObjectPropertyKey(isPrivate);\r\n                value = this.parseSetterMethod();\r\n            }\r\n            else if (!this.match('(')) {\r\n                kind = 'property';\r\n                computed = false;\r\n                if (this.match('=')) {\r\n                    this.nextToken();\r\n                    value = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                }\r\n            }\r\n        }\r\n        else if (token.type === 7 /* Token.Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\r\n            kind = 'init';\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey(isPrivate);\r\n            value = this.parseGeneratorMethod(isAsync);\r\n            method = true;\r\n        }\r\n        else if (token.type === 7 /* Token.Punctuator */ && token.value === '[' && !this.match('(')) {\r\n            kind = 'property';\r\n            computed = true;\r\n            if (this.match('=')) {\r\n                this.nextToken();\r\n                value = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n            }\r\n        }\r\n        if (!kind && key && this.match('(')) {\r\n            const previousInClassConstructor = this.context.inClassConstructor;\r\n            this.context.inClassConstructor = token.value === 'constructor';\r\n            kind = 'init';\r\n            value = isAsync ? this.parsePropertyMethodAsyncFunction(isGenerator) : this.parsePropertyMethodFunction(isGenerator);\r\n            this.context.inClassConstructor = previousInClassConstructor;\r\n            method = true;\r\n        }\r\n        if (!kind) {\r\n            this.throwUnexpectedToken(this.lookahead);\r\n        }\r\n        if (kind === 'init') {\r\n            kind = 'method';\r\n        }\r\n        if (!computed) {\r\n            if (isStatic && this.isPropertyKey(key, 'prototype')) {\r\n                this.throwUnexpectedToken(token, Messages.StaticPrototype);\r\n            }\r\n            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\r\n                if (kind !== 'method' || !method || (value && value.generator)) {\r\n                    this.throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);\r\n                }\r\n                if (hasConstructor.value) {\r\n                    this.throwUnexpectedToken(token, Messages.DuplicateConstructor);\r\n                }\r\n                else {\r\n                    hasConstructor.value = true;\r\n                }\r\n                kind = 'constructor';\r\n            }\r\n        }\r\n        this.context.inConstructor = previousInConstructor;\r\n        if (kind === 'property') {\r\n            this.consumeSemicolon();\r\n            return this.finalize(node, new PropertyDefinition(key, computed, value, isStatic, decorators));\r\n        }\r\n        else\r\n            return this.finalize(node, new MethodDefinition(key, computed, value, kind, isStatic, decorators));\r\n    }\r\n    parseClassElementList() {\r\n        const body = [];\r\n        const hasConstructor = { value: false };\r\n        this.expect('{');\r\n        while (!this.match('}')) {\r\n            if (this.match(';')) {\r\n                this.nextToken();\r\n            }\r\n            else {\r\n                body.push(this.parseClassElement(hasConstructor));\r\n            }\r\n        }\r\n        this.expect('}');\r\n        return body;\r\n    }\r\n    parseClassBody() {\r\n        const node = this.createNode();\r\n        const elementList = this.parseClassElementList();\r\n        return this.finalize(node, new ClassBody(elementList));\r\n    }\r\n    parseClassDeclaration(identifierIsOptional) {\r\n        const node = this.createNode();\r\n        const previousStrict = this.context.strict;\r\n        const previousAllowSuper = this.context.allowSuper;\r\n        this.context.strict = true;\r\n        this.expectKeyword('class');\r\n        const id = (identifierIsOptional && (this.lookahead.type !== 3 /* Token.Identifier */)) ? null : this.parseVariableIdentifier();\r\n        let superClass = null;\r\n        if (this.matchKeyword('extends')) {\r\n            this.nextToken();\r\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n            this.context.allowSuper = true;\r\n        }\r\n        const classBody = this.parseClassBody();\r\n        this.context.allowSuper = previousAllowSuper;\r\n        this.context.strict = previousStrict;\r\n        return this.finalize(node, new ClassDeclaration(id, superClass, classBody, this.context.decorators));\r\n    }\r\n    parseClassExpression() {\r\n        const node = this.createNode();\r\n        const previousStrict = this.context.strict;\r\n        this.context.strict = true;\r\n        this.expectKeyword('class');\r\n        const id = (this.lookahead.type === 3 /* Token.Identifier */) ? this.parseVariableIdentifier() : null;\r\n        let superClass = null;\r\n        if (this.matchKeyword('extends')) {\r\n            this.nextToken();\r\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n            this.context.allowSuper = true;\r\n        }\r\n        const classBody = this.parseClassBody();\r\n        this.context.strict = previousStrict;\r\n        return this.finalize(node, new ClassExpression(id, superClass, classBody, this.context.decorators));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-scripts\r\n    // https://tc39.github.io/ecma262/#sec-modules\r\n    parseModule() {\r\n        this.context.strict = true;\r\n        this.context.isModule = true;\r\n        this.scanner.isModule = true;\r\n        const node = this.createNode();\r\n        const body = this.parseDirectivePrologues();\r\n        while (this.lookahead.type !== 2 /* Token.EOF */) {\r\n            body.push(this.parseStatementListItem());\r\n        }\r\n        return this.finalize(node, new Module(body));\r\n    }\r\n    parseScript() {\r\n        const node = this.createNode();\r\n        const body = this.parseDirectivePrologues();\r\n        while (this.lookahead.type !== 2 /* Token.EOF */) {\r\n            body.push(this.parseStatementListItem());\r\n        }\r\n        return this.finalize(node, new Script(body));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-imports\r\n    parseImportAttributes() {\r\n        if (this.lookahead.value === 'assert') {\r\n            this.nextToken();\r\n            this.expect('{');\r\n            const attributes = [];\r\n            while (!this.match('}')) {\r\n                attributes.push(this.parseImportAttribute());\r\n                if (!this.match('}')) {\r\n                    this.expectCommaSeparator();\r\n                }\r\n            }\r\n            this.expect('}');\r\n            return attributes;\r\n        }\r\n        return null;\r\n    }\r\n    parseImportAttribute() {\r\n        const node = this.createNode();\r\n        if (this.lookahead.type !== 3 /* Token.Identifier */) {\r\n            this.throwUnexpectedToken(this.nextToken());\r\n        }\r\n        const key = this.parseIdentifierName();\r\n        if (!this.match(':')) {\r\n            this.throwUnexpectedToken(this.nextToken());\r\n        }\r\n        this.nextToken();\r\n        const literalToken = this.nextToken();\r\n        const raw = this.getTokenRaw(literalToken);\r\n        const value = this.finalize(node, new Literal(literalToken.value, raw));\r\n        return this.finalize(node, new ImportAttribute(key, value));\r\n    }\r\n    parseModuleSpecifier() {\r\n        const node = this.createNode();\r\n        if (this.lookahead.type !== 8 /* Token.StringLiteral */) {\r\n            this.throwError(Messages.InvalidModuleSpecifier);\r\n        }\r\n        const token = this.nextToken();\r\n        const raw = this.getTokenRaw(token);\r\n        if (!Character.isStringWellFormedUnicode(token.value)) {\r\n            this.throwError(Messages.InvalidModuleSpecifier);\r\n        }\r\n        return this.finalize(node, new Literal(token.value, raw));\r\n    }\r\n    // import {<foo as bar>} ...;\r\n    parseImportSpecifier() {\r\n        const node = this.createNode();\r\n        let imported;\r\n        let local;\r\n        if (this.lookahead.type === 3 /* Token.Identifier */) {\r\n            imported = this.parseVariableIdentifier();\r\n            local = imported;\r\n            if (this.matchContextualKeyword('as')) {\r\n                this.nextToken();\r\n                local = this.parseVariableIdentifier();\r\n            }\r\n        }\r\n        else {\r\n            imported = this.lookahead.type == 8 /* Token.StringLiteral */ ? this.parseModuleSpecifier() : this.parseIdentifierName();\r\n            local = imported;\r\n            if (this.matchContextualKeyword('as')) {\r\n                this.nextToken();\r\n                local = this.parseVariableIdentifier();\r\n            }\r\n            else {\r\n                this.throwUnexpectedToken(this.nextToken());\r\n            }\r\n        }\r\n        return this.finalize(node, new ImportSpecifier(local, imported));\r\n    }\r\n    // {foo, bar as bas}\r\n    parseNamedImports() {\r\n        this.expect('{');\r\n        const specifiers = [];\r\n        while (!this.match('}')) {\r\n            specifiers.push(this.parseImportSpecifier());\r\n            if (!this.match('}')) {\r\n                this.expect(',');\r\n            }\r\n        }\r\n        this.expect('}');\r\n        return specifiers;\r\n    }\r\n    // import <foo> ...;\r\n    parseImportDefaultSpecifier() {\r\n        const node = this.createNode();\r\n        const local = this.parseIdentifierName();\r\n        return this.finalize(node, new ImportDefaultSpecifier(local));\r\n    }\r\n    // import <* as foo> ...;\r\n    parseImportNamespaceSpecifier() {\r\n        const node = this.createNode();\r\n        this.expect('*');\r\n        if (!this.matchContextualKeyword('as')) {\r\n            this.throwError(Messages.NoAsAfterImportNamespace);\r\n        }\r\n        if (this.lookahead.escaped) {\r\n            this.throwError(Messages.NoAsAndFromEscapeSequences);\r\n        }\r\n        this.nextToken();\r\n        const local = this.parseIdentifierName();\r\n        return this.finalize(node, new ImportNamespaceSpecifier(local));\r\n    }\r\n    parseImportDeclaration() {\r\n        if (this.context.inFunctionBody) {\r\n            this.throwError(Messages.IllegalImportDeclaration);\r\n        }\r\n        const node = this.createNode();\r\n        this.expectKeyword('import');\r\n        let src;\r\n        let specifiers = [];\r\n        if (this.lookahead.type === 8 /* Token.StringLiteral */) {\r\n            // import 'foo';\r\n            src = this.parseModuleSpecifier();\r\n        }\r\n        else {\r\n            if (this.match('{')) {\r\n                // import {bar}\r\n                specifiers = specifiers.concat(this.parseNamedImports());\r\n            }\r\n            else if (this.match('*')) {\r\n                // import * as foo\r\n                specifiers.push(this.parseImportNamespaceSpecifier());\r\n            }\r\n            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\r\n                // import foo\r\n                specifiers.push(this.parseImportDefaultSpecifier());\r\n                if (this.match(',')) {\r\n                    this.nextToken();\r\n                    if (this.match('*')) {\r\n                        // import foo, * as foo\r\n                        specifiers.push(this.parseImportNamespaceSpecifier());\r\n                    }\r\n                    else if (this.match('{')) {\r\n                        // import foo, {bar}\r\n                        specifiers = specifiers.concat(this.parseNamedImports());\r\n                    }\r\n                    else {\r\n                        this.throwUnexpectedToken(this.lookahead);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.throwUnexpectedToken(this.nextToken());\r\n            }\r\n            if (!this.matchContextualKeyword('from')) {\r\n                const message = this.lookahead.value ? Messages.UnexpectedToken : Messages.MissingFromClause;\r\n                this.throwError(message, this.lookahead.value);\r\n            }\r\n            this.nextToken();\r\n            src = this.parseModuleSpecifier();\r\n        }\r\n        const attributes = this.parseImportAttributes();\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, new ImportDeclaration(specifiers, src, attributes));\r\n    }\r\n    // https://tc39.github.io/ecma262/#sec-exports\r\n    parseExportSpecifier() {\r\n        const node = this.createNode();\r\n        const local = this.lookahead.type == 8 /* Token.StringLiteral */ ? this.parseModuleSpecifier() : this.parseIdentifierName();\r\n        let exported = local;\r\n        if (this.matchContextualKeyword('as')) {\r\n            if (this.lookahead.escaped) {\r\n                this.throwError(Messages.NoAsAndFromEscapeSequences);\r\n            }\r\n            this.nextToken();\r\n            exported = this.lookahead.type == 8 /* Token.StringLiteral */ ? this.parseModuleSpecifier() : this.parseIdentifierName();\r\n        }\r\n        return this.finalize(node, new ExportSpecifier(local, exported));\r\n    }\r\n    parseExportDeclaration() {\r\n        if (this.context.inFunctionBody) {\r\n            this.throwError(Messages.IllegalExportDeclaration);\r\n        }\r\n        const node = this.createNode();\r\n        this.expectKeyword('export');\r\n        let exportDeclaration;\r\n        if (this.matchKeyword('default')) {\r\n            // export default ...\r\n            this.nextToken();\r\n            if (this.matchKeyword('function')) {\r\n                // export default function foo () {}\r\n                // export default function () {}\r\n                const declaration = this.parseFunctionDeclaration(true);\r\n                exportDeclaration = this.finalize(node, new ExportDefaultDeclaration(declaration));\r\n            }\r\n            else if (this.matchKeyword('class')) {\r\n                // export default class foo {}\r\n                const declaration = this.parseClassDeclaration(true);\r\n                exportDeclaration = this.finalize(node, new ExportDefaultDeclaration(declaration));\r\n            }\r\n            else if (this.matchContextualKeyword('async')) {\r\n                // export default async function f () {}\r\n                // export default async function () {}\r\n                // export default async x => x\r\n                const declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\r\n                exportDeclaration = this.finalize(node, new ExportDefaultDeclaration(declaration));\r\n            }\r\n            else {\r\n                if (this.matchContextualKeyword('from')) {\r\n                    this.throwError(Messages.UnexpectedToken, this.lookahead.value);\r\n                }\r\n                // export default {};\r\n                // export default [];\r\n                // export default (1 + 2);\r\n                const declaration = this.match('{') ? this.parseObjectInitializer() :\r\n                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\r\n                this.consumeSemicolon();\r\n                exportDeclaration = this.finalize(node, new ExportDefaultDeclaration(declaration));\r\n            }\r\n        }\r\n        else if (this.match('*')) {\r\n            // export * from 'foo';\r\n            this.nextToken();\r\n            let exported = null;\r\n            if (this.matchContextualKeyword('as')) {\r\n                if (this.lookahead.escaped) {\r\n                    this.throwError(Messages.NoAsAndFromEscapeSequences);\r\n                }\r\n                this.nextToken();\r\n                exported = this.lookahead.type == 8 /* Token.StringLiteral */ ? this.parseModuleSpecifier() : this.parseIdentifierName();\r\n            }\r\n            if (!this.matchContextualKeyword('from')) {\r\n                const message = this.lookahead.value ? Messages.UnexpectedToken : Messages.MissingFromClause;\r\n                this.throwError(message, this.lookahead.value);\r\n            }\r\n            if (this.lookahead.escaped) {\r\n                this.throwError(Messages.NoAsAndFromEscapeSequences);\r\n            }\r\n            this.nextToken();\r\n            const src = this.parseModuleSpecifier();\r\n            const attributes = this.parseImportAttributes();\r\n            this.consumeSemicolon();\r\n            exportDeclaration = this.finalize(node, new ExportAllDeclaration(src, exported, attributes));\r\n        }\r\n        else if (this.lookahead.type === 4 /* Token.Keyword */) {\r\n            // export var f = 1;\r\n            let declaration;\r\n            switch (this.lookahead.value) {\r\n                case 'let':\r\n                case 'const':\r\n                    declaration = this.parseLexicalDeclaration({ inFor: false });\r\n                    break;\r\n                case 'var':\r\n                case 'class':\r\n                case 'function':\r\n                    declaration = this.parseStatementListItem();\r\n                    break;\r\n                default:\r\n                    this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n            exportDeclaration = this.finalize(node, new ExportNamedDeclaration(declaration, [], null, null));\r\n        }\r\n        else if (this.matchAsyncFunction()) {\r\n            const declaration = this.parseFunctionDeclaration();\r\n            exportDeclaration = this.finalize(node, new ExportNamedDeclaration(declaration, [], null, null));\r\n        }\r\n        else {\r\n            const specifiers = [];\r\n            let source = null;\r\n            let isExportFromIdentifier = false;\r\n            let attributes = null;\r\n            this.expect('{');\r\n            while (!this.match('}')) {\r\n                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\r\n                specifiers.push(this.parseExportSpecifier());\r\n                if (!this.match('}')) {\r\n                    this.expect(',');\r\n                }\r\n            }\r\n            this.expect('}');\r\n            if (this.matchContextualKeyword('from')) {\r\n                // export {default} from 'foo';\r\n                // export {foo} from 'foo';\r\n                if (this.lookahead.escaped) {\r\n                    this.throwError(Messages.NoAsAndFromEscapeSequences);\r\n                }\r\n                this.nextToken();\r\n                source = this.parseModuleSpecifier();\r\n                attributes = this.parseImportAttributes();\r\n                this.consumeSemicolon();\r\n            }\r\n            else if (isExportFromIdentifier) {\r\n                // export {default}; // missing fromClause\r\n                const message = this.lookahead.value ? Messages.UnexpectedToken : Messages.MissingFromClause;\r\n                this.throwError(message, this.lookahead.value);\r\n            }\r\n            else {\r\n                // export {foo};\r\n                attributes = this.parseImportAttributes();\r\n                this.consumeSemicolon();\r\n            }\r\n            exportDeclaration = this.finalize(node, new ExportNamedDeclaration(null, specifiers, source, attributes));\r\n        }\r\n        return exportDeclaration;\r\n    }\r\n}\n\n// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\r\nconst XHTMLEntities = {\r\n    quot: '\\u0022',\r\n    amp: '\\u0026',\r\n    apos: '\\u0027',\r\n    gt: '\\u003E',\r\n    nbsp: '\\u00A0',\r\n    iexcl: '\\u00A1',\r\n    cent: '\\u00A2',\r\n    pound: '\\u00A3',\r\n    curren: '\\u00A4',\r\n    yen: '\\u00A5',\r\n    brvbar: '\\u00A6',\r\n    sect: '\\u00A7',\r\n    uml: '\\u00A8',\r\n    copy: '\\u00A9',\r\n    ordf: '\\u00AA',\r\n    laquo: '\\u00AB',\r\n    not: '\\u00AC',\r\n    shy: '\\u00AD',\r\n    reg: '\\u00AE',\r\n    macr: '\\u00AF',\r\n    deg: '\\u00B0',\r\n    plusmn: '\\u00B1',\r\n    sup2: '\\u00B2',\r\n    sup3: '\\u00B3',\r\n    acute: '\\u00B4',\r\n    micro: '\\u00B5',\r\n    para: '\\u00B6',\r\n    middot: '\\u00B7',\r\n    cedil: '\\u00B8',\r\n    sup1: '\\u00B9',\r\n    ordm: '\\u00BA',\r\n    raquo: '\\u00BB',\r\n    frac14: '\\u00BC',\r\n    frac12: '\\u00BD',\r\n    frac34: '\\u00BE',\r\n    iquest: '\\u00BF',\r\n    Agrave: '\\u00C0',\r\n    Aacute: '\\u00C1',\r\n    Acirc: '\\u00C2',\r\n    Atilde: '\\u00C3',\r\n    Auml: '\\u00C4',\r\n    Aring: '\\u00C5',\r\n    AElig: '\\u00C6',\r\n    Ccedil: '\\u00C7',\r\n    Egrave: '\\u00C8',\r\n    Eacute: '\\u00C9',\r\n    Ecirc: '\\u00CA',\r\n    Euml: '\\u00CB',\r\n    Igrave: '\\u00CC',\r\n    Iacute: '\\u00CD',\r\n    Icirc: '\\u00CE',\r\n    Iuml: '\\u00CF',\r\n    ETH: '\\u00D0',\r\n    Ntilde: '\\u00D1',\r\n    Ograve: '\\u00D2',\r\n    Oacute: '\\u00D3',\r\n    Ocirc: '\\u00D4',\r\n    Otilde: '\\u00D5',\r\n    Ouml: '\\u00D6',\r\n    times: '\\u00D7',\r\n    Oslash: '\\u00D8',\r\n    Ugrave: '\\u00D9',\r\n    Uacute: '\\u00DA',\r\n    Ucirc: '\\u00DB',\r\n    Uuml: '\\u00DC',\r\n    Yacute: '\\u00DD',\r\n    THORN: '\\u00DE',\r\n    szlig: '\\u00DF',\r\n    agrave: '\\u00E0',\r\n    aacute: '\\u00E1',\r\n    acirc: '\\u00E2',\r\n    atilde: '\\u00E3',\r\n    auml: '\\u00E4',\r\n    aring: '\\u00E5',\r\n    aelig: '\\u00E6',\r\n    ccedil: '\\u00E7',\r\n    egrave: '\\u00E8',\r\n    eacute: '\\u00E9',\r\n    ecirc: '\\u00EA',\r\n    euml: '\\u00EB',\r\n    igrave: '\\u00EC',\r\n    iacute: '\\u00ED',\r\n    icirc: '\\u00EE',\r\n    iuml: '\\u00EF',\r\n    eth: '\\u00F0',\r\n    ntilde: '\\u00F1',\r\n    ograve: '\\u00F2',\r\n    oacute: '\\u00F3',\r\n    ocirc: '\\u00F4',\r\n    otilde: '\\u00F5',\r\n    ouml: '\\u00F6',\r\n    divide: '\\u00F7',\r\n    oslash: '\\u00F8',\r\n    ugrave: '\\u00F9',\r\n    uacute: '\\u00FA',\r\n    ucirc: '\\u00FB',\r\n    uuml: '\\u00FC',\r\n    yacute: '\\u00FD',\r\n    thorn: '\\u00FE',\r\n    yuml: '\\u00FF',\r\n    OElig: '\\u0152',\r\n    oelig: '\\u0153',\r\n    Scaron: '\\u0160',\r\n    scaron: '\\u0161',\r\n    Yuml: '\\u0178',\r\n    fnof: '\\u0192',\r\n    circ: '\\u02C6',\r\n    tilde: '\\u02DC',\r\n    Alpha: '\\u0391',\r\n    Beta: '\\u0392',\r\n    Gamma: '\\u0393',\r\n    Delta: '\\u0394',\r\n    Epsilon: '\\u0395',\r\n    Zeta: '\\u0396',\r\n    Eta: '\\u0397',\r\n    Theta: '\\u0398',\r\n    Iota: '\\u0399',\r\n    Kappa: '\\u039A',\r\n    Lambda: '\\u039B',\r\n    Mu: '\\u039C',\r\n    Nu: '\\u039D',\r\n    Xi: '\\u039E',\r\n    Omicron: '\\u039F',\r\n    Pi: '\\u03A0',\r\n    Rho: '\\u03A1',\r\n    Sigma: '\\u03A3',\r\n    Tau: '\\u03A4',\r\n    Upsilon: '\\u03A5',\r\n    Phi: '\\u03A6',\r\n    Chi: '\\u03A7',\r\n    Psi: '\\u03A8',\r\n    Omega: '\\u03A9',\r\n    alpha: '\\u03B1',\r\n    beta: '\\u03B2',\r\n    gamma: '\\u03B3',\r\n    delta: '\\u03B4',\r\n    epsilon: '\\u03B5',\r\n    zeta: '\\u03B6',\r\n    eta: '\\u03B7',\r\n    theta: '\\u03B8',\r\n    iota: '\\u03B9',\r\n    kappa: '\\u03BA',\r\n    lambda: '\\u03BB',\r\n    mu: '\\u03BC',\r\n    nu: '\\u03BD',\r\n    xi: '\\u03BE',\r\n    omicron: '\\u03BF',\r\n    pi: '\\u03C0',\r\n    rho: '\\u03C1',\r\n    sigmaf: '\\u03C2',\r\n    sigma: '\\u03C3',\r\n    tau: '\\u03C4',\r\n    upsilon: '\\u03C5',\r\n    phi: '\\u03C6',\r\n    chi: '\\u03C7',\r\n    psi: '\\u03C8',\r\n    omega: '\\u03C9',\r\n    thetasym: '\\u03D1',\r\n    upsih: '\\u03D2',\r\n    piv: '\\u03D6',\r\n    ensp: '\\u2002',\r\n    emsp: '\\u2003',\r\n    thinsp: '\\u2009',\r\n    zwnj: '\\u200C',\r\n    zwj: '\\u200D',\r\n    lrm: '\\u200E',\r\n    rlm: '\\u200F',\r\n    ndash: '\\u2013',\r\n    mdash: '\\u2014',\r\n    lsquo: '\\u2018',\r\n    rsquo: '\\u2019',\r\n    sbquo: '\\u201A',\r\n    ldquo: '\\u201C',\r\n    rdquo: '\\u201D',\r\n    bdquo: '\\u201E',\r\n    dagger: '\\u2020',\r\n    Dagger: '\\u2021',\r\n    bull: '\\u2022',\r\n    hellip: '\\u2026',\r\n    permil: '\\u2030',\r\n    prime: '\\u2032',\r\n    Prime: '\\u2033',\r\n    lsaquo: '\\u2039',\r\n    rsaquo: '\\u203A',\r\n    oline: '\\u203E',\r\n    frasl: '\\u2044',\r\n    euro: '\\u20AC',\r\n    image: '\\u2111',\r\n    weierp: '\\u2118',\r\n    real: '\\u211C',\r\n    trade: '\\u2122',\r\n    alefsym: '\\u2135',\r\n    larr: '\\u2190',\r\n    uarr: '\\u2191',\r\n    rarr: '\\u2192',\r\n    darr: '\\u2193',\r\n    harr: '\\u2194',\r\n    crarr: '\\u21B5',\r\n    lArr: '\\u21D0',\r\n    uArr: '\\u21D1',\r\n    rArr: '\\u21D2',\r\n    dArr: '\\u21D3',\r\n    hArr: '\\u21D4',\r\n    forall: '\\u2200',\r\n    part: '\\u2202',\r\n    exist: '\\u2203',\r\n    empty: '\\u2205',\r\n    nabla: '\\u2207',\r\n    isin: '\\u2208',\r\n    notin: '\\u2209',\r\n    ni: '\\u220B',\r\n    prod: '\\u220F',\r\n    sum: '\\u2211',\r\n    minus: '\\u2212',\r\n    lowast: '\\u2217',\r\n    radic: '\\u221A',\r\n    prop: '\\u221D',\r\n    infin: '\\u221E',\r\n    ang: '\\u2220',\r\n    and: '\\u2227',\r\n    or: '\\u2228',\r\n    cap: '\\u2229',\r\n    cup: '\\u222A',\r\n    int: '\\u222B',\r\n    there4: '\\u2234',\r\n    sim: '\\u223C',\r\n    cong: '\\u2245',\r\n    asymp: '\\u2248',\r\n    ne: '\\u2260',\r\n    equiv: '\\u2261',\r\n    le: '\\u2264',\r\n    ge: '\\u2265',\r\n    sub: '\\u2282',\r\n    sup: '\\u2283',\r\n    nsub: '\\u2284',\r\n    sube: '\\u2286',\r\n    supe: '\\u2287',\r\n    oplus: '\\u2295',\r\n    otimes: '\\u2297',\r\n    perp: '\\u22A5',\r\n    sdot: '\\u22C5',\r\n    lceil: '\\u2308',\r\n    rceil: '\\u2309',\r\n    lfloor: '\\u230A',\r\n    rfloor: '\\u230B',\r\n    loz: '\\u25CA',\r\n    spades: '\\u2660',\r\n    clubs: '\\u2663',\r\n    hearts: '\\u2665',\r\n    diams: '\\u2666',\r\n    lang: '\\u27E8',\r\n    rang: '\\u27E9'\r\n};\n\nTokenName[100 /* JSXToken.Identifier */] = 'JSXIdentifier';\r\nTokenName[101 /* JSXToken.Text */] = 'JSXText';\r\n// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\r\nfunction getQualifiedElementName(elementName) {\r\n    let qualifiedName;\r\n    switch (elementName.type) {\r\n        case JSXSyntax.JSXIdentifier:\r\n            const id = elementName;\r\n            qualifiedName = id.name;\r\n            break;\r\n        case JSXSyntax.JSXNamespacedName:\r\n            const ns = elementName;\r\n            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\r\n                getQualifiedElementName(ns.name);\r\n            break;\r\n        case JSXSyntax.JSXMemberExpression:\r\n            const expr = elementName;\r\n            qualifiedName = getQualifiedElementName(expr.object) + '.' +\r\n                getQualifiedElementName(expr.property);\r\n            break;\r\n    }\r\n    return qualifiedName;\r\n}\r\nclass JSXParser extends Parser {\r\n    constructor(code, options, delegate) {\r\n        super(code, options, delegate);\r\n    }\r\n    //@ts-ignore\r\n    parsePrimaryExpression() {\r\n        return this.match('<') ? this.parseJSXRoot() : super.parsePrimaryExpression();\r\n    }\r\n    startJSX() {\r\n        // Unwind the scanner before the lookahead token.\r\n        this.scanner.index = this.startMarker.index;\r\n        this.scanner.lineNumber = this.startMarker.line;\r\n        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\r\n    }\r\n    finishJSX() {\r\n        // Prime the next lookahead.\r\n        this.nextToken();\r\n    }\r\n    reenterJSX() {\r\n        this.startJSX();\r\n        this.expectJSX('}');\r\n        // Pop the closing '}' added from the lookahead.\r\n        if (this.config.tokens) {\r\n            this.tokens.pop();\r\n        }\r\n    }\r\n    createJSXNode() {\r\n        this.collectComments();\r\n        return {\r\n            index: this.scanner.index,\r\n            line: this.scanner.lineNumber,\r\n            column: this.scanner.index - this.scanner.lineStart\r\n        };\r\n    }\r\n    createJSXChildNode() {\r\n        return {\r\n            index: this.scanner.index,\r\n            line: this.scanner.lineNumber,\r\n            column: this.scanner.index - this.scanner.lineStart\r\n        };\r\n    }\r\n    scanXHTMLEntity(quote) {\r\n        let result = '&';\r\n        let valid = true;\r\n        let terminated = false;\r\n        let numeric = false;\r\n        let hex = false;\r\n        while (!this.scanner.eof() && valid && !terminated) {\r\n            const ch = this.scanner.source[this.scanner.index];\r\n            if (ch === quote) {\r\n                break;\r\n            }\r\n            terminated = (ch === ';');\r\n            result += ch;\r\n            ++this.scanner.index;\r\n            if (!terminated) {\r\n                switch (result.length) {\r\n                    case 2:\r\n                        // e.g. '&#123;'\r\n                        numeric = (ch === '#');\r\n                        break;\r\n                    case 3:\r\n                        if (numeric) {\r\n                            // e.g. '&#x41;'\r\n                            hex = (ch === 'x');\r\n                            valid = hex || Character.isDecimalDigit(ch.charCodeAt(0));\r\n                            numeric = numeric && !hex;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        valid = valid && !(numeric && !Character.isDecimalDigit(ch.charCodeAt(0)));\r\n                        valid = valid && !(hex && !Character.isHexDigit(ch.charCodeAt(0)));\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (valid && terminated && result.length > 2) {\r\n            // e.g. '&#x41;' becomes just '#x41'\r\n            const str = result.substr(1, result.length - 2);\r\n            if (numeric && str.length > 1) {\r\n                result = String.fromCharCode(parseInt(str.substr(1), 10));\r\n            }\r\n            else if (hex && str.length > 2) {\r\n                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\r\n            }\r\n            else if (!numeric && !hex && XHTMLEntities[str]) {\r\n                result = XHTMLEntities[str];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\r\n    lexJSX() {\r\n        const cp = this.scanner.source.charCodeAt(this.scanner.index);\r\n        // < > / : = { }\r\n        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\r\n            const value = this.scanner.source[this.scanner.index++];\r\n            return {\r\n                type: 7 /* Token.Punctuator */,\r\n                value: value,\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: this.scanner.index - 1,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n        // \" '\r\n        if (cp === 34 || cp === 39) {\r\n            const start = this.scanner.index;\r\n            const quote = this.scanner.source[this.scanner.index++];\r\n            let str = '';\r\n            while (!this.scanner.eof()) {\r\n                const ch = this.scanner.source[this.scanner.index++];\r\n                if (ch === quote) {\r\n                    break;\r\n                }\r\n                else if (ch === '&') {\r\n                    str += this.scanXHTMLEntity(quote);\r\n                }\r\n                else {\r\n                    str += ch;\r\n                }\r\n            }\r\n            return {\r\n                type: 8 /* Token.StringLiteral */,\r\n                value: str,\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: start,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n        // ... or .\r\n        if (cp === 46) {\r\n            const n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\r\n            const n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\r\n            const value = (n1 === 46 && n2 === 46) ? '...' : '.';\r\n            const start = this.scanner.index;\r\n            this.scanner.index += value.length;\r\n            return {\r\n                type: 7 /* Token.Punctuator */,\r\n                value: value,\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: start,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n        // `\r\n        if (cp === 96) {\r\n            // Only placeholder, since it will be rescanned as a real assignment expression.\r\n            return {\r\n                type: 10 /* Token.Template */,\r\n                value: '',\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: this.scanner.index,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n        // Identifer can not contain backslash (char code 92).\r\n        if (Character.isIdentifierStart(cp) && (cp !== 92)) {\r\n            const start = this.scanner.index;\r\n            ++this.scanner.index;\r\n            while (!this.scanner.eof()) {\r\n                const ch = this.scanner.source.charCodeAt(this.scanner.index);\r\n                if (Character.isIdentifierPart(ch) && (ch !== 92)) {\r\n                    ++this.scanner.index;\r\n                }\r\n                else if (ch === 45) {\r\n                    // Hyphen (char code 45) can be part of an identifier.\r\n                    ++this.scanner.index;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            const id = this.scanner.source.slice(start, this.scanner.index);\r\n            return {\r\n                type: 100 /* JSXToken.Identifier */,\r\n                value: id,\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: start,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n        return this.scanner.lex();\r\n    }\r\n    nextJSXToken() {\r\n        this.collectComments();\r\n        this.startMarker.index = this.scanner.index;\r\n        this.startMarker.line = this.scanner.lineNumber;\r\n        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        const token = this.lexJSX();\r\n        this.lastMarker.index = this.scanner.index;\r\n        this.lastMarker.line = this.scanner.lineNumber;\r\n        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        if (this.config.tokens) {\r\n            this.tokens.push(this.convertToken(token));\r\n        }\r\n        return token;\r\n    }\r\n    nextJSXText() {\r\n        this.startMarker.index = this.scanner.index;\r\n        this.startMarker.line = this.scanner.lineNumber;\r\n        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        const start = this.scanner.index;\r\n        let text = '';\r\n        while (!this.scanner.eof()) {\r\n            const ch = this.scanner.source[this.scanner.index];\r\n            if (ch === '{' || ch === '<') {\r\n                break;\r\n            }\r\n            ++this.scanner.index;\r\n            text += ch;\r\n            if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                ++this.scanner.lineNumber;\r\n                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\r\n                    ++this.scanner.index;\r\n                }\r\n                this.scanner.lineStart = this.scanner.index;\r\n            }\r\n        }\r\n        this.lastMarker.index = this.scanner.index;\r\n        this.lastMarker.line = this.scanner.lineNumber;\r\n        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        const token = {\r\n            type: 101 /* JSXToken.Text */,\r\n            value: text,\r\n            lineNumber: this.scanner.lineNumber,\r\n            lineStart: this.scanner.lineStart,\r\n            start: start,\r\n            end: this.scanner.index\r\n        };\r\n        if ((text.length > 0) && this.config.tokens) {\r\n            this.tokens.push(this.convertToken(token));\r\n        }\r\n        return token;\r\n    }\r\n    peekJSXToken() {\r\n        const state = this.scanner.saveState();\r\n        this.scanner.scanComments();\r\n        const next = this.lexJSX();\r\n        this.scanner.restoreState(state);\r\n        return next;\r\n    }\r\n    // Expect the next JSX token to match the specified punctuator.\r\n    // If not, an exception will be thrown.\r\n    expectJSX(value) {\r\n        const token = this.nextJSXToken();\r\n        if (token.type !== 7 /* Token.Punctuator */ || token.value !== value) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n    }\r\n    // Return true if the next JSX token matches the specified punctuator.\r\n    matchJSX(value) {\r\n        const next = this.peekJSXToken();\r\n        return next.type === 7 /* Token.Punctuator */ && next.value === value;\r\n    }\r\n    parseJSXIdentifier() {\r\n        const node = this.createJSXNode();\r\n        const token = this.nextJSXToken();\r\n        if (token.type !== 100 /* JSXToken.Identifier */) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n        return this.finalize(node, new JSXIdentifier(token.value));\r\n    }\r\n    parseJSXElementName() {\r\n        const node = this.createJSXNode();\r\n        let elementName = this.parseJSXIdentifier();\r\n        if (this.matchJSX(':')) {\r\n            const namespace = elementName;\r\n            this.expectJSX(':');\r\n            const name = this.parseJSXIdentifier();\r\n            elementName = this.finalize(node, new JSXNamespacedName(namespace, name));\r\n        }\r\n        else if (this.matchJSX('.')) {\r\n            while (this.matchJSX('.')) {\r\n                const object = elementName;\r\n                this.expectJSX('.');\r\n                const property = this.parseJSXIdentifier();\r\n                elementName = this.finalize(node, new JSXMemberExpression(object, property));\r\n            }\r\n        }\r\n        return elementName;\r\n    }\r\n    parseJSXAttributeName() {\r\n        const node = this.createJSXNode();\r\n        let attributeName;\r\n        const identifier = this.parseJSXIdentifier();\r\n        if (this.matchJSX(':')) {\r\n            const namespace = identifier;\r\n            this.expectJSX(':');\r\n            const name = this.parseJSXIdentifier();\r\n            attributeName = this.finalize(node, new JSXNamespacedName(namespace, name));\r\n        }\r\n        else {\r\n            attributeName = identifier;\r\n        }\r\n        return attributeName;\r\n    }\r\n    parseJSXStringLiteralAttribute() {\r\n        const node = this.createJSXNode();\r\n        const token = this.nextJSXToken();\r\n        if (token.type !== 8 /* Token.StringLiteral */) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n        const raw = this.getTokenRaw(token);\r\n        return this.finalize(node, new Literal(token.value, raw));\r\n    }\r\n    parseJSXExpressionAttribute() {\r\n        const node = this.createJSXNode();\r\n        this.expectJSX('{');\r\n        this.finishJSX();\r\n        if (this.match('}')) {\r\n            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\r\n        }\r\n        const expression = this.parseAssignmentExpression();\r\n        this.reenterJSX();\r\n        return this.finalize(node, new JSXExpressionContainer(expression));\r\n    }\r\n    parseJSXAttributeValue() {\r\n        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\r\n            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\r\n    }\r\n    parseJSXNameValueAttribute() {\r\n        const node = this.createJSXNode();\r\n        const name = this.parseJSXAttributeName();\r\n        let value = null;\r\n        if (this.matchJSX('=')) {\r\n            this.expectJSX('=');\r\n            value = this.parseJSXAttributeValue();\r\n        }\r\n        return this.finalize(node, new JSXAttribute(name, value));\r\n    }\r\n    parseJSXSpreadAttribute() {\r\n        const node = this.createJSXNode();\r\n        this.expectJSX('{');\r\n        this.expectJSX('...');\r\n        this.finishJSX();\r\n        const argument = this.parseAssignmentExpression();\r\n        this.reenterJSX();\r\n        return this.finalize(node, new JSXSpreadAttribute(argument));\r\n    }\r\n    parseJSXAttributes() {\r\n        const attributes = [];\r\n        while (!this.matchJSX('/') && !this.matchJSX('>')) {\r\n            const attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\r\n                this.parseJSXNameValueAttribute();\r\n            attributes.push(attribute);\r\n        }\r\n        return attributes;\r\n    }\r\n    parseJSXOpeningElement() {\r\n        const node = this.createJSXNode();\r\n        this.expectJSX('<');\r\n        if (this.matchJSX('>')) {\r\n            this.expectJSX('>');\r\n            return this.finalize(node, new JSXOpeningFragment(false));\r\n        }\r\n        const name = this.parseJSXElementName();\r\n        const attributes = this.parseJSXAttributes();\r\n        const selfClosing = this.matchJSX('/');\r\n        if (selfClosing) {\r\n            this.expectJSX('/');\r\n        }\r\n        this.expectJSX('>');\r\n        return this.finalize(node, new JSXOpeningElement(name, selfClosing, attributes));\r\n    }\r\n    parseJSXBoundaryElement() {\r\n        const node = this.createJSXNode();\r\n        this.expectJSX('<');\r\n        if (this.matchJSX('/')) {\r\n            this.expectJSX('/');\r\n            if (this.matchJSX('>')) {\r\n                this.expectJSX('>');\r\n                return this.finalize(node, new JSXClosingFragment());\r\n            }\r\n            const elementName = this.parseJSXElementName();\r\n            this.expectJSX('>');\r\n            return this.finalize(node, new JSXClosingElement(elementName));\r\n        }\r\n        const name = this.parseJSXElementName();\r\n        const attributes = this.parseJSXAttributes();\r\n        const selfClosing = this.matchJSX('/');\r\n        if (selfClosing) {\r\n            this.expectJSX('/');\r\n        }\r\n        this.expectJSX('>');\r\n        return this.finalize(node, new JSXOpeningElement(name, selfClosing, attributes));\r\n    }\r\n    parseJSXEmptyExpression() {\r\n        const node = this.createJSXChildNode();\r\n        this.collectComments();\r\n        this.lastMarker.index = this.scanner.index;\r\n        this.lastMarker.line = this.scanner.lineNumber;\r\n        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        return this.finalize(node, new JSXEmptyExpression());\r\n    }\r\n    parseJSXExpressionContainer() {\r\n        const node = this.createJSXNode();\r\n        this.expectJSX('{');\r\n        let expression;\r\n        if (this.matchJSX('}')) {\r\n            expression = this.parseJSXEmptyExpression();\r\n            this.expectJSX('}');\r\n        }\r\n        else {\r\n            this.finishJSX();\r\n            expression = this.parseAssignmentExpression();\r\n            this.reenterJSX();\r\n        }\r\n        return this.finalize(node, new JSXExpressionContainer(expression));\r\n    }\r\n    parseJSXChildren() {\r\n        const children = [];\r\n        while (!this.scanner.eof()) {\r\n            const node = this.createJSXChildNode();\r\n            const token = this.nextJSXText();\r\n            if (token.start < token.end) {\r\n                const raw = this.getTokenRaw(token);\r\n                const child = this.finalize(node, new JSXText(token.value, raw));\r\n                children.push(child);\r\n            }\r\n            if (this.scanner.source[this.scanner.index] === '{') {\r\n                const container = this.parseJSXExpressionContainer();\r\n                children.push(container);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return children;\r\n    }\r\n    parseComplexJSXElement(el) {\r\n        const stack = [];\r\n        while (!this.scanner.eof()) {\r\n            el.children = el.children.concat(this.parseJSXChildren());\r\n            const node = this.createJSXChildNode();\r\n            const element = this.parseJSXBoundaryElement();\r\n            if (element.type === JSXSyntax.JSXOpeningElement) {\r\n                const opening = element;\r\n                if (opening.selfClosing) {\r\n                    const child = this.finalize(node, new JSXElement(opening, [], null));\r\n                    el.children.push(child);\r\n                }\r\n                else {\r\n                    stack.push(el);\r\n                    el = { node, opening, closing: null, children: [] };\r\n                }\r\n            }\r\n            if (element.type === JSXSyntax.JSXClosingElement) {\r\n                el.closing = element;\r\n                const open = getQualifiedElementName(el.opening.name);\r\n                const close = getQualifiedElementName(el.closing.name);\r\n                if (open !== close) {\r\n                    this.tolerateError('Expected corresponding JSX closing tag for %0', open);\r\n                }\r\n                if (stack.length > 0) {\r\n                    const child = this.finalize(el.node, new JSXElement(el.opening, el.children, el.closing));\r\n                    el = stack[stack.length - 1];\r\n                    el.children.push(child);\r\n                    stack.pop();\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            if (element.type === JSXSyntax.JSXClosingFragment) {\r\n                el.closing = element;\r\n                if (el.opening.type !== JSXSyntax.JSXOpeningFragment) {\r\n                    this.tolerateError('Expected corresponding JSX closing tag for jsx fragment');\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return el;\r\n    }\r\n    parseJSXElement() {\r\n        const node = this.createJSXNode();\r\n        const opening = this.parseJSXOpeningElement();\r\n        let children = [];\r\n        let closing = null;\r\n        if (!opening.selfClosing) {\r\n            const el = this.parseComplexJSXElement({ node, opening, closing, children });\r\n            children = el.children;\r\n            closing = el.closing;\r\n        }\r\n        return this.finalize(node, new JSXElement(opening, children, closing));\r\n    }\r\n    parseJSXRoot() {\r\n        // Pop the opening '<' added from the lookahead.\r\n        if (this.config.tokens) {\r\n            this.tokens.pop();\r\n        }\r\n        this.startJSX();\r\n        const element = this.parseJSXElement();\r\n        this.finishJSX();\r\n        return element;\r\n    }\r\n    isStartOfExpression() {\r\n        return super.isStartOfExpression() || this.match('<');\r\n    }\r\n}\n\nconst beforeFunctionExpressionTokens = [\r\n    '(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\r\n    'return', 'case', 'delete', 'throw', 'void',\r\n    // assignment operators\r\n    '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\r\n    '&=', '|=', '^=', ',',\r\n    // binary/unary operators\r\n    '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\r\n    '|', '^', '!', '~', '&&', '||', '??', '?', ':', '===', '==', '>=',\r\n    '<=', '<', '>', '!=', '!=='\r\n];\r\nclass Reader {\r\n    constructor() {\r\n        this.values = [];\r\n        this.curly = this.paren = -1;\r\n    }\r\n    // A function following one of those tokens is an expression.\r\n    beforeFunctionExpression(t) {\r\n        return beforeFunctionExpressionTokens.includes(t);\r\n    }\r\n    // Determine if forward slash (/) is an operator or part of a regular expression\r\n    // https://github.com/mozilla/sweet.js/wiki/design\r\n    isRegexStart() {\r\n        const previous = this.values[this.values.length - 1];\r\n        let regex = (previous !== null);\r\n        switch (previous) {\r\n            case 'this':\r\n            case ']':\r\n                regex = false;\r\n                break;\r\n            case ')':\r\n                const keyword = this.values[this.paren - 1];\r\n                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');\r\n                break;\r\n            case '}':\r\n                // Dividing a function by anything makes little sense,\r\n                // but we have to check for that.\r\n                regex = true;\r\n                if (this.values[this.curly - 3] === 'function') {\r\n                    // Anonymous function, e.g. function(){} /42\r\n                    const check = this.values[this.curly - 4];\r\n                    regex = check ? !this.beforeFunctionExpression(check) : false;\r\n                }\r\n                else if (this.values[this.curly - 4] === 'function') {\r\n                    // Named function, e.g. function f(){} /42/\r\n                    const check = this.values[this.curly - 5];\r\n                    regex = check ? !this.beforeFunctionExpression(check) : true;\r\n                }\r\n                break;\r\n        }\r\n        return regex;\r\n    }\r\n    push(token) {\r\n        if (token.type === 7 /* Token.Punctuator */ || token.type === 4 /* Token.Keyword */) {\r\n            if (token.value === '{') {\r\n                this.curly = this.values.length;\r\n            }\r\n            else if (token.value === '(') {\r\n                this.paren = this.values.length;\r\n            }\r\n            this.values.push(token.value);\r\n        }\r\n        else {\r\n            this.values.push(null);\r\n        }\r\n    }\r\n}\r\nclass Tokenizer {\r\n    constructor(code, config) {\r\n        this.errorHandler = new ErrorHandler();\r\n        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\r\n        this.scanner = new Scanner(code, this.errorHandler);\r\n        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\r\n        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\r\n        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\r\n        this.buffer = [];\r\n        this.reader = new Reader();\r\n    }\r\n    errors() {\r\n        return this.errorHandler.errors;\r\n    }\r\n    getNextToken() {\r\n        if (this.buffer.length === 0) {\r\n            const comments = this.scanner.scanComments();\r\n            if (this.scanner.trackComment) {\r\n                for (let i = 0; i < comments.length; ++i) {\r\n                    const e = comments[i];\r\n                    const value = this.scanner.source.slice(e.slice[0], e.slice[1]);\r\n                    const comment = {\r\n                        type: e.multiLine ? 'BlockComment' : 'LineComment',\r\n                        value: value\r\n                    };\r\n                    if (this.trackRange) {\r\n                        comment.range = e.range;\r\n                    }\r\n                    if (this.trackLoc) {\r\n                        comment.loc = e.loc;\r\n                    }\r\n                    this.buffer.push(comment);\r\n                }\r\n            }\r\n            if (!this.scanner.eof()) {\r\n                let loc;\r\n                if (this.trackLoc) {\r\n                    loc = {\r\n                        start: {\r\n                            line: this.scanner.lineNumber,\r\n                            column: this.scanner.index - this.scanner.lineStart\r\n                        },\r\n                        end: {}\r\n                    };\r\n                }\r\n                const maybeRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();\r\n                let token;\r\n                if (maybeRegex) {\r\n                    const state = this.scanner.saveState();\r\n                    try {\r\n                        token = this.scanner.scanRegExp();\r\n                    }\r\n                    catch (e) {\r\n                        this.scanner.restoreState(state);\r\n                        token = this.scanner.lex();\r\n                    }\r\n                }\r\n                else {\r\n                    token = this.scanner.lex();\r\n                }\r\n                this.reader.push(token);\r\n                const entry = {\r\n                    type: TokenName[token.type],\r\n                    value: this.scanner.source.slice(token.start, token.end)\r\n                };\r\n                if (this.trackRange) {\r\n                    entry.range = [token.start, token.end];\r\n                }\r\n                if (this.trackLoc) {\r\n                    loc.end = {\r\n                        line: this.scanner.lineNumber,\r\n                        column: this.scanner.index - this.scanner.lineStart\r\n                    };\r\n                    entry.loc = loc;\r\n                }\r\n                if (token.type === 9 /* Token.RegularExpression */) {\r\n                    const pattern = token.pattern;\r\n                    const flags = token.flags;\r\n                    entry.regex = { pattern, flags };\r\n                }\r\n                this.buffer.push(entry);\r\n            }\r\n        }\r\n        return this.buffer.shift();\r\n    }\r\n}\n\n/*\r\n  Copyright JS Foundation and other contributors, https://js.foundation/\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nfunction parse(code, options, delegate) {\r\n    let commentHandler = null;\r\n    const proxyDelegate = (node, metadata) => {\r\n        if (delegate) {\r\n            delegate(node, metadata);\r\n        }\r\n        if (commentHandler) {\r\n            commentHandler.visit(node, metadata);\r\n        }\r\n    };\r\n    let parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\r\n    let collectComment = false;\r\n    if (options) {\r\n        collectComment = (typeof options.comment === 'boolean' && options.comment);\r\n        const attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\r\n        if (collectComment || attachComment) {\r\n            commentHandler = new CommentHandler();\r\n            commentHandler.attach = attachComment;\r\n            options.comment = true;\r\n            parserDelegate = proxyDelegate;\r\n        }\r\n    }\r\n    let isModule = false;\r\n    if (options && typeof options.sourceType === 'string') {\r\n        isModule = (options.sourceType === 'module');\r\n    }\r\n    let parser;\r\n    if (options && typeof options.jsx === 'boolean' && options.jsx) {\r\n        parser = new JSXParser(code, options, parserDelegate);\r\n    }\r\n    else {\r\n        parser = new Parser(code, options, parserDelegate);\r\n    }\r\n    const program = isModule ? parser.parseModule() : parser.parseScript();\r\n    const ast = program;\r\n    if (collectComment && commentHandler) {\r\n        ast.comments = commentHandler.comments;\r\n    }\r\n    if (parser.config.tokens) {\r\n        ast.tokens = parser.tokens;\r\n    }\r\n    if (parser.config.tolerant) {\r\n        ast.errors = parser.errorHandler.errors;\r\n    }\r\n    return ast;\r\n}\r\nfunction parseModule(code, options, delegate) {\r\n    const parsingOptions = options || {};\r\n    parsingOptions.sourceType = 'module';\r\n    return parse(code, parsingOptions, delegate);\r\n}\r\nfunction parseScript(code, options, delegate) {\r\n    const parsingOptions = options || {};\r\n    parsingOptions.sourceType = 'script';\r\n    return parse(code, parsingOptions, delegate);\r\n}\r\nfunction tokenize(code, options, delegate) {\r\n    const tokenizer = new Tokenizer(code, options);\r\n    const tokens = [];\r\n    try {\r\n        while (true) {\r\n            let token = tokenizer.getNextToken();\r\n            if (!token) {\r\n                break;\r\n            }\r\n            if (delegate) {\r\n                token = delegate(token);\r\n            }\r\n            tokens.push(token);\r\n        }\r\n    }\r\n    catch (e) {\r\n        tokenizer.errorHandler.tolerate(e);\r\n    }\r\n    if (tokenizer.errorHandler.tolerant) {\r\n        tokens.errors = tokenizer.errors();\r\n    }\r\n    return tokens;\r\n}\r\n// Sync with *.json manifests.\r\nconst version = '5.7.1';\r\nvar esprima = {\r\n    parse, parseModule, parseScript, tokenize, Syntax, version\r\n};\n\nexport { ArrayExpression, ArrayPattern, ArrowFunctionExpression, AssignmentExpression, AssignmentPattern, AsyncFunctionDeclaration, AwaitExpression, BigIntLiteral, BinaryExpression, BlockStatement, BreakStatement, CallExpression, CatchClause, ChainExpression, ClassBody, ClassDeclaration, ClassExpression, ConditionalExpression, ContinueStatement, DebuggerStatement, Decorator, Directive, DoWhileStatement, EmptyStatement, ExportAllDeclaration, ExportDefaultDeclaration, ExportNamedDeclaration, ExportSpecifier, ExpressionStatement, ForInStatement, ForOfStatement, ForStatement, FunctionDeclaration, FunctionExpression, Identifier, IfStatement, ImportAttribute, ImportDeclaration, ImportDefaultSpecifier, ImportExpression, ImportNamespaceSpecifier, ImportSpecifier, LabeledStatement, Literal, LogicalExpression, MemberExpression, MetaProperty, MethodDefinition, Module, NewExpression, nodes as Nodes, ObjectExpression, ObjectPattern, PrivateIdentifier, Program, Property, PropertyDefinition, RegexLiteral, RestElement, ReturnStatement, Script, SequenceExpression, SpreadElement, StaticBlock, Super, SwitchCase, SwitchStatement, Syntax, TaggedTemplateExpression, TemplateElement, TemplateLiteral, ThisExpression, ThrowStatement, TryStatement, UnaryExpression, UpdateExpression, VariableDeclaration, VariableDeclarator, WhileStatement, WithStatement, YieldExpression, esprima as default, parse, parseModule, parseScript, tokenize, version };\n"],"names":["Syntax","CommentHandler","node","metadata","innerComments","entry","trailingComments","last","firstComment","leadingComments","target","count","i","comment","type","Regex","Character","cp","text","c","ch","JSXSyntax","JSXClosingElement","name","JSXClosingFragment","JSXElement","openingElement","children","closingElement","JSXEmptyExpression","JSXExpressionContainer","expression","JSXIdentifier","JSXMemberExpression","object","property","JSXAttribute","value","JSXNamespacedName","namespace","JSXOpeningElement","selfClosing","attributes","JSXOpeningFragment","JSXSpreadAttribute","argument","JSXText","raw","ArrayExpression","elements","ArrayPattern","ArrowFunctionExpression","params","body","isAsync","AssignmentExpression","operator","left","right","AssignmentPattern","AsyncFunctionDeclaration","id","generator","AwaitExpression","BigIntLiteral","bigint","BinaryExpression","BlockStatement","BreakStatement","label","CallExpression","callee","args","optional","CatchClause","param","ChainExpression","ClassBody","ClassDeclaration","superClass","decorators","ClassExpression","ConditionalExpression","test","consequent","alternate","ContinueStatement","DebuggerStatement","Decorator","Directive","directive","DoWhileStatement","EmptyStatement","ExportAllDeclaration","source","exported","assertions","ExportDefaultDeclaration","declaration","ExportNamedDeclaration","specifiers","ExportSpecifier","local","ExpressionStatement","ForInStatement","ForOfStatement","_await","ForStatement","init","update","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","ImportAttribute","key","ImportExpression","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","imported","LabeledStatement","Literal","LogicalExpression","MemberExpression","computed","MetaProperty","meta","MethodDefinition","kind","isStatic","Module","NewExpression","ObjectExpression","properties","ObjectPattern","PrivateIdentifier","Property","method","shorthand","PropertyDefinition","RegexLiteral","pattern","flags","RestElement","ReturnStatement","Script","SequenceExpression","expressions","SpreadElement","StaticBlock","Super","SwitchCase","SwitchStatement","discriminant","cases","TaggedTemplateExpression","tag","quasi","TemplateElement","tail","TemplateLiteral","quasis","ThisExpression","ThrowStatement","TryStatement","block","handler","finalizer","UnaryExpression","UpdateExpression","prefix","VariableDeclaration","declarations","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","delegate","assert","condition","message","ErrorHandler","error","msg","column","base","index","line","col","description","_error","Messages","hexValue","octalValue","Scanner","code","state","offset","comments","start","loc","second","len","result","octal","escaped","restore","str","num","check","quote","unescapedChar","unescaped","octToDec","cooked","terminated","head","notEscapeSequenceHead","rawOffset","unicodeCodePointEscape","astralSubstitute","tmp","$0","$1","$2","codePoint","e","exception","classMarker","char","TokenName","ArrowParameterPlaceHolder","Parser","options","messageFormat","values","whole","idx","token","lastMarkerLineStart","next","lastLineStart","marker","keyword","op","parseFunction","previousIsBindingElement","previousIsAssignmentTarget","previousFirstCoverInitializedNameError","expr","arg","element","previousStrict","previousAllowStrictDirective","isGenerator","previousAllowYield","previousIsAsync","isPrivate","hasProto","lookaheadPropertyKey","startToken","arrow","parameters","allowPrivateField","isPrivateField","match","dot","maybeAsync","previousAllowIn","isSuper","hasOptional","asyncArrow","isLeftParenthesized","precedence","allowAndOr","allowNullishCoalescing","updateNullishCoalescingRestrictions","prec","markers","stack","precedences","logical","lastMarker","list","statement","keyToken","opt","previousInIteration","forIn","decl","initStartToken","initSeq","previousInSwitch","defaultFound","clause","paramMap","previousLabelSet","previousInFunctionBody","firstRestricted","identifierIsOptional","formalParameters","stricted","hasConstructor","previousInConstructor","punctuator","previousInClassConstructor","elementList","previousAllowSuper","classBody","literalToken","src","exportDeclaration","isExportFromIdentifier","XHTMLEntities","getQualifiedElementName","elementName","qualifiedName","ns","JSXParser","valid","numeric","hex","n1","n2","attributeName","identifier","attribute","child","container","el","opening","open","close","closing","parse","commentHandler","proxyDelegate","parserDelegate","collectComment","attachComment","isModule","parser","ast","parseScript","parsingOptions"],"mappings":"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"}