{"version":3,"sources":["../../es/index.mjs"],"names":["isRetryAllowed","namespace","isNetworkError","error","response","Boolean","code","SAFE_HTTP_METHODS","IDEMPOTENT_HTTP_METHODS","concat","isRetryableError","status","isSafeRequestError","config","indexOf","method","isIdempotentRequestError","isNetworkOrIdempotentRequestError","noDelay","exponentialDelay","retryNumber","delayFactor","delay","Math","pow","randomSum","random","getCurrentState","currentState","retryCount","getRequestOptions","defaultOptions","fixConfig","axios","defaults","agent","httpAgent","httpsAgent","shouldRetry","retries","retryCondition","shouldRetryOrPromise","shouldRetryPromiseResult","_err","axiosRetry","interceptors","request","use","lastRequestTime","Date","now","Promise","reject","retryDelay","shouldResetTimeout","onRetry","timeout","lastRequestDuration","transformRequest","data","resolve","setTimeout"],"mappings":"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","sourcesContent":["import isRetryAllowed from 'is-retry-allowed';\n\nexport const namespace = 'axios-retry';\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkError(error) {\n  return (\n    !error.response &&\n    Boolean(error.code) && // Prevents retrying cancelled requests\n    error.code !== 'ECONNABORTED' && // Prevents retrying timed out requests\n    isRetryAllowed(error)\n  ); // Prevents retrying unsafe errors\n}\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isRetryableError(error) {\n  return (\n    error.code !== 'ECONNABORTED' &&\n    (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n\n/**\n * @return {number} - delay in milliseconds, always 0\n */\nfunction noDelay() {\n  return 0;\n}\n\n/**\n * Set delayFactor 1000 for an exponential delay to occur on the order\n * of seconds\n * @param  {number} [retryNumber=0]\n * @param  {Error}  error - unused; for existing API of retryDelay callback\n * @param  {number} [delayFactor=100] milliseconds\n * @return {number} - delay in milliseconds\n */\nexport function exponentialDelay(retryNumber = 0, error, delayFactor = 100) {\n  const delay = Math.pow(2, retryNumber) * delayFactor;\n  const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n  return delay + randomSum;\n}\n\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\nfunction getCurrentState(config) {\n  const currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\nfunction getRequestOptions(config, defaultOptions) {\n  return { ...defaultOptions, ...config[namespace] };\n}\n\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n\n/**\n * Checks retryCondition if request can be retried. Handles it's retruning value or Promise.\n * @param  {number} retries\n * @param  {Function} retryCondition\n * @param  {Object} currentState\n * @param  {Error} error\n * @return {boolean}\n */\nasync function shouldRetry(retries, retryCondition, currentState, error) {\n  const shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error);\n\n  // This could be a promise\n  if (typeof shouldRetryOrPromise === 'object') {\n    try {\n      const shouldRetryPromiseResult = await shouldRetryOrPromise;\n      // keep return true unless shouldRetryPromiseResult return false for compatibility\n      return shouldRetryPromiseResult !== false;\n    } catch (_err) {\n      return false;\n    }\n  }\n  return shouldRetryOrPromise;\n}\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n * @param {Function} [defaultOptions.onRetry=()=>{}]\n *        A function to get notified when a retry occurs\n */\nexport default function axiosRetry(axios, defaultOptions) {\n  axios.interceptors.request.use((config) => {\n    const currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n\n  axios.interceptors.response.use(null, async (error) => {\n    const { config } = error;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    const {\n      retries = 3,\n      retryCondition = isNetworkOrIdempotentRequestError,\n      retryDelay = noDelay,\n      shouldResetTimeout = false,\n      onRetry = () => {}\n    } = getRequestOptions(config, defaultOptions);\n\n    const currentState = getCurrentState(config);\n\n    if (await shouldRetry(retries, retryCondition, currentState, error)) {\n      currentState.retryCount += 1;\n      const delay = retryDelay(currentState.retryCount, error);\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures: https://github.com/mzabriskie/axios/issues/370\n      fixConfig(axios, config);\n\n      if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n        const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n        const timeout = config.timeout - lastRequestDuration - delay;\n        if (timeout <= 0) {\n          return Promise.reject(error);\n        }\n        config.timeout = timeout;\n      }\n\n      config.transformRequest = [(data) => data];\n\n      onRetry(currentState.retryCount, error, config);\n\n      return new Promise((resolve) => setTimeout(() => resolve(axios(config)), delay));\n    }\n\n    return Promise.reject(error);\n  });\n}\n\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;\n"],"file":"index.js"}