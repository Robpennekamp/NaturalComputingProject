{"version":3,"file":"vue-2-boring-avatars.common.js","sources":["../src/utils.js","../node_modules/vue-runtime-helpers/dist/normalize-component.mjs","../src/components/AvatarPixels.vue","../src/components/AvatarBauhaus.vue","../src/components/AvatarMarble.vue","../src/components/AvatarRing.vue","../src/components/AvatarSunset.vue","../src/components/AvatarBeam.vue","../src/components/Avatar.vue"],"sourcesContent":["export const getNumber = (name) => {\n    const charactersArray = Array.from(name)\n    return charactersArray.reduce((accu, curr) =>\n        accu + curr.charCodeAt(0)\n        , 0)\n}\n\nexport const getModules = (num, max) => {\n    return num * max\n}\n\nexport const getDigit = (num, ntn) => {\n    return Math.floor((num / Math.pow(10, ntn)) % 10)\n}\n\nexport const getBoolean = (num, ntn) => {\n    return (!(getDigit(num, ntn) % 2))\n}\n\nexport const getAngle = (x, y) => {\n    return Math.atan2(x, y) * 180 / Math.PI\n}\n\nexport const getUnit = (num, range, index) => {\n    let value = num % range\n\n    if (index && ((getDigit(num, index) % 2) === 0)) {\n        return -value\n    }\n    return value\n}\n\nexport const getRandomColor = (num, colors, range) => {\n    return colors[num % range]\n}\n\nexport const getContrast = (hexColor) => {\n    if (hexColor.slice(0, 1) === '#') {\n        hexColor = hexColor.slice(1)\n    }\n\n    let r = parseInt(hexColor.substr(0, 2), 16)\n    let g = parseInt(hexColor.substr(2, 2), 16)\n    let b = parseInt(hexColor.substr(4, 2), 16)\n\n    let yiq = ((r * 299) + (g * 587) + (b * 144)) / 1000\n\n    return (yiq >= 128) ? 'black' : 'white'\n}","function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\nexport default normalizeComponent;\n//# sourceMappingURL=normalize-component.mjs.map\n","<template>\n  <svg\n    :viewBox=\"`0 0 ${viewboxSize} ${viewboxSize}`\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    :width=\"size\"\n    :height=\"size\"\n  >\n    <mask\n      id=\"mask0\"\n      mask-type=\"alpha\"\n      maskUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      :width=\"viewboxSize\"\n      :height=\"viewboxSize\"\n    >\n      <rect\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :rx=\"square ? undefinded : viewboxSize / 2\"\n        fill=\"#fff\"\n      />\n    </mask>\n    <g mask=\"url(#mask0)\">\n      <rect width=\"10\" height=\"10\" :fill=\"properties[0].color\" />\n      <rect x=\"20\" width=\"10\" height=\"10\" :fill=\"properties[1].color\" />\n      <rect x=\"40\" width=\"10\" height=\"10\" :fill=\"properties[2].color\" />\n      <rect x=\"60\" width=\"10\" height=\"10\" :fill=\"properties[3].color\" />\n      <rect x=\"10\" width=\"10\" height=\"10\" :fill=\"properties[4].color\" />\n      <rect x=\"30\" width=\"10\" height=\"10\" :fill=\"properties[5].color\" />\n      <rect x=\"50\" width=\"10\" height=\"10\" :fill=\"properties[6].color\" />\n      <rect x=\"70\" width=\"10\" height=\"10\" :fill=\"properties[7].color\" />\n      <rect y=\"10\" width=\"10\" height=\"10\" :fill=\"properties[8].color\" />\n      <rect y=\"20\" width=\"10\" height=\"10\" :fill=\"properties[9].color\" />\n      <rect y=\"30\" width=\"10\" height=\"10\" :fill=\"properties[10].color\" />\n      <rect y=\"40\" width=\"10\" height=\"10\" :fill=\"properties[11].color\" />\n      <rect y=\"50\" width=\"10\" height=\"10\" :fill=\"properties[12].color\" />\n      <rect y=\"60\" width=\"10\" height=\"10\" :fill=\"properties[13].color\" />\n      <rect y=\"70\" width=\"10\" height=\"10\" :fill=\"properties[14].color\" />\n      <rect\n        x=\"20\"\n        y=\"10\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[15].color\"\n      />\n      <rect\n        x=\"20\"\n        y=\"20\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[16].color\"\n      />\n      <rect\n        x=\"20\"\n        y=\"30\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[17].color\"\n      />\n      <rect\n        x=\"20\"\n        y=\"40\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[18].color\"\n      />\n      <rect\n        x=\"20\"\n        y=\"50\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[19].color\"\n      />\n      <rect\n        x=\"20\"\n        y=\"60\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[20].color\"\n      />\n      <rect\n        x=\"20\"\n        y=\"70\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[21].color\"\n      />\n      <rect\n        x=\"40\"\n        y=\"10\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[22].color\"\n      />\n      <rect\n        x=\"40\"\n        y=\"20\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[23].color\"\n      />\n      <rect\n        x=\"40\"\n        y=\"30\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[24].color\"\n      />\n      <rect\n        x=\"40\"\n        y=\"40\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[25].color\"\n      />\n      <rect\n        x=\"40\"\n        y=\"50\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[26].color\"\n      />\n      <rect\n        x=\"40\"\n        y=\"60\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[27].color\"\n      />\n      <rect\n        x=\"40\"\n        y=\"70\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[28].color\"\n      />\n      <rect\n        x=\"60\"\n        y=\"10\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[29].color\"\n      />\n      <rect\n        x=\"60\"\n        y=\"20\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[30].color\"\n      />\n      <rect\n        x=\"60\"\n        y=\"30\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[31].color\"\n      />\n      <rect\n        x=\"60\"\n        y=\"40\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[32].color\"\n      />\n      <rect\n        x=\"60\"\n        y=\"50\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[33].color\"\n      />\n      <rect\n        x=\"60\"\n        y=\"60\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[34].color\"\n      />\n      <rect\n        x=\"60\"\n        y=\"70\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[35].color\"\n      />\n      <rect\n        x=\"10\"\n        y=\"10\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[36].color\"\n      />\n      <rect\n        x=\"10\"\n        y=\"20\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[37].color\"\n      />\n      <rect\n        x=\"10\"\n        y=\"30\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[38].color\"\n      />\n      <rect\n        x=\"10\"\n        y=\"{40}\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[39].color\"\n      />\n      <rect\n        x=\"10\"\n        y=\"50\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[40].color\"\n      />\n      <rect\n        x=\"10\"\n        y=\"60\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[41].color\"\n      />\n      <rect\n        x=\"10\"\n        y=\"70\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[42].color\"\n      />\n      <rect\n        x=\"30\"\n        y=\"10\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[43].color\"\n      />\n      <rect\n        x=\"30\"\n        y=\"20\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[44].color\"\n      />\n      <rect\n        x=\"30\"\n        y=\"30\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[45].color\"\n      />\n      <rect\n        x=\"30\"\n        y=\"{40}\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[46].color\"\n      />\n      <rect\n        x=\"30\"\n        y=\"50\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[47].color\"\n      />\n      <rect\n        x=\"30\"\n        y=\"60\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[48].color\"\n      />\n      <rect\n        x=\"30\"\n        y=\"70\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[49].color\"\n      />\n      <rect\n        x=\"50\"\n        y=\"10\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[50].color\"\n      />\n      <rect\n        x=\"50\"\n        y=\"20\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[51].color\"\n      />\n      <rect\n        x=\"50\"\n        y=\"30\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[52].color\"\n      />\n      <rect\n        x=\"50\"\n        y=\"{40}\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[53].color\"\n      />\n      <rect\n        x=\"50\"\n        y=\"50\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[54].color\"\n      />\n      <rect\n        x=\"50\"\n        y=\"60\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[55].color\"\n      />\n      <rect\n        x=\"50\"\n        y=\"70\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[56].color\"\n      />\n      <rect\n        x=\"70\"\n        y=\"10\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[57].color\"\n      />\n      <rect\n        x=\"70\"\n        y=\"20\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[58].color\"\n      />\n      <rect\n        x=\"70\"\n        y=\"30\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[59].color\"\n      />\n      <rect\n        x=\"70\"\n        y=\"{40}\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[60].color\"\n      />\n      <rect\n        x=\"70\"\n        y=\"50\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[61].color\"\n      />\n      <rect\n        x=\"70\"\n        y=\"60\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[62].color\"\n      />\n      <rect\n        x=\"70\"\n        y=\"70\"\n        width=\"10\"\n        height=\"10\"\n        :fill=\"properties[63].color\"\n      />\n    </g>\n  </svg>\n</template>\n\n<script>\nimport { getNumber, getRandomColor } from \"@/utils\";\nconst ELEMENTS = 64;\nconst SIZE = 80;\n\nexport default {\n  props: {\n    name: { type: String, required: true },\n    colors: { type: Array, required: true },\n    size: { type: Number, required: true},\n    square: { type: Boolean, default: false }\n  },\n  data() {\n    return {\n      viewboxSize: SIZE,\n    };\n  },\n  computed: {\n    properties () {\n      return this.generateColors()\n    }\n  },\n  methods: {\n    generateColors() {\n      const numFromName = getNumber(this.name);\n      const range = this.colors && this.colors.length;\n\n      const elementProperties = Array.from({ length: ELEMENTS }, (_, i) => {\n        return { color: getRandomColor(numFromName % (i + 13), this.colors, range) };\n      });\n\n      return elementProperties;\n    },\n  },\n};\n</script>","<template>\n  <svg\n    :viewBox=\"`0 0 ${viewboxSize} ${viewboxSize}`\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    :width=\"size\"\n    :height=\"size\"\n  >\n    <mask\n      id=\"mask__bauhaus\"\n      maskUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      :width=\"viewboxSize\"\n      :height=\"viewboxSize\"\n    >\n      <rect\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :rx=\"square ? undefinded : viewboxSize / 2\"\n        fill=\"#fff\"\n      />\n    </mask>\n    <g mask=\"url(#mask__bauhaus)\">\n      <rect\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :fill=\"properties[0].color\"\n      />\n      <rect\n        :x=\"(viewboxSize - 60) / 2\"\n        :y=\"(viewboxSize - 20) / 2\"\n        :width=\"viewboxSize\"\n        :height=\"properties[1].isSquare ? viewboxSize : viewboxSize / 8\"\n        :fill=\"properties[1].color\"\n        :transform=\"`translate(${properties[1].translateX} ${\n          properties[1].translateY\n        }) rotate(${properties[1].rotate} ${viewboxSize / 2} ${\n          viewboxSize / 2\n        })`\"\n      />\n      <circle\n        :cx=\"viewboxSize / 2\"\n        :cy=\"viewboxSize / 2\"\n        :fill=\"properties[2].color\"\n        :r=\"viewboxSize / 5\"\n        :transform=\"`translate(${properties[2].translateX} ${properties[2].translateY})`\"\n      />\n      <line\n        x1=\"0\"\n        :y1=\"viewboxSize / 2\"\n        :x2=\"viewboxSize\"\n        :y2=\"viewboxSize / 2\"\n        strokeWidth=\"2\"\n        :stroke=\"properties[3].color\"\n        :transform=\"`translate(${properties[3].translateX} ${\n          properties[3].translateY\n        }) rotate(${properties[3].rotate} ${viewboxSize / 2} ${\n          viewboxSize / 2\n        })`\"\n      />\n    </g>\n  </svg>\n</template>\n<script>\nimport { getNumber, getUnit, getRandomColor, getBoolean } from \"@/utils\";\nconst ELEMENTS = 4;\nconst SIZE = 80;\n\nexport default {\n  props: {\n    name: { type: String, required: true },\n    colors: { type: Array, required: true },\n    size: { type: Number, required: true },\n    square: { type: Boolean, default: false }\n  },\n  data() {\n    return {\n      viewboxSize: SIZE,\n    };\n  },\n  computed: {\n    properties() {\n      const numFromName = getNumber(this.name);\n      const range = this.colors && this.colors.length;\n\n      const elementProperties = Array.from({ length: ELEMENTS }, (_, i) => {\n        return {\n          color: getRandomColor(numFromName + i, this.colors, range),\n          translateX: getUnit(numFromName * (i + 1), SIZE / 2 - (i + 17), 1),\n          translateY: getUnit(numFromName * (i + 1), SIZE / 2 - (i + 17), 2),\n          rotate: getUnit(numFromName * (i + 1), 360),\n          isSqure: getBoolean(numFromName, 2),\n        };\n      });\n      return elementProperties;\n    },\n  },\n};\n</script>","<template>\n  <svg\n    :viewBox=\"`0 0 ${viewboxSize} ${viewboxSize}`\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    :width=\"size\"\n    :height=\"size\"\n  >\n    <mask\n      id=\"mask__marble\"\n      maskUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      :width=\"viewboxSize\"\n      :height=\"viewboxSize\"\n    >\n      <rect\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :rx=\"square ? undefinded : viewboxSize / 2\"\n        fill=\"#fff\"\n      />\n    </mask>\n    <g mask=\"url(#mask__marble)\">\n      <rect\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :rx=\"2\"\n        :fill=\"properties[0].color\"\n      />\n      <path\n        filter=\"url(#prefix__filter0_f)\"\n        d=\"M32.414 59.35L50.376 70.5H72.5v-71H33.728L26.5 13.381l19.057 27.08L32.414 59.35z\"\n        :fill=\"properties[1].color\"\n        :transform=\"`translate(${properties[1].translateX} ${\n          properties[1].translateY\n        }) rotate(${properties[1].rotate} ${viewboxSize / 2} ${\n          viewboxSize / 2\n        }) scale(${properties[2].scale})`\"\n      />\n      <path\n        filter=\"url(#prefix__filter0_f)\"\n        :style=\"{ mixBlendMode: 'overlay' }\"\n        d=\"M22.216 24L0 46.75l14.108 38.129L78 86l-3.081-59.276-22.378 4.005\n      12.972 20.186-23.35 27.395L22.215 24z\"\n        :fill=\"properties[2].color\"\n        :transform=\"`translate(${properties[2].translateX} \n      ${properties[2].translateY}) rotate(${properties[2].rotate} ${\n          viewboxSize / 2\n        } ${viewboxSize / 2}) scale(${properties[2].scale})`\"\n      />\n    </g>\n    <defs>\n      <filter\n        id=\"prefix__filter0_f\"\n        filterUnits=\"userSpaceOnUse\"\n        color-interpolation-filters=\"sRGB\"\n      >\n        <feFlood :flood-opacity=\"0\" result=\"BackgroundImageFix\" />\n        <feBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n        <feGaussianBlur :stdDeviation=\"7\" result=\"effect1_foregroundBlur\" />\n      </filter>\n    </defs>\n  </svg>\n</template>\n\n<script>\nimport { getNumber, getRandomColor, getUnit } from \"@/utils\";\nconst ELEMENTS = 3;\nconst SIZE = 80;\nexport default {\n  props: {\n    name: { type: String, required: true },\n    colors: { type: Array, required: true },\n    size: { type: Number, required: true },\n    square: { type: Boolean, default: false }\n  },\n  data() {\n    return {\n      viewboxSize: SIZE,\n    };\n  },\n  computed: {\n    properties() {\n      const numFromName = getNumber(this.name);\n      const range = this.colors && this.colors.length;\n\n      const elementsProperties = Array.from({ length: ELEMENTS }, (_, i) => ({\n        color: getRandomColor(numFromName + i, this.colors, range),\n        translateX: getUnit(numFromName * (i + 1), SIZE / 10, 1),\n        translateY: getUnit(numFromName * (i + 1), SIZE / 10, 2),\n        scale: 1.2 + getUnit(numFromName * (i + 1), SIZE / 20) / 10,\n        rotate: getUnit(numFromName * (i + 1), 360, 1),\n      }));\n\n      return elementsProperties;\n    },\n  },\n};\n</script>\n","<template>\n    <svg\n      :viewBox=\"`0 0 ${viewboxSize} ${viewboxSize}`\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      :width=\"size\"\n      :height=\"size\"\n    >\n    <mask\n      id=\"mask__ring\"\n      maskUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      :width=\"viewboxSize\"\n      :height=\"viewboxSize\"\n    >\n      <rect\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :rx=\"square ? undefinded : viewboxSize / 2\"\n        fill=\"#fff\"\n      />\n    </mask>\n      <path d=\"M0 0h90v45H0z\" :fill=\"cellColors[0]\"/>\n      <path d=\"M0 45h90v45H0z\" :fill=\"cellColors[1]\"/>\n      <path d=\"M83 45a38 38 0 00-76 0h76z\" :fill=\"cellColors[2]\" />\n      <path d=\"M83 45a38 38 0 01-76 0h76z\" :fill=\"cellColors[3]\" />\n      <path d=\"M77 45a32 32 0 10-64 0h64z\" :fill=\"cellColors[4]\" />\n      <path d=\"M77 45a32 32 0 11-64 0h64z\" :fill=\"cellColors[5]\" />\n      <path d=\"M71 45a26 26 0 00-52 0h52z\" :fill=\"cellColors[6]\" />\n      <path d=\"M71 45a26 26 0 01-52 0h52z\" :fill=\"cellColors[7]\" />\n      <circle cx=\"45\" cy=\"45\" r=\"23\" :fill=\"cellColors[8]\" />\n    </svg>    \n</template>\n\n<script>\nimport { getNumber, getRandomColor } from \"@/utils\";\nconst SIZE = 90;\nconst COLORS = 5;\n\nexport default {\n  props: {\n    name: { type: String, required: true },\n    colors: { type: Array, required: true },\n    size: { type: Number, required: true },\n    square: { type: Boolean, default: false }\n  },\n  data() {\n    return {\n      viewboxSize: SIZE,\n    };\n  },\n  computed: {\n    cellColors() {\n      const numFromName = getNumber(this.name);\n      const range = this.colors && this.colors.length;\n      const colorsShuffle = Array.from({ length: COLORS }, (_, i) =>\n        getRandomColor(numFromName + (i + 1), this.colors, range)\n      );\n      const iconColors = [];\n      iconColors[0] = colorsShuffle[0];\n      iconColors[1] = colorsShuffle[1];\n      iconColors[2] = colorsShuffle[1];\n      iconColors[3] = colorsShuffle[2];\n      iconColors[4] = colorsShuffle[2];\n      iconColors[5] = colorsShuffle[3];\n      iconColors[6] = colorsShuffle[3];\n      iconColors[7] = colorsShuffle[0];\n      iconColors[8] = colorsShuffle[4];\n\n      return iconColors;\n    },\n  },\n};\n</script>","<template>\n  <svg\n    :viewBox=\"`0 0 ${viewboxSize} ${viewboxSize}`\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    :width=\"size\"\n    :height=\"size\"\n  >\n    <mask\n      id=\"mask__sunset\"\n      maskUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      :width=\"viewboxSize\"\n      :height=\"viewboxSize\"\n    >\n      <rect\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :rx=\"square ? undefinded : viewboxSize / 2\"\n        fill=\"#fff\"\n      />\n    </mask>\n    <g mask=\"url(#mask__sunset)\">\n      <path\n        :fill=\"`url(#gradient_paint0_linear_${shortName})`\"\n        d=\"M0 0h80v40H0z\"\n      />\n      <path\n        :fill=\"`url(#gradient_paint1_linear_${shortName})`\"\n        d=\"M0 40h80v40H0z\"\n      />\n    </g>\n    <defs>\n      <linearGradient\n        :id=\"`gradient_paint0_linear_${shortName}`\"\n        :x1=\"viewboxSize / 2\"\n        y1=\"0\"\n        :x2=\"viewboxSize / 2\"\n        :y2=\"viewboxSize / 2\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop :stop-color=\"properties[0].color\" />\n        <stop offset=\"1\" :stop-color=\"properties[1].color\" />\n      </linearGradient>\n      <linearGradient\n        :id=\"`gradient_paint1_linear_${shortName}`\"\n        :x1=\"viewboxSize / 2\"\n        :y1=\"viewboxSize / 2\"\n        :x2=\"viewboxSize / 2\"\n        :y2=\"viewboxSize\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop :stop-color=\"properties[2].color\" />\n        <stop offset=\"1\" :stop-color=\"properties[3].color\" />\n      </linearGradient>\n    </defs>\n  </svg>\n</template>\n\n<script>\nimport { getNumber, getRandomColor } from \"@/utils\";\nconst ELEMENTS = 4;\nconst SIZE = 80;\nexport default {\n  props: {\n    name: { type: String, required: true },\n    colors: { type: Array, required: true },\n    size: { type: Number, required: true },\n    square: { type: Boolean, default: false }\n  },\n  data() {\n    return {\n      viewboxSize: SIZE,\n    };\n  },\n  computed: {\n    shortName() {\n      return this.name.replace(/\\s/g, \"\");\n    },\n    properties() {\n      const numFromName = getNumber(this.name);\n      const range = this.colors && this.colors.length;\n\n      const elementsProperties = Array.from({ length: ELEMENTS }, (_, i) => ({\n        color: getRandomColor(numFromName + i, this.colors, range),\n      }));\n\n      return elementsProperties;\n    },\n  },\n  filters: {\n    short(value) {\n      return value.replace(/\\s/g, \"\");\n    },\n  },\n};\n</script>","<template>\n  <svg\n    :viewBox=\"`0 0 ${viewboxSize} ${viewboxSize}`\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    :width=\"size\"\n    :height=\"size\"\n  >\n    <mask\n      id=\"mask__beam\"\n      maskUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      :width=\"viewboxSize\"\n      :height=\"viewboxSize\"\n    >\n      <rect\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :rx=\"square ? undefinded : viewboxSize / 2\"\n        fill=\"#fff\"\n      />\n    </mask>\n    <g mask=\"url(#mask__beam)\" fill=\"transparent\">\n      <rect\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :fill=\"data.backgroundColor\"\n      />\n      <rect\n        x=\"0\"\n        y=\"0\"\n        :width=\"viewboxSize\"\n        :height=\"viewboxSize\"\n        :transform=\"`translate(${data.wrapperTranslateX} ${\n          data.wrapperTranslateY\n        }) rotate(${data.wrapperRotate} ${viewboxSize / 2} ${\n          viewboxSize / 2\n        }) scale(${data.wrapperScale})`\"\n        :fill=\"data.wrapperColor\"\n        :rx=\"data.isCircle ? viewboxSize : viewboxSize / 6\"\n      />\n      <g\n        :transform=\"`translate(${data.faceTranslateX} ${\n          data.faceTranslateY\n        }) rotate(${data.faceRotate} ${viewboxSize / 2} ${viewboxSize / 2})`\"\n      >\n        <path\n          v-if=\"data.isMonthOpen\"\n          :d=\"`M15 ${19 + data.mouthSpread} c2 1\n        4 1 6 0`\"\n          :stroke=\"data.faceColor\"\n          fill=\"none\"\n          strokeLinecap=\"round\"\n        />\n        <path\n          v-else\n          :d=\"`M13, ${19 + data.mouthSpread} a1,0.75 0 0,0 10,0`\"\n          :fill=\"data.faceColor\"\n        />\n        <rect\n          :x=\"14 + data.eyeSpread\"\n          y=\"14\"\n          width=\"1.5\"\n          height=\"2\"\n          rx=\"1\"\n          stroke=\"none\"\n          :fill=\"data.faceColor\"\n        />\n        <rect\n          :x=\"20 + data.eyeSpread\"\n          y=\"14\"\n          width=\"1.5\"\n          height=\"2\"\n          rx=\"1\"\n          stroke=\"none\"\n          :fill=\"data.faceColor\"\n        />\n      </g>\n    </g>\n  </svg>\n</template>\n\n<script>\nimport {\n  getNumber,\n  getUnit,\n  getRandomColor,\n  getBoolean,\n  getContrast,\n} from \"@/utils\";\nconst SIZE = 36;\nexport default {\n  props: {\n    name: { type: String, required: true },\n    colors: { type: Array, required: true },\n    size: { type: Number, required: true },\n    square: { type: Boolean, default: false }\n  },\n  data() {\n    return {\n      viewboxSize: SIZE,\n    };\n  },\n  computed: {\n    data() {\n      const numFromName = getNumber(this.name);\n      const range = this.colors && this.colors.length;\n      const wrapperColor = getRandomColor(numFromName, this.colors, range);\n      const preTranslateX = getUnit(numFromName, 10, 1);\n      const wrapperTranslateX =\n        preTranslateX < 5 ? preTranslateX + SIZE / 9 : preTranslateX;\n      const preTranslateY = getUnit(numFromName, 10, 2);\n      const wrapperTranslateY =\n        preTranslateY < 5 ? preTranslateY + SIZE / 9 : preTranslateY;\n\n      const data = {\n        wrapperColor: wrapperColor,\n        faceColor: getContrast(wrapperColor),\n        backgroundColor: getRandomColor(numFromName + 13, this.colors, range),\n        wrapperTranslateX: wrapperTranslateX,\n        wrapperTranslateY: wrapperTranslateY,\n        wrapperRotate: getUnit(numFromName, 360),\n        wrapperScale: 1 + getUnit(numFromName, SIZE / 12) / 10,\n        isMouthOpen: getBoolean(numFromName, 2),\n        isCircle: getBoolean(numFromName, 1),\n        eyeSpread: getUnit(numFromName, 5),\n        mouthSpread: getUnit(numFromName, 3),\n        faceRotate: getUnit(numFromName, 10, 3),\n        faceTranslateX:\n          wrapperTranslateX > SIZE / 6\n            ? wrapperTranslateX / 2\n            : getUnit(numFromName, 8, 1),\n        faceTranslateY:\n          wrapperTranslateY > SIZE / 6\n            ? wrapperTranslateY / 2\n            : getUnit(numFromName, 7, 2),\n      };\n\n      return data;\n    },\n  },\n};\n</script>","<template>\n  <component :is=\"componentName\" :name=\"name\" :colors=\"colors\" :size=\"size\" :square=\"square\"/>\n</template>\n\n<script>\nimport AvatarPixels from './AvatarPixels.vue'\nimport AvatarBauhaus from './AvatarBauhaus.vue'\nimport AvatarMarble from './AvatarMarble.vue'\nimport AvatarRing from './AvatarRing.vue'\nimport AvatarSunset from './AvatarSunset.vue'\nimport AvatarBeam from './AvatarBeam.vue'\n\nconst VARIANTS = ['pixels', 'bauhaus', 'ring', 'beam', 'sunset', 'marble']\n\nexport default {\n  components: {\n    AvatarPixels,\n    AvatarBauhaus,\n    AvatarMarble,\n    AvatarSunset,\n    AvatarRing,\n    AvatarBeam\n  },\n  props: {\n    variant: {\n      type: String,\n      default: 'pixels',\n      validator(value) {\n        return VARIANTS.includes(value)\n      }\n    },\n    name: { type: String, default: 'Mary Baker' },\n    colors: {\n      type: Array,\n      default: () => ['#92A1C6', '#146A7C', '#F0AB3D', '#C271B4', '#C20D90']\n    },\n    size: { type: Number, default: 80 },\n    square: { type: Boolean, default: false }\n  },\n  computed: {\n    componentName() {\n      if (!VARIANTS.includes(this.variant)) {\n        return 'avatar-pixels'\n      }\n      return 'avatar-' + this.variant\n    }\n  }\n}\n</script>\n"],"names":["__vue_script__","script"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAd,MAAcD,gBAAA,GAAAC,SAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAd,MAAcD,gBAAA,GAAAC,SAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAd,MAAcD,gBAAA,GAAAC,SAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAd,MAAcD,gBAAA,GAAAC,SAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAd,MAAc,cAAA,GAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}