"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Response = void 0;
var _utils = require("./utils");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var REGEXP_CONTENT_TYPE_JSON = /^application\/(json|.*\+json)/;
var Response = /*#__PURE__*/function () {
  // eslint-disable-next-line no-use-before-define

  function Response(originalRequest, responseStatus, responseData, responseHeaders, errors) {
    _classCallCheck(this, Response);
    _defineProperty(this, "originalRequest", void 0);
    _defineProperty(this, "responseStatus", void 0);
    _defineProperty(this, "responseData", void 0);
    _defineProperty(this, "responseHeaders", void 0);
    _defineProperty(this, "errors", void 0);
    _defineProperty(this, "timeElapsed", void 0);
    var auth = originalRequest.requestParams && originalRequest.requestParams.auth;
    if (auth) {
      var maskedAuth = _objectSpread(_objectSpread({}, auth), {}, {
        password: '***'
      });
      this.originalRequest = originalRequest.enhance({
        auth: maskedAuth
      });
    } else {
      this.originalRequest = originalRequest;
    }
    this.responseStatus = responseStatus;
    this.responseData = responseData !== null && responseData !== void 0 ? responseData : null;
    this.responseHeaders = responseHeaders || {};
    this.errors = errors || [];
    this.timeElapsed = null;
  }
  _createClass(Response, [{
    key: "request",
    value: function request() {
      return this.originalRequest;
    }
  }, {
    key: "status",
    value: function status() {
      // IE sends 1223 instead of 204
      if (this.responseStatus === 1223) {
        return 204;
      }
      return this.responseStatus;
    }

    /**
     * Returns true if status is greater or equal 200 or lower than 400
     */
  }, {
    key: "success",
    value: function success() {
      var status = this.status();
      return status >= 200 && status < 400;
    }

    /**
     * Returns an object with the headers. Header names are converted to
     * lowercase
     */
  }, {
    key: "headers",
    value: function headers() {
      return (0, _utils.lowerCaseObjectKeys)(this.responseHeaders);
    }

    /**
     * Utility method to get a header value by name
     */
  }, {
    key: "header",
    value: function header(name) {
      var key = name.toLowerCase();
      if (key in this.headers()) {
        return this.headers()[key];
      }
      return undefined;
    }

    /**
     * Returns the original response data
     */
  }, {
    key: "rawData",
    value: function rawData() {
      return this.responseData;
    }

    /**
     * Returns the response data, if "Content-Type" is "application/json"
     * it parses the response and returns an object.
     * Friendly reminder:
     *  - JSON.parse() can return null, an Array or an object.
     */
  }, {
    key: "data",
    value: function data() {
      if (this.isContentTypeJSON() && this.responseData !== null) {
        try {
          return JSON.parse(this.responseData);
        } catch (e) {} // eslint-disable-line no-empty
      }

      return this.responseData;
    }
  }, {
    key: "isContentTypeJSON",
    value: function isContentTypeJSON() {
      var contentType = this.header('content-type');
      if (contentType === undefined) {
        return false;
      }
      return REGEXP_CONTENT_TYPE_JSON.test(contentType);
    }

    /**
     * Returns the last error instance that caused the request to fail
     */
  }, {
    key: "error",
    value: function error() {
      var lastError = this.errors[this.errors.length - 1] || null;
      if (typeof lastError === 'string') {
        return new Error(lastError);
      }
      return lastError;
    }

    /**
     * Enhances current Response returning a new Response
     *
     * @param {Object} extras
     *   @param {Integer} extras.status - it will replace the current status
     *   @param {String} extras.rawData - it will replace the current rawData
     *   @param {Object} extras.headers - it will be merged with current headers
     *   @param {Error} extras.error    - it will be added to the list of errors
     */
  }, {
    key: "enhance",
    value: function enhance(extras) {
      var mergedHeaders = _objectSpread(_objectSpread({}, this.headers()), extras.headers || {});
      var enhancedResponse = new Response(this.request(), extras.status || this.status(), extras.rawData || this.rawData(), mergedHeaders, extras.error ? [].concat(_toConsumableArray(this.errors), [extras.error]) : _toConsumableArray(this.errors));
      enhancedResponse.timeElapsed = this.timeElapsed;
      return enhancedResponse;
    }
  }]);
  return Response;
}();
exports.Response = Response;
var _default = Response;
exports["default"] = _default;