"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Gateway = void 0;
var _utils = require("./utils");
var _mappersmith = require("./mappersmith");
var _response = require("./response");
var _timeoutError = require("./gateway/timeout-error");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var REGEXP_EMULATE_HTTP = /^(delete|put|patch)/i;
var Gateway = /*#__PURE__*/function () {
  function Gateway(request, configs) {
    _classCallCheck(this, Gateway);
    _defineProperty(this, "request", void 0);
    _defineProperty(this, "configs", void 0);
    _defineProperty(this, "successCallback", void 0);
    _defineProperty(this, "failCallback", void 0);
    this.request = request;
    this.configs = configs;
    this.successCallback = function () {
      return undefined;
    };
    this.failCallback = function () {
      return undefined;
    };
  }
  _createClass(Gateway, [{
    key: "get",
    value: function get() {
      throw new Error('Not implemented');
    }
  }, {
    key: "head",
    value: function head() {
      throw new Error('Not implemented');
    }
  }, {
    key: "post",
    value: function post() {
      throw new Error('Not implemented');
    }
  }, {
    key: "put",
    value: function put() {
      throw new Error('Not implemented');
    }
  }, {
    key: "patch",
    value: function patch() {
      throw new Error('Not implemented');
    }
  }, {
    key: "delete",
    value: function _delete() {
      throw new Error('Not implemented');
    }
  }, {
    key: "options",
    value: function options() {
      return this.configs;
    }
  }, {
    key: "shouldEmulateHTTP",
    value: function shouldEmulateHTTP() {
      return this.options().emulateHTTP && REGEXP_EMULATE_HTTP.test(this.request.method());
    }

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
  }, {
    key: "call",
    value: function call() {
      var _arguments = arguments,
        _this = this;
      var timeStart = (0, _utils.performanceNow)();
      if (!_mappersmith.configs.Promise) {
        throw new Error('[Mappersmith] Promise not configured (configs.Promise)');
      }
      return new _mappersmith.configs.Promise(function (resolve, reject) {
        _this.successCallback = function (response) {
          response.timeElapsed = (0, _utils.performanceNow)() - timeStart;
          resolve(response);
        };
        _this.failCallback = function (response) {
          response.timeElapsed = (0, _utils.performanceNow)() - timeStart;
          reject(response);
        };
        try {
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore
          _this[_this.request.method()].apply(_this, _arguments); // eslint-disable-line prefer-spread,prefer-rest-params
        } catch (e) {
          var err = e;
          _this.dispatchClientError(err.message, err);
        }
      });
    }
  }, {
    key: "dispatchResponse",
    value: function dispatchResponse(response) {
      response.success() ? this.successCallback(response) : this.failCallback(response);
    }
  }, {
    key: "dispatchClientError",
    value: function dispatchClientError(message, error) {
      if ((0, _timeoutError.isTimeoutError)(error) && this.options().enableHTTP408OnTimeouts) {
        this.failCallback(new _response.Response(this.request, 408, message, {}, [error]));
      } else {
        this.failCallback(new _response.Response(this.request, 400, message, {}, [error]));
      }
    }
  }, {
    key: "prepareBody",
    value: function prepareBody(method, headers) {
      var body = this.request.body();
      if (this.shouldEmulateHTTP()) {
        body = body || {};
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (0, _utils.isPlainObject)(body) && (body['_method'] = method);
        headers['x-http-method-override'] = method;
      }

      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var bodyString = (0, _utils.toQueryString)(body);
      if (bodyString) {
        // If it's not simple, let the browser (or the user) set it
        if ((0, _utils.isPlainObject)(body)) {
          headers['content-type'] = 'application/x-www-form-urlencoded;charset=utf-8';
        }
      }
      return bodyString;
    }
  }]);
  return Gateway;
}();
exports.Gateway = Gateway;
var _default = Gateway;
exports["default"] = _default;