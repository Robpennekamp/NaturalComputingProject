"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Manifest = void 0;
var _methodDescriptor = require("./method-descriptor");
var _utils = require("./utils");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
/**
 * @typedef Manifest
 * @param {Object} obj
 *   @param {Object} obj.gatewayConfigs - default: base values from mappersmith
 *   @param {Object} obj.ignoreGlobalMiddleware - default: false
 *   @param {Object} obj.resources - default: {}
 *   @param {Array}  obj.middleware or obj.middlewares - default: []
 * @param {Object} globalConfigs
 */
var Manifest = /*#__PURE__*/function () {
  function Manifest(options, _ref) {
    var gatewayConfigs = _ref.gatewayConfigs,
      _ref$middleware = _ref.middleware,
      middleware = _ref$middleware === void 0 ? [] : _ref$middleware,
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? {} : _ref$context;
    _classCallCheck(this, Manifest);
    _defineProperty(this, "host", void 0);
    _defineProperty(this, "allowResourceHostOverride", void 0);
    _defineProperty(this, "parameterEncoder", void 0);
    _defineProperty(this, "bodyAttr", void 0);
    _defineProperty(this, "headersAttr", void 0);
    _defineProperty(this, "authAttr", void 0);
    _defineProperty(this, "timeoutAttr", void 0);
    _defineProperty(this, "hostAttr", void 0);
    _defineProperty(this, "clientId", void 0);
    _defineProperty(this, "gatewayConfigs", void 0);
    _defineProperty(this, "resources", void 0);
    _defineProperty(this, "context", void 0);
    _defineProperty(this, "middleware", void 0);
    this.host = options.host;
    this.allowResourceHostOverride = options.allowResourceHostOverride || false;
    this.parameterEncoder = options.parameterEncoder || encodeURIComponent;
    this.bodyAttr = options.bodyAttr;
    this.headersAttr = options.headersAttr;
    this.authAttr = options.authAttr;
    this.timeoutAttr = options.timeoutAttr;
    this.hostAttr = options.hostAttr;
    this.clientId = options.clientId || null;
    this.gatewayConfigs = (0, _utils.assign)({}, gatewayConfigs, options.gatewayConfigs);
    this.resources = options.resources || {};
    this.context = context;

    // TODO: deprecate obj.middlewares in favor of obj.middleware
    var clientMiddleware = options.middleware || options.middlewares || [];
    if (options.ignoreGlobalMiddleware) {
      this.middleware = clientMiddleware;
    } else {
      this.middleware = [].concat(_toConsumableArray(clientMiddleware), _toConsumableArray(middleware));
    }
  }
  _createClass(Manifest, [{
    key: "eachResource",
    value: function eachResource(callback) {
      var _this = this;
      Object.keys(this.resources).forEach(function (resourceName) {
        var methods = _this.eachMethod(resourceName, function (methodName) {
          return {
            name: methodName,
            descriptor: _this.createMethodDescriptor(resourceName, methodName)
          };
        });
        callback(resourceName, methods);
      });
    }
  }, {
    key: "eachMethod",
    value: function eachMethod(resourceName, callback) {
      return Object.keys(this.resources[resourceName]).map(callback);
    }
  }, {
    key: "createMethodDescriptor",
    value: function createMethodDescriptor(resourceName, methodName) {
      var definition = this.resources[resourceName][methodName];
      if (!definition || !['string', 'function'].includes(_typeof(definition.path))) {
        throw new Error("[Mappersmith] path is undefined for resource \"".concat(resourceName, "\" method \"").concat(methodName, "\""));
      }
      return new _methodDescriptor.MethodDescriptor((0, _utils.assign)({
        host: this.host,
        allowResourceHostOverride: this.allowResourceHostOverride,
        parameterEncoder: this.parameterEncoder,
        bodyAttr: this.bodyAttr,
        headersAttr: this.headersAttr,
        authAttr: this.authAttr,
        timeoutAttr: this.timeoutAttr,
        hostAttr: this.hostAttr
      }, definition));
    }

    /**
     * @param {Object} args
     *   @param {String|Null} args.clientId
     *   @param {String} args.resourceName
     *   @param {String} args.resourceMethod
     *   @param {Object} args.context
     *   @param {Boolean} args.mockRequest
     *
     * @return {Array<Object>}
     */
  }, {
    key: "createMiddleware",
    value: function createMiddleware(args) {
      var _this2 = this;
      var createInstance = function createInstance(middlewareFactory) {
        var defaultDescriptor = {
          __name: middlewareFactory.name || middlewareFactory.toString(),
          response: function response(next) {
            return next();
          },
          /**
           * @since 2.27.0
           * Replaced the request method
           */
          prepareRequest: function prepareRequest(next) {
            var _this3 = this;
            return this.request ? next().then(function (req) {
              var _this3$request;
              return (_this3$request = _this3.request) === null || _this3$request === void 0 ? void 0 : _this3$request.call(_this3, req);
            }) : next();
          }
        };
        var middlewareParams = (0, _utils.assign)(args, {
          clientId: _this2.clientId,
          context: (0, _utils.assign)({}, _this2.context)
        });
        return (0, _utils.assign)(defaultDescriptor, middlewareFactory(middlewareParams));
      };
      var name = args.resourceName,
        method = args.resourceMethod;
      var resourceMiddleware = this.createMethodDescriptor(name, method).middleware;
      var middlewares = [].concat(_toConsumableArray(resourceMiddleware), _toConsumableArray(this.middleware));
      return middlewares.map(createInstance);
    }
  }]);
  return Manifest;
}();
exports.Manifest = Manifest;
var _default = Manifest;
exports["default"] = _default;