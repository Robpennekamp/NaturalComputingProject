"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateExponentialRetryTime = void 0;
exports["default"] = RetryMiddleware;
exports.setRetryConfigs = void 0;
var _utils = require("../../../utils");
var _v = _interopRequireWildcard(require("../v2"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var retryConfigs = (0, _utils.assign)({}, _v.defaultRetryConfigs);

/**
 * @deprecated The use of setRetryConfigs is deprecated as it sets a global config
    which may cause troubles if you need multiple different configurations.
    Use middleware/retry/v2 instead which supports passing in a configuration object.
 *
 * @param {Object} newConfigs
 *   @param {String} newConfigs.headerRetryCount (default: 'X-Mappersmith-Retry-Count')
 *   @param {String} newConfigs.headerRetryTime (default: 'X-Mappersmith-Retry-Time')
 *   @param {Number} newConfigs.maxRetryTimeInSecs (default: 5)
 *   @param {Number} newConfigs.initialRetryTimeInSecs (default: 1)
 *   @param {Number} newConfigs.factor (default: 0.2) - randomization factor
 *   @param {Number} newConfigs.multiplier (default: 2) - exponential factor
 *   @param {Number} newConfigs.retries (default: 5) - max retries
 */
var setRetryConfigs = function setRetryConfigs(newConfigs) {
  console.warn('The use of setRetryConfigs is deprecated - use RetryMiddleware v2 instead.');
  retryConfigs = (0, _utils.assign)({}, retryConfigs, newConfigs);
  middlewareInstance = (0, _v["default"])(retryConfigs)();
};

/**
 * This middleware will automatically retry GET requests up to the configured amount of
 * retries using a randomization function that grows exponentially. The retry count and
 * the time used will be included as a header in the response.
 *
 * The retry time is calculated using the following formula:
 *   retryTime = min(
 *     random(previousRetryTime - randomizedFactor, previousRetryTime + randomizedFactor) * multipler,
 *     maxRetryTime
 *   )
 *
 * Take a look at `calculateExponentialRetryTime` for more information.
 *
 * Parameters can be configured using the method `setRetryConfigs`.
 */
exports.setRetryConfigs = setRetryConfigs;
var middlewareInstance = (0, _v["default"])(retryConfigs)();
function RetryMiddleware() {
  return {
    request: function request(_request) {
      return middlewareInstance.request(_request);
    },
    response: function response(next) {
      return middlewareInstance.response(next);
    }
  };
}

/**
 * Increases the retry time for each attempt using a randomization function that grows exponentially.
 * The value is limited by `retryConfigs.maxRetryTimeInSecs`.
 * @param {Number} retryTime
 *
 * @return {Number}
 */
var calculateExponentialRetryTime = function calculateExponentialRetryTime(retryTime) {
  return Math.min(randomFromRetryTime(retryTime) * retryConfigs.multiplier, retryConfigs.maxRetryTimeInSecs * 1000);
};
exports.calculateExponentialRetryTime = calculateExponentialRetryTime;
var randomFromRetryTime = function randomFromRetryTime(retryTime) {
  var delta = retryConfigs.factor * retryTime;
  return random(retryTime - delta, retryTime + delta);
};
var random = function random(min, max) {
  return Math.random() * (max - min) + min;
};