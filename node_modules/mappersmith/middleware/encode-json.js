"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.CONTENT_TYPE_JSON = void 0;
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var mediaType = 'application/json';
var charset = 'charset=utf-8';
var CONTENT_TYPE_JSON = "".concat(mediaType, ";").concat(charset);
exports.CONTENT_TYPE_JSON = CONTENT_TYPE_JSON;
var isJson = function isJson(contentType) {
  return contentType === mediaType || contentType.startsWith("".concat(mediaType, ";"));
};
var alreadyEncoded = function alreadyEncoded(body) {
  return typeof body === 'string';
};

/**
 * Automatically encode your objects into JSON
 *
 * Example:
 * client.User.all({ body: { name: 'bob' } })
 * // => body: {"name":"bob"}
 * // => header: "Content-Type=application/json;charset=utf-8"
 */
var EncodeJsonMiddleware = function EncodeJsonMiddleware() {
  return {
    prepareRequest: function prepareRequest(next) {
      return _asyncToGenerator(function* () {
        var request = yield next();
        try {
          var body = request.body();
          var contentType = request.header('content-type');
          if (body) {
            var shouldEncodeBody = contentType == null || typeof contentType === 'string' && isJson(contentType) && !alreadyEncoded(body);
            var encodedBody = shouldEncodeBody ? JSON.stringify(body) : body;
            return request.enhance({
              headers: {
                'content-type': contentType == null ? CONTENT_TYPE_JSON : contentType
              },
              body: encodedBody
            });
          }
        } catch (e) {} // eslint-disable-line no-empty
        return request;
      })();
    }
  };
};
var _default = EncodeJsonMiddleware;
exports["default"] = _default;