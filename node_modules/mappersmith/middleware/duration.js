"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Adds started_at, ended_at and duration headers to the response
 */
var DurationMiddleware = function DurationMiddleware(_ref) {
  var mockRequest = _ref.mockRequest;
  return {
    prepareRequest: function prepareRequest(next) {
      return _asyncToGenerator(function* () {
        if (mockRequest) {
          return next();
        }
        var request = yield next();
        return request.enhance({
          headers: {
            'X-Started-At': Date.now()
          }
        });
      })();
    },
    response: function response(next) {
      return _asyncToGenerator(function* () {
        var response = yield next();
        var endedAt = Date.now();
        var startedAt = response.request().header('x-started-at');
        return response.enhance({
          headers: {
            'X-Started-At': startedAt,
            'X-Ended-At': endedAt,
            'X-Duration': endedAt - startedAt
          }
        });
      })();
    }
  };
};
var _default = DurationMiddleware;
exports["default"] = _default;