"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSuccessLogger = exports.setLoggerEnabled = exports.setErrorLogger = exports.defaultSuccessLogger = exports.defaultErrorLogger = exports["default"] = void 0;
var _response = require("../response");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var defaultSuccessLogger = function defaultSuccessLogger(message) {
  var logger = console.info ? console.info : console.log;
  logger(message);
};
exports.defaultSuccessLogger = defaultSuccessLogger;
var defaultErrorLogger = function defaultErrorLogger(message) {
  var logger = console.error ? console.error : console.log;
  logger(message);
};
exports.defaultErrorLogger = defaultErrorLogger;
var isLoggerEnabled = Boolean(console && console.log);
var successLogger = defaultSuccessLogger;
var errorLogger = defaultErrorLogger;
var setSuccessLogger = function setSuccessLogger(logger) {
  successLogger = logger;
};
exports.setSuccessLogger = setSuccessLogger;
var setErrorLogger = function setErrorLogger(logger) {
  errorLogger = logger;
};
exports.setErrorLogger = setErrorLogger;
var setLoggerEnabled = function setLoggerEnabled(value) {
  isLoggerEnabled = value;
};
exports.setLoggerEnabled = setLoggerEnabled;
var log = function log(request, response) {
  if (isLoggerEnabled) {
    var httpCall = "".concat(request.method().toUpperCase(), " ").concat(request.url());
    var direction = response ? '<-' : '->';
    var isError = response && !response.success();
    var errorLabel = isError ? '(ERROR) ' : '';
    var extra = response ? " status=".concat(response.status(), " '").concat(response.rawData(), "'") : '';
    var logger = isError ? errorLogger : successLogger;
    logger("".concat(direction, " ").concat(errorLabel).concat(httpCall).concat(extra));
  }
  return response || request;
};

/**
 * Log all requests and responses.
 */
var ConsoleLogMiddleware = function ConsoleLogMiddleware() {
  return {
    prepareRequest: function prepareRequest(next) {
      return _asyncToGenerator(function* () {
        var request = yield next();
        log(request);
        return request;
      })();
    },
    response: function response(next) {
      return _asyncToGenerator(function* () {
        try {
          var response = yield next();
          log(response.request(), response);
          return response;
        } catch (err) {
          if (err instanceof _response.Response) {
            log(err.request(), err);
          }
          throw err;
        }
      })();
    }
  };
};
var _default = ConsoleLogMiddleware;
exports["default"] = _default;