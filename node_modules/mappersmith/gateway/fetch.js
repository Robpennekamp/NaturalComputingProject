"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Fetch = void 0;
var _gateway = require("../gateway");
var _response = _interopRequireDefault(require("../response"));
var _mappersmith = require("../mappersmith");
var _utils = require("../utils");
var _timeoutError = require("./timeout-error");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
/**
 * Gateway which uses the "fetch" implementation configured in "configs.fetch".
 * By default "configs.fetch" will receive the global fetch, this gateway doesn't
 * use browser specific code, with a proper "fetch" implementation it can also be
 * used with node.js
 */
var Fetch = /*#__PURE__*/function (_Gateway) {
  _inherits(Fetch, _Gateway);
  var _super = _createSuper(Fetch);
  function Fetch() {
    _classCallCheck(this, Fetch);
    return _super.apply(this, arguments);
  }
  _createClass(Fetch, [{
    key: "get",
    value: function get() {
      this.performRequest('get');
    }
  }, {
    key: "head",
    value: function head() {
      this.performRequest('head');
    }
  }, {
    key: "post",
    value: function post() {
      this.performRequest('post');
    }
  }, {
    key: "put",
    value: function put() {
      this.performRequest('put');
    }
  }, {
    key: "patch",
    value: function patch() {
      this.performRequest('patch');
    }
  }, {
    key: "delete",
    value: function _delete() {
      this.performRequest('delete');
    }
  }, {
    key: "performRequest",
    value: function performRequest(method) {
      var _this = this;
      var fetch = _mappersmith.configs.fetch;
      if (!fetch) {
        throw new Error("[Mappersmith] global fetch does not exist, please assign \"configs.fetch\" to a valid implementation");
      }
      var customHeaders = {};
      var body = this.prepareBody(method, customHeaders);
      var auth = this.request.auth();
      if (auth) {
        var username = auth.username || '';
        var password = auth.password || '';
        customHeaders['authorization'] = "Basic ".concat((0, _utils.btoa)("".concat(username, ":").concat(password)));
      }
      var headers = (0, _utils.assign)(customHeaders, this.request.headers());
      var requestMethod = this.shouldEmulateHTTP() ? 'post' : method;
      var init = (0, _utils.assign)({
        method: requestMethod,
        headers: headers,
        body: body
      }, this.options().Fetch);
      var timeout = this.request.timeout();
      var timer = null;
      var canceled = false;
      if (timeout) {
        timer = setTimeout(function () {
          canceled = true;
          var error = (0, _timeoutError.createTimeoutError)("Timeout (".concat(timeout, "ms)"));
          _this.dispatchClientError(error.message, error);
        }, timeout);
      }
      fetch(this.request.url(), init).then(function (fetchResponse) {
        if (canceled) {
          return;
        }
        timer && clearTimeout(timer);
        var responseData;
        if (_this.request.isBinary()) {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          if (typeof fetchResponse.buffer === 'function') {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            responseData = fetchResponse.buffer();
          } else {
            responseData = fetchResponse.arrayBuffer();
          }
        } else {
          responseData = fetchResponse.text();
        }
        responseData.then(function (data) {
          _this.dispatchResponse(_this.createResponse(fetchResponse, data));
        });
      })["catch"](function (error) {
        if (canceled) {
          return;
        }
        timer && clearTimeout(timer);
        _this.dispatchClientError(error.message, error);
      });
    }
  }, {
    key: "createResponse",
    value: function createResponse(fetchResponse, data) {
      var status = fetchResponse.status;
      var responseHeaders = {};
      fetchResponse.headers.forEach(function (value, key) {
        responseHeaders[key] = value;
      });

      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return new _response["default"](this.request, status, data, responseHeaders);
    }
  }]);
  return Fetch;
}(_gateway.Gateway);
exports.Fetch = Fetch;
var _default = Fetch;
exports["default"] = _default;