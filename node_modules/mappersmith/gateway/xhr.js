"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.XHR = void 0;
var _gateway = require("../gateway");
var _response = _interopRequireDefault(require("../response"));
var _utils = require("../utils");
var _timeoutError = require("./timeout-error");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var toBase64 = window.btoa || _utils.btoa;
var XHR = /*#__PURE__*/function (_Gateway) {
  _inherits(XHR, _Gateway);
  var _super = _createSuper(XHR);
  function XHR() {
    var _this;
    _classCallCheck(this, XHR);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "canceled", false);
    _defineProperty(_assertThisInitialized(_this), "timer", void 0);
    return _this;
  }
  _createClass(XHR, [{
    key: "get",
    value: function get() {
      var xmlHttpRequest = this.createXHR();
      xmlHttpRequest.open('GET', this.request.url(), true);
      this.setHeaders(xmlHttpRequest, {});
      this.configureTimeout(xmlHttpRequest);
      this.configureBinary(xmlHttpRequest);
      xmlHttpRequest.send();
    }
  }, {
    key: "head",
    value: function head() {
      var xmlHttpRequest = this.createXHR();
      xmlHttpRequest.open('HEAD', this.request.url(), true);
      this.setHeaders(xmlHttpRequest, {});
      this.configureTimeout(xmlHttpRequest);
      this.configureBinary(xmlHttpRequest);
      xmlHttpRequest.send();
    }
  }, {
    key: "post",
    value: function post() {
      this.performRequest('post');
    }
  }, {
    key: "put",
    value: function put() {
      this.performRequest('put');
    }
  }, {
    key: "patch",
    value: function patch() {
      this.performRequest('patch');
    }
  }, {
    key: "delete",
    value: function _delete() {
      this.performRequest('delete');
    }
  }, {
    key: "configureBinary",
    value: function configureBinary(xmlHttpRequest) {
      if (this.request.isBinary()) {
        xmlHttpRequest.responseType = 'blob';
      }
    }
  }, {
    key: "configureTimeout",
    value: function configureTimeout(xmlHttpRequest) {
      var _this2 = this;
      this.canceled = false;
      this.timer = undefined;
      var timeout = this.request.timeout();
      if (timeout) {
        xmlHttpRequest.timeout = timeout;
        xmlHttpRequest.addEventListener('timeout', function () {
          _this2.canceled = true;
          _this2.timer && clearTimeout(_this2.timer);
          var error = (0, _timeoutError.createTimeoutError)("Timeout (".concat(timeout, "ms)"));
          _this2.dispatchClientError(error.message, error);
        });

        // PhantomJS doesn't support timeout for XMLHttpRequest
        this.timer = setTimeout(function () {
          _this2.canceled = true;
          var error = (0, _timeoutError.createTimeoutError)("Timeout (".concat(timeout, "ms)"));
          _this2.dispatchClientError(error.message, error);
        }, timeout + 1);
      }
    }
  }, {
    key: "configureCallbacks",
    value: function configureCallbacks(xmlHttpRequest) {
      var _this3 = this;
      xmlHttpRequest.addEventListener('load', function () {
        if (_this3.canceled) {
          return;
        }
        _this3.timer && clearTimeout(_this3.timer);
        _this3.dispatchResponse(_this3.createResponse(xmlHttpRequest));
      });
      xmlHttpRequest.addEventListener('error', function (e) {
        if (_this3.canceled) {
          return;
        }
        _this3.timer && clearTimeout(_this3.timer);
        var guessedErrorCause = e ?
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        e.message || e.name : xmlHttpRequest.responseText;
        var errorMessage = 'Network error';
        var enhancedMessage = guessedErrorCause ? ": ".concat(guessedErrorCause) : '';
        var error = new Error("".concat(errorMessage).concat(enhancedMessage));
        _this3.dispatchClientError(errorMessage, error);
      });
      var xhrOptions = this.options().XHR;
      if (xhrOptions.withCredentials) {
        xmlHttpRequest.withCredentials = true;
      }
      if (xhrOptions.configure) {
        xhrOptions.configure(xmlHttpRequest);
      }
    }
  }, {
    key: "performRequest",
    value: function performRequest(method) {
      var requestMethod = this.shouldEmulateHTTP() ? 'post' : method;
      var xmlHttpRequest = this.createXHR();
      xmlHttpRequest.open(requestMethod.toUpperCase(), this.request.url(), true);
      var customHeaders = {};
      var body = this.prepareBody(method, customHeaders);
      this.setHeaders(xmlHttpRequest, customHeaders);
      this.configureTimeout(xmlHttpRequest);
      this.configureBinary(xmlHttpRequest);
      xmlHttpRequest.send(body);
    }
  }, {
    key: "createResponse",
    value: function createResponse(xmlHttpRequest) {
      var status = xmlHttpRequest.status;
      var data = this.request.isBinary() ? xmlHttpRequest.response : xmlHttpRequest.responseText;
      var responseHeaders = (0, _utils.parseResponseHeaders)(xmlHttpRequest.getAllResponseHeaders());
      return new _response["default"](this.request, status, data, responseHeaders);
    }
  }, {
    key: "setHeaders",
    value: function setHeaders(xmlHttpRequest, customHeaders) {
      var auth = this.request.auth();
      var headers = (0, _utils.assign)(customHeaders, _objectSpread(_objectSpread({}, this.request.headers()), auth ? {
        authorization: "Basic ".concat(toBase64("".concat(auth.username, ":").concat(auth.password)))
      } : {}));
      Object.keys(headers).forEach(function (headerName) {
        xmlHttpRequest.setRequestHeader(headerName, "".concat(headers[headerName]));
      });
    }
  }, {
    key: "createXHR",
    value: function createXHR() {
      var xmlHttpRequest = new XMLHttpRequest();
      this.configureCallbacks(xmlHttpRequest);
      return xmlHttpRequest;
    }
  }]);
  return XHR;
}(_gateway.Gateway);
exports.XHR = XHR;
var _default = XHR;
exports["default"] = _default;