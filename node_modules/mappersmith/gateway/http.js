"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.HTTP = void 0;
var url = _interopRequireWildcard(require("url"));
var http = _interopRequireWildcard(require("http"));
var https = _interopRequireWildcard(require("https"));
var _utils = require("../utils");
var _gateway = require("../gateway");
var _response = _interopRequireDefault(require("../response"));
var _timeoutError = require("./timeout-error");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var HTTP = /*#__PURE__*/function (_Gateway) {
  _inherits(HTTP, _Gateway);
  var _super = _createSuper(HTTP);
  function HTTP() {
    var _this;
    _classCallCheck(this, HTTP);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "canceled", false);
    return _this;
  }
  _createClass(HTTP, [{
    key: "get",
    value: function get() {
      this.performRequest('get');
    }
  }, {
    key: "head",
    value: function head() {
      this.performRequest('head');
    }
  }, {
    key: "post",
    value: function post() {
      this.performRequest('post');
    }
  }, {
    key: "put",
    value: function put() {
      this.performRequest('put');
    }
  }, {
    key: "patch",
    value: function patch() {
      this.performRequest('patch');
    }
  }, {
    key: "delete",
    value: function _delete() {
      this.performRequest('delete');
    }
  }, {
    key: "performRequest",
    value: function performRequest(method) {
      var _this2 = this;
      var headers = {};
      // FIXME: Deprecated API
      // eslint-disable-next-line n/no-deprecated-api
      var defaults = url.parse(this.request.url());
      var requestMethod = this.shouldEmulateHTTP() ? 'post' : method;
      var body = this.prepareBody(method, headers);
      var timeout = this.request.timeout();
      this.canceled = false;
      if (body && typeof body !== 'boolean' && typeof body !== 'number' && typeof body.length === 'number') {
        headers['content-length'] = Buffer.byteLength(body);
      }
      var handler = defaults.protocol === 'https:' ? https : http;
      var requestParams = (0, _utils.assign)(defaults, {
        method: requestMethod,
        headers: (0, _utils.assign)(headers, this.request.headers())
      });
      var auth = this.request.auth();
      if (auth) {
        var username = auth.username || '';
        var password = auth.password || '';
        requestParams['auth'] = "".concat(username, ":").concat(password);
      }
      var httpOptions = this.options().HTTP;
      if (httpOptions.useSocketConnectionTimeout) {
        requestParams['timeout'] = timeout;
      }
      if (httpOptions.configure) {
        (0, _utils.assign)(requestParams, httpOptions.configure(requestParams));
      }
      if (httpOptions.onRequestWillStart) {
        httpOptions.onRequestWillStart(requestParams);
      }
      var httpRequest = handler.request(requestParams, function (httpResponse) {
        return _this2.onResponse(httpResponse, httpOptions, requestParams);
      });
      httpRequest.on('socket', function (socket) {
        if (httpOptions.onRequestSocketAssigned) {
          httpOptions.onRequestSocketAssigned(requestParams);
        }
        socket.on('lookup', function () {
          if (httpOptions.onSocketLookup) {
            httpOptions.onSocketLookup(requestParams);
          }
        });
        socket.on('connect', function () {
          if (httpOptions.onSocketConnect) {
            httpOptions.onSocketConnect(requestParams);
          }
        });
        socket.on('secureConnect', function () {
          if (httpOptions.onSocketSecureConnect) {
            httpOptions.onSocketSecureConnect(requestParams);
          }
        });
      });
      httpRequest.on('error', function (e) {
        return _this2.onError(e);
      });
      body && httpRequest.write(body);
      if (timeout) {
        if (!httpOptions.useSocketConnectionTimeout) {
          httpRequest.setTimeout(timeout);
        }
        httpRequest.on('timeout', function () {
          _this2.canceled = true;
          httpRequest.abort();
          var error = (0, _timeoutError.createTimeoutError)("Timeout (".concat(timeout, "ms)"));
          _this2.dispatchClientError(error.message, error);
        });
      }
      httpRequest.end();
    }
  }, {
    key: "onResponse",
    value: function onResponse(httpResponse, httpOptions, requestParams) {
      var _this3 = this;
      var rawData = [];
      if (!this.request.isBinary()) {
        httpResponse.setEncoding('utf8');
      }
      httpResponse.once('readable', function () {
        if (httpOptions.onResponseReadable) {
          httpOptions.onResponseReadable(requestParams);
        }
      });
      httpResponse.on('data', function (chunk) {
        return rawData.push(chunk);
      }).on('end', function () {
        if (_this3.canceled) {
          return;
        }
        _this3.dispatchResponse(_this3.createResponse(httpResponse, rawData));
      });
      httpResponse.on('end', function () {
        if (httpOptions.onResponseEnd) {
          httpOptions.onResponseEnd(requestParams);
        }
      });
    }
  }, {
    key: "onError",
    value: function onError(e) {
      if (this.canceled) {
        return;
      }
      this.dispatchClientError(e.message, e);
    }
  }, {
    key: "createResponse",
    value: function createResponse(httpResponse, rawData) {
      var responseData = this.request.isBinary() ? Buffer.concat(rawData) : rawData.join('');
      return new _response["default"](this.request, httpResponse.statusCode, responseData,
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      httpResponse.headers);
    }
  }]);
  return HTTP;
}(_gateway.Gateway);
exports.HTTP = HTTP;
var _default = HTTP;
exports["default"] = _default;