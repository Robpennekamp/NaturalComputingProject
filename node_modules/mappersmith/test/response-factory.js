"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.responseFactory = void 0;
var _response = require("../response");
var _requestFactory = require("./request-factory");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
/**
 * Create a response to use in tests
 * @returns Response
 */
var responseFactory = function responseFactory() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$method = _ref.method,
    method = _ref$method === void 0 ? 'GET' : _ref$method,
    _ref$host = _ref.host,
    host = _ref$host === void 0 ? 'http://example.org' : _ref$host,
    _ref$path = _ref.path,
    path = _ref$path === void 0 ? '/path' : _ref$path,
    _ref$request = _ref.request,
    request = _ref$request === void 0 ? (0, _requestFactory.requestFactory)({
      method: method,
      host: host,
      path: path
    }) : _ref$request,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? 200 : _ref$status,
    _ref$data = _ref.data,
    data = _ref$data === void 0 ? {} : _ref$data,
    _ref$headers = _ref.headers,
    headers = _ref$headers === void 0 ? {} : _ref$headers,
    _ref$errors = _ref.errors,
    errors = _ref$errors === void 0 ? [] : _ref$errors;
  var responseData;
  var contentType;
  if (typeof data === 'string') {
    contentType = 'text/plain';
    responseData = data;
  } else {
    contentType = 'application/json';
    responseData = JSON.stringify(data);
  }
  return new _response.Response(request, status, responseData, _objectSpread({
    'content-type': contentType
  }, headers), errors);
};
exports.responseFactory = responseFactory;