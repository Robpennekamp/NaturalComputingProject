"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _mockAssert = _interopRequireDefault(require("./mock-assert"));
var _response = _interopRequireDefault(require("../response"));
var _utils = require("../utils");
var _clone = require("../utils/clone");
var _mockUtils = require("./mock-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
/**
 * @param {number} id
 * @param {object} props
 *   @param {string} props.method
 *   @param {string|function} props.url
 *   @param {string|function} props.body - request body
 *   @param {object} props.response
 *     @param {string} props.response.body
 *     @param {object} props.response.headers
 *     @param {integer} props.response.status
 */
function MockRequest(id, props) {
  this.id = id;
  this.method = props.method || 'get';
  this.urlFunction = typeof props.url === 'function';
  this.url = props.url;
  this.bodyFunction = typeof props.body === 'function';
  this.body = this.bodyFunction ? props.body : (0, _mockUtils.toSortedQueryString)(props.body);
  this.headersFunction = typeof props.headers === 'function';
  this.headers = props.headersFunction ? props.headers : (0, _mockUtils.toSortedQueryString)(props.headers);
  this.headersObject = props.headers;
  this.responseHeaders = props.response.headers || {};
  this.setResponseData(props.response.body);
  this.responseHandler = props.response.handler;
  this.statusFunction = typeof props.response.status === 'function';
  this.responseStatus = props.response.status || 200;
  this.calls = [];
}
MockRequest.prototype = {
  /**
   * If passed a plain object, the data is stringified and the content-type header is set to JSON
   *
   * @public
   */
  setResponseData: function setResponseData(responseData) {
    if ((0, _utils.isPlainObject)(responseData)) {
      this.responseData = JSON.stringify(responseData);
      if (!this.responseHeaders['content-type']) {
        this.responseHeaders['content-type'] = 'application/json';
      }
    } else {
      this.responseData = responseData;
    }
  },
  /**
   * @return {Response}
   */
  call: function call(request) {
    var assertObject = this.assertObject();
    if (this.responseHandler) {
      this.setResponseData(this.responseHandler(request, assertObject));
    }
    var status = this.statusFunction ? this.responseStatus(request, assertObject) : this.responseStatus;
    this.calls.push(request);
    var responseData = (0, _clone.clone)(this.responseData);
    var responseHeaders = (0, _clone.clone)(this.responseHeaders);
    return new _response["default"](request, status, responseData, responseHeaders);
  },
  /**
   * @return {MockAssert}
   */
  assertObject: function assertObject() {
    return new _mockAssert["default"](this.calls);
  },
  /**
   * Checks if the request matches with the mock HTTP method, URL, headers and body
   *
   * @return {boolean}
   */
  isExactMatch: function isExactMatch(request) {
    var _this = this;
    var bodyMatch = function bodyMatch() {
      if (_this.body === undefined) {
        return true;
      }
      return _this.bodyFunction ? _this.body(request.body()) : _this.body === (0, _mockUtils.toSortedQueryString)(request.body());
    };
    var urlMatch = this.urlFunction ? this.url(request.url(), request.params()) : (0, _mockUtils.sortedUrl)(this.url) === (0, _mockUtils.sortedUrl)(request.url());
    var headerMatch = !this.headers || (this.headersFunction ? this.headers(request.headers()) : (0, _mockUtils.isSubset)(this.headersObject, request.headers()));
    return this.method === request.method() && urlMatch && bodyMatch() && headerMatch;
  },
  /**
   * Checks if the request partially matches the mock HTTP method and URL
   *
   * @return {boolean}
   */
  isPartialMatch: function isPartialMatch(request) {
    return new RegExp(this.method).test(request.method()) && new RegExp(this.url).test(request.url());
  },
  /**
   * @return {MockRequest}
   */
  toMockRequest: function toMockRequest() {
    return this;
  }
};
var _default = MockRequest;
exports["default"] = _default;