"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _mappersmith = require("../mappersmith");
var _mockRequest = _interopRequireDefault(require("./mock-request"));
var _request = _interopRequireDefault(require("../request"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var VALUE_NOT_MATCHED = '<MAPPERSMITH_VALUE_NOT_MATCHED>';

/**
 * @param {Integer} id
 * @param {Object} client - the client generated by {@link forge}
 */
function MockResource(id, client) {
  if (!client || !client._manifest) {
    throw new Error('[Mappersmith Test] "mockClient" received an invalid client');
  }
  this.id = id;
  this.manifest = client._manifest;
  this.resourceName = null;
  this.methodName = null;
  this.requestParams = {};
  this.responseData = null;
  this.responseHandler = null;
  this.responseHeaders = {};
  this.responseStatus = 200;
  this.responseStatusHandler = null;
  this.mockRequest = null;
  this.asyncFinalRequest = null;
  this.pendingMiddlewareExecution = true;
}
MockResource.prototype = {
  /**
   * @return {MockResource}
   */
  resource: function resource(resourceName) {
    this.resourceName = resourceName;
    return this;
  },
  /**
   * @return {MockResource}
   */
  method: function method(methodName) {
    this.methodName = methodName;
    return this;
  },
  /**
   * @return {MockResource}
   */
  "with": function _with(requestParams) {
    this.requestParams = requestParams;
    return this;
  },
  /**
   * @return {MockResource}
   */
  headers: function headers(responseHeaders) {
    this.responseHeaders = responseHeaders;
    return this;
  },
  /**
   * @return {MockResource}
   */
  status: function status(responder) {
    if (typeof responder === 'function') {
      this.responseStatusHandler = responder;
    } else {
      this.responseStatus = responder;
    }
    return this;
  },
  /**
   * @return {MockResource}
   */
  response: function response(responder) {
    if (typeof responder === 'function') {
      this.responseHandler = responder;
    } else {
      this.responseData = responder;
    }
    return this;
  },
  /**
   * @return {Promise<MockAssert>}
   */
  assertObjectAsync: function assertObjectAsync() {
    var _this = this;
    return this.createAsyncRequest().then(function (finalRequest) {
      _this.asyncFinalRequest = finalRequest;
      _this.pendingMiddlewareExecution = false;
      return _this.toMockRequest().assertObject();
    });
  },
  /**
   * @return {MockAssert}
   */
  assertObject: function assertObject() {
    // The middleware "prepareRequest" phase is always async, so the middleware
    // stack will never run when assertObject is used
    return this.toMockRequest().assertObject();
  },
  /**
   * @return {MockRequest}
   */
  toMockRequest: function toMockRequest() {
    var finalRequest = this.asyncFinalRequest ? this.asyncFinalRequest : this.createRequest();
    var responseStatus = this.responseStatusHandler || this.responseStatus;
    if (!this.mockRequest) {
      this.mockRequest = new _mockRequest["default"](this.id, {
        method: finalRequest.method(),
        url: this.generateUrlMatcher(finalRequest),
        body: finalRequest.body(),
        headers: finalRequest.headers(),
        response: {
          status: responseStatus,
          headers: this.responseHeaders,
          body: this.responseData,
          handler: this.responseHandler
        }
      });
    }
    return this.mockRequest;
  },
  /**
   * @private
   */
  generateUrlMatcher: function generateUrlMatcher(finalRequest) {
    var _this2 = this;
    var params = finalRequest.params();
    var hasParamMatchers = Object.keys(params).find(function (key) {
      return typeof params[key] === 'function';
    });
    if (!hasParamMatchers) {
      return finalRequest.url();
    }
    var urlMatcher = function urlMatcher(requestUrl, requestParams) {
      var additionalParams = _this2.evaluateParamMatchers(params, requestParams);
      var testRequest = finalRequest.enhance({
        params: additionalParams
      });
      return testRequest.url() === requestUrl;
    };
    return urlMatcher;
  },
  /**
   * @private
   */
  executeMiddlewareStack: function executeMiddlewareStack() {
    var _this3 = this;
    return this.createAsyncRequest().then(function (finalRequest) {
      _this3.asyncFinalRequest = finalRequest;
      if (_this3.mockRequest) {
        var urlMatcher = _this3.generateUrlMatcher(finalRequest);
        _this3.mockRequest.url = urlMatcher;
        _this3.mockRequest.body = finalRequest.body();
        _this3.pendingMiddlewareExecution = false;
      }
    });
  },
  /**
   * @private
   */
  evaluateParamMatchers: function evaluateParamMatchers(mockParams, requestParams) {
    return Object.keys(mockParams).reduce(function (obj, key) {
      var matcher = mockParams[key];
      if (typeof matcher !== 'function') {
        return obj;
      }
      var value = requestParams[key];
      // Only evaluate if key was provided in request params.
      // Otherwise we always consider it not to match.
      if (key in requestParams && matcher(value)) {
        obj[key] = value;
      } else {
        obj[key] = VALUE_NOT_MATCHED;
      }
      return obj;
    }, {});
  },
  /**
   * @private
   * It never runs the middleware stack
   */
  createRequest: function createRequest() {
    var methodDescriptor = this.manifest.createMethodDescriptor(this.resourceName, this.methodName);
    return new _request["default"](methodDescriptor, this.requestParams);
  },
  /**
   * @private
   * Always runs the middleware stack
   */
  createAsyncRequest: function createAsyncRequest() {
    var methodDescriptor = this.manifest.createMethodDescriptor(this.resourceName, this.methodName);
    var initialRequest = new _request["default"](methodDescriptor, this.requestParams);
    var middleware = this.manifest.createMiddleware({
      resourceName: this.resourceName,
      resourceMethod: this.methodName,
      mockRequest: true
    });
    var abort = function abort(error) {
      throw error;
    };
    var getInitialRequest = function getInitialRequest() {
      return _mappersmith.configs.Promise.resolve(initialRequest);
    };
    var prepareRequest = middleware.reduce(function (next, middleware) {
      return function () {
        return _mappersmith.configs.Promise.resolve().then(function () {
          return middleware.prepareRequest(next, abort);
        });
      };
    }, getInitialRequest);
    return prepareRequest();
  }
};
var _default = MockResource;
exports["default"] = _default;