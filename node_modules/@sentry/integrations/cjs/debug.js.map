{"version":3,"file":"debug.js","sources":["../../../src/debug.ts"],"sourcesContent":["import type { Event, EventHint, EventProcessor, Hub, Integration } from '@sentry/types';\nimport { consoleSandbox } from '@sentry/utils';\n\ninterface DebugOptions {\n  /** Controls whether console output created by this integration should be stringified. Default: `false` */\n  stringify?: boolean;\n  /** Controls whether a debugger should be launched before an event is sent. Default: `false` */\n  debugger?: boolean;\n}\n\n/**\n * Integration to debug sent Sentry events.\n * This integration should not be used in production\n */\nexport class Debug implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Debug';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Debug.id;\n\n  private readonly _options: DebugOptions;\n\n  public constructor(options?: DebugOptions) {\n    this._options = {\n      debugger: false,\n      stringify: false,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((event: Event, hint: EventHint) => {\n      const self = getCurrentHub().getIntegration(Debug);\n      if (self) {\n        if (self._options.debugger) {\n          // eslint-disable-next-line no-debugger\n          debugger;\n        }\n\n        /* eslint-disable no-console */\n        consoleSandbox(() => {\n          if (self._options.stringify) {\n            console.log(JSON.stringify(event, null, 2));\n            if (Object.keys(hint).length) {\n              console.log(JSON.stringify(hint, null, 2));\n            }\n          } else {\n            console.log(event);\n            if (Object.keys(hint).length) {\n              console.log(hint);\n            }\n          }\n        });\n        /* eslint-enable no-console */\n      }\n      return event;\n    });\n  }\n}\n"],"names":["consoleSandbox"],"mappings":";;;;AAUA;AACA;AACA;AACA;AACA,MAAA,KAAA,EAAA;AACA;AACA;AACA;AACA,GAAA,OAAA,YAAA,GAAA,CAAA,IAAA,CAAA,EAAA,GAAA,QAAA,CAAA;AACA;AACA;AACA;AACA;AACA,GAAA,MAAA,GAAA,CAAA,IAAA,CAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA;;AAIA,GAAA,WAAA,CAAA,OAAA,EAAA,CAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA,IAAA,IAAA,CAAA,QAAA,GAAA;AACA,MAAA,QAAA,EAAA,KAAA;AACA,MAAA,SAAA,EAAA,KAAA;AACA,MAAA,GAAA,OAAA;AACA,KAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA,GAAA,SAAA,CAAA,uBAAA,EAAA,aAAA,EAAA;AACA,IAAA,uBAAA,CAAA,CAAA,KAAA,EAAA,IAAA,KAAA;AACA,MAAA,MAAA,IAAA,GAAA,aAAA,EAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CAAA;AACA,MAAA,IAAA,IAAA,EAAA;AACA,QAAA,IAAA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA;AACA;AACA,UAAA,SAAA;AACA,SAAA;AACA;AACA;AACA,QAAAA,oBAAA,CAAA,MAAA;AACA,UAAA,IAAA,IAAA,CAAA,QAAA,CAAA,SAAA,EAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,IAAA,CAAA,SAAA,CAAA,KAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AACA,YAAA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,EAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AACA,aAAA;AACA,WAAA,MAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA;AACA,YAAA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,EAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA;AACA,aAAA;AACA,WAAA;AACA,SAAA,CAAA,CAAA;AACA;AACA,OAAA;AACA,MAAA,OAAA,KAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA,CAAA,CAAA,KAAA,CAAA,YAAA,EAAA;;;;"}