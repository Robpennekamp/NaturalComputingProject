'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var autocomplete = require('@codemirror/autocomplete');
var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "nQQOPOOOOOO'#Cc'#CcOOOO'#Ca'#CaQQOPOOOOOO-E6_-E6_",
  stateData: "]~OQPORPOSPO~O",
  goto: "cWPPPPPXP_QRORSRTQOR",
  nodeNames: "âš  Program Plaintext Resolvable BrokenResolvable",
  maxTerm: 7,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "&U~RRO#o[#o#p{#p~[~aRQ~O#o[#o#pj#p~[~mRO#o[#p~[~~v~{OQ~~!OSO#o[#o#p![#p~[~~v~!aUS~O#O![#O#P!s#P#q![#q#r%v#rG|![G|~%c~!xUS~O#O![#O#P!s#P#q![#q#r#[#rG|![G|~%c~#aRS~O#q#j#q#r$l#r~#j~#mTO#O#j#O#P#|#P#q#j#q#r%Q#rG|#j~$PTO#O#j#O#P#|#P#q#j#q#r$`#rG|#j~$cRO#q#j#q#r$l#r~#j~$qTR~O#O#j#O#P#|#P#q#j#q#r%Q#rG|#j~%TRO#q#j#q#r%^#r~#j~%cOR~~%hRS~O#q%c#q#r%q#r~%c~%vOS~~%{RS~O#q#j#q#r%^#r~#j",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const parserWithMetaData = parser.configure({
    props: [
        language.foldNodeProp.add({
            Application: language.foldInside,
        }),
        highlight.styleTags({
            OpenMarker: highlight.tags.brace,
            CloseMarker: highlight.tags.brace,
            Plaintext: highlight.tags.content,
            Resolvable: highlight.tags.string,
            BrokenResolvable: highlight.tags.className,
        }),
    ],
});
const n8nLanguage = language.LRLanguage.define({
    parser: parserWithMetaData,
    languageData: {
        commentTokens: { line: ";" },
    },
});
const completions = n8nLanguage.data.of({
    autocomplete: autocomplete.completeFromList([
    // { label: "test", type: "keyword" }, // to add in future
    ]),
});
function n8nExpression() {
    return new language.LanguageSupport(n8nLanguage, [completions]);
}

exports.n8nExpression = n8nExpression;
exports.n8nLanguage = n8nLanguage;
exports.parserWithMetaData = parserWithMetaData;
