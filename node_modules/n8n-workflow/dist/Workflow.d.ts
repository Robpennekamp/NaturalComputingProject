import type { IConnections, IGetExecuteTriggerFunctions, INode, INodeExecuteFunctions, INodeExecutionData, INodes, INodeType, INodeTypes, IPinData, IPollFunctions, IRunExecutionData, ITriggerResponse, IWebhookData, IWebhookResponseData, IWorkflowIssues, IWorkflowExecuteAdditionalData, IWorkflowSettings, WebhookSetupMethodNames, WorkflowActivateMode, WorkflowExecuteMode, IConnectedNode, IDataObject, IExecuteData, INodeConnection, IRunNodeResponse, NodeParameterValueType } from './Interfaces';
import { Expression } from './Expression';
export declare class Workflow {
    id: string | undefined;
    name: string | undefined;
    nodes: INodes;
    connectionsBySourceNode: IConnections;
    connectionsByDestinationNode: IConnections;
    nodeTypes: INodeTypes;
    expression: Expression;
    active: boolean;
    settings: IWorkflowSettings;
    staticData: IDataObject;
    pinData?: IPinData;
    constructor(parameters: {
        id?: string;
        name?: string;
        nodes: INode[];
        connections: IConnections;
        active: boolean;
        nodeTypes: INodeTypes;
        staticData?: IDataObject;
        settings?: IWorkflowSettings;
        pinData?: IPinData;
    });
    __getConnectionsByDestination(connections: IConnections): IConnections;
    checkIfWorkflowCanBeActivated(ignoreNodeTypes?: string[]): boolean;
    checkReadyForExecution(inputData: {
        startNode?: string;
        destinationNode?: string;
        pinDataNodeNames?: string[];
    }): IWorkflowIssues | null;
    getStaticData(type: string, node?: INode): IDataObject;
    getTriggerNodes(): INode[];
    getPollNodes(): INode[];
    queryNodes(checkFunction: (nodeType: INodeType) => boolean): INode[];
    getNode(nodeName: string): INode | null;
    getPinDataOfNode(nodeName: string): IDataObject[] | undefined;
    renameNodeInParameterValue(parameterValue: NodeParameterValueType, currentName: string, newName: string, { hasRenamableContent }?: {
        hasRenamableContent: boolean;
    }): NodeParameterValueType;
    renameNode(currentName: string, newName: string): void;
    getHighestNode(nodeName: string, type?: string, nodeConnectionIndex?: number, checkedNodes?: string[]): string[];
    getChildNodes(nodeName: string, type?: string, depth?: number): string[];
    getParentNodes(nodeName: string, type?: string, depth?: number): string[];
    getConnectedNodes(connections: IConnections, nodeName: string, type?: string, depth?: number, checkedNodes?: string[]): string[];
    getParentNodesByDepth(nodeName: string, maxDepth?: number): IConnectedNode[];
    searchNodesBFS(connections: IConnections, sourceNode: string, maxDepth?: number): IConnectedNode[];
    getNodeConnectionIndexes(nodeName: string, parentNodeName: string, type?: string, depth?: number, checkedNodes?: string[]): INodeConnection | undefined;
    __getStartNode(nodeNames: string[]): INode | undefined;
    getStartNode(destinationNode?: string): INode | undefined;
    runWebhookMethod(method: WebhookSetupMethodNames, webhookData: IWebhookData, nodeExecuteFunctions: INodeExecuteFunctions, mode: WorkflowExecuteMode, activation: WorkflowActivateMode, isTest?: boolean): Promise<boolean | undefined>;
    runTrigger(node: INode, getTriggerFunctions: IGetExecuteTriggerFunctions, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): Promise<ITriggerResponse | undefined>;
    runPoll(node: INode, pollFunctions: IPollFunctions): Promise<INodeExecutionData[][] | null>;
    runWebhook(webhookData: IWebhookData, node: INode, additionalData: IWorkflowExecuteAdditionalData, nodeExecuteFunctions: INodeExecuteFunctions, mode: WorkflowExecuteMode): Promise<IWebhookResponseData>;
    runNode(executionData: IExecuteData, runExecutionData: IRunExecutionData, runIndex: number, additionalData: IWorkflowExecuteAdditionalData, nodeExecuteFunctions: INodeExecuteFunctions, mode: WorkflowExecuteMode): Promise<IRunNodeResponse>;
}
