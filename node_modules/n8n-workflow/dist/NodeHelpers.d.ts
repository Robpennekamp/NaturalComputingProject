import type { IContextObject, INode, INodeCredentialDescription, INodeExecutionData, INodeIssues, INodeParameterResourceLocator, INodeParameters, INodeProperties, INodePropertyCollection, INodePropertyMode, INodeType, IVersionedNodeType, IParameterDependencies, IRunExecutionData, IWebhookData, IWorkflowExecuteAdditionalData, NodeParameterValue } from './Interfaces';
import type { Workflow } from './Workflow';
export declare const cronNodeOptions: INodePropertyCollection[];
export declare function applySpecialNodeParameters(nodeType: INodeType): void;
export declare function displayParameter(nodeValues: INodeParameters, parameter: INodeProperties | INodeCredentialDescription, node: INode | null, nodeValuesRoot?: INodeParameters): boolean;
export declare function displayParameterPath(nodeValues: INodeParameters, parameter: INodeProperties | INodeCredentialDescription, path: string, node: INode | null): boolean;
export declare function getContext(runExecutionData: IRunExecutionData, type: string, node?: INode): IContextObject;
export declare function getParameterResolveOrder(nodePropertiesArray: INodeProperties[], parameterDependencies: IParameterDependencies): number[];
export declare function getNodeParameters(nodePropertiesArray: INodeProperties[], nodeValues: INodeParameters, returnDefaults: boolean, returnNoneDisplayed: boolean, node: INode | null, onlySimpleTypes?: boolean, dataIsResolved?: boolean, nodeValuesRoot?: INodeParameters, parentType?: string, parameterDependencies?: IParameterDependencies): INodeParameters | null;
export declare function prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>;
export declare function getNodeWebhooks(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, ignoreRestartWebhooks?: boolean): IWebhookData[];
export declare function getNodeWebhookPath(workflowId: string, node: INode, path: string, isFullPath?: boolean, restartWebhook?: boolean): string;
export declare function getNodeWebhookUrl(baseUrl: string, workflowId: string, node: INode, path: string, isFullPath?: boolean): string;
export declare function getNodeParametersIssues(nodePropertiesArray: INodeProperties[], node: INode, pinDataNodeNames?: string[]): INodeIssues | null;
export declare function nodeIssuesToString(issues: INodeIssues, node?: INode): string[];
export declare const validateResourceLocatorParameter: (value: INodeParameterResourceLocator, parameterMode: INodePropertyMode) => string[];
export declare function addToIssuesIfMissing(foundIssues: INodeIssues, nodeProperties: INodeProperties, value: NodeParameterValue | INodeParameterResourceLocator): void;
export declare function getParameterValueByPath(nodeValues: INodeParameters, parameterName: string, path: string): import("./Interfaces").NodeParameterValueType;
export declare function getParameterIssues(nodeProperties: INodeProperties, nodeValues: INodeParameters, path: string, node: INode): INodeIssues;
export declare function mergeIssues(destination: INodeIssues, source: INodeIssues | null): void;
export declare function mergeNodeProperties(mainProperties: INodeProperties[], addProperties: INodeProperties[]): void;
export declare function getVersionedNodeType(object: IVersionedNodeType | INodeType, version?: number): INodeType;
export declare function getVersionedNodeTypeAll(object: IVersionedNodeType | INodeType): INodeType[];
