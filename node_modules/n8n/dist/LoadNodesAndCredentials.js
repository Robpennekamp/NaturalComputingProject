"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadNodesAndCredentials = void 0;
const lodash_uniq_1 = __importDefault(require("lodash.uniq"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const path_1 = __importDefault(require("path"));
const config_1 = __importDefault(require("./config"));
const helpers_1 = require("./CommunityNodes/helpers");
const constants_1 = require("./constants");
const CredentialsOverwrites_1 = require("./CredentialsOverwrites");
const typedi_1 = require("typedi");
let LoadNodesAndCredentials = class LoadNodesAndCredentials {
    constructor() {
        this.known = { nodes: {}, credentials: {} };
        this.loaded = { nodes: {}, credentials: {} };
        this.types = { nodes: [], credentials: [] };
        this.loaders = {};
        this.excludeNodes = config_1.default.getEnv('nodes.exclude');
        this.includeNodes = config_1.default.getEnv('nodes.include');
    }
    async init() {
        const delimiter = process.platform === 'win32' ? ';' : ':';
        process.env.NODE_PATH = module.paths.join(delimiter);
        if (!constants_1.inTest)
            module.constructor._initPaths();
        this.downloadFolder = n8n_core_1.UserSettings.getUserN8nFolderDownloadedNodesPath();
        const pathsToScan = [
            path_1.default.join(constants_1.CLI_DIR, '..'),
            path_1.default.join(constants_1.CLI_DIR, 'node_modules'),
            path_1.default.join(this.downloadFolder, 'node_modules'),
        ];
        for (const nodeModulesDir of pathsToScan) {
            await this.loadNodesFromNodeModules(nodeModulesDir);
        }
        await this.loadNodesFromCustomDirectories();
        await this.postProcessLoaders();
        this.injectCustomApiCallOptions();
    }
    async generateTypesForFrontend() {
        const credentialsOverwrites = (0, CredentialsOverwrites_1.CredentialsOverwrites)().getAll();
        for (const credential of this.types.credentials) {
            const overwrittenProperties = [];
            this.credentialTypes
                .getParentTypes(credential.name)
                .reverse()
                .map((name) => credentialsOverwrites[name])
                .forEach((overwrite) => {
                if (overwrite)
                    overwrittenProperties.push(...Object.keys(overwrite));
            });
            if (credential.name in credentialsOverwrites) {
                overwrittenProperties.push(...Object.keys(credentialsOverwrites[credential.name]));
            }
            if (overwrittenProperties.length) {
                credential.__overwrittenProperties = (0, lodash_uniq_1.default)(overwrittenProperties);
            }
        }
        await (0, promises_1.mkdir)(path_1.default.join(constants_1.GENERATED_STATIC_DIR, 'types'), { recursive: true });
        const writeStaticJSON = async (name, data) => {
            const filePath = path_1.default.join(constants_1.GENERATED_STATIC_DIR, `types/${name}.json`);
            const stream = (0, fs_1.createWriteStream)(filePath, 'utf-8');
            stream.write('[\n');
            data.forEach((entry, index) => {
                stream.write(JSON.stringify(entry));
                if (index !== data.length - 1)
                    stream.write(',');
                stream.write('\n');
            });
            stream.write(']\n');
            stream.end();
        };
        await writeStaticJSON('nodes', this.types.nodes);
        await writeStaticJSON('credentials', this.types.credentials);
    }
    async loadNodesFromNodeModules(nodeModulesDir) {
        const globOptions = { cwd: nodeModulesDir, onlyDirectories: true };
        const installedPackagePaths = [
            ...(await (0, fast_glob_1.default)('n8n-nodes-*', { ...globOptions, deep: 1 })),
            ...(await (0, fast_glob_1.default)('@*/n8n-nodes-*', { ...globOptions, deep: 2 })),
        ];
        for (const packagePath of installedPackagePaths) {
            try {
                await this.runDirectoryLoader(n8n_core_1.LazyPackageDirectoryLoader, path_1.default.join(nodeModulesDir, packagePath));
            }
            catch (error) {
                n8n_workflow_1.ErrorReporterProxy.error(error);
            }
        }
    }
    getCustomDirectories() {
        const customDirectories = [n8n_core_1.UserSettings.getUserN8nFolderCustomExtensionPath()];
        if (process.env[n8n_core_1.CUSTOM_EXTENSION_ENV] !== undefined) {
            const customExtensionFolders = process.env[n8n_core_1.CUSTOM_EXTENSION_ENV].split(';');
            customDirectories.push(...customExtensionFolders);
        }
        return customDirectories;
    }
    async loadNodesFromCustomDirectories() {
        for (const directory of this.getCustomDirectories()) {
            await this.runDirectoryLoader(n8n_core_1.CustomDirectoryLoader, directory);
        }
    }
    async installOrUpdateNpmModule(packageName, options) {
        const isUpdate = 'installedPackage' in options;
        const command = isUpdate
            ? `npm update ${packageName}`
            : `npm install ${packageName}${options.version ? `@${options.version}` : ''}`;
        try {
            await (0, helpers_1.executeCommand)(command);
        }
        catch (error) {
            if (error instanceof Error && error.message === constants_1.RESPONSE_ERROR_MESSAGES.PACKAGE_NOT_FOUND) {
                throw new Error(`The npm package "${packageName}" could not be found.`);
            }
            throw error;
        }
        const finalNodeUnpackedPath = path_1.default.join(this.downloadFolder, 'node_modules', packageName);
        let loader;
        try {
            loader = await this.runDirectoryLoader(n8n_core_1.PackageDirectoryLoader, finalNodeUnpackedPath);
        }
        catch (error) {
            const removeCommand = `npm remove ${packageName}`;
            try {
                await (0, helpers_1.executeCommand)(removeCommand);
            }
            catch { }
            throw new Error(constants_1.RESPONSE_ERROR_MESSAGES.PACKAGE_LOADING_FAILED, { cause: error });
        }
        if (loader.loadedNodes.length > 0) {
            try {
                const { persistInstalledPackageData, removePackageFromDatabase } = await Promise.resolve().then(() => __importStar(require('./CommunityNodes/packageModel')));
                if (isUpdate)
                    await removePackageFromDatabase(options.installedPackage);
                const installedPackage = await persistInstalledPackageData(loader);
                await this.postProcessLoaders();
                await this.generateTypesForFrontend();
                return installedPackage;
            }
            catch (error) {
                n8n_workflow_1.LoggerProxy.error('Failed to save installed packages and nodes', {
                    error: error,
                    packageName,
                });
                throw error;
            }
        }
        else {
            const removeCommand = `npm remove ${packageName}`;
            try {
                await (0, helpers_1.executeCommand)(removeCommand);
            }
            catch { }
            throw new Error(constants_1.RESPONSE_ERROR_MESSAGES.PACKAGE_DOES_NOT_CONTAIN_NODES);
        }
    }
    async installNpmModule(packageName, version) {
        return this.installOrUpdateNpmModule(packageName, { version });
    }
    async removeNpmModule(packageName, installedPackage) {
        const command = `npm remove ${packageName}`;
        await (0, helpers_1.executeCommand)(command);
        const { removePackageFromDatabase } = await Promise.resolve().then(() => __importStar(require('./CommunityNodes/packageModel')));
        await removePackageFromDatabase(installedPackage);
        if (packageName in this.loaders) {
            this.loaders[packageName].reset();
            delete this.loaders[packageName];
        }
        await this.postProcessLoaders();
        await this.generateTypesForFrontend();
    }
    async updateNpmModule(packageName, installedPackage) {
        return this.installOrUpdateNpmModule(packageName, { installedPackage });
    }
    supportsProxyAuth(description) {
        if (!description.credentials)
            return false;
        return description.credentials.some(({ name }) => {
            const credType = this.types.credentials.find((t) => t.name === name);
            if (!credType) {
                n8n_workflow_1.LoggerProxy.warn(`Failed to load Custom API options for the node "${description.name}": Unknown credential name "${name}"`);
                return false;
            }
            if (credType.authenticate !== undefined)
                return true;
            return (Array.isArray(credType.extends) &&
                credType.extends.some((parentType) => ['oAuth2Api', 'googleOAuth2Api', 'oAuth1Api'].includes(parentType)));
        });
    }
    injectCustomApiCallOptions() {
        this.types.nodes.forEach((node) => {
            const isLatestVersion = node.defaultVersion === undefined || node.defaultVersion === node.version;
            if (isLatestVersion) {
                if (!this.supportsProxyAuth(node))
                    return;
                node.properties.forEach((p) => {
                    if (['resource', 'operation'].includes(p.name) &&
                        Array.isArray(p.options) &&
                        p.options[p.options.length - 1].name !== constants_1.CUSTOM_API_CALL_NAME) {
                        p.options.push({
                            name: constants_1.CUSTOM_API_CALL_NAME,
                            value: constants_1.CUSTOM_API_CALL_KEY,
                        });
                    }
                });
            }
        });
    }
    async runDirectoryLoader(constructor, dir) {
        const loader = new constructor(dir, this.excludeNodes, this.includeNodes);
        await loader.loadAll();
        this.loaders[loader.packageName] = loader;
        return loader;
    }
    async postProcessLoaders() {
        this.known = { nodes: {}, credentials: {} };
        this.loaded = { nodes: {}, credentials: {} };
        this.types = { nodes: [], credentials: [] };
        for (const loader of Object.values(this.loaders)) {
            const { types, directory } = loader;
            this.types.nodes = this.types.nodes.concat(types.nodes);
            this.types.credentials = this.types.credentials.concat(types.credentials);
            for (const nodeTypeName in loader.nodeTypes) {
                this.loaded.nodes[nodeTypeName] = loader.nodeTypes[nodeTypeName];
            }
            for (const credentialTypeName in loader.credentialTypes) {
                this.loaded.credentials[credentialTypeName] = loader.credentialTypes[credentialTypeName];
            }
            if (loader instanceof n8n_core_1.PackageDirectoryLoader) {
                const { packageName, known } = loader;
                for (const type in known.nodes) {
                    const { className, sourcePath } = known.nodes[type];
                    this.known.nodes[type] = {
                        className,
                        sourcePath: path_1.default.join(directory, sourcePath),
                    };
                }
                for (const type in known.credentials) {
                    const { className, sourcePath, nodesToTestWith } = known.credentials[type];
                    this.known.credentials[type] = {
                        className,
                        sourcePath: path_1.default.join(directory, sourcePath),
                        nodesToTestWith: nodesToTestWith === null || nodesToTestWith === void 0 ? void 0 : nodesToTestWith.map((nodeName) => `${packageName}.${nodeName}`),
                    };
                }
            }
        }
    }
};
LoadNodesAndCredentials = __decorate([
    (0, typedi_1.Service)()
], LoadNodesAndCredentials);
exports.LoadNodesAndCredentials = LoadNodesAndCredentials;
//# sourceMappingURL=LoadNodesAndCredentials.js.map