"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureMetrics = exports.promClient = void 0;
const config_1 = __importDefault(require("../config"));
const constants_1 = require("../constants");
const ResponseHelper = __importStar(require("../ResponseHelper"));
const express_prom_bundle_1 = __importDefault(require("express-prom-bundle"));
const prom_client_1 = __importDefault(require("prom-client"));
exports.promClient = prom_client_1.default;
const parse_1 = __importDefault(require("semver/functions/parse"));
function configureMetrics(app) {
    if (!config_1.default.getEnv('endpoints.metrics.enable')) {
        return;
    }
    setupDefaultMetrics();
    setupN8nVersionMetric();
    setupApiMetrics(app);
    mountMetricsEndpoint(app);
}
exports.configureMetrics = configureMetrics;
function setupN8nVersionMetric() {
    const n8nVersion = (0, parse_1.default)(constants_1.N8N_VERSION || '0.0.0');
    if (n8nVersion) {
        const versionGauge = new prom_client_1.default.Gauge({
            name: config_1.default.getEnv('endpoints.metrics.prefix') + 'version_info',
            help: 'n8n version info.',
            labelNames: ['version', 'major', 'minor', 'patch'],
        });
        versionGauge.set({
            version: 'v' + n8nVersion.version,
            major: n8nVersion.major,
            minor: n8nVersion.minor,
            patch: n8nVersion.patch,
        }, 1);
    }
}
function setupDefaultMetrics() {
    if (config_1.default.getEnv('endpoints.metrics.includeDefaultMetrics')) {
        prom_client_1.default.collectDefaultMetrics();
    }
}
function setupApiMetrics(app) {
    if (config_1.default.getEnv('endpoints.metrics.includeApiEndpoints')) {
        const metricsMiddleware = (0, express_prom_bundle_1.default)({
            autoregister: false,
            includeUp: false,
            includePath: config_1.default.getEnv('endpoints.metrics.includeApiPathLabel'),
            includeMethod: config_1.default.getEnv('endpoints.metrics.includeApiMethodLabel'),
            includeStatusCode: config_1.default.getEnv('endpoints.metrics.includeApiStatusCodeLabel'),
        });
        app.use(['/rest/', '/webhook/', 'webhook-test/', '/api/'], metricsMiddleware);
    }
}
function mountMetricsEndpoint(app) {
    app.get('/metrics', async (req, res) => {
        const response = await prom_client_1.default.register.metrics();
        res.setHeader('Content-Type', prom_client_1.default.register.contentType);
        ResponseHelper.sendSuccessResponse(res, response, true, 200);
    });
}
//# sourceMappingURL=index.js.map