"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WaitTracker = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const typedi_1 = require("typedi");
const typeorm_1 = require("typeorm");
const DateUtils_1 = require("typeorm/util/DateUtils");
const config_1 = __importDefault(require("./config"));
const Db = __importStar(require("./Db"));
const ResponseHelper = __importStar(require("./ResponseHelper"));
const WorkflowRunner_1 = require("./WorkflowRunner");
const UserManagementHelper_1 = require("./UserManagement/UserManagementHelper");
let WaitTracker = class WaitTracker {
    constructor() {
        this.waitingExecutions = {};
        this.mainTimer = setInterval(() => {
            this.getWaitingExecutions();
        }, 60000);
        this.getWaitingExecutions();
    }
    async getWaitingExecutions() {
        n8n_workflow_1.LoggerProxy.debug('Wait tracker querying database for waiting executions');
        const findQuery = {
            select: ['id', 'waitTill'],
            where: {
                waitTill: (0, typeorm_1.LessThanOrEqual)(new Date(Date.now() + 70000)),
                status: (0, typeorm_1.Not)('crashed'),
            },
            order: {
                waitTill: 'ASC',
            },
        };
        const dbType = config_1.default.getEnv('database.type');
        if (dbType === 'sqlite') {
            findQuery.where.waitTill = (0, typeorm_1.LessThanOrEqual)(DateUtils_1.DateUtils.mixedDateToUtcDatetimeString(new Date(Date.now() + 70000)));
        }
        const executions = await Db.collections.Execution.find(findQuery);
        if (executions.length === 0) {
            return;
        }
        const executionIds = executions.map((execution) => execution.id).join(', ');
        n8n_workflow_1.LoggerProxy.debug(`Wait tracker found ${executions.length} executions. Setting timer for IDs: ${executionIds}`);
        for (const execution of executions) {
            const executionId = execution.id;
            if (this.waitingExecutions[executionId] === undefined) {
                const triggerTime = execution.waitTill.getTime() - new Date().getTime();
                this.waitingExecutions[executionId] = {
                    executionId,
                    timer: setTimeout(() => {
                        this.startExecution(executionId);
                    }, triggerTime),
                };
            }
        }
    }
    async stopExecution(executionId) {
        if (this.waitingExecutions[executionId] !== undefined) {
            clearTimeout(this.waitingExecutions[executionId].timer);
            delete this.waitingExecutions[executionId];
        }
        const execution = await Db.collections.Execution.findOneBy({ id: executionId });
        if (execution === null || !execution.waitTill) {
            throw new Error(`The execution ID "${executionId}" could not be found.`);
        }
        const fullExecutionData = ResponseHelper.unflattenExecutionData(execution);
        const error = new n8n_workflow_1.WorkflowOperationError('Workflow-Execution has been canceled!');
        fullExecutionData.data.resultData.error = {
            ...error,
            message: error.message,
            stack: error.stack,
        };
        fullExecutionData.stoppedAt = new Date();
        fullExecutionData.waitTill = null;
        fullExecutionData.status = 'canceled';
        await Db.collections.Execution.update(executionId, ResponseHelper.flattenExecutionData({
            ...fullExecutionData,
        }));
        return {
            mode: fullExecutionData.mode,
            startedAt: new Date(fullExecutionData.startedAt),
            stoppedAt: fullExecutionData.stoppedAt ? new Date(fullExecutionData.stoppedAt) : undefined,
            finished: fullExecutionData.finished,
            status: fullExecutionData.status,
        };
    }
    startExecution(executionId) {
        n8n_workflow_1.LoggerProxy.debug(`Wait tracker resuming execution ${executionId}`, { executionId });
        delete this.waitingExecutions[executionId];
        (async () => {
            const fullExecutionDataFlatted = await Db.collections.Execution.findOneBy({
                id: executionId,
            });
            if (fullExecutionDataFlatted === null) {
                throw new Error(`The execution with the id "${executionId}" does not exist.`);
            }
            const fullExecutionData = ResponseHelper.unflattenExecutionData(fullExecutionDataFlatted);
            if (fullExecutionData.finished) {
                throw new Error('The execution did succeed and can so not be started again.');
            }
            if (!fullExecutionData.workflowData.id) {
                throw new Error('Only saved workflows can be resumed.');
            }
            const user = await (0, UserManagementHelper_1.getWorkflowOwner)(fullExecutionData.workflowData.id);
            const data = {
                executionMode: fullExecutionData.mode,
                executionData: fullExecutionData.data,
                workflowData: fullExecutionData.workflowData,
                userId: user.id,
            };
            const workflowRunner = new WorkflowRunner_1.WorkflowRunner();
            await workflowRunner.run(data, false, false, executionId);
        })().catch((error) => {
            n8n_workflow_1.ErrorReporterProxy.error(error);
            n8n_workflow_1.LoggerProxy.error(`There was a problem starting the waiting execution with id "${executionId}": "${error.message}"`, { executionId });
        });
    }
};
WaitTracker = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [])
], WaitTracker);
exports.WaitTracker = WaitTracker;
//# sourceMappingURL=WaitTracker.js.map