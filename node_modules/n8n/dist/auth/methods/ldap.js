"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleLdapLogin = void 0;
const InternalHooks_1 = require("../../InternalHooks");
const helpers_1 = require("../../Ldap/helpers");
const typedi_1 = require("typedi");
const handleLdapLogin = async (loginId, password) => {
    var _a;
    if ((0, helpers_1.isLdapDisabled)())
        return undefined;
    const ldapConfig = await (0, helpers_1.getLdapConfig)();
    if (!ldapConfig.loginEnabled)
        return undefined;
    const { loginIdAttribute, userFilter } = ldapConfig;
    const ldapUser = await (0, helpers_1.findAndAuthenticateLdapUser)(loginId, password, loginIdAttribute, userFilter);
    if (!ldapUser)
        return undefined;
    const [ldapId, ldapAttributesValues] = (0, helpers_1.mapLdapAttributesToUser)(ldapUser, ldapConfig);
    const { email: emailAttributeValue } = ldapAttributesValues;
    if (!ldapId || !emailAttributeValue)
        return undefined;
    const ldapAuthIdentity = await (0, helpers_1.getAuthIdentityByLdapId)(ldapId);
    if (!ldapAuthIdentity) {
        const emailUser = await (0, helpers_1.getUserByEmail)(emailAttributeValue);
        if (emailUser && emailUser.email === emailAttributeValue) {
            const identity = await (0, helpers_1.createLdapAuthIdentity)(emailUser, ldapId);
            await (0, helpers_1.updateLdapUserOnLocalDb)(identity, ldapAttributesValues);
        }
        else {
            const role = await (0, helpers_1.getLdapUserRole)();
            const user = await (0, helpers_1.createLdapUserOnLocalDb)(role, ldapAttributesValues, ldapId);
            void typedi_1.Container.get(InternalHooks_1.InternalHooks).onUserSignup(user, {
                user_type: 'ldap',
                was_disabled_ldap_user: false,
            });
            return user;
        }
    }
    else {
        if (ldapAuthIdentity.user) {
            if (ldapAuthIdentity.user.disabled)
                return undefined;
            await (0, helpers_1.updateLdapUserOnLocalDb)(ldapAuthIdentity, ldapAttributesValues);
        }
    }
    return (_a = (await (0, helpers_1.getAuthIdentityByLdapId)(ldapId))) === null || _a === void 0 ? void 0 : _a.user;
};
exports.handleLdapLogin = handleLdapLogin;
//# sourceMappingURL=ldap.js.map