"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.issueCookie = exports.resolveJwt = exports.resolveJwtContent = exports.issueJWT = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const crypto_1 = require("crypto");
const Db = __importStar(require("../Db"));
const constants_1 = require("../constants");
const config_1 = __importDefault(require("../config"));
const ResponseHelper = __importStar(require("../ResponseHelper"));
function issueJWT(user) {
    const { id, email, password } = user;
    const expiresIn = 7 * 86400000;
    const payload = {
        id,
        email,
        password: password !== null && password !== void 0 ? password : null,
    };
    if (password) {
        payload.password = (0, crypto_1.createHash)('sha256')
            .update(password.slice(password.length / 2))
            .digest('hex');
    }
    const signedToken = jsonwebtoken_1.default.sign(payload, config_1.default.getEnv('userManagement.jwtSecret'), {
        expiresIn: expiresIn / 1000,
        algorithm: 'HS256',
    });
    return {
        token: signedToken,
        expiresIn,
    };
}
exports.issueJWT = issueJWT;
async function resolveJwtContent(jwtPayload) {
    const user = await Db.collections.User.findOne({
        where: { id: jwtPayload.id },
        relations: ['globalRole'],
    });
    let passwordHash = null;
    if (user === null || user === void 0 ? void 0 : user.password) {
        passwordHash = (0, crypto_1.createHash)('sha256')
            .update(user.password.slice(user.password.length / 2))
            .digest('hex');
    }
    if (user === null || user === void 0 ? void 0 : user.disabled) {
        throw new ResponseHelper.AuthError('Unauthorized');
    }
    if (!user || jwtPayload.password !== passwordHash || user.email !== jwtPayload.email) {
        throw new Error('Invalid token content');
    }
    return user;
}
exports.resolveJwtContent = resolveJwtContent;
async function resolveJwt(token) {
    const jwtPayload = jsonwebtoken_1.default.verify(token, config_1.default.getEnv('userManagement.jwtSecret'), {
        algorithms: ['HS256'],
    });
    return resolveJwtContent(jwtPayload);
}
exports.resolveJwt = resolveJwt;
async function issueCookie(res, user) {
    const userData = issueJWT(user);
    res.cookie(constants_1.AUTH_COOKIE_NAME, userData.token, {
        maxAge: userData.expiresIn,
        httpOnly: true,
        sameSite: 'lax',
    });
}
exports.issueCookie = issueCookie;
//# sourceMappingURL=jwt.js.map