import { Credentials } from 'n8n-core';
import type { ICredentialDataDecryptedObject, ICredentialsDecrypted, ICredentialsExpressionResolveValues, IHttpRequestOptions, INode, INodeCredentialsDetails, INodeCredentialTestResult, INodeProperties, IRequestOptionsSimplified, IWorkflowDataProxyAdditionalKeys, WorkflowExecuteMode, IHttpRequestHelper } from 'n8n-workflow';
import { ICredentialsHelper, Workflow } from 'n8n-workflow';
import type { ICredentialsDb } from './Interfaces';
import type { User } from './databases/entities/User';
import type { CredentialsEntity } from './databases/entities/CredentialsEntity';
import { NodeTypes } from './NodeTypes';
import { CredentialTypes } from './CredentialTypes';
export declare class CredentialsHelper extends ICredentialsHelper {
    private credentialTypes;
    private nodeTypes;
    constructor(encryptionKey: string, credentialTypes?: CredentialTypes, nodeTypes?: NodeTypes);
    authenticate(credentials: ICredentialDataDecryptedObject, typeName: string, incomingRequestOptions: IHttpRequestOptions | IRequestOptionsSimplified, workflow: Workflow, node: INode, defaultTimezone: string): Promise<IHttpRequestOptions>;
    preAuthentication(helpers: IHttpRequestHelper, credentials: ICredentialDataDecryptedObject, typeName: string, node: INode, credentialsExpired: boolean): Promise<ICredentialDataDecryptedObject | undefined>;
    resolveValue(parameterValue: string, additionalKeys: IWorkflowDataProxyAdditionalKeys, workflow: Workflow, node: INode, defaultTimezone: string): string;
    getParentTypes(typeName: string): string[];
    getCredentials(nodeCredential: INodeCredentialsDetails, type: string, userId?: string): Promise<Credentials>;
    getCredentialsProperties(type: string): INodeProperties[];
    getDecrypted(nodeCredentials: INodeCredentialsDetails, type: string, mode: WorkflowExecuteMode, defaultTimezone: string, raw?: boolean, expressionResolveValues?: ICredentialsExpressionResolveValues): Promise<ICredentialDataDecryptedObject>;
    applyDefaultsAndOverwrites(decryptedDataOriginal: ICredentialDataDecryptedObject, type: string, mode: WorkflowExecuteMode, defaultTimezone: string, expressionResolveValues?: ICredentialsExpressionResolveValues): ICredentialDataDecryptedObject;
    updateCredentials(nodeCredentials: INodeCredentialsDetails, type: string, data: ICredentialDataDecryptedObject): Promise<void>;
    private getCredentialTestFunction;
    testCredentials(user: User, credentialType: string, credentialsDecrypted: ICredentialsDecrypted): Promise<INodeCredentialTestResult>;
}
export declare function getCredentialForUser(credentialId: string, user: User): Promise<ICredentialsDb | null>;
export declare function getCredentialWithoutUser(credentialId: string): Promise<ICredentialsDb | null>;
export declare function createCredentialsFromCredentialsEntity(credential: CredentialsEntity, encrypt?: boolean): Credentials;
