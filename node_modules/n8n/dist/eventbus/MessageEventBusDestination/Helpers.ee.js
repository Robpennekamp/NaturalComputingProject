"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.incrementPrometheusMetric = exports.messageEventBusDestinationFromDb = void 0;
const metrics_1 = require("../../metrics");
const n8n_workflow_1 = require("n8n-workflow");
const config_1 = __importDefault(require("../../config"));
const MessageEventBusDestinationSentry_ee_1 = require("./MessageEventBusDestinationSentry.ee");
const MessageEventBusDestinationSyslog_ee_1 = require("./MessageEventBusDestinationSyslog.ee");
const MessageEventBusDestinationWebhook_ee_1 = require("./MessageEventBusDestinationWebhook.ee");
function messageEventBusDestinationFromDb(eventBusInstance, dbData) {
    const destinationData = dbData.destination;
    if ('__type' in destinationData) {
        switch (destinationData.__type) {
            case "$$MessageEventBusDestinationSentry":
                return MessageEventBusDestinationSentry_ee_1.MessageEventBusDestinationSentry.deserialize(eventBusInstance, destinationData);
            case "$$MessageEventBusDestinationSyslog":
                return MessageEventBusDestinationSyslog_ee_1.MessageEventBusDestinationSyslog.deserialize(eventBusInstance, destinationData);
            case "$$MessageEventBusDestinationWebhook":
                return MessageEventBusDestinationWebhook_ee_1.MessageEventBusDestinationWebhook.deserialize(eventBusInstance, destinationData);
            default:
                n8n_workflow_1.LoggerProxy.debug('MessageEventBusDestination __type unknown');
        }
    }
    return null;
}
exports.messageEventBusDestinationFromDb = messageEventBusDestinationFromDb;
const prometheusCounters = {};
function getMetricNameForEvent(event) {
    const prefix = config_1.default.getEnv('endpoints.metrics.prefix');
    return prefix + event.eventName.replace('n8n.', '').replace(/\./g, '_') + '_total';
}
function getLabelValueForNode(nodeType) {
    return nodeType.replace('n8n-nodes-', '').replace(/\./g, '_');
}
function getLabelValueForCredential(credentialType) {
    return credentialType.replace(/\./g, '_');
}
function getLabelsForEvent(event) {
    var _a, _b, _c, _d, _e, _f;
    switch (event.__type) {
        case "$$EventMessageAudit":
            if (event.eventName.startsWith('n8n.audit.user.credentials')) {
                return config_1.default.getEnv('endpoints.metrics.includeCredentialTypeLabel')
                    ? {
                        credential_type: getLabelValueForCredential((_a = event.payload.credentialType) !== null && _a !== void 0 ? _a : 'unknown'),
                    }
                    : {};
            }
            if (event.eventName.startsWith('n8n.audit.workflow')) {
                return config_1.default.getEnv('endpoints.metrics.includeWorkflowIdLabel')
                    ? { workflow_id: (_c = (_b = event.payload.workflowId) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : 'unknown' }
                    : {};
            }
            break;
        case "$$EventMessageNode":
            return config_1.default.getEnv('endpoints.metrics.includeNodeTypeLabel')
                ? { node_type: getLabelValueForNode((_d = event.payload.nodeType) !== null && _d !== void 0 ? _d : 'unknown') }
                : {};
        case "$$EventMessageWorkflow":
            return config_1.default.getEnv('endpoints.metrics.includeWorkflowIdLabel')
                ? { workflow_id: (_f = (_e = event.payload.workflowId) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : 'unknown' }
                : {};
    }
    return {};
}
function getCounterSingletonForEvent(event) {
    if (!prometheusCounters[event.eventName]) {
        const metricName = getMetricNameForEvent(event);
        if (!metrics_1.promClient.validateMetricName(metricName)) {
            n8n_workflow_1.LoggerProxy.debug(`Invalid metric name: ${metricName}. Ignoring it!`);
            prometheusCounters[event.eventName] = null;
            return null;
        }
        const counter = new metrics_1.promClient.Counter({
            name: metricName,
            help: `Total number of ${event.eventName} events.`,
            labelNames: Object.keys(getLabelsForEvent(event)),
        });
        metrics_1.promClient.register.registerMetric(counter);
        prometheusCounters[event.eventName] = counter;
    }
    return prometheusCounters[event.eventName];
}
async function incrementPrometheusMetric(event) {
    const counter = getCounterSingletonForEvent(event);
    if (!counter) {
        return;
    }
    counter.inc(getLabelsForEvent(event));
}
exports.incrementPrometheusMetric = incrementPrometheusMetric;
//# sourceMappingURL=Helpers.ee.js.map