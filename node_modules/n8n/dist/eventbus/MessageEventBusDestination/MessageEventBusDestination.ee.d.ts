import type { INodeCredentials, MessageEventBusDestinationOptions } from 'n8n-workflow';
import { MessageEventBusDestinationTypeNames } from 'n8n-workflow';
import type { AbstractEventMessage } from '../EventMessageClasses/AbstractEventMessage';
import type { DeleteResult, InsertResult } from 'typeorm';
import type { MessageEventBus, MessageWithCallback } from '../MessageEventBus/MessageEventBus';
export declare abstract class MessageEventBusDestination implements MessageEventBusDestinationOptions {
    readonly id: string;
    readonly eventBusInstance: MessageEventBus;
    __type: MessageEventBusDestinationTypeNames;
    label: string;
    enabled: boolean;
    subscribedEvents: string[];
    credentials: INodeCredentials;
    anonymizeAuditMessages: boolean;
    constructor(eventBusInstance: MessageEventBus, options: MessageEventBusDestinationOptions);
    startListening(): void;
    stopListening(): void;
    enable(): void;
    disable(): void;
    getId(): string;
    hasSubscribedToEvent(msg: AbstractEventMessage): boolean;
    saveToDb(): Promise<InsertResult>;
    deleteFromDb(): Promise<DeleteResult>;
    static deleteFromDb(id: string): Promise<DeleteResult>;
    serialize(): MessageEventBusDestinationOptions;
    abstract receiveFromEventBus(emitterPayload: MessageWithCallback): Promise<boolean>;
    toString(): string;
    close(): void | Promise<void>;
}
