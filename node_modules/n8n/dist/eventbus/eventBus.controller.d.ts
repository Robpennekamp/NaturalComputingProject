import express from 'express';
import type { EventMessageTypes, FailedEventSummary } from './EventMessageClasses';
import type { MessageEventBusDestinationOptions, IRunExecutionData } from 'n8n-workflow';
import type { DeleteResult } from 'typeorm';
import { AuthenticatedRequest } from '../requests';
export declare class EventBusController {
    getEvents(req: express.Request): Promise<EventMessageTypes[] | Record<string, EventMessageTypes[]>>;
    getFailedEvents(req: express.Request): Promise<FailedEventSummary[]>;
    getEventForExecutionId(req: express.Request): Promise<EventMessageTypes[] | undefined>;
    getRecoveryForExecutionId(req: express.Request): Promise<IRunExecutionData | undefined>;
    postEvent(req: express.Request): Promise<EventMessageTypes | undefined>;
    getDestination(req: express.Request): Promise<MessageEventBusDestinationOptions[]>;
    postDestination(req: AuthenticatedRequest): Promise<any>;
    sendTestMessage(req: express.Request): Promise<boolean>;
    deleteDestination(req: AuthenticatedRequest): Promise<DeleteResult | undefined>;
    getEventNames(): Promise<string[]>;
}
