"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBusController = void 0;
const express_1 = __importDefault(require("express"));
const AbstractEventMessage_1 = require("./EventMessageClasses/AbstractEventMessage");
const EventMessageGeneric_1 = require("./EventMessageClasses/EventMessageGeneric");
const EventMessageWorkflow_1 = require("./EventMessageClasses/EventMessageWorkflow");
const MessageEventBus_1 = require("./MessageEventBus/MessageEventBus");
const MessageEventBusDestinationSentry_ee_1 = require("./MessageEventBusDestination/MessageEventBusDestinationSentry.ee");
const MessageEventBusDestinationSyslog_ee_1 = require("./MessageEventBusDestination/MessageEventBusDestinationSyslog.ee");
const MessageEventBusDestinationWebhook_ee_1 = require("./MessageEventBusDestination/MessageEventBusDestinationWebhook.ee");
const EventMessageClasses_1 = require("./EventMessageClasses");
const EventMessageAudit_1 = require("./EventMessageClasses/EventMessageAudit");
const ResponseHelper_1 = require("../ResponseHelper");
const EventMessageNode_1 = require("./EventMessageClasses/EventMessageNode");
const recoverEvents_1 = require("./MessageEventBus/recoverEvents");
const decorators_1 = require("../decorators");
const isWithIdString = (candidate) => {
    const o = candidate;
    if (!o)
        return false;
    return o.id !== undefined;
};
const isWithQueryString = (candidate) => {
    const o = candidate;
    if (!o)
        return false;
    return o.query !== undefined;
};
const isMessageEventBusDestinationWebhookOptions = (candidate) => {
    const o = candidate;
    if (!o)
        return false;
    return o.url !== undefined;
};
const isMessageEventBusDestinationOptions = (candidate) => {
    const o = candidate;
    if (!o)
        return false;
    return o.__type !== undefined;
};
let EventBusController = class EventBusController {
    async getEvents(req) {
        if (isWithQueryString(req.query)) {
            switch (req.query.query) {
                case 'sent':
                    return MessageEventBus_1.eventBus.getEventsSent();
                case 'unsent':
                    return MessageEventBus_1.eventBus.getEventsUnsent();
                case 'unfinished':
                    return MessageEventBus_1.eventBus.getUnfinishedExecutions();
                case 'all':
                default:
                    return MessageEventBus_1.eventBus.getEventsAll();
            }
        }
        else {
            return MessageEventBus_1.eventBus.getEventsAll();
        }
    }
    async getFailedEvents(req) {
        var _a, _b;
        const amount = (_b = parseInt((_a = req.query) === null || _a === void 0 ? void 0 : _a.amount)) !== null && _b !== void 0 ? _b : 5;
        return MessageEventBus_1.eventBus.getEventsFailed(amount);
    }
    async getEventForExecutionId(req) {
        var _a, _b;
        if ((_a = req.params) === null || _a === void 0 ? void 0 : _a.id) {
            let logHistory;
            if ((_b = req.query) === null || _b === void 0 ? void 0 : _b.logHistory) {
                logHistory = parseInt(req.query.logHistory, 10);
            }
            return MessageEventBus_1.eventBus.getEventsByExecutionId(req.params.id, logHistory);
        }
        return;
    }
    async getRecoveryForExecutionId(req) {
        var _a;
        const { id } = req.params;
        if ((_a = req.params) === null || _a === void 0 ? void 0 : _a.id) {
            const logHistory = parseInt(req.query.logHistory, 10) || undefined;
            const applyToDb = req.query.applyToDb !== undefined ? !!req.query.applyToDb : true;
            const messages = await MessageEventBus_1.eventBus.getEventsByExecutionId(id, logHistory);
            if (messages.length > 0) {
                return (0, recoverEvents_1.recoverExecutionDataFromEventLogMessages)(id, messages, applyToDb);
            }
        }
        return;
    }
    async postEvent(req) {
        let msg;
        if ((0, AbstractEventMessage_1.isEventMessageOptions)(req.body)) {
            switch (req.body.__type) {
                case "$$EventMessageWorkflow":
                    msg = new EventMessageWorkflow_1.EventMessageWorkflow(req.body);
                    break;
                case "$$EventMessageAudit":
                    msg = new EventMessageAudit_1.EventMessageAudit(req.body);
                    break;
                case "$$EventMessageNode":
                    msg = new EventMessageNode_1.EventMessageNode(req.body);
                    break;
                case "$$EventMessage":
                default:
                    msg = new EventMessageGeneric_1.EventMessageGeneric(req.body);
            }
            await MessageEventBus_1.eventBus.send(msg);
        }
        else {
            throw new ResponseHelper_1.BadRequestError('Body is not a serialized EventMessage or eventName does not match format {namespace}.{domain}.{event}');
        }
        return msg;
    }
    async getDestination(req) {
        if (isWithIdString(req.query)) {
            return MessageEventBus_1.eventBus.findDestination(req.query.id);
        }
        else {
            return MessageEventBus_1.eventBus.findDestination();
        }
    }
    async postDestination(req) {
        let result;
        if (isMessageEventBusDestinationOptions(req.body)) {
            switch (req.body.__type) {
                case "$$MessageEventBusDestinationSentry":
                    if ((0, MessageEventBusDestinationSentry_ee_1.isMessageEventBusDestinationSentryOptions)(req.body)) {
                        result = await MessageEventBus_1.eventBus.addDestination(new MessageEventBusDestinationSentry_ee_1.MessageEventBusDestinationSentry(MessageEventBus_1.eventBus, req.body));
                    }
                    break;
                case "$$MessageEventBusDestinationWebhook":
                    if (isMessageEventBusDestinationWebhookOptions(req.body)) {
                        result = await MessageEventBus_1.eventBus.addDestination(new MessageEventBusDestinationWebhook_ee_1.MessageEventBusDestinationWebhook(MessageEventBus_1.eventBus, req.body));
                    }
                    break;
                case "$$MessageEventBusDestinationSyslog":
                    if ((0, MessageEventBusDestinationSyslog_ee_1.isMessageEventBusDestinationSyslogOptions)(req.body)) {
                        result = await MessageEventBus_1.eventBus.addDestination(new MessageEventBusDestinationSyslog_ee_1.MessageEventBusDestinationSyslog(MessageEventBus_1.eventBus, req.body));
                    }
                    break;
                default:
                    throw new ResponseHelper_1.BadRequestError(`Body is missing ${req.body.__type} options or type ${req.body.__type} is unknown`);
            }
            if (result) {
                await result.saveToDb();
                return {
                    ...result.serialize(),
                    eventBusInstance: undefined,
                };
            }
            throw new ResponseHelper_1.BadRequestError('There was an error adding the destination');
        }
        throw new ResponseHelper_1.BadRequestError('Body is not configuring MessageEventBusDestinationOptions');
    }
    async sendTestMessage(req) {
        if (isWithIdString(req.query)) {
            return MessageEventBus_1.eventBus.testDestination(req.query.id);
        }
        return false;
    }
    async deleteDestination(req) {
        if (isWithIdString(req.query)) {
            return MessageEventBus_1.eventBus.removeDestination(req.query.id);
        }
        else {
            throw new ResponseHelper_1.BadRequestError('Query is missing id');
        }
    }
    async getEventNames() {
        return EventMessageClasses_1.eventNamesAll;
    }
};
__decorate([
    (0, decorators_1.Authorized)(['global', 'owner']),
    (0, decorators_1.Get)('/event'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "getEvents", null);
__decorate([
    (0, decorators_1.Get)('/failed'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "getFailedEvents", null);
__decorate([
    (0, decorators_1.Get)('/execution/:id'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "getEventForExecutionId", null);
__decorate([
    (0, decorators_1.Get)('/execution-recover/:id'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "getRecoveryForExecutionId", null);
__decorate([
    (0, decorators_1.Authorized)(['global', 'owner']),
    (0, decorators_1.Post)('/event'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "postEvent", null);
__decorate([
    (0, decorators_1.Get)('/destination'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "getDestination", null);
__decorate([
    (0, decorators_1.Authorized)(['global', 'owner']),
    (0, decorators_1.Post)('/destination'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "postDestination", null);
__decorate([
    (0, decorators_1.Get)('/testmessage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "sendTestMessage", null);
__decorate([
    (0, decorators_1.Authorized)(['global', 'owner']),
    (0, decorators_1.Delete)('/destination'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "deleteDestination", null);
__decorate([
    (0, decorators_1.Get)('/eventnames'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], EventBusController.prototype, "getEventNames", null);
EventBusController = __decorate([
    (0, decorators_1.Authorized)(),
    (0, decorators_1.RestController)('/eventbus')
], EventBusController);
exports.EventBusController = EventBusController;
//# sourceMappingURL=eventBus.controller.js.map