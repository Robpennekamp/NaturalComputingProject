"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const typedi_1 = require("typedi");
const typeorm_1 = require("typeorm");
const ActiveWorkflowRunner_1 = require("../../../../ActiveWorkflowRunner");
const config_1 = __importDefault(require("../../../../config"));
const WorkflowEntity_1 = require("../../../../databases/entities/WorkflowEntity");
const ExternalHooks_1 = require("../../../../ExternalHooks");
const WorkflowHelpers_1 = require("../../../../WorkflowHelpers");
const global_middleware_1 = require("../../shared/middlewares/global.middleware");
const pagination_service_1 = require("../../shared/services/pagination.service");
const users_service_1 = require("../users/users.service");
const workflows_service_1 = require("./workflows.service");
const workflows_services_1 = require("../../../../workflows/workflows.services");
const InternalHooks_1 = require("../../../../InternalHooks");
module.exports = {
    createWorkflow: [
        (0, global_middleware_1.authorize)(['owner', 'member']),
        async (req, res) => {
            const workflow = req.body;
            workflow.active = false;
            if (!(0, workflows_service_1.hasStartNode)(workflow)) {
                workflow.nodes.push((0, workflows_service_1.getStartNode)());
            }
            await (0, WorkflowHelpers_1.replaceInvalidCredentials)(workflow);
            (0, WorkflowHelpers_1.addNodeIds)(workflow);
            const role = await (0, users_service_1.getWorkflowOwnerRole)();
            const createdWorkflow = await (0, workflows_service_1.createWorkflow)(workflow, req.user, role);
            await typedi_1.Container.get(ExternalHooks_1.ExternalHooks).run('workflow.afterCreate', [createdWorkflow]);
            void typedi_1.Container.get(InternalHooks_1.InternalHooks).onWorkflowCreated(req.user, createdWorkflow, true);
            return res.json(createdWorkflow);
        },
    ],
    deleteWorkflow: [
        (0, global_middleware_1.authorize)(['owner', 'member']),
        async (req, res) => {
            const { id: workflowId } = req.params;
            const workflow = await workflows_services_1.WorkflowsService.delete(req.user, workflowId);
            if (!workflow) {
                return res.status(404).json({ message: 'Not Found' });
            }
            return res.json(workflow);
        },
    ],
    getWorkflow: [
        (0, global_middleware_1.authorize)(['owner', 'member']),
        async (req, res) => {
            const { id } = req.params;
            const sharedWorkflow = await (0, workflows_service_1.getSharedWorkflow)(req.user, id);
            if (!sharedWorkflow) {
                return res.status(404).json({ message: 'Not Found' });
            }
            void typedi_1.Container.get(InternalHooks_1.InternalHooks).onUserRetrievedWorkflow({
                user_id: req.user.id,
                public_api: true,
            });
            return res.json(sharedWorkflow.workflow);
        },
    ],
    getWorkflows: [
        (0, global_middleware_1.authorize)(['owner', 'member']),
        global_middleware_1.validCursor,
        async (req, res) => {
            const { offset = 0, limit = 100, active = undefined, tags = undefined } = req.query;
            const where = {
                ...(active !== undefined && { active }),
            };
            if ((0, users_service_1.isInstanceOwner)(req.user)) {
                if (tags) {
                    const workflowIds = await (0, workflows_service_1.getWorkflowIdsViaTags)((0, workflows_service_1.parseTagNames)(tags));
                    where.id = (0, typeorm_1.In)(workflowIds);
                }
            }
            else {
                const options = {};
                if (tags) {
                    options.workflowIds = await (0, workflows_service_1.getWorkflowIdsViaTags)((0, workflows_service_1.parseTagNames)(tags));
                }
                const sharedWorkflows = await (0, workflows_service_1.getSharedWorkflows)(req.user, options);
                if (!sharedWorkflows.length) {
                    return res.status(200).json({
                        data: [],
                        nextCursor: null,
                    });
                }
                const workflowsIds = sharedWorkflows.map((shareWorkflow) => shareWorkflow.workflowId);
                where.id = (0, typeorm_1.In)(workflowsIds);
            }
            const [workflows, count] = await (0, workflows_service_1.getWorkflowsAndCount)({
                skip: offset,
                take: limit,
                where,
                ...(!config_1.default.getEnv('workflowTagsDisabled') && { relations: ['tags'] }),
            });
            void typedi_1.Container.get(InternalHooks_1.InternalHooks).onUserRetrievedAllWorkflows({
                user_id: req.user.id,
                public_api: true,
            });
            return res.json({
                data: workflows,
                nextCursor: (0, pagination_service_1.encodeNextCursor)({
                    offset,
                    limit,
                    numberOfTotalRecords: count,
                }),
            });
        },
    ],
    updateWorkflow: [
        (0, global_middleware_1.authorize)(['owner', 'member']),
        async (req, res) => {
            const { id } = req.params;
            const updateData = new WorkflowEntity_1.WorkflowEntity();
            Object.assign(updateData, req.body);
            const sharedWorkflow = await (0, workflows_service_1.getSharedWorkflow)(req.user, id);
            if (!sharedWorkflow) {
                return res.status(404).json({ message: 'Not Found' });
            }
            if (!(0, workflows_service_1.hasStartNode)(updateData)) {
                updateData.nodes.push((0, workflows_service_1.getStartNode)());
            }
            await (0, WorkflowHelpers_1.replaceInvalidCredentials)(updateData);
            (0, WorkflowHelpers_1.addNodeIds)(updateData);
            const workflowRunner = typedi_1.Container.get(ActiveWorkflowRunner_1.ActiveWorkflowRunner);
            if (sharedWorkflow.workflow.active) {
                await workflowRunner.remove(id);
            }
            try {
                await (0, workflows_service_1.updateWorkflow)(sharedWorkflow.workflowId, updateData);
            }
            catch (error) {
                if (error instanceof Error) {
                    return res.status(400).json({ message: error.message });
                }
            }
            if (sharedWorkflow.workflow.active) {
                try {
                    await workflowRunner.add(sharedWorkflow.workflowId, 'update');
                }
                catch (error) {
                    if (error instanceof Error) {
                        return res.status(400).json({ message: error.message });
                    }
                }
            }
            const updatedWorkflow = await (0, workflows_service_1.getWorkflowById)(sharedWorkflow.workflowId);
            await typedi_1.Container.get(ExternalHooks_1.ExternalHooks).run('workflow.afterUpdate', [updateData]);
            void typedi_1.Container.get(InternalHooks_1.InternalHooks).onWorkflowSaved(req.user, updateData, true);
            return res.json(updatedWorkflow);
        },
    ],
    activateWorkflow: [
        (0, global_middleware_1.authorize)(['owner', 'member']),
        async (req, res) => {
            const { id } = req.params;
            const sharedWorkflow = await (0, workflows_service_1.getSharedWorkflow)(req.user, id);
            if (!sharedWorkflow) {
                return res.status(404).json({ message: 'Not Found' });
            }
            if (!sharedWorkflow.workflow.active) {
                try {
                    await typedi_1.Container.get(ActiveWorkflowRunner_1.ActiveWorkflowRunner).add(sharedWorkflow.workflowId, 'activate');
                }
                catch (error) {
                    if (error instanceof Error) {
                        return res.status(400).json({ message: error.message });
                    }
                }
                await (0, workflows_service_1.setWorkflowAsActive)(sharedWorkflow.workflow);
                sharedWorkflow.workflow.active = true;
                return res.json(sharedWorkflow.workflow);
            }
            return res.json(sharedWorkflow.workflow);
        },
    ],
    deactivateWorkflow: [
        (0, global_middleware_1.authorize)(['owner', 'member']),
        async (req, res) => {
            const { id } = req.params;
            const sharedWorkflow = await (0, workflows_service_1.getSharedWorkflow)(req.user, id);
            if (!sharedWorkflow) {
                return res.status(404).json({ message: 'Not Found' });
            }
            const workflowRunner = typedi_1.Container.get(ActiveWorkflowRunner_1.ActiveWorkflowRunner);
            if (sharedWorkflow.workflow.active) {
                await workflowRunner.remove(sharedWorkflow.workflowId);
                await (0, workflows_service_1.setWorkflowAsInactive)(sharedWorkflow.workflow);
                sharedWorkflow.workflow.active = false;
                return res.json(sharedWorkflow.workflow);
            }
            return res.json(sharedWorkflow.workflow);
        },
    ],
};
//# sourceMappingURL=workflows.handler.js.map