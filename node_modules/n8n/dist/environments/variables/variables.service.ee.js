"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EEVariablesService = exports.VariablesValidationError = exports.VariablesLicenseError = void 0;
const Db_1 = require("../../Db");
const InternalHooks_1 = require("../../InternalHooks");
const typedi_1 = __importDefault(require("typedi"));
const enviromentHelpers_1 = require("./enviromentHelpers");
const variables_service_1 = require("./variables.service");
class VariablesLicenseError extends Error {
}
exports.VariablesLicenseError = VariablesLicenseError;
class VariablesValidationError extends Error {
}
exports.VariablesValidationError = VariablesValidationError;
class EEVariablesService extends variables_service_1.VariablesService {
    static async getCount() {
        return Db_1.collections.Variables.count();
    }
    static validateVariable(variable) {
        if (variable.key.length > 50) {
            throw new VariablesValidationError('key cannot be longer than 50 characters');
        }
        if (variable.key.replace(/[A-Za-z0-9_]/g, '').length !== 0) {
            throw new VariablesValidationError('key can only contain characters A-Za-z0-9_');
        }
        if (variable.value.length > 255) {
            throw new VariablesValidationError('value cannot be longer than 255 characters');
        }
    }
    static async create(variable) {
        if (!(0, enviromentHelpers_1.canCreateNewVariable)(await this.getCount())) {
            throw new VariablesLicenseError('Variables limit reached');
        }
        this.validateVariable(variable);
        void typedi_1.default.get(InternalHooks_1.InternalHooks).onVariableCreated({ variable_type: variable.type });
        return Db_1.collections.Variables.save(variable);
    }
    static async update(id, variable) {
        this.validateVariable(variable);
        await Db_1.collections.Variables.update(id, variable);
        return (await this.get(id));
    }
}
exports.EEVariablesService = EEVariablesService;
//# sourceMappingURL=variables.service.ee.js.map