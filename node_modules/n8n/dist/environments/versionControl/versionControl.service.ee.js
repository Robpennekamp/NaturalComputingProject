"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionControlService = void 0;
const typedi_1 = require("typedi");
const versionControlHelper_1 = require("./versionControlHelper");
const versionControlPreferences_1 = require("./types/versionControlPreferences");
const constants_1 = require("./constants");
const Db = __importStar(require("../../Db"));
const n8n_workflow_1 = require("n8n-workflow");
const class_validator_1 = require("class-validator");
let VersionControlService = class VersionControlService {
    constructor() {
        this._versionControlPreferences = new versionControlPreferences_1.VersionControlPreferences();
    }
    async init() {
        await this.loadFromDbAndApplyVersionControlPreferences();
    }
    get versionControlPreferences() {
        return {
            ...this._versionControlPreferences,
            privateKey: '(redacted)',
        };
    }
    set versionControlPreferences(preferences) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        this._versionControlPreferences = {
            connected: (_a = preferences.connected) !== null && _a !== void 0 ? _a : this._versionControlPreferences.connected,
            authorEmail: (_b = preferences.authorEmail) !== null && _b !== void 0 ? _b : this._versionControlPreferences.authorEmail,
            authorName: (_c = preferences.authorName) !== null && _c !== void 0 ? _c : this._versionControlPreferences.authorName,
            branchName: (_d = preferences.branchName) !== null && _d !== void 0 ? _d : this._versionControlPreferences.branchName,
            branchColor: (_e = preferences.branchColor) !== null && _e !== void 0 ? _e : this._versionControlPreferences.branchColor,
            branchReadOnly: (_f = preferences.branchReadOnly) !== null && _f !== void 0 ? _f : this._versionControlPreferences.branchReadOnly,
            privateKey: (_g = preferences.privateKey) !== null && _g !== void 0 ? _g : this._versionControlPreferences.privateKey,
            publicKey: (_h = preferences.publicKey) !== null && _h !== void 0 ? _h : this._versionControlPreferences.publicKey,
            repositoryUrl: (_j = preferences.repositoryUrl) !== null && _j !== void 0 ? _j : this._versionControlPreferences.repositoryUrl,
        };
    }
    async generateAndSaveKeyPair() {
        const keyPair = (0, versionControlHelper_1.generateSshKeyPair)('ed25519');
        if (keyPair.publicKey && keyPair.privateKey) {
            await this.setPreferences({ ...keyPair });
        }
        else {
            n8n_workflow_1.LoggerProxy.error('Failed to generate key pair');
        }
        return keyPair;
    }
    async validateVersionControlPreferences(preferences) {
        const preferencesObject = new versionControlPreferences_1.VersionControlPreferences(preferences);
        const validationResult = await (0, class_validator_1.validate)(preferencesObject, {
            forbidUnknownValues: false,
            skipMissingProperties: true,
            stopAtFirstError: false,
            validationError: { target: false },
        });
        if (validationResult.length > 0) {
            throw new Error(`Invalid version control preferences: ${JSON.stringify(validationResult)}`);
        }
        return validationResult;
    }
    async setPreferences(preferences, saveToDb = true) {
        this.versionControlPreferences = preferences;
        if (saveToDb) {
            const settingsValue = JSON.stringify(this._versionControlPreferences);
            try {
                await Db.collections.Settings.save({
                    key: constants_1.VERSION_CONTROL_PREFERENCES_DB_KEY,
                    value: settingsValue,
                    loadOnStartup: true,
                });
            }
            catch (error) {
                throw new Error(`Failed to save version control preferences: ${error.message}`);
            }
        }
        return this.versionControlPreferences;
    }
    async loadFromDbAndApplyVersionControlPreferences() {
        const loadedPreferences = await Db.collections.Settings.findOne({
            where: { key: constants_1.VERSION_CONTROL_PREFERENCES_DB_KEY },
        });
        if (loadedPreferences) {
            try {
                const preferences = (0, n8n_workflow_1.jsonParse)(loadedPreferences.value);
                if (preferences) {
                    await this.setPreferences(preferences, false);
                    return preferences;
                }
            }
            catch (error) {
                n8n_workflow_1.LoggerProxy.warn(`Could not parse Version Control settings from database: ${error.message}`);
            }
        }
        return;
    }
};
VersionControlService = __decorate([
    (0, typedi_1.Service)()
], VersionControlService);
exports.VersionControlService = VersionControlService;
//# sourceMappingURL=versionControl.service.ee.js.map