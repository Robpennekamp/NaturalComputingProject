"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSshKeyPair = exports.isVersionControlLicensedAndEnabled = exports.isVersionControlEnabled = exports.isVersionControlLicensed = void 0;
const typedi_1 = __importDefault(require("typedi"));
const License_1 = require("../../License");
const crypto_1 = require("crypto");
const sshpk_1 = __importDefault(require("sshpk"));
function isVersionControlLicensed() {
    const license = typedi_1.default.get(License_1.License);
    return license.isVersionControlLicensed();
}
exports.isVersionControlLicensed = isVersionControlLicensed;
function isVersionControlEnabled() {
    return true;
}
exports.isVersionControlEnabled = isVersionControlEnabled;
function isVersionControlLicensedAndEnabled() {
    return isVersionControlLicensed() && isVersionControlEnabled();
}
exports.isVersionControlLicensedAndEnabled = isVersionControlLicensedAndEnabled;
function generateSshKeyPair(keyType = 'ed25519') {
    const keyPair = {
        publicKey: '',
        privateKey: '',
    };
    let generatedKeyPair;
    switch (keyType) {
        case 'ed25519':
            generatedKeyPair = (0, crypto_1.generateKeyPairSync)('ed25519', {
                privateKeyEncoding: { format: 'pem', type: 'pkcs8' },
                publicKeyEncoding: { format: 'pem', type: 'spki' },
            });
            break;
        case 'rsa':
            generatedKeyPair = (0, crypto_1.generateKeyPairSync)('rsa', {
                modulusLength: 4096,
                publicKeyEncoding: {
                    type: 'spki',
                    format: 'pem',
                },
                privateKeyEncoding: {
                    type: 'pkcs8',
                    format: 'pem',
                },
            });
            break;
    }
    const keyPublic = sshpk_1.default.parseKey(generatedKeyPair.publicKey, 'pem');
    keyPair.publicKey = keyPublic.toString('ssh');
    const keyPrivate = sshpk_1.default.parsePrivateKey(generatedKeyPair.privateKey, 'pem');
    keyPair.privateKey = keyPrivate.toString('ssh-private');
    return {
        privateKey: keyPair.privateKey,
        publicKey: keyPair.publicKey,
    };
}
exports.generateSshKeyPair = generateSshKeyPair;
//# sourceMappingURL=versionControlHelper.js.map