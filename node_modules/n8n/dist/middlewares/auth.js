"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupAuthMiddlewares = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const passport_1 = __importDefault(require("passport"));
const passport_jwt_1 = require("passport-jwt");
const fast_glob_1 = require("fast-glob");
const n8n_workflow_1 = require("n8n-workflow");
const config_1 = __importDefault(require("../config"));
const constants_1 = require("../constants");
const jwt_1 = require("../auth/jwt");
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const registerController_1 = require("../decorators/registerController");
const jwtFromRequest = (req) => {
    var _a, _b;
    return (_b = (_a = req.cookies) === null || _a === void 0 ? void 0 : _a[constants_1.AUTH_COOKIE_NAME]) !== null && _b !== void 0 ? _b : null;
};
const jwtAuth = () => {
    const jwtStrategy = new passport_jwt_1.Strategy({
        jwtFromRequest,
        secretOrKey: config_1.default.getEnv('userManagement.jwtSecret'),
    }, async (jwtPayload, done) => {
        try {
            const user = await (0, jwt_1.resolveJwtContent)(jwtPayload);
            return done(null, user);
        }
        catch (error) {
            n8n_workflow_1.LoggerProxy.debug('Failed to extract user from JWT payload', { jwtPayload });
            return done(null, false, { message: 'User not found' });
        }
    });
    passport_1.default.use(jwtStrategy);
    return passport_1.default.initialize();
};
const refreshExpiringCookie = async (req, res, next) => {
    const cookieAuth = jwtFromRequest(req);
    if (cookieAuth && req.user) {
        const cookieContents = jsonwebtoken_1.default.decode(cookieAuth);
        if (cookieContents.exp * 1000 - Date.now() < 259200000) {
            await (0, jwt_1.issueCookie)(res, req.user);
        }
    }
    next();
};
const passportMiddleware = passport_1.default.authenticate('jwt', { session: false });
const staticAssets = (0, fast_glob_1.sync)(['**/*.html', '**/*.svg', '**/*.png', '**/*.ico'], {
    cwd: constants_1.EDITOR_UI_DIST_DIR,
});
const isPostUsersId = (req, restEndpoint) => req.method === 'POST' &&
    new RegExp(`/${restEndpoint}/users/[\\w\\d-]*`).test(req.url) &&
    !req.url.includes('reinvite');
const isAuthExcluded = (url, ignoredEndpoints) => !!ignoredEndpoints
    .filter(Boolean)
    .find((ignoredEndpoint) => url.startsWith(`/${ignoredEndpoint}`));
const setupAuthMiddlewares = (app, ignoredEndpoints, restEndpoint, userRepository) => {
    app.use((0, cookie_parser_1.default)());
    app.use(jwtAuth());
    app.use(async (req, res, next) => {
        if (req.method === 'OPTIONS' ||
            staticAssets.includes(req.url.slice(1)) ||
            (0, registerController_1.canSkipAuth)(req.method, req.path) ||
            isAuthExcluded(req.url, ignoredEndpoints) ||
            req.url.startsWith(`/${restEndpoint}/settings`) ||
            isPostUsersId(req, restEndpoint) ||
            req.url.startsWith(`/${restEndpoint}/oauth2-credential/callback`) ||
            req.url.startsWith(`/${restEndpoint}/oauth1-credential/callback`)) {
            return next();
        }
        if (!(0, UserManagementHelper_1.isUserManagementEnabled)()) {
            req.user = await userRepository.findOneOrFail({
                relations: ['globalRole'],
                where: {},
            });
            return next();
        }
        return passportMiddleware(req, res, next);
    });
    app.use(refreshExpiringCookie);
};
exports.setupAuthMiddlewares = setupAuthMiddlewares;
//# sourceMappingURL=auth.js.map