"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupBasicAuth = void 0;
const basic_auth_1 = __importDefault(require("basic-auth"));
const bcryptjs_1 = require("bcryptjs");
const ResponseHelper_1 = require("../ResponseHelper");
const setupBasicAuth = async (app, config, authIgnoreRegex) => {
    const basicAuthUser = config.getEnv('security.basicAuth.user');
    if (basicAuthUser === '') {
        throw new Error('Basic auth is activated but no user got defined. Please set one!');
    }
    const basicAuthPassword = config.getEnv('security.basicAuth.password');
    if (basicAuthPassword === '') {
        throw new Error('Basic auth is activated but no password got defined. Please set one!');
    }
    const basicAuthHashEnabled = config.getEnv('security.basicAuth.hash');
    let validPassword = null;
    app.use(async (req, res, next) => {
        if (authIgnoreRegex.exec(req.url) || config.getEnv('userManagement.isInstanceOwnerSetUp')) {
            return next();
        }
        const realm = 'n8n - Editor UI';
        const basicAuthData = (0, basic_auth_1.default)(req);
        if (basicAuthData === undefined) {
            return (0, ResponseHelper_1.basicAuthAuthorizationError)(res, realm, 'Authorization is required!');
        }
        if (basicAuthData.name === basicAuthUser) {
            if (basicAuthHashEnabled) {
                if (validPassword === null && (await (0, bcryptjs_1.compare)(basicAuthData.pass, basicAuthPassword))) {
                    validPassword = basicAuthData.pass;
                }
                if (validPassword === basicAuthData.pass && validPassword !== null) {
                    return next();
                }
            }
            else if (basicAuthData.pass === basicAuthPassword) {
                return next();
            }
        }
        return (0, ResponseHelper_1.basicAuthAuthorizationError)(res, realm, 'Authorization data is wrong!');
    });
};
exports.setupBasicAuth = setupBasicAuth;
//# sourceMappingURL=basicAuth.js.map