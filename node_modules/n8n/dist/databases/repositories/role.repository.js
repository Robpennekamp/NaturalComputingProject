"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleRepository = void 0;
const typedi_1 = require("typedi");
const typeorm_1 = require("typeorm");
const Role_1 = require("../entities/Role");
let RoleRepository = class RoleRepository extends typeorm_1.Repository {
    constructor(dataSource) {
        super(Role_1.Role, dataSource.manager);
    }
    async findGlobalOwnerRole() {
        return this.findRole('global', 'owner');
    }
    async findGlobalOwnerRoleOrFail() {
        return this.findRoleOrFail('global', 'owner');
    }
    async findGlobalMemberRole() {
        return this.findRole('global', 'member');
    }
    async findGlobalMemberRoleOrFail() {
        return this.findRoleOrFail('global', 'member');
    }
    async findWorkflowOwnerRole() {
        return this.findRole('workflow', 'owner');
    }
    async findWorkflowOwnerRoleOrFail() {
        return this.findRoleOrFail('workflow', 'owner');
    }
    async findWorkflowEditorRoleOrFail() {
        return this.findRoleOrFail('workflow', 'editor');
    }
    async findCredentialOwnerRole() {
        return this.findRole('credential', 'owner');
    }
    async findCredentialOwnerRoleOrFail() {
        return this.findRoleOrFail('credential', 'owner');
    }
    async findCredentialUserRole() {
        return this.findRole('credential', 'user');
    }
    async findRole(scope, name) {
        return this.findOne({ where: { scope, name } });
    }
    async findRoleOrFail(scope, name) {
        return this.findOneOrFail({ where: { scope, name } });
    }
};
RoleRepository = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [typeorm_1.DataSource])
], RoleRepository);
exports.RoleRepository = RoleRepository;
//# sourceMappingURL=role.repository.js.map