"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PurgeInvalidWorkflowConnections1675940580449 = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const NodeTypes_1 = require("../../../NodeTypes");
const typedi_1 = require("typedi");
class PurgeInvalidWorkflowConnections1675940580449 {
    async up({ queryRunner, tablePrefix, migrationName, logger }) {
        const workflows = (await queryRunner.query(`
			SELECT id, nodes, connections
			FROM "${tablePrefix}workflow_entity"
		`));
        const nodeTypes = typedi_1.Container.get(NodeTypes_1.NodeTypes);
        workflows.forEach(async (workflow) => {
            const connections = (0, n8n_workflow_1.jsonParse)(workflow.connections);
            const nodes = (0, n8n_workflow_1.jsonParse)(workflow.nodes);
            const nodesThatCannotReceiveInput = nodes.reduce((acc, node) => {
                var _a, _b;
                try {
                    const nodeType = nodeTypes.getByNameAndVersion(node.type, node.typeVersion);
                    if (((_b = (_a = nodeType.description.inputs) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : []) === 0) {
                        acc.push(node.name);
                    }
                }
                catch (error) {
                    logger.warn(`Migration ${migrationName} failed with error: ${error.message}`);
                }
                return acc;
            }, []);
            Object.keys(connections).forEach((sourceNodeName) => {
                const connection = connections[sourceNodeName];
                const outputs = Object.keys(connection);
                outputs.forEach((outputConnectionName) => {
                    const outputConnection = connection[outputConnectionName];
                    outputConnection.forEach((outputConnectionItem, outputConnectionItemIdx) => {
                        outputConnection[outputConnectionItemIdx] = outputConnectionItem.filter((outgoingConnections) => !nodesThatCannotReceiveInput.includes(outgoingConnections.node));
                    });
                });
            });
            const [updateQuery, updateParams] = queryRunner.connection.driver.escapeQueryWithParameters(`
							UPDATE "${tablePrefix}workflow_entity"
							SET connections = :connections
							WHERE id = '${workflow.id}'
						`, { connections: JSON.stringify(connections) }, {});
            await queryRunner.query(updateQuery, updateParams);
        });
    }
}
exports.PurgeInvalidWorkflowConnections1675940580449 = PurgeInvalidWorkflowConnections1675940580449;
//# sourceMappingURL=1675940580449-PurgeInvalidWorkflowConnections.js.map