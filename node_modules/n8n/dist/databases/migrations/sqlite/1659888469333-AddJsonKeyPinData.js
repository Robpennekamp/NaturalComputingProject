"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addJsonKeyToPinDataColumn = exports.AddJsonKeyPinData1659888469333 = void 0;
const migrationHelpers_1 = require("../../utils/migrationHelpers");
class AddJsonKeyPinData1659888469333 {
    async up(context) {
        const { queryRunner, tablePrefix } = context;
        const workflowTable = `${tablePrefix}workflow_entity`;
        const PINDATA_SELECT_QUERY = `
			SELECT id, pinData
			FROM "${workflowTable}"
			WHERE pinData IS NOT NULL;
		`;
        const PINDATA_UPDATE_STATEMENT = `
			UPDATE "${workflowTable}"
			SET "pinData" = :pinData
			WHERE id = :id;
		`;
        await (0, migrationHelpers_1.runInBatches)(queryRunner, PINDATA_SELECT_QUERY, (0, exports.addJsonKeyToPinDataColumn)(context, PINDATA_UPDATE_STATEMENT));
    }
}
exports.AddJsonKeyPinData1659888469333 = AddJsonKeyPinData1659888469333;
function isObjectLiteral(maybeObject) {
    return typeof maybeObject === 'object' && maybeObject !== null && !Array.isArray(maybeObject);
}
function isJsonKeyObject(item) {
    if (!isObjectLiteral(item))
        return false;
    return Object.keys(item).includes('json');
}
const addJsonKeyToPinDataColumn = ({ queryRunner }, updateStatement) => async (fetchedWorkflows) => {
    await Promise.all(makeUpdateParams(fetchedWorkflows).map(async (param) => {
        const params = {
            pinData: param.pinData,
            id: param.id,
        };
        const [escapedStatement, escapedParams] = (0, migrationHelpers_1.escapeQuery)(queryRunner, updateStatement, params);
        return queryRunner.query(escapedStatement, escapedParams);
    }));
};
exports.addJsonKeyToPinDataColumn = addJsonKeyToPinDataColumn;
function makeUpdateParams(fetchedWorkflows) {
    return fetchedWorkflows.reduce((updateParams, { id, pinData: rawPinData }) => {
        let pinDataPerWorkflow;
        if (typeof rawPinData === 'string') {
            try {
                pinDataPerWorkflow = JSON.parse(rawPinData);
            }
            catch {
                pinDataPerWorkflow = {};
            }
        }
        else {
            pinDataPerWorkflow = rawPinData;
        }
        const newPinDataPerWorkflow = Object.keys(pinDataPerWorkflow).reduce((newPinDataPerWorkflow, nodeName) => {
            let pinDataPerNode = pinDataPerWorkflow[nodeName];
            if (!Array.isArray(pinDataPerNode)) {
                pinDataPerNode = [pinDataPerNode];
            }
            if (pinDataPerNode.every((item) => item.json))
                return newPinDataPerWorkflow;
            newPinDataPerWorkflow[nodeName] = pinDataPerNode.map((item) => isJsonKeyObject(item) ? item : { json: item });
            return newPinDataPerWorkflow;
        }, {});
        if (Object.keys(newPinDataPerWorkflow).length > 0) {
            updateParams.push({ id, pinData: JSON.stringify(newPinDataPerWorkflow) });
        }
        return updateParams;
    }, []);
}
//# sourceMappingURL=1659888469333-AddJsonKeyPinData.js.map