"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMariaDBConnectionOptions = exports.getMysqlConnectionOptions = exports.getPostgresConnectionOptions = exports.getSqliteConnectionOptions = exports.getOptionOverrides = void 0;
const path_1 = __importDefault(require("path"));
const n8n_core_1 = require("n8n-core");
const entities_1 = require("./entities");
const mysqldb_1 = require("./migrations/mysqldb");
const postgresdb_1 = require("./migrations/postgresdb");
const sqlite_1 = require("./migrations/sqlite");
const config_1 = __importDefault(require("../config"));
const entitiesDir = path_1.default.resolve(__dirname, 'entities');
const getDBConnectionOptions = (dbType) => {
    const entityPrefix = config_1.default.getEnv('database.tablePrefix');
    const migrationsDir = path_1.default.resolve(__dirname, 'migrations', dbType);
    const configDBType = dbType === 'mariadb' ? 'mysqldb' : dbType;
    const connectionDetails = configDBType === 'sqlite'
        ? {
            database: path_1.default.resolve(n8n_core_1.UserSettings.getUserN8nFolderPath(), config_1.default.getEnv('database.sqlite.database')),
        }
        : {
            database: config_1.default.getEnv(`database.${configDBType}.database`),
            username: config_1.default.getEnv(`database.${configDBType}.user`),
            password: config_1.default.getEnv(`database.${configDBType}.password`),
            host: config_1.default.getEnv(`database.${configDBType}.host`),
            port: config_1.default.getEnv(`database.${configDBType}.port`),
        };
    return {
        entityPrefix,
        entities: Object.values(entities_1.entities),
        migrationsTableName: `${entityPrefix}migrations`,
        cli: { entitiesDir, migrationsDir },
        ...connectionDetails,
    };
};
const getOptionOverrides = (dbType) => ({
    database: config_1.default.getEnv(`database.${dbType}.database`),
    host: config_1.default.getEnv(`database.${dbType}.host`),
    port: config_1.default.getEnv(`database.${dbType}.port`),
    username: config_1.default.getEnv(`database.${dbType}.user`),
    password: config_1.default.getEnv(`database.${dbType}.password`),
});
exports.getOptionOverrides = getOptionOverrides;
const getSqliteConnectionOptions = () => ({
    type: 'sqlite',
    ...getDBConnectionOptions('sqlite'),
    migrations: sqlite_1.sqliteMigrations,
});
exports.getSqliteConnectionOptions = getSqliteConnectionOptions;
const getPostgresConnectionOptions = () => ({
    type: 'postgres',
    ...getDBConnectionOptions('postgresdb'),
    schema: config_1.default.getEnv('database.postgresdb.schema'),
    migrations: postgresdb_1.postgresMigrations,
});
exports.getPostgresConnectionOptions = getPostgresConnectionOptions;
const getMysqlConnectionOptions = () => ({
    type: 'mysql',
    ...getDBConnectionOptions('mysqldb'),
    migrations: mysqldb_1.mysqlMigrations,
});
exports.getMysqlConnectionOptions = getMysqlConnectionOptions;
const getMariaDBConnectionOptions = () => ({
    type: 'mariadb',
    ...getDBConnectionOptions('mysqldb'),
    migrations: mysqldb_1.mysqlMigrations,
});
exports.getMariaDBConnectionOptions = getMariaDBConnectionOptions;
//# sourceMappingURL=config.js.map