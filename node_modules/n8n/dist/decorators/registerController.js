"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerController = exports.canSkipAuth = exports.createAuthMiddleware = void 0;
const express_1 = require("express");
const ResponseHelper_1 = require("../ResponseHelper");
const constants_1 = require("./constants");
const createAuthMiddleware = (authRole) => ({ user }, res, next) => {
    if (authRole === 'none')
        return next();
    if (!user)
        return res.status(401).json({ status: 'error', message: 'Unauthorized' });
    const { globalRole } = user;
    if (authRole === 'any' || (globalRole.scope === authRole[0] && globalRole.name === authRole[1]))
        return next();
    res.status(403).json({ status: 'error', message: 'Unauthorized' });
};
exports.createAuthMiddleware = createAuthMiddleware;
const authFreeRoutes = [];
const canSkipAuth = (method, path) => authFreeRoutes.includes(`${method.toLowerCase()} ${path}`);
exports.canSkipAuth = canSkipAuth;
const registerController = (app, config, controller) => {
    var _a;
    const controllerClass = controller.constructor;
    const controllerBasePath = Reflect.getMetadata(constants_1.CONTROLLER_BASE_PATH, controllerClass);
    if (!controllerBasePath)
        throw new Error(`${controllerClass.name} is missing the RestController decorator`);
    const authRoles = Reflect.getMetadata(constants_1.CONTROLLER_AUTH_ROLES, controllerClass);
    const routes = Reflect.getMetadata(constants_1.CONTROLLER_ROUTES, controllerClass);
    if (routes.length > 0) {
        const router = (0, express_1.Router)({ mergeParams: true });
        const restBasePath = config.getEnv('endpoints.rest');
        const prefix = `/${[restBasePath, controllerBasePath].join('/')}`
            .replace(/\/+/g, '/')
            .replace(/\/$/, '');
        const controllerMiddlewares = ((_a = Reflect.getMetadata(constants_1.CONTROLLER_MIDDLEWARES, controllerClass)) !== null && _a !== void 0 ? _a : []).map(({ handlerName }) => controller[handlerName].bind(controller));
        routes.forEach(({ method, path, middlewares: routeMiddlewares, handlerName }) => {
            var _a;
            const authRole = authRoles && ((_a = authRoles[handlerName]) !== null && _a !== void 0 ? _a : authRoles['*']);
            router[method](path, ...(authRole ? [(0, exports.createAuthMiddleware)(authRole)] : []), ...controllerMiddlewares, ...routeMiddlewares, (0, ResponseHelper_1.send)(async (req, res) => controller[handlerName](req, res)));
            if (!authRole || authRole === 'none')
                authFreeRoutes.push(`${method} ${prefix}${path}`);
        });
        app.use(prefix, router);
    }
};
exports.registerController = registerController;
//# sourceMappingURL=registerController.js.map