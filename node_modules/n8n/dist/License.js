"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.License = void 0;
const license_sdk_1 = require("@n8n_io/license-sdk");
const Logger_1 = require("./Logger");
const config_1 = __importDefault(require("./config"));
const Db = __importStar(require("./Db"));
const constants_1 = require("./constants");
const typedi_1 = require("typedi");
let License = class License {
    constructor() {
        this.logger = (0, Logger_1.getLogger)();
    }
    async init(instanceId) {
        if (this.manager) {
            return;
        }
        const server = config_1.default.getEnv('license.serverUrl');
        const autoRenewEnabled = config_1.default.getEnv('license.autoRenewEnabled');
        const autoRenewOffset = config_1.default.getEnv('license.autoRenewOffset');
        try {
            this.manager = new license_sdk_1.LicenseManager({
                server,
                tenantId: config_1.default.getEnv('license.tenantId'),
                productIdentifier: `n8n-${constants_1.N8N_VERSION}`,
                autoRenewEnabled,
                autoRenewOffset,
                logger: this.logger,
                loadCertStr: async () => this.loadCertStr(),
                saveCertStr: async (value) => this.saveCertStr(value),
                deviceFingerprint: () => instanceId,
            });
            await this.manager.initialize();
        }
        catch (e) {
            if (e instanceof Error) {
                this.logger.error('Could not initialize license manager sdk', e);
            }
        }
    }
    async loadCertStr() {
        var _a;
        const ephemeralLicense = config_1.default.get('license.cert');
        if (ephemeralLicense) {
            return ephemeralLicense;
        }
        const databaseSettings = await Db.collections.Settings.findOne({
            where: {
                key: constants_1.SETTINGS_LICENSE_CERT_KEY,
            },
        });
        return (_a = databaseSettings === null || databaseSettings === void 0 ? void 0 : databaseSettings.value) !== null && _a !== void 0 ? _a : '';
    }
    async saveCertStr(value) {
        if (config_1.default.get('license.cert'))
            return;
        await Db.collections.Settings.upsert({
            key: constants_1.SETTINGS_LICENSE_CERT_KEY,
            value,
            loadOnStartup: false,
        }, ['key']);
    }
    async activate(activationKey) {
        if (!this.manager) {
            return;
        }
        await this.manager.activate(activationKey);
    }
    async renew() {
        if (!this.manager) {
            return;
        }
        await this.manager.renew();
    }
    isFeatureEnabled(feature) {
        if (!this.manager) {
            return false;
        }
        return this.manager.hasFeatureEnabled(feature);
    }
    isSharingEnabled() {
        return this.isFeatureEnabled("feat:sharing");
    }
    isLogStreamingEnabled() {
        return this.isFeatureEnabled("feat:logStreaming");
    }
    isLdapEnabled() {
        return this.isFeatureEnabled("feat:ldap");
    }
    isSamlEnabled() {
        return this.isFeatureEnabled("feat:saml");
    }
    isAdvancedExecutionFiltersEnabled() {
        return this.isFeatureEnabled("feat:advancedExecutionFilters");
    }
    isVariablesEnabled() {
        return this.isFeatureEnabled("feat:variables");
    }
    isVersionControlLicensed() {
        return this.isFeatureEnabled("feat:versionControl");
    }
    getCurrentEntitlements() {
        var _a, _b;
        return (_b = (_a = this.manager) === null || _a === void 0 ? void 0 : _a.getCurrentEntitlements()) !== null && _b !== void 0 ? _b : [];
    }
    getFeatureValue(feature, requireValidCert) {
        if (!this.manager) {
            return undefined;
        }
        return this.manager.getFeatureValue(feature, requireValidCert);
    }
    getManagementJwt() {
        if (!this.manager) {
            return '';
        }
        return this.manager.getManagementJwt();
    }
    getMainPlan() {
        if (!this.manager) {
            return undefined;
        }
        const entitlements = this.getCurrentEntitlements();
        if (!entitlements.length) {
            return undefined;
        }
        return entitlements.find((entitlement) => { var _a, _b; return (_b = (_a = entitlement.productMetadata) === null || _a === void 0 ? void 0 : _a.terms) === null || _b === void 0 ? void 0 : _b.isMainPlan; });
    }
    getTriggerLimit() {
        var _a;
        return ((_a = this.getFeatureValue("quota:activeWorkflows")) !== null && _a !== void 0 ? _a : -1);
    }
    getVariablesLimit() {
        var _a;
        return ((_a = this.getFeatureValue("quota:maxVariables")) !== null && _a !== void 0 ? _a : -1);
    }
    getPlanName() {
        var _a;
        return ((_a = this.getFeatureValue('planName')) !== null && _a !== void 0 ? _a : 'Community');
    }
    getInfo() {
        if (!this.manager) {
            return 'n/a';
        }
        return this.manager.toString();
    }
};
License = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [])
], License);
exports.License = License;
//# sourceMappingURL=License.js.map