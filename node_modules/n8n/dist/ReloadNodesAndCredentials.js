"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reloadNodesAndCredentials = void 0;
const path_1 = __importDefault(require("path"));
const promises_1 = require("fs/promises");
const reloadNodesAndCredentials = async (loadNodesAndCredentials, nodeTypes, push) => {
    const { default: debounce } = await Promise.resolve().then(() => __importStar(require('lodash.debounce')));
    const { watch } = await Promise.resolve().then(() => __importStar(require('chokidar')));
    Object.values(loadNodesAndCredentials.loaders).forEach(async (loader) => {
        try {
            await (0, promises_1.access)(loader.directory);
        }
        catch {
            return;
        }
        const realModulePath = path_1.default.join(await (0, promises_1.realpath)(loader.directory), path_1.default.sep);
        const reloader = debounce(async () => {
            const modulesToUnload = Object.keys(require.cache).filter((filePath) => filePath.startsWith(realModulePath));
            modulesToUnload.forEach((filePath) => {
                delete require.cache[filePath];
            });
            loader.reset();
            await loader.loadAll();
            await loadNodesAndCredentials.postProcessLoaders();
            await loadNodesAndCredentials.generateTypesForFrontend();
            nodeTypes.applySpecialNodeParameters();
            push.send('nodeDescriptionUpdated', undefined);
        }, 100);
        const toWatch = loader.isLazyLoaded
            ? ['**/nodes.json', '**/credentials.json']
            : ['**/*.js', '**/*.json'];
        watch(toWatch, { cwd: realModulePath }).on('change', reloader);
    });
};
exports.reloadNodesAndCredentials = reloadNodesAndCredentials;
//# sourceMappingURL=ReloadNodesAndCredentials.js.map