import type { IDataObject } from 'n8n-workflow';
import type { User } from '../databases/entities/User';
import type { IExecutionFlattedResponse, IExecutionResponse, IExecutionsListResponse } from '../Interfaces';
import type { ExecutionRequest } from '../requests';
export declare class ExecutionsService {
    static getWorkflowIdsForUser(user: User): Promise<string[]>;
    static getExecutionsCount(countFilter: IDataObject, user: User, metadata?: Array<{
        key: string;
        value: string;
    }>): Promise<{
        count: number;
        estimated: boolean;
    }>;
    static massageFilters(filter: IDataObject): void;
    static getExecutionsList(req: ExecutionRequest.GetAll): Promise<IExecutionsListResponse>;
    static getExecution(req: ExecutionRequest.Get): Promise<IExecutionResponse | IExecutionFlattedResponse | undefined>;
    static retryExecution(req: ExecutionRequest.Retry): Promise<boolean>;
    static deleteExecutions(req: ExecutionRequest.Delete): Promise<void>;
}
