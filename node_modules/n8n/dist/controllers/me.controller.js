"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeController = void 0;
const validator_1 = __importDefault(require("validator"));
const class_transformer_1 = require("class-transformer");
const decorators_1 = require("../decorators");
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const ResponseHelper_1 = require("../ResponseHelper");
const GenericHelpers_1 = require("../GenericHelpers");
const jwt_1 = require("../auth/jwt");
const requests_1 = require("../requests");
const crypto_1 = require("crypto");
const samlHelpers_1 = require("../sso/saml/samlHelpers");
const user_service_1 = require("../user/user.service");
let MeController = class MeController {
    constructor({ logger, externalHooks, internalHooks, repositories, }) {
        this.logger = logger;
        this.externalHooks = externalHooks;
        this.internalHooks = internalHooks;
        this.userRepository = repositories.User;
    }
    async updateCurrentUser(req, res) {
        const { id: userId, email: currentEmail } = req.user;
        const payload = (0, class_transformer_1.plainToInstance)(requests_1.UserUpdatePayload, req.body);
        const { email } = payload;
        if (!email) {
            this.logger.debug('Request to update user email failed because of missing email in payload', {
                userId,
                payload,
            });
            throw new ResponseHelper_1.BadRequestError('Email is mandatory');
        }
        if (!validator_1.default.isEmail(email)) {
            this.logger.debug('Request to update user email failed because of invalid email in payload', {
                userId,
                invalidEmail: email,
            });
            throw new ResponseHelper_1.BadRequestError('Invalid email address');
        }
        await (0, GenericHelpers_1.validateEntity)(payload);
        if ((0, samlHelpers_1.isSamlLicensedAndEnabled)()) {
            if (email !== currentEmail) {
                this.logger.debug('Request to update user failed because SAML user may not change their email', {
                    userId,
                    payload,
                });
                throw new ResponseHelper_1.BadRequestError('SAML user may not change their email');
            }
        }
        await this.userRepository.update(userId, payload);
        const user = await this.userRepository.findOneOrFail({
            where: { id: userId },
            relations: { globalRole: true },
        });
        this.logger.info('User updated successfully', { userId });
        await (0, jwt_1.issueCookie)(res, user);
        const updatedKeys = Object.keys(payload);
        void this.internalHooks.onUserUpdate({
            user,
            fields_changed: updatedKeys,
        });
        await this.externalHooks.run('user.profile.update', [currentEmail, (0, UserManagementHelper_1.sanitizeUser)(user)]);
        return (0, UserManagementHelper_1.sanitizeUser)(user);
    }
    async updatePassword(req, res) {
        var _a;
        const { currentPassword, newPassword } = req.body;
        if ((0, samlHelpers_1.isSamlLicensedAndEnabled)()) {
            this.logger.debug('Attempted to change password for user, while SAML is enabled', {
                userId: (_a = req.user) === null || _a === void 0 ? void 0 : _a.id,
            });
            throw new ResponseHelper_1.BadRequestError('With SAML enabled, users need to use their SAML provider to change passwords');
        }
        if (typeof currentPassword !== 'string' || typeof newPassword !== 'string') {
            throw new ResponseHelper_1.BadRequestError('Invalid payload.');
        }
        if (!req.user.password) {
            throw new ResponseHelper_1.BadRequestError('Requesting user not set up.');
        }
        const isCurrentPwCorrect = await (0, UserManagementHelper_1.compareHash)(currentPassword, req.user.password);
        if (!isCurrentPwCorrect) {
            throw new ResponseHelper_1.BadRequestError('Provided current password is incorrect.');
        }
        const validPassword = (0, UserManagementHelper_1.validatePassword)(newPassword);
        req.user.password = await (0, UserManagementHelper_1.hashPassword)(validPassword);
        const user = await this.userRepository.save(req.user);
        this.logger.info('Password updated successfully', { userId: user.id });
        await (0, jwt_1.issueCookie)(res, user);
        void this.internalHooks.onUserUpdate({
            user,
            fields_changed: ['password'],
        });
        await this.externalHooks.run('user.password.update', [user.email, req.user.password]);
        return { success: true };
    }
    async storeSurveyAnswers(req) {
        const { body: personalizationAnswers } = req;
        if (!personalizationAnswers) {
            this.logger.debug('Request to store user personalization survey failed because of empty payload', {
                userId: req.user.id,
            });
            throw new ResponseHelper_1.BadRequestError('Personalization answers are mandatory');
        }
        await this.userRepository.save({
            id: req.user.id,
            personalizationAnswers,
        });
        this.logger.info('User survey updated successfully', { userId: req.user.id });
        void this.internalHooks.onPersonalizationSurveySubmitted(req.user.id, personalizationAnswers);
        return { success: true };
    }
    async createAPIKey(req) {
        const apiKey = `n8n_api_${(0, crypto_1.randomBytes)(40).toString('hex')}`;
        await this.userRepository.update(req.user.id, {
            apiKey,
        });
        void this.internalHooks.onApiKeyCreated({
            user: req.user,
            public_api: false,
        });
        return { apiKey };
    }
    async getAPIKey(req) {
        return { apiKey: req.user.apiKey };
    }
    async deleteAPIKey(req) {
        await this.userRepository.update(req.user.id, {
            apiKey: null,
        });
        void this.internalHooks.onApiKeyDeleted({
            user: req.user,
            public_api: false,
        });
        return { success: true };
    }
    async updateCurrentUserSettings(req) {
        const payload = (0, class_transformer_1.plainToInstance)(requests_1.UserSettingsUpdatePayload, req.body);
        const { id } = req.user;
        await user_service_1.UserService.updateUserSettings(id, payload);
        const user = await this.userRepository.findOneOrFail({
            select: ['settings'],
            where: { id },
        });
        return user.settings;
    }
};
__decorate([
    (0, decorators_1.Patch)('/'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], MeController.prototype, "updateCurrentUser", null);
__decorate([
    (0, decorators_1.Patch)('/password'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], MeController.prototype, "updatePassword", null);
__decorate([
    (0, decorators_1.Post)('/survey'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], MeController.prototype, "storeSurveyAnswers", null);
__decorate([
    (0, decorators_1.Post)('/api-key'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], MeController.prototype, "createAPIKey", null);
__decorate([
    (0, decorators_1.Get)('/api-key'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], MeController.prototype, "getAPIKey", null);
__decorate([
    (0, decorators_1.Delete)('/api-key'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], MeController.prototype, "deleteAPIKey", null);
__decorate([
    (0, decorators_1.Patch)('/settings'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], MeController.prototype, "updateCurrentUserSettings", null);
MeController = __decorate([
    (0, decorators_1.Authorized)(),
    (0, decorators_1.RestController)('/me'),
    __metadata("design:paramtypes", [Object])
], MeController);
exports.MeController = MeController;
//# sourceMappingURL=me.controller.js.map