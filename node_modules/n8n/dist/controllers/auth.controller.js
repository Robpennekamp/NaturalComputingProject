"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthController = void 0;
const validator_1 = __importDefault(require("validator"));
const decorators_1 = require("../decorators");
const ResponseHelper_1 = require("../ResponseHelper");
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const jwt_1 = require("../auth/jwt");
const constants_1 = require("../constants");
const typeorm_1 = require("typeorm");
const auth_1 = require("../auth");
const ssoHelpers_1 = require("../sso/ssoHelpers");
const InternalHooks_1 = require("../InternalHooks");
const typedi_1 = __importDefault(require("typedi"));
let AuthController = class AuthController {
    constructor({ config, logger, internalHooks, repositories, postHog, }) {
        this.config = config;
        this.logger = logger;
        this.internalHooks = internalHooks;
        this.userRepository = repositories.User;
        this.postHog = postHog;
    }
    async login(req, res) {
        var _a;
        const { email, password } = req.body;
        if (!email)
            throw new Error('Email is required to log in');
        if (!password)
            throw new Error('Password is required to log in');
        let user;
        let usedAuthenticationMethod = (0, ssoHelpers_1.getCurrentAuthenticationMethod)();
        if ((0, ssoHelpers_1.isSamlCurrentAuthenticationMethod)()) {
            const preliminaryUser = await (0, auth_1.handleEmailLogin)(email, password);
            if (((_a = preliminaryUser === null || preliminaryUser === void 0 ? void 0 : preliminaryUser.globalRole) === null || _a === void 0 ? void 0 : _a.name) === 'owner') {
                user = preliminaryUser;
                usedAuthenticationMethod = 'email';
            }
            else {
                throw new ResponseHelper_1.AuthError('SAML is enabled, please log in with SAML');
            }
        }
        else if ((0, ssoHelpers_1.isLdapCurrentAuthenticationMethod)()) {
            user = await (0, auth_1.handleLdapLogin)(email, password);
        }
        else {
            user = await (0, auth_1.handleEmailLogin)(email, password);
        }
        if (user) {
            await (0, jwt_1.issueCookie)(res, user);
            void typedi_1.default.get(InternalHooks_1.InternalHooks).onUserLoginSuccess({
                user,
                authenticationMethod: usedAuthenticationMethod,
            });
            return (0, UserManagementHelper_1.withFeatureFlags)(this.postHog, (0, UserManagementHelper_1.sanitizeUser)(user));
        }
        void typedi_1.default.get(InternalHooks_1.InternalHooks).onUserLoginFailed({
            user: email,
            authenticationMethod: usedAuthenticationMethod,
            reason: 'wrong credentials',
        });
        throw new ResponseHelper_1.AuthError('Wrong username or password. Do you have caps lock on?');
    }
    async currentUser(req, res) {
        var _a;
        const cookieContents = (_a = req.cookies) === null || _a === void 0 ? void 0 : _a[constants_1.AUTH_COOKIE_NAME];
        let user;
        if (cookieContents) {
            try {
                user = await (0, jwt_1.resolveJwt)(cookieContents);
                return await (0, UserManagementHelper_1.withFeatureFlags)(this.postHog, (0, UserManagementHelper_1.sanitizeUser)(user));
            }
            catch (error) {
                res.clearCookie(constants_1.AUTH_COOKIE_NAME);
            }
        }
        if (this.config.getEnv('userManagement.isInstanceOwnerSetUp')) {
            throw new ResponseHelper_1.AuthError('Not logged in');
        }
        try {
            user = await this.userRepository.findOneOrFail({
                relations: ['globalRole'],
                where: {},
            });
        }
        catch (error) {
            throw new ResponseHelper_1.InternalServerError('No users found in database - did you wipe the users table? Create at least one user.');
        }
        if (user.email || user.password) {
            throw new ResponseHelper_1.InternalServerError('Invalid database state - user has password set.');
        }
        await (0, jwt_1.issueCookie)(res, user);
        return (0, UserManagementHelper_1.withFeatureFlags)(this.postHog, (0, UserManagementHelper_1.sanitizeUser)(user));
    }
    async resolveSignupToken(req) {
        const { inviterId, inviteeId } = req.query;
        if (!inviterId || !inviteeId) {
            this.logger.debug('Request to resolve signup token failed because of missing user IDs in query string', { inviterId, inviteeId });
            throw new ResponseHelper_1.BadRequestError('Invalid payload');
        }
        for (const userId of [inviterId, inviteeId]) {
            if (!validator_1.default.isUUID(userId)) {
                this.logger.debug('Request to resolve signup token failed because of invalid user ID', {
                    userId,
                });
                throw new ResponseHelper_1.BadRequestError('Invalid userId');
            }
        }
        const users = await this.userRepository.find({ where: { id: (0, typeorm_1.In)([inviterId, inviteeId]) } });
        if (users.length !== 2) {
            this.logger.debug('Request to resolve signup token failed because the ID of the inviter and/or the ID of the invitee were not found in database', { inviterId, inviteeId });
            throw new ResponseHelper_1.BadRequestError('Invalid invite URL');
        }
        const invitee = users.find((user) => user.id === inviteeId);
        if (!invitee || invitee.password) {
            this.logger.error('Invalid invite URL - invitee already setup', {
                inviterId,
                inviteeId,
            });
            throw new ResponseHelper_1.BadRequestError('The invitation was likely either deleted or already claimed');
        }
        const inviter = users.find((user) => user.id === inviterId);
        if (!(inviter === null || inviter === void 0 ? void 0 : inviter.email) || !(inviter === null || inviter === void 0 ? void 0 : inviter.firstName)) {
            this.logger.error('Request to resolve signup token failed because inviter does not exist or is not set up', {
                inviterId: inviter === null || inviter === void 0 ? void 0 : inviter.id,
            });
            throw new ResponseHelper_1.BadRequestError('Invalid request');
        }
        void this.internalHooks.onUserInviteEmailClick({ inviter, invitee });
        const { firstName, lastName } = inviter;
        return { inviter: { firstName, lastName } };
    }
    logout(req, res) {
        res.clearCookie(constants_1.AUTH_COOKIE_NAME);
        return { loggedOut: true };
    }
};
__decorate([
    (0, decorators_1.Post)('/login'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "login", null);
__decorate([
    (0, decorators_1.Get)('/login'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "currentUser", null);
__decorate([
    (0, decorators_1.Get)('/resolve-signup-token'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "resolveSignupToken", null);
__decorate([
    (0, decorators_1.Authorized)(),
    (0, decorators_1.Post)('/logout'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], AuthController.prototype, "logout", null);
AuthController = __decorate([
    (0, decorators_1.RestController)(),
    __metadata("design:paramtypes", [Object])
], AuthController);
exports.AuthController = AuthController;
//# sourceMappingURL=auth.controller.js.map