import { Response } from 'express';
import type { ILogger } from 'n8n-workflow';
import type { Config } from '../config';
import { OwnerRequest } from '../requests';
import type { IDatabaseCollections, IInternalHooksClass } from '../Interfaces';
export declare class OwnerController {
    private readonly config;
    private readonly logger;
    private readonly internalHooks;
    private readonly userRepository;
    private readonly settingsRepository;
    private readonly credentialsRepository;
    private readonly workflowsRepository;
    constructor({ config, logger, internalHooks, repositories, }: {
        config: Config;
        logger: ILogger;
        internalHooks: IInternalHooksClass;
        repositories: Pick<IDatabaseCollections, 'User' | 'Settings' | 'Credentials' | 'Workflow'>;
    });
    preSetup(): Promise<{
        credentials: number;
        workflows: number;
    }>;
    setupOwner(req: OwnerRequest.Post, res: Response): Promise<import("../Interfaces").PublicUser>;
    skipSetup(): Promise<{
        success: boolean;
    }>;
}
