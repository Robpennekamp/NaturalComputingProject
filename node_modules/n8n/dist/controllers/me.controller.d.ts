import type { User } from '../databases/entities/User';
import { Response } from 'express';
import type { ILogger } from 'n8n-workflow';
import { AuthenticatedRequest, MeRequest } from '../requests';
import type { PublicUser, IDatabaseCollections, IExternalHooksClass, IInternalHooksClass } from '../Interfaces';
export declare class MeController {
    private readonly logger;
    private readonly externalHooks;
    private readonly internalHooks;
    private readonly userRepository;
    constructor({ logger, externalHooks, internalHooks, repositories, }: {
        logger: ILogger;
        externalHooks: IExternalHooksClass;
        internalHooks: IInternalHooksClass;
        repositories: Pick<IDatabaseCollections, 'User'>;
    });
    updateCurrentUser(req: MeRequest.UserUpdate, res: Response): Promise<PublicUser>;
    updatePassword(req: MeRequest.Password, res: Response): Promise<{
        success: boolean;
    }>;
    storeSurveyAnswers(req: MeRequest.SurveyAnswers): Promise<{
        success: boolean;
    }>;
    createAPIKey(req: AuthenticatedRequest): Promise<{
        apiKey: string;
    }>;
    getAPIKey(req: AuthenticatedRequest): Promise<{
        apiKey: string | null | undefined;
    }>;
    deleteAPIKey(req: AuthenticatedRequest): Promise<{
        success: boolean;
    }>;
    updateCurrentUserSettings(req: MeRequest.UserSettingsUpdate): Promise<User['settings']>;
}
