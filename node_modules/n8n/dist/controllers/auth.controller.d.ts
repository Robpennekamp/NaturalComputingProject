import { Request, Response } from 'express';
import type { ILogger } from 'n8n-workflow';
import { LoginRequest, UserRequest } from '../requests';
import type { Config } from '../config';
import type { PublicUser, IDatabaseCollections, IInternalHooksClass, CurrentUser } from '../Interfaces';
import type { PostHogClient } from '../posthog';
export declare class AuthController {
    private readonly config;
    private readonly logger;
    private readonly internalHooks;
    private readonly userRepository;
    private readonly postHog?;
    constructor({ config, logger, internalHooks, repositories, postHog, }: {
        config: Config;
        logger: ILogger;
        internalHooks: IInternalHooksClass;
        repositories: Pick<IDatabaseCollections, 'User'>;
        postHog?: PostHogClient;
    });
    login(req: LoginRequest, res: Response): Promise<PublicUser | undefined>;
    currentUser(req: Request, res: Response): Promise<CurrentUser>;
    resolveSignupToken(req: UserRequest.ResolveSignUp): Promise<{
        inviter: {
            firstName: string;
            lastName: string;
        };
    }>;
    logout(req: Request, res: Response): {
        loggedOut: boolean;
    };
}
