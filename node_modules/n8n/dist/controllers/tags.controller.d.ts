import { Request, Response, NextFunction } from 'express';
import type { Config } from '../config';
import type { IDatabaseCollections, IExternalHooksClass, ITagWithCountDb } from '../Interfaces';
import { TagEntity } from '../databases/entities/TagEntity';
import { TagsRequest } from '../requests';
export declare class TagsController {
    private config;
    private externalHooks;
    private tagsRepository;
    constructor({ config, externalHooks, repositories, }: {
        config: Config;
        externalHooks: IExternalHooksClass;
        repositories: Pick<IDatabaseCollections, 'Tag'>;
    });
    workflowsEnabledMiddleware(req: Request, res: Response, next: NextFunction): void;
    getAll(req: TagsRequest.GetAll): Promise<TagEntity[] | ITagWithCountDb[]>;
    createTag(req: TagsRequest.Create): Promise<TagEntity>;
    updateTag(req: TagsRequest.Update): Promise<TagEntity>;
    deleteTag(req: TagsRequest.Delete): Promise<boolean>;
}
