"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagsController = void 0;
const decorators_1 = require("../decorators");
const TagEntity_1 = require("../databases/entities/TagEntity");
const GenericHelpers_1 = require("../GenericHelpers");
const ResponseHelper_1 = require("../ResponseHelper");
let TagsController = class TagsController {
    constructor({ config, externalHooks, repositories, }) {
        this.config = config;
        this.externalHooks = externalHooks;
        this.tagsRepository = repositories.Tag;
    }
    workflowsEnabledMiddleware(req, res, next) {
        if (this.config.getEnv('workflowTagsDisabled'))
            throw new ResponseHelper_1.BadRequestError('Workflow tags are disabled');
        next();
    }
    async getAll(req) {
        const { withUsageCount } = req.query;
        if (withUsageCount === 'true') {
            return this.tagsRepository
                .find({
                select: ['id', 'name', 'createdAt', 'updatedAt'],
                relations: ['workflowMappings'],
            })
                .then((tags) => tags.map(({ workflowMappings, ...rest }) => ({
                ...rest,
                usageCount: workflowMappings.length,
            })));
        }
        return this.tagsRepository.find({ select: ['id', 'name', 'createdAt', 'updatedAt'] });
    }
    async createTag(req) {
        const newTag = new TagEntity_1.TagEntity();
        newTag.name = req.body.name.trim();
        await this.externalHooks.run('tag.beforeCreate', [newTag]);
        await (0, GenericHelpers_1.validateEntity)(newTag);
        const tag = await this.tagsRepository.save(newTag);
        await this.externalHooks.run('tag.afterCreate', [tag]);
        return tag;
    }
    async updateTag(req) {
        const { name } = req.body;
        const { id } = req.params;
        const newTag = new TagEntity_1.TagEntity();
        newTag.id = id;
        newTag.name = name.trim();
        await this.externalHooks.run('tag.beforeUpdate', [newTag]);
        await (0, GenericHelpers_1.validateEntity)(newTag);
        const tag = await this.tagsRepository.save(newTag);
        await this.externalHooks.run('tag.afterUpdate', [tag]);
        return tag;
    }
    async deleteTag(req) {
        const { id } = req.params;
        await this.externalHooks.run('tag.beforeDelete', [id]);
        await this.tagsRepository.delete({ id });
        await this.externalHooks.run('tag.afterDelete', [id]);
        return true;
    }
};
__decorate([
    (0, decorators_1.Middleware)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Function]),
    __metadata("design:returntype", void 0)
], TagsController.prototype, "workflowsEnabledMiddleware", null);
__decorate([
    (0, decorators_1.Get)('/'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TagsController.prototype, "getAll", null);
__decorate([
    (0, decorators_1.Post)('/'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TagsController.prototype, "createTag", null);
__decorate([
    (0, decorators_1.Patch)('/:id(\\d+)'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TagsController.prototype, "updateTag", null);
__decorate([
    (0, decorators_1.Authorized)(['global', 'owner']),
    (0, decorators_1.Delete)('/:id(\\d+)'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TagsController.prototype, "deleteTag", null);
TagsController = __decorate([
    (0, decorators_1.Authorized)(),
    (0, decorators_1.RestController)('/tags'),
    __metadata("design:paramtypes", [Object])
], TagsController);
exports.TagsController = TagsController;
//# sourceMappingURL=tags.controller.js.map