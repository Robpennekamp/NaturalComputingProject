import type { ILogger } from 'n8n-workflow';
import { Response } from 'express';
import type { Config } from '../config';
import { UserRequest } from '../requests';
import type { UserManagementMailer } from '../UserManagement/email';
import type { PublicUser, IDatabaseCollections, IExternalHooksClass, IInternalHooksClass } from '../Interfaces';
import type { ActiveWorkflowRunner } from '../ActiveWorkflowRunner';
import type { PostHogClient } from '../posthog';
export declare class UsersController {
    private config;
    private logger;
    private externalHooks;
    private internalHooks;
    private userRepository;
    private roleRepository;
    private sharedCredentialsRepository;
    private sharedWorkflowRepository;
    private activeWorkflowRunner;
    private mailer;
    private postHog?;
    constructor({ config, logger, externalHooks, internalHooks, repositories, activeWorkflowRunner, mailer, postHog, }: {
        config: Config;
        logger: ILogger;
        externalHooks: IExternalHooksClass;
        internalHooks: IInternalHooksClass;
        repositories: Pick<IDatabaseCollections, 'User' | 'Role' | 'SharedCredentials' | 'SharedWorkflow'>;
        activeWorkflowRunner: ActiveWorkflowRunner;
        mailer: UserManagementMailer;
        postHog?: PostHogClient;
    });
    sendEmailInvites(req: UserRequest.Invite): Promise<{
        user: {
            id: string | null;
            email: string;
            inviteAcceptUrl: string;
            emailSent: boolean;
        };
        error?: string | undefined;
    }[]>;
    updateUser(req: UserRequest.Update, res: Response): Promise<import("../Interfaces").CurrentUser>;
    listUsers(req: UserRequest.List): Promise<PublicUser[]>;
    deleteUser(req: UserRequest.Delete): Promise<{
        success: boolean;
    }>;
    reinviteUser(req: UserRequest.Reinvite): Promise<{
        success: boolean;
    }>;
}
