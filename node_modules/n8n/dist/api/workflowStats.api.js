"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.workflowStatsController = void 0;
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const express_1 = __importDefault(require("express"));
const n8n_workflow_1 = require("n8n-workflow");
const Db = __importStar(require("../Db"));
const ResponseHelper = __importStar(require("../ResponseHelper"));
const Logger_1 = require("../Logger");
exports.workflowStatsController = express_1.default.Router();
async function checkWorkflowId(workflowId, user) {
    const shared = await Db.collections.SharedWorkflow.findOne({
        relations: ['workflow'],
        where: (0, UserManagementHelper_1.whereClause)({
            user,
            entityType: 'workflow',
            entityId: workflowId,
        }),
    });
    if (!shared) {
        n8n_workflow_1.LoggerProxy.verbose('User attempted to read a workflow without permissions', {
            workflowId,
            userId: user.id,
        });
        return false;
    }
    return true;
}
exports.workflowStatsController.use((req, res, next) => {
    try {
        n8n_workflow_1.LoggerProxy.getInstance();
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.init((0, Logger_1.getLogger)());
    }
    next();
});
exports.workflowStatsController.use(async (req, res, next) => {
    const allowed = await checkWorkflowId(req.params.id, req.user);
    if (allowed) {
        next();
    }
    else {
        const response = new ResponseHelper.NotFoundError(`Workflow ${req.params.id} does not exist.`);
        next(response);
    }
});
exports.workflowStatsController.get('/:id/counts/', ResponseHelper.send(async (req) => {
    const workflowId = req.params.id;
    const stats = await Db.collections.WorkflowStatistics.find({
        select: ['count', 'name'],
        where: {
            workflowId,
        },
    });
    const data = {
        productionSuccess: 0,
        productionError: 0,
        manualSuccess: 0,
        manualError: 0,
    };
    stats.forEach(({ count, name }) => {
        switch (name) {
            case "manual_error":
                data.manualError = count;
                break;
            case "manual_success":
                data.manualSuccess = count;
                break;
            case "production_error":
                data.productionError = count;
                break;
            case "production_success":
                data.productionSuccess = count;
        }
    });
    return data;
}));
exports.workflowStatsController.get('/:id/times/', ResponseHelper.send(async (req) => {
    const workflowId = req.params.id;
    const stats = await Db.collections.WorkflowStatistics.find({
        select: ['latestEvent', 'name'],
        where: {
            workflowId,
        },
    });
    const data = {
        productionSuccess: null,
        productionError: null,
        manualSuccess: null,
        manualError: null,
    };
    stats.forEach(({ latestEvent, name }) => {
        switch (name) {
            case "manual_error":
                data.manualError = latestEvent;
                break;
            case "manual_success":
                data.manualSuccess = latestEvent;
                break;
            case "production_error":
                data.productionError = latestEvent;
                break;
            case "production_success":
                data.productionSuccess = latestEvent;
        }
    });
    return data;
}));
exports.workflowStatsController.get('/:id/data-loaded/', ResponseHelper.send(async (req) => {
    const workflowId = req.params.id;
    const stats = await Db.collections.WorkflowStatistics.findOne({
        select: ['latestEvent'],
        where: {
            workflowId,
            name: "data_loaded",
        },
    });
    const data = {
        dataLoaded: stats ? true : false,
    };
    return data;
}));
//# sourceMappingURL=workflowStats.api.js.map