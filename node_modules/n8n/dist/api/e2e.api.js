"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.e2eController = void 0;
const express_1 = require("express");
const body_parser_1 = __importDefault(require("body-parser"));
const uuid_1 = require("uuid");
const typedi_1 = require("typedi");
const config_1 = __importDefault(require("../config"));
const Db = __importStar(require("../Db"));
const repositories_1 = require("../databases/repositories");
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const MessageEventBus_1 = require("../eventbus/MessageEventBus/MessageEventBus");
const License_1 = require("../License");
if (process.env.E2E_TESTS !== 'true') {
    console.error('E2E endpoints only allowed during E2E tests');
    process.exit(1);
}
const enabledFeatures = {
    ["feat:sharing"]: true,
    ["feat:ldap"]: false,
    ["feat:saml"]: false,
    ["feat:logStreaming"]: false,
    ["feat:advancedExecutionFilters"]: false,
    ["feat:versionControl"]: false,
};
typedi_1.Container.get(License_1.License).isFeatureEnabled = (feature) => { var _a; return (_a = enabledFeatures[feature]) !== null && _a !== void 0 ? _a : false; };
const tablesToTruncate = [
    'auth_identity',
    'auth_provider_sync_history',
    'event_destinations',
    'shared_workflow',
    'shared_credentials',
    'webhook_entity',
    'workflows_tags',
    'credentials_entity',
    'tag_entity',
    'workflow_statistics',
    'workflow_entity',
    'execution_entity',
    'settings',
    'installed_packages',
    'installed_nodes',
    'user',
    'role',
    'variables',
];
const truncateAll = async () => {
    const connection = Db.getConnection();
    for (const table of tablesToTruncate) {
        try {
            await connection.query(`DELETE FROM ${table}; DELETE FROM sqlite_sequence WHERE name=${table};`);
        }
        catch (error) {
            console.warn('Dropping Table for E2E Reset error: ', error);
        }
    }
};
const setupUserManagement = async () => {
    const connection = Db.getConnection();
    await connection.query('INSERT INTO role (name, scope) VALUES ("owner", "global");');
    const instanceOwnerRole = (await connection.query('SELECT last_insert_rowid() as insertId'));
    const roles = [
        ['member', 'global'],
        ['owner', 'workflow'],
        ['owner', 'credential'],
        ['user', 'credential'],
        ['editor', 'workflow'],
    ];
    await Promise.all(roles.map(async ([name, scope]) => connection.query(`INSERT INTO role (name, scope) VALUES ("${name}", "${scope}");`)));
    await connection.query(`INSERT INTO user (id, globalRoleId) values ("${(0, uuid_1.v4)()}", ${instanceOwnerRole[0].insertId})`);
    await connection.query("INSERT INTO \"settings\" (key, value, loadOnStartup) values ('userManagement.isInstanceOwnerSetUp', 'false', true), ('userManagement.skipInstanceOwnerSetup', 'false', true)");
    config_1.default.set('userManagement.isInstanceOwnerSetUp', false);
};
const resetLogStreaming = async () => {
    enabledFeatures["feat:logStreaming"] = false;
    for (const id in MessageEventBus_1.eventBus.destinations) {
        await MessageEventBus_1.eventBus.removeDestination(id);
    }
};
exports.e2eController = (0, express_1.Router)();
exports.e2eController.post('/db/reset', async (req, res) => {
    await resetLogStreaming();
    await truncateAll();
    await setupUserManagement();
    res.writeHead(204).end();
});
exports.e2eController.post('/db/setup-owner', body_parser_1.default.json(), async (req, res) => {
    if (config_1.default.get('userManagement.isInstanceOwnerSetUp')) {
        res.writeHead(500).send({ error: 'Owner already setup' });
        return;
    }
    const globalRole = await typedi_1.Container.get(repositories_1.RoleRepository).findGlobalOwnerRoleOrFail();
    const owner = await Db.collections.User.findOneByOrFail({ globalRoleId: globalRole.id });
    await Db.collections.User.update(owner.id, {
        email: req.body.email,
        password: await (0, UserManagementHelper_1.hashPassword)(req.body.password),
        firstName: req.body.firstName,
        lastName: req.body.lastName,
    });
    await Db.collections.Settings.update({ key: 'userManagement.isInstanceOwnerSetUp' }, { value: 'true' });
    config_1.default.set('userManagement.isInstanceOwnerSetUp', true);
    res.writeHead(204).end();
});
exports.e2eController.patch('/feature/:feature', body_parser_1.default.json(), async (req, res) => {
    const { feature } = req.params;
    const { enabled } = req.body;
    enabledFeatures[feature] = enabled === undefined || enabled === true;
    res.writeHead(204).end();
});
//# sourceMappingURL=e2e.api.js.map