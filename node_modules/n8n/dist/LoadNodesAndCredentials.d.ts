import type { DirectoryLoader, Types } from 'n8n-core';
import type { ICredentialTypes, ILogger, INodesAndCredentials, KnownNodesAndCredentials, LoadedNodesAndCredentials } from 'n8n-workflow';
import type { InstalledPackages } from './databases/entities/InstalledPackages';
export declare class LoadNodesAndCredentials implements INodesAndCredentials {
    known: KnownNodesAndCredentials;
    loaded: LoadedNodesAndCredentials;
    types: Types;
    loaders: Record<string, DirectoryLoader>;
    excludeNodes: string[] | undefined;
    includeNodes: string[] | undefined;
    credentialTypes: ICredentialTypes;
    logger: ILogger;
    private downloadFolder;
    init(): Promise<void>;
    generateTypesForFrontend(): Promise<void>;
    private loadNodesFromNodeModules;
    getCustomDirectories(): string[];
    private loadNodesFromCustomDirectories;
    private installOrUpdateNpmModule;
    installNpmModule(packageName: string, version?: string): Promise<InstalledPackages>;
    removeNpmModule(packageName: string, installedPackage: InstalledPackages): Promise<void>;
    updateNpmModule(packageName: string, installedPackage: InstalledPackages): Promise<InstalledPackages>;
    private supportsProxyAuth;
    private injectCustomApiCallOptions;
    private runDirectoryLoader;
    postProcessLoaders(): Promise<void>;
}
