import type { IExecuteWorkflowInfo, INodeExecutionData, INodeParameters, IRun, IWorkflowBase, IWorkflowExecuteAdditionalData, IWorkflowExecuteHooks, IWorkflowHooksOptionalParameters, IWorkflowSettings, WorkflowExecuteMode, ExecutionStatus } from 'n8n-workflow';
import { WorkflowHooks } from 'n8n-workflow';
import type { IWorkflowExecutionDataProcess } from './Interfaces';
import type { ExecutionMetadata } from './databases/entities/ExecutionMetadata';
export declare function executeErrorWorkflow(workflowData: IWorkflowBase, fullRunData: IRun, mode: WorkflowExecuteMode, executionId?: string, retryOf?: string): void;
export declare function saveExecutionMetadata(executionId: string, executionMetadata: Record<string, string>): Promise<ExecutionMetadata[]>;
export declare function hookFunctionsPreExecute(parentProcessMode?: string): IWorkflowExecuteHooks;
export declare function getRunData(workflowData: IWorkflowBase, userId: string, inputData?: INodeExecutionData[], parentWorkflowId?: string): Promise<IWorkflowExecutionDataProcess>;
export declare function getWorkflowData(workflowInfo: IExecuteWorkflowInfo, parentWorkflowId?: string, parentWorkflowSettings?: IWorkflowSettings): Promise<IWorkflowBase>;
export declare function setExecutionStatus(status: ExecutionStatus): void;
export declare function sendMessageToUI(source: string, messages: any[]): void;
export declare function getBase(userId: string, currentNodeParameters?: INodeParameters, executionTimeoutTimestamp?: number): Promise<IWorkflowExecuteAdditionalData>;
export declare function getWorkflowHooksWorkerExecuter(mode: WorkflowExecuteMode, executionId: string, workflowData: IWorkflowBase, optionalParameters?: IWorkflowHooksOptionalParameters): WorkflowHooks;
export declare function getWorkflowHooksWorkerMain(mode: WorkflowExecuteMode, executionId: string, workflowData: IWorkflowBase, optionalParameters?: IWorkflowHooksOptionalParameters): WorkflowHooks;
export declare function getWorkflowHooksMain(data: IWorkflowExecutionDataProcess, executionId: string, isMainProcess?: boolean): WorkflowHooks;
