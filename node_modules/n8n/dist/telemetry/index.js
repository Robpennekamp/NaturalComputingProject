"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Telemetry = void 0;
const posthog_1 = require("../posthog");
const n8n_workflow_1 = require("n8n-workflow");
const config_1 = __importDefault(require("../config"));
const Logger_1 = require("../Logger");
const License_1 = require("../License");
const License_service_1 = require("../license/License.service");
const constants_1 = require("../constants");
const typedi_1 = require("typedi");
let Telemetry = class Telemetry {
    constructor(postHog, license) {
        this.postHog = postHog;
        this.license = license;
        this.executionCountsBuffer = {};
    }
    setInstanceId(instanceId) {
        this.instanceId = instanceId;
    }
    async init() {
        const enabled = config_1.default.getEnv('diagnostics.enabled');
        if (enabled) {
            const conf = config_1.default.getEnv('diagnostics.config.backend');
            const [key, url] = conf.split(';');
            if (!key || !url) {
                const logger = (0, Logger_1.getLogger)();
                n8n_workflow_1.LoggerProxy.init(logger);
                logger.warn('Diagnostics backend config is invalid');
                return;
            }
            const logLevel = config_1.default.getEnv('logs.level');
            const { default: RudderStack } = await Promise.resolve().then(() => __importStar(require('@rudderstack/rudder-sdk-node')));
            this.rudderStack = new RudderStack(key, url, { logLevel });
            this.startPulse();
        }
    }
    startPulse() {
        this.pulseIntervalReference = setInterval(async () => {
            void this.pulse();
        }, 6 * 60 * 60 * 1000);
    }
    async pulse() {
        if (!this.rudderStack) {
            return;
        }
        const allPromises = Object.keys(this.executionCountsBuffer).map(async (workflowId) => {
            const promise = this.track('Workflow execution count', {
                event_version: '2',
                workflow_id: workflowId,
                ...this.executionCountsBuffer[workflowId],
            }, { withPostHog: true });
            return promise;
        });
        this.executionCountsBuffer = {};
        const pulsePacket = {
            plan_name_current: this.license.getPlanName(),
            quota: this.license.getTriggerLimit(),
            usage: await License_service_1.LicenseService.getActiveTriggerCount(),
        };
        allPromises.push(this.track('pulse', pulsePacket));
        return Promise.all(allPromises);
    }
    async trackWorkflowExecution(properties) {
        var _a, _b;
        if (this.rudderStack) {
            const execTime = new Date();
            const workflowId = properties.workflow_id;
            this.executionCountsBuffer[workflowId] = (_a = this.executionCountsBuffer[workflowId]) !== null && _a !== void 0 ? _a : {
                user_id: properties.user_id,
            };
            const key = `${properties.is_manual ? 'manual' : 'prod'}_${properties.success ? 'success' : 'error'}`;
            if (!this.executionCountsBuffer[workflowId][key]) {
                this.executionCountsBuffer[workflowId][key] = {
                    count: 1,
                    first: execTime,
                };
            }
            else {
                this.executionCountsBuffer[workflowId][key].count++;
            }
            if (!properties.success && ((_b = properties.error_node_type) === null || _b === void 0 ? void 0 : _b.startsWith('n8n-nodes-base'))) {
                void this.track('Workflow execution errored', properties);
            }
        }
    }
    async trackN8nStop() {
        clearInterval(this.pulseIntervalReference);
        void this.track('User instance stopped');
        return new Promise(async (resolve) => {
            await this.postHog.stop();
            if (this.rudderStack) {
                this.rudderStack.flush(resolve);
            }
            else {
                resolve();
            }
        });
    }
    async identify(traits) {
        return new Promise((resolve) => {
            if (this.rudderStack) {
                this.rudderStack.identify({
                    userId: this.instanceId,
                    traits: {
                        ...traits,
                        instanceId: this.instanceId,
                    },
                }, resolve);
            }
            else {
                resolve();
            }
        });
    }
    async track(eventName, properties = {}, { withPostHog } = { withPostHog: false }) {
        return new Promise((resolve) => {
            var _a;
            if (this.rudderStack) {
                const { user_id } = properties;
                const updatedProperties = {
                    ...properties,
                    instance_id: this.instanceId,
                    version_cli: constants_1.N8N_VERSION,
                };
                const payload = {
                    userId: `${this.instanceId}${user_id ? `#${user_id}` : ''}`,
                    event: eventName,
                    properties: updatedProperties,
                };
                if (withPostHog) {
                    (_a = this.postHog) === null || _a === void 0 ? void 0 : _a.track(payload);
                }
                return this.rudderStack.track(payload, resolve);
            }
            return resolve();
        });
    }
    getCountsBuffer() {
        return this.executionCountsBuffer;
    }
};
Telemetry = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [posthog_1.PostHogClient, License_1.License])
], Telemetry);
exports.Telemetry = Telemetry;
//# sourceMappingURL=index.js.map