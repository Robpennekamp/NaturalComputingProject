import { PostHogClient } from '../posthog';
import type { ITelemetryTrackProperties } from 'n8n-workflow';
import type { IExecutionTrackProperties } from '../Interfaces';
import { License } from '../License';
interface IExecutionTrackData {
    count: number;
    first: Date;
}
interface IExecutionsBuffer {
    [workflowId: string]: {
        manual_error?: IExecutionTrackData;
        manual_success?: IExecutionTrackData;
        prod_error?: IExecutionTrackData;
        prod_success?: IExecutionTrackData;
        user_id: string | undefined;
    };
}
export declare class Telemetry {
    private postHog;
    private license;
    private instanceId;
    private rudderStack?;
    private pulseIntervalReference;
    private executionCountsBuffer;
    constructor(postHog: PostHogClient, license: License);
    setInstanceId(instanceId: string): void;
    init(): Promise<void>;
    private startPulse;
    private pulse;
    trackWorkflowExecution(properties: IExecutionTrackProperties): Promise<void>;
    trackN8nStop(): Promise<void>;
    identify(traits?: {
        [key: string]: string | number | boolean | object | undefined | null;
    }): Promise<void>;
    track(eventName: string, properties?: ITelemetryTrackProperties, { withPostHog }?: {
        withPostHog: boolean;
    }): Promise<void>;
    getCountsBuffer(): IExecutionsBuffer;
}
export {};
