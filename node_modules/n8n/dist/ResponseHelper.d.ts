import type { Request, Response } from 'express';
import type { IExecutionDb, IExecutionFlatted, IExecutionFlattedDb, IExecutionResponse } from './Interfaces';
declare abstract class ResponseError extends Error {
    readonly httpStatusCode: number;
    readonly errorCode: number;
    readonly hint: string | undefined;
    constructor(message: string, httpStatusCode: number, errorCode?: number, hint?: string | undefined);
}
export declare class BadRequestError extends ResponseError {
    constructor(message: string, errorCode?: number);
}
export declare class AuthError extends ResponseError {
    constructor(message: string);
}
export declare class UnauthorizedError extends ResponseError {
    constructor(message: string, hint?: string | undefined);
}
export declare class NotFoundError extends ResponseError {
    constructor(message: string, hint?: string | undefined);
}
export declare class ConflictError extends ResponseError {
    constructor(message: string, hint?: string | undefined);
}
export declare class UnprocessableRequestError extends ResponseError {
    constructor(message: string);
}
export declare class InternalServerError extends ResponseError {
    constructor(message: string, errorCode?: number);
}
export declare class ServiceUnavailableError extends ResponseError {
    constructor(message: string, errorCode?: number);
}
export declare function basicAuthAuthorizationError(resp: Response, realm: string, message?: string): void;
export declare function jwtAuthAuthorizationError(resp: Response, message?: string): void;
export declare function sendSuccessResponse(res: Response, data: any, raw?: boolean, responseCode?: number, responseHeader?: object): void;
export declare function sendErrorResponse(res: Response, error: Error): void;
export declare function send<T, R extends Request, S extends Response>(processFunction: (req: R, res: S) => Promise<T>, raw?: boolean): (req: R, res: S) => Promise<void>;
export declare function flattenExecutionData(fullExecutionData: IExecutionDb): IExecutionFlatted;
export declare function unflattenExecutionData(fullExecutionData: IExecutionFlattedDb): IExecutionResponse;
export declare const flattenObject: (obj: {
    [x: string]: any;
}, prefix?: string) => {};
export {};
