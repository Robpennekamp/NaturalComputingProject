"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActiveExecutions = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const flatted_1 = require("flatted");
const Db = __importStar(require("./Db"));
const ResponseHelper = __importStar(require("./ResponseHelper"));
const utils_1 = require("./utils");
const typedi_1 = require("typedi");
let ActiveExecutions = class ActiveExecutions {
    constructor() {
        this.activeExecutions = {};
    }
    async add(executionData, process, executionId) {
        let executionStatus = executionId ? 'running' : 'new';
        if (executionId === undefined) {
            const fullExecutionData = {
                data: executionData.executionData,
                mode: executionData.executionMode,
                finished: false,
                startedAt: new Date(),
                workflowData: executionData.workflowData,
                status: executionStatus,
            };
            if (executionData.retryOf !== undefined) {
                fullExecutionData.retryOf = executionData.retryOf.toString();
            }
            const workflowId = executionData.workflowData.id;
            if (workflowId !== undefined && (0, utils_1.isWorkflowIdValid)(workflowId)) {
                fullExecutionData.workflowId = workflowId;
            }
            const execution = ResponseHelper.flattenExecutionData(fullExecutionData);
            const executionResult = await Db.collections.Execution.save(execution);
            executionId =
                typeof executionResult.id === 'object'
                    ?
                        executionResult.id.toString()
                    : executionResult.id + '';
            if (executionId === undefined) {
                throw new Error('There was an issue assigning an execution id to the execution');
            }
            executionStatus = 'running';
        }
        else {
            const execution = {
                id: executionId,
                data: (0, flatted_1.stringify)(executionData.executionData),
                waitTill: null,
                status: executionStatus,
            };
            await Db.collections.Execution.update(executionId, execution);
        }
        this.activeExecutions[executionId] = {
            executionData,
            process,
            startedAt: new Date(),
            postExecutePromises: [],
            status: executionStatus,
        };
        return executionId;
    }
    attachWorkflowExecution(executionId, workflowExecution) {
        if (this.activeExecutions[executionId] === undefined) {
            throw new Error(`No active execution with id "${executionId}" got found to attach to workflowExecution to!`);
        }
        this.activeExecutions[executionId].workflowExecution = workflowExecution;
    }
    attachResponsePromise(executionId, responsePromise) {
        if (this.activeExecutions[executionId] === undefined) {
            throw new Error(`No active execution with id "${executionId}" got found to attach to workflowExecution to!`);
        }
        this.activeExecutions[executionId].responsePromise = responsePromise;
    }
    resolveResponsePromise(executionId, response) {
        var _a;
        if (this.activeExecutions[executionId] === undefined) {
            return;
        }
        (_a = this.activeExecutions[executionId].responsePromise) === null || _a === void 0 ? void 0 : _a.resolve(response);
    }
    remove(executionId, fullRunData) {
        if (this.activeExecutions[executionId] === undefined) {
            return;
        }
        for (const promise of this.activeExecutions[executionId].postExecutePromises) {
            promise.resolve(fullRunData);
        }
        delete this.activeExecutions[executionId];
    }
    async stopExecution(executionId, timeout) {
        if (this.activeExecutions[executionId] === undefined) {
            return;
        }
        if (this.activeExecutions[executionId].process !== undefined) {
            if (this.activeExecutions[executionId].process.connected) {
                setTimeout(() => {
                    this.activeExecutions[executionId].process.send({
                        type: timeout || 'stopExecution',
                    });
                }, 1);
            }
        }
        else {
            this.activeExecutions[executionId].workflowExecution.cancel();
        }
        return this.getPostExecutePromise(executionId);
    }
    async getPostExecutePromise(executionId) {
        const waitPromise = await (0, n8n_workflow_1.createDeferredPromise)();
        if (this.activeExecutions[executionId] === undefined) {
            throw new Error(`There is no active execution with id "${executionId}".`);
        }
        this.activeExecutions[executionId].postExecutePromises.push(waitPromise);
        return waitPromise.promise();
    }
    getActiveExecutions() {
        const returnData = [];
        let data;
        for (const id of Object.keys(this.activeExecutions)) {
            data = this.activeExecutions[id];
            returnData.push({
                id,
                retryOf: data.executionData.retryOf,
                startedAt: data.startedAt,
                mode: data.executionData.executionMode,
                workflowId: data.executionData.workflowData.id,
                status: data.status,
            });
        }
        return returnData;
    }
    async setStatus(executionId, status) {
        if (this.activeExecutions[executionId] === undefined) {
            n8n_workflow_1.LoggerProxy.debug(`There is no active execution with id "${executionId}", can't update status to ${status}.`);
            return;
        }
        this.activeExecutions[executionId].status = status;
    }
    getStatus(executionId) {
        if (this.activeExecutions[executionId] === undefined) {
            return 'unknown';
        }
        return this.activeExecutions[executionId].status;
    }
};
ActiveExecutions = __decorate([
    (0, typedi_1.Service)()
], ActiveExecutions);
exports.ActiveExecutions = ActiveExecutions;
//# sourceMappingURL=ActiveExecutions.js.map