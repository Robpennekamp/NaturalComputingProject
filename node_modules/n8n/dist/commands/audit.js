"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityAudit = void 0;
const command_1 = require("@oclif/command");
const audit_1 = require("../audit");
const constants_1 = require("../audit/constants");
const config_1 = __importDefault(require("../config"));
const BaseCommand_1 = require("./BaseCommand");
const typedi_1 = require("typedi");
const InternalHooks_1 = require("../InternalHooks");
class SecurityAudit extends BaseCommand_1.BaseCommand {
    async run() {
        var _a, _b;
        const { flags: auditFlags } = this.parse(SecurityAudit);
        const categories = (_b = (_a = auditFlags.categories) === null || _a === void 0 ? void 0 : _a.split(',').filter((c) => c !== '')) !== null && _b !== void 0 ? _b : constants_1.RISK_CATEGORIES;
        const invalidCategories = categories.filter((c) => !constants_1.RISK_CATEGORIES.includes(c));
        if (invalidCategories.length > 0) {
            const message = invalidCategories.length > 1
                ? `Invalid categories received: ${invalidCategories.join(', ')}`
                : `Invalid category received: ${invalidCategories[0]}`;
            const hint = `Valid categories are: ${constants_1.RISK_CATEGORIES.join(', ')}`;
            throw new Error([message, hint].join('. '));
        }
        const result = await (0, audit_1.audit)(categories, auditFlags['days-abandoned-workflow']);
        if (Array.isArray(result) && result.length === 0) {
            this.logger.info('No security issues found');
        }
        else {
            process.stdout.write(JSON.stringify(result, null, 2));
        }
        void typedi_1.Container.get(InternalHooks_1.InternalHooks).onAuditGeneratedViaCli();
    }
    async catch(error) {
        this.logger.error('Failed to generate security audit');
        this.logger.error(error.message);
    }
}
SecurityAudit.description = 'Generate a security audit report for this n8n instance';
SecurityAudit.examples = [
    '$ n8n audit',
    '$ n8n audit --categories=database,credentials',
    '$ n8n audit --days-abandoned-workflow=10',
];
SecurityAudit.flags = {
    help: command_1.flags.help({ char: 'h' }),
    categories: command_1.flags.string({
        default: constants_1.RISK_CATEGORIES.join(','),
        description: 'Comma-separated list of categories to include in the audit',
    }),
    'days-abandoned-workflow': command_1.flags.integer({
        default: config_1.default.getEnv('security.audit.daysAbandonedWorkflow'),
        description: 'Days for a workflow to be considered abandoned if not executed',
    }),
};
exports.SecurityAudit = SecurityAudit;
//# sourceMappingURL=audit.js.map