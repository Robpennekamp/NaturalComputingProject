"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListWorkflowCommand = void 0;
const command_1 = require("@oclif/command");
const Db = __importStar(require("../../Db"));
const BaseCommand_1 = require("../BaseCommand");
class ListWorkflowCommand extends BaseCommand_1.BaseCommand {
    async run() {
        const { flags } = this.parse(ListWorkflowCommand);
        if (flags.active !== undefined && !['true', 'false'].includes(flags.active)) {
            this.error('The --active flag has to be passed using true or false');
        }
        const findQuery = {};
        if (flags.active !== undefined) {
            findQuery.active = flags.active === 'true';
        }
        const workflows = await Db.collections.Workflow.findBy(findQuery);
        if (flags.onlyId) {
            workflows.forEach((workflow) => this.logger.info(workflow.id));
        }
        else {
            workflows.forEach((workflow) => this.logger.info(`${workflow.id}|${workflow.name}`));
        }
    }
    async catch(error) {
        this.logger.error('\nGOT ERROR');
        this.logger.error('====================================');
        this.logger.error(error.message);
        this.logger.error(error.stack);
    }
}
ListWorkflowCommand.description = '\nList workflows';
ListWorkflowCommand.examples = [
    '$ n8n list:workflow',
    '$ n8n list:workflow --active=true --onlyId',
    '$ n8n list:workflow --active=false',
];
ListWorkflowCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    active: command_1.flags.string({
        description: 'Filters workflows by active status. Can be true or false',
    }),
    onlyId: command_1.flags.boolean({
        description: 'Outputs workflow IDs only, one per line.',
    }),
};
exports.ListWorkflowCommand = ListWorkflowCommand;
//# sourceMappingURL=workflow.js.map