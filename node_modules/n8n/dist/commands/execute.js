"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Execute = void 0;
const fs_1 = require("fs");
const command_1 = require("@oclif/command");
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const ActiveExecutions_1 = require("../ActiveExecutions");
const Db = __importStar(require("../Db"));
const WorkflowRunner_1 = require("../WorkflowRunner");
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const utils_1 = require("../utils");
const events_1 = require("../events");
const BaseCommand_1 = require("./BaseCommand");
const typedi_1 = require("typedi");
class Execute extends BaseCommand_1.BaseCommand {
    async init() {
        await super.init();
        await this.initBinaryManager();
        await this.initExternalHooks();
        (0, events_1.initEvents)();
    }
    async run() {
        var _a;
        const { flags } = this.parse(Execute);
        if (!flags.id && !flags.file) {
            this.logger.info('Either option "--id" or "--file" have to be set!');
            return;
        }
        if (flags.id && flags.file) {
            this.logger.info('Either "id" or "file" can be set never both!');
            return;
        }
        let workflowId;
        let workflowData = null;
        if (flags.file) {
            try {
                workflowData = JSON.parse(await fs_1.promises.readFile(flags.file, 'utf8'));
            }
            catch (error) {
                if (error.code === 'ENOENT') {
                    this.logger.info(`The file "${flags.file}" could not be found.`);
                    return;
                }
                throw error;
            }
            if (workflowData === null ||
                workflowData.nodes === undefined ||
                workflowData.connections === undefined) {
                this.logger.info(`The file "${flags.file}" does not contain valid workflow data.`);
                return;
            }
            workflowId = (_a = workflowData.id) !== null && _a !== void 0 ? _a : n8n_core_1.PLACEHOLDER_EMPTY_WORKFLOW_ID;
        }
        if (flags.id) {
            workflowId = flags.id;
            workflowData = await Db.collections.Workflow.findOneBy({ id: workflowId });
            if (workflowData === null) {
                this.logger.info(`The workflow with the id "${workflowId}" does not exist.`);
                process.exit(1);
            }
        }
        if (!workflowData) {
            throw new Error('Failed to retrieve workflow data for requested workflow');
        }
        if (!(0, utils_1.isWorkflowIdValid)(workflowId)) {
            workflowId = undefined;
        }
        const startingNode = (0, utils_1.findCliWorkflowStart)(workflowData.nodes);
        const user = await (0, UserManagementHelper_1.getInstanceOwner)();
        const runData = {
            executionMode: 'cli',
            startNodes: [startingNode.name],
            workflowData,
            userId: user.id,
        };
        const workflowRunner = new WorkflowRunner_1.WorkflowRunner();
        const executionId = await workflowRunner.run(runData);
        const activeExecutions = typedi_1.Container.get(ActiveExecutions_1.ActiveExecutions);
        const data = await activeExecutions.getPostExecutePromise(executionId);
        if (data === undefined) {
            throw new Error('Workflow did not return any data!');
        }
        if (data.data.resultData.error) {
            this.logger.info('Execution was NOT successful. See log message for details.');
            this.logger.info('Execution error:');
            this.logger.info('====================================');
            this.logger.info(JSON.stringify(data, null, 2));
            const { error } = data.data.resultData;
            throw {
                ...error,
                stack: error.stack,
            };
        }
        if (flags.rawOutput === undefined) {
            this.log('Execution was successful:');
            this.log('====================================');
        }
        this.log(JSON.stringify(data, null, 2));
    }
    async catch(error) {
        this.logger.error('Error executing workflow. See log messages for details.');
        this.logger.error('\nExecution error:');
        this.logger.info('====================================');
        this.logger.error(error.message);
        if (error instanceof n8n_workflow_1.ExecutionBaseError)
            this.logger.error(error.description);
        this.logger.error(error.stack);
    }
}
Execute.description = '\nExecutes a given workflow';
Execute.examples = ['$ n8n execute --id=5', '$ n8n execute --file=workflow.json'];
Execute.flags = {
    help: command_1.flags.help({ char: 'h' }),
    file: command_1.flags.string({
        description: 'path to a workflow file to execute',
    }),
    id: command_1.flags.string({
        description: 'id of the workflow to execute',
    }),
    rawOutput: command_1.flags.boolean({
        description: 'Outputs only JSON data, with no other text',
    }),
};
exports.Execute = Execute;
//# sourceMappingURL=execute.js.map