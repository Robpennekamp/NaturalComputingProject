"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reset = void 0;
const Db = __importStar(require("../../Db"));
const constants_1 = require("../../Ldap/constants");
const typeorm_1 = require("typeorm");
const BaseCommand_1 = require("../BaseCommand");
class Reset extends BaseCommand_1.BaseCommand {
    async run() {
        const { AuthIdentity, AuthProviderSyncHistory, Settings, User } = Db.collections;
        const ldapIdentities = await AuthIdentity.find({
            where: { providerType: 'ldap' },
            select: ['userId'],
        });
        await AuthProviderSyncHistory.delete({ providerType: 'ldap' });
        await AuthIdentity.delete({ providerType: 'ldap' });
        await User.delete({ id: (0, typeorm_1.In)(ldapIdentities.map((i) => i.userId)) });
        await Settings.delete({ key: constants_1.LDAP_FEATURE_NAME });
        await Settings.insert({
            key: constants_1.LDAP_FEATURE_NAME,
            value: JSON.stringify(constants_1.LDAP_DEFAULT_CONFIGURATION),
            loadOnStartup: true,
        });
        this.logger.info('Successfully reset the database to default ldap state.');
    }
    async catch(error) {
        this.logger.error('Error resetting database. See log messages for details.');
        this.logger.error(error.message);
    }
}
Reset.description = '\nResets the database to the default ldap state';
exports.Reset = Reset;
//# sourceMappingURL=reset.js.map