"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbRevertMigrationCommand = void 0;
const command_1 = require("@oclif/command");
const typeorm_1 = require("typeorm");
const n8n_workflow_1 = require("n8n-workflow");
const Logger_1 = require("../../Logger");
const Db_1 = require("../../Db");
const config_1 = __importDefault(require("../../config"));
class DbRevertMigrationCommand extends command_1.Command {
    constructor() {
        super(...arguments);
        this.logger = n8n_workflow_1.LoggerProxy.init((0, Logger_1.getLogger)());
    }
    async init() {
        this.parse(DbRevertMigrationCommand);
    }
    async run() {
        const dbType = config_1.default.getEnv('database.type');
        const connectionOptions = {
            ...(0, Db_1.getConnectionOptions)(dbType),
            subscribers: [],
            synchronize: false,
            migrationsRun: false,
            dropSchema: false,
            logging: ['query', 'error', 'schema'],
        };
        this.connection = new typeorm_1.DataSource(connectionOptions);
        await this.connection.initialize();
        await this.connection.undoLastMigration();
        await this.connection.destroy();
    }
    async catch(error) {
        this.logger.error('Error reverting last migration. See log messages for details.');
        this.logger.error(error.message);
    }
    async finally(error) {
        var _a;
        if ((_a = this.connection) === null || _a === void 0 ? void 0 : _a.isInitialized)
            await this.connection.destroy();
        this.exit(error ? 1 : 0);
    }
}
DbRevertMigrationCommand.description = 'Revert last database migration';
DbRevertMigrationCommand.examples = ['$ n8n db:revert'];
DbRevertMigrationCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
};
exports.DbRevertMigrationCommand = DbRevertMigrationCommand;
//# sourceMappingURL=revert.js.map