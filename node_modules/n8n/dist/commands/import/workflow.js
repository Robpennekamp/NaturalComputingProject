"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportWorkflowsCommand = void 0;
const command_1 = require("@oclif/command");
const n8n_workflow_1 = require("n8n-workflow");
const fs_1 = __importDefault(require("fs"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const typedi_1 = require("typedi");
const uuid_1 = require("uuid");
const config_1 = __importDefault(require("../../config"));
const Db = __importStar(require("../../Db"));
const SharedWorkflow_1 = require("../../databases/entities/SharedWorkflow");
const WorkflowEntity_1 = require("../../databases/entities/WorkflowEntity");
const TagHelpers_1 = require("../../TagHelpers");
const repositories_1 = require("../../databases/repositories");
const commandHelpers_1 = require("../../databases/utils/commandHelpers");
const WorkflowHelpers_1 = require("../../WorkflowHelpers");
const BaseCommand_1 = require("../BaseCommand");
function assertHasWorkflowsToImport(workflows) {
    if (!Array.isArray(workflows)) {
        throw new Error('File does not seem to contain workflows. Make sure the workflows are contained in an array.');
    }
    for (const workflow of workflows) {
        if (typeof workflow !== 'object' ||
            !Object.prototype.hasOwnProperty.call(workflow, 'nodes') ||
            !Object.prototype.hasOwnProperty.call(workflow, 'connections')) {
            throw new Error('File does not seem to contain valid workflows.');
        }
    }
}
class ImportWorkflowsCommand extends BaseCommand_1.BaseCommand {
    async init() {
        (0, commandHelpers_1.disableAutoGeneratedIds)(WorkflowEntity_1.WorkflowEntity);
        await super.init();
    }
    async run() {
        const { flags } = this.parse(ImportWorkflowsCommand);
        if (!flags.input) {
            this.logger.info('An input file or directory with --input must be provided');
            return;
        }
        if (flags.separate) {
            if (fs_1.default.existsSync(flags.input)) {
                if (!fs_1.default.lstatSync(flags.input).isDirectory()) {
                    this.logger.info('The argument to --input must be a directory');
                    return;
                }
            }
        }
        await this.initOwnerWorkflowRole();
        const user = flags.userId ? await this.getAssignee(flags.userId) : await this.getOwner();
        const credentials = await Db.collections.Credentials.find();
        const tags = await Db.collections.Tag.find();
        let totalImported = 0;
        if (flags.separate) {
            let { input: inputPath } = flags;
            if (process.platform === 'win32') {
                inputPath = inputPath.replace(/\\/g, '/');
            }
            const files = await (0, fast_glob_1.default)('*.json', {
                cwd: inputPath,
                absolute: true,
            });
            totalImported = files.length;
            this.logger.info(`Importing ${totalImported} workflows...`);
            await Db.getConnection().transaction(async (transactionManager) => {
                this.transactionManager = transactionManager;
                for (const file of files) {
                    const workflow = (0, n8n_workflow_1.jsonParse)(fs_1.default.readFileSync(file, { encoding: 'utf8' }));
                    if (credentials.length > 0) {
                        workflow.nodes.forEach((node) => {
                            this.transformCredentials(node, credentials);
                            if (!node.id) {
                                node.id = (0, uuid_1.v4)();
                            }
                        });
                    }
                    if (Object.prototype.hasOwnProperty.call(workflow, 'tags')) {
                        await (0, TagHelpers_1.setTagsForImport)(transactionManager, workflow, tags);
                    }
                    if (workflow.active) {
                        this.logger.info(`Deactivating workflow "${workflow.name}" during import, remember to activate it later.`);
                        workflow.active = false;
                    }
                    await this.storeWorkflow(workflow, user);
                }
            });
            this.reportSuccess(totalImported);
            process.exit();
        }
        const workflows = (0, n8n_workflow_1.jsonParse)(fs_1.default.readFileSync(flags.input, { encoding: 'utf8' }));
        assertHasWorkflowsToImport(workflows);
        totalImported = workflows.length;
        await Db.getConnection().transaction(async (transactionManager) => {
            this.transactionManager = transactionManager;
            for (const workflow of workflows) {
                let oldCredentialFormat = false;
                if (credentials.length > 0) {
                    workflow.nodes.forEach((node) => {
                        var _a;
                        this.transformCredentials(node, credentials);
                        if (!node.id) {
                            node.id = (0, uuid_1.v4)();
                        }
                        if (!((_a = node.credentials) === null || _a === void 0 ? void 0 : _a.id)) {
                            oldCredentialFormat = true;
                        }
                    });
                }
                if (oldCredentialFormat) {
                    try {
                        await (0, WorkflowHelpers_1.replaceInvalidCredentials)(workflow);
                    }
                    catch (error) {
                        this.logger.error('Failed to replace invalid credential', error);
                    }
                }
                if (Object.prototype.hasOwnProperty.call(workflow, 'tags')) {
                    await (0, TagHelpers_1.setTagsForImport)(transactionManager, workflow, tags);
                }
                if (workflow.active) {
                    this.logger.info(`Deactivating workflow "${workflow.name}" during import, remember to activate it later.`);
                    workflow.active = false;
                }
                await this.storeWorkflow(workflow, user);
            }
        });
        this.reportSuccess(totalImported);
    }
    async catch(error) {
        this.logger.error('An error occurred while importing workflows. See log messages for details.');
        this.logger.error(error.message);
    }
    reportSuccess(total) {
        this.logger.info(`Successfully imported ${total} ${total === 1 ? 'workflow.' : 'workflows.'}`);
    }
    async initOwnerWorkflowRole() {
        const ownerWorkflowRole = await typedi_1.Container.get(repositories_1.RoleRepository).findWorkflowOwnerRole();
        if (!ownerWorkflowRole) {
            throw new Error(`Failed to find owner workflow role. ${BaseCommand_1.UM_FIX_INSTRUCTION}`);
        }
        this.ownerWorkflowRole = ownerWorkflowRole;
    }
    async storeWorkflow(workflow, user) {
        const result = await this.transactionManager.upsert(WorkflowEntity_1.WorkflowEntity, workflow, ['id']);
        await this.transactionManager.upsert(SharedWorkflow_1.SharedWorkflow, {
            workflowId: result.identifiers[0].id,
            userId: user.id,
            roleId: this.ownerWorkflowRole.id,
        }, ['workflowId', 'userId']);
        if (config_1.default.getEnv('database.type') === 'postgresdb') {
            const tablePrefix = config_1.default.getEnv('database.tablePrefix');
            await this.transactionManager.query(`SELECT setval('${tablePrefix}workflow_entity_id_seq', (SELECT MAX(id) from "${tablePrefix}workflow_entity"))`);
        }
    }
    async getOwner() {
        const ownerGlobalRole = await typedi_1.Container.get(repositories_1.RoleRepository).findGlobalOwnerRole();
        const owner = ownerGlobalRole &&
            (await Db.collections.User.findOneBy({ globalRoleId: ownerGlobalRole === null || ownerGlobalRole === void 0 ? void 0 : ownerGlobalRole.id }));
        if (!owner) {
            throw new Error(`Failed to find owner. ${BaseCommand_1.UM_FIX_INSTRUCTION}`);
        }
        return owner;
    }
    async getAssignee(userId) {
        const user = await Db.collections.User.findOneBy({ id: userId });
        if (!user) {
            throw new Error(`Failed to find user with ID ${userId}`);
        }
        return user;
    }
    transformCredentials(node, credentialsEntities) {
        if (node.credentials) {
            const allNodeCredentials = Object.entries(node.credentials);
            for (const [type, name] of allNodeCredentials) {
                if (typeof name === 'string') {
                    const nodeCredentials = {
                        id: null,
                        name,
                    };
                    const matchingCredentials = credentialsEntities.filter((credentials) => credentials.name === name && credentials.type === type);
                    if (matchingCredentials.length === 1) {
                        nodeCredentials.id = matchingCredentials[0].id;
                    }
                    node.credentials[type] = nodeCredentials;
                }
            }
        }
    }
}
ImportWorkflowsCommand.description = 'Import workflows';
ImportWorkflowsCommand.examples = [
    '$ n8n import:workflow --input=file.json',
    '$ n8n import:workflow --separate --input=backups/latest/',
    '$ n8n import:workflow --input=file.json --userId=1d64c3d2-85fe-4a83-a649-e446b07b3aae',
    '$ n8n import:workflow --separate --input=backups/latest/ --userId=1d64c3d2-85fe-4a83-a649-e446b07b3aae',
];
ImportWorkflowsCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    input: command_1.flags.string({
        char: 'i',
        description: 'Input file name or directory if --separate is used',
    }),
    separate: command_1.flags.boolean({
        description: 'Imports *.json files from directory provided by --input',
    }),
    userId: command_1.flags.string({
        description: 'The ID of the user to assign the imported workflows to',
    }),
};
exports.ImportWorkflowsCommand = ImportWorkflowsCommand;
//# sourceMappingURL=workflow.js.map