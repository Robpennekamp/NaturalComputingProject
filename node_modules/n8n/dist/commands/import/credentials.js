"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportCredentialsCommand = void 0;
const command_1 = require("@oclif/command");
const n8n_core_1 = require("n8n-core");
const fs_1 = __importDefault(require("fs"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const typedi_1 = require("typedi");
const config_1 = __importDefault(require("../../config"));
const Db = __importStar(require("../../Db"));
const SharedCredentials_1 = require("../../databases/entities/SharedCredentials");
const CredentialsEntity_1 = require("../../databases/entities/CredentialsEntity");
const repositories_1 = require("../../databases/repositories");
const commandHelpers_1 = require("../../databases/utils/commandHelpers");
const BaseCommand_1 = require("../BaseCommand");
const n8n_workflow_1 = require("n8n-workflow");
class ImportCredentialsCommand extends BaseCommand_1.BaseCommand {
    async init() {
        (0, commandHelpers_1.disableAutoGeneratedIds)(CredentialsEntity_1.CredentialsEntity);
        await super.init();
    }
    async run() {
        const { flags } = this.parse(ImportCredentialsCommand);
        if (!flags.input) {
            this.logger.info('An input file or directory with --input must be provided');
            return;
        }
        if (flags.separate) {
            if (fs_1.default.existsSync(flags.input)) {
                if (!fs_1.default.lstatSync(flags.input).isDirectory()) {
                    this.logger.info('The argument to --input must be a directory');
                    return;
                }
            }
        }
        let totalImported = 0;
        await this.initOwnerCredentialRole();
        const user = flags.userId ? await this.getAssignee(flags.userId) : await this.getOwner();
        const encryptionKey = this.userSettings.encryptionKey;
        if (flags.separate) {
            let { input: inputPath } = flags;
            if (process.platform === 'win32') {
                inputPath = inputPath.replace(/\\/g, '/');
            }
            const files = await (0, fast_glob_1.default)('*.json', {
                cwd: inputPath,
                absolute: true,
            });
            totalImported = files.length;
            await Db.getConnection().transaction(async (transactionManager) => {
                this.transactionManager = transactionManager;
                for (const file of files) {
                    const credential = (0, n8n_workflow_1.jsonParse)(fs_1.default.readFileSync(file, { encoding: 'utf8' }));
                    if (typeof credential.data === 'object') {
                        n8n_core_1.Credentials.prototype.setData.call(credential, credential.data, encryptionKey);
                    }
                    await this.storeCredential(credential, user);
                }
            });
            this.reportSuccess(totalImported);
            return;
        }
        const credentials = (0, n8n_workflow_1.jsonParse)(fs_1.default.readFileSync(flags.input, { encoding: 'utf8' }));
        totalImported = credentials.length;
        if (!Array.isArray(credentials)) {
            throw new Error('File does not seem to contain credentials. Make sure the credentials are contained in an array.');
        }
        await Db.getConnection().transaction(async (transactionManager) => {
            this.transactionManager = transactionManager;
            for (const credential of credentials) {
                if (typeof credential.data === 'object') {
                    n8n_core_1.Credentials.prototype.setData.call(credential, credential.data, encryptionKey);
                }
                await this.storeCredential(credential, user);
            }
        });
        this.reportSuccess(totalImported);
    }
    async catch(error) {
        this.logger.error('An error occurred while importing credentials. See log messages for details.');
        this.logger.error(error.message);
    }
    reportSuccess(total) {
        this.logger.info(`Successfully imported ${total} ${total === 1 ? 'credential.' : 'credentials.'}`);
    }
    async initOwnerCredentialRole() {
        const ownerCredentialRole = await typedi_1.Container.get(repositories_1.RoleRepository).findCredentialOwnerRole();
        if (!ownerCredentialRole) {
            throw new Error(`Failed to find owner credential role. ${BaseCommand_1.UM_FIX_INSTRUCTION}`);
        }
        this.ownerCredentialRole = ownerCredentialRole;
    }
    async storeCredential(credential, user) {
        const result = await this.transactionManager.upsert(CredentialsEntity_1.CredentialsEntity, credential, ['id']);
        await this.transactionManager.upsert(SharedCredentials_1.SharedCredentials, {
            credentialsId: result.identifiers[0].id,
            userId: user.id,
            roleId: this.ownerCredentialRole.id,
        }, ['credentialsId', 'userId']);
        if (config_1.default.getEnv('database.type') === 'postgresdb') {
            const tablePrefix = config_1.default.getEnv('database.tablePrefix');
            await this.transactionManager.query(`SELECT setval('${tablePrefix}credentials_entity_id_seq', (SELECT MAX(id) from ${tablePrefix}credentials_entity))`);
        }
    }
    async getOwner() {
        const ownerGlobalRole = await typedi_1.Container.get(repositories_1.RoleRepository).findGlobalOwnerRole();
        const owner = ownerGlobalRole &&
            (await Db.collections.User.findOneBy({ globalRoleId: ownerGlobalRole.id }));
        if (!owner) {
            throw new Error(`Failed to find owner. ${BaseCommand_1.UM_FIX_INSTRUCTION}`);
        }
        return owner;
    }
    async getAssignee(userId) {
        const user = await Db.collections.User.findOneBy({ id: userId });
        if (!user) {
            throw new Error(`Failed to find user with ID ${userId}`);
        }
        return user;
    }
}
ImportCredentialsCommand.description = 'Import credentials';
ImportCredentialsCommand.examples = [
    '$ n8n import:credentials --input=file.json',
    '$ n8n import:credentials --separate --input=backups/latest/',
    '$ n8n import:credentials --input=file.json --userId=1d64c3d2-85fe-4a83-a649-e446b07b3aae',
    '$ n8n import:credentials --separate --input=backups/latest/ --userId=1d64c3d2-85fe-4a83-a649-e446b07b3aae',
];
ImportCredentialsCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    input: command_1.flags.string({
        char: 'i',
        description: 'Input file name or directory if --separate is used',
    }),
    separate: command_1.flags.boolean({
        description: 'Imports *.json files from directory provided by --input',
    }),
    userId: command_1.flags.string({
        description: 'The ID of the user to assign the imported credentials to',
    }),
};
exports.ImportCredentialsCommand = ImportCredentialsCommand;
//# sourceMappingURL=credentials.js.map