"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateWorkflowCommand = void 0;
const command_1 = require("@oclif/command");
const Db = __importStar(require("../../Db"));
const BaseCommand_1 = require("../BaseCommand");
class UpdateWorkflowCommand extends BaseCommand_1.BaseCommand {
    async run() {
        const { flags } = this.parse(UpdateWorkflowCommand);
        if (!flags.all && !flags.id) {
            console.info('Either option "--all" or "--id" have to be set!');
            return;
        }
        if (flags.all && flags.id) {
            console.info('Either something else on top should be "--all" or "--id" can be set never both!');
            return;
        }
        const updateQuery = {};
        if (flags.active === undefined) {
            console.info('No update flag like "--active=true" has been set!');
            return;
        }
        if (!['false', 'true'].includes(flags.active)) {
            console.info('Valid values for flag "--active" are only "false" or "true"!');
            return;
        }
        updateQuery.active = flags.active === 'true';
        const findQuery = {};
        if (flags.id) {
            this.logger.info(`Deactivating workflow with ID: ${flags.id}`);
            findQuery.id = flags.id;
        }
        else {
            this.logger.info('Deactivating all workflows');
            findQuery.active = true;
        }
        await Db.collections.Workflow.update(findQuery, updateQuery);
        this.logger.info('Done');
    }
    async catch(error) {
        this.logger.error('Error updating database. See log messages for details.');
        this.logger.error('\nGOT ERROR');
        this.logger.error('====================================');
        this.logger.error(error.message);
        this.logger.error(error.stack);
    }
}
UpdateWorkflowCommand.description = 'Update workflows';
UpdateWorkflowCommand.examples = [
    '$ n8n update:workflow --all --active=false',
    '$ n8n update:workflow --id=5 --active=true',
];
UpdateWorkflowCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    active: command_1.flags.string({
        description: 'Active state the workflow/s should be set to',
    }),
    all: command_1.flags.boolean({
        description: 'Operate on all workflows',
    }),
    id: command_1.flags.string({
        description: 'The ID of the workflow to operate on',
    }),
};
exports.UpdateWorkflowCommand = UpdateWorkflowCommand;
//# sourceMappingURL=workflow.js.map