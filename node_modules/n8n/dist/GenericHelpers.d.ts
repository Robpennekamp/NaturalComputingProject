import type express from 'express';
import type { ExecutionError, INode, Workflow, WorkflowExecuteMode } from 'n8n-workflow';
import type { IWorkflowDb } from './Interfaces';
import type { WorkflowEntity } from './databases/entities/WorkflowEntity';
import type { CredentialsEntity } from './databases/entities/CredentialsEntity';
import type { TagEntity } from './databases/entities/TagEntity';
import type { User } from './databases/entities/User';
import type { UserUpdatePayload } from './requests';
export declare function getBaseUrl(): string;
export declare function getSessionId(req: express.Request): string | undefined;
export declare function generateUniqueName(requestedName: string, entityType: 'workflow' | 'credentials'): Promise<string>;
export declare function validateEntity(entity: WorkflowEntity | CredentialsEntity | TagEntity | User | UserUpdatePayload): Promise<void>;
export declare function createErrorExecution(error: ExecutionError, node: INode, workflowData: IWorkflowDb, workflow: Workflow, mode: WorkflowExecuteMode): Promise<void>;
export declare const DEFAULT_EXECUTIONS_GET_ALL_LIMIT = 20;
