"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserService = void 0;
const typeorm_1 = require("typeorm");
const Db = __importStar(require("../Db"));
const User_1 = require("../databases/entities/User");
class UserService {
    static async get(where) {
        return Db.collections.User.findOne({
            relations: ['globalRole'],
            where,
        });
    }
    static async getByIds(transaction, ids) {
        return transaction.find(User_1.User, { where: { id: (0, typeorm_1.In)(ids) } });
    }
    static async updateUserSettings(id, userSettings) {
        const { settings: currentSettings } = await Db.collections.User.findOneOrFail({
            where: { id },
        });
        return Db.collections.User.update(id, { settings: { ...currentSettings, ...userSettings } });
    }
}
exports.UserService = UserService;
//# sourceMappingURL=user.service.js.map