import type { ICredentialDataDecryptedObject, ICredentialsDecrypted, INodeCredentialTestResult } from 'n8n-workflow';
import type { FindManyOptions, FindOptionsWhere } from 'typeorm';
import type { ICredentialsDb } from '../Interfaces';
import { CredentialsEntity } from '../databases/entities/CredentialsEntity';
import { SharedCredentials } from '../databases/entities/SharedCredentials';
import type { User } from '../databases/entities/User';
import type { CredentialRequest } from '../requests';
export declare class CredentialsService {
    static get(where: FindOptionsWhere<ICredentialsDb>, options?: {
        relations: string[];
    }): Promise<ICredentialsDb | null>;
    static getAll(user: User, options?: {
        relations?: string[];
        roles?: string[];
        disableGlobalRole?: boolean;
    }): Promise<ICredentialsDb[]>;
    static getMany(filter: FindManyOptions<ICredentialsDb>): Promise<ICredentialsDb[]>;
    static getSharing(user: User, credentialId: string, relations?: string[], { allowGlobalOwner }?: {
        allowGlobalOwner: boolean;
    }): Promise<SharedCredentials | null>;
    static prepareCreateData(data: CredentialRequest.CredentialProperties): Promise<CredentialsEntity>;
    static prepareUpdateData(data: CredentialRequest.CredentialProperties, decryptedData: ICredentialDataDecryptedObject): Promise<CredentialsEntity>;
    static createEncryptedData(encryptionKey: string, credentialId: string | null, data: CredentialsEntity): ICredentialsDb;
    static getEncryptionKey(): Promise<string>;
    static decrypt(encryptionKey: string, credential: CredentialsEntity): Promise<ICredentialDataDecryptedObject>;
    static update(credentialId: string, newCredentialData: ICredentialsDb): Promise<ICredentialsDb | null>;
    static save(credential: CredentialsEntity, encryptedData: ICredentialsDb, user: User): Promise<CredentialsEntity>;
    static delete(credentials: CredentialsEntity): Promise<void>;
    static test(user: User, encryptionKey: string, credentials: ICredentialsDecrypted): Promise<INodeCredentialTestResult>;
    static redact(data: ICredentialDataDecryptedObject, credential: CredentialsEntity): ICredentialDataDecryptedObject;
    private static unredactRestoreValues;
    static unredact(redactedData: ICredentialDataDecryptedObject, savedData: ICredentialDataDecryptedObject): ICredentialDataDecryptedObject;
}
