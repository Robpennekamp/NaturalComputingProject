import type { DeleteResult, EntityManager } from 'typeorm';
import { CredentialsEntity } from '../databases/entities/CredentialsEntity';
import { SharedCredentials } from '../databases/entities/SharedCredentials';
import type { User } from '../databases/entities/User';
import { CredentialsService } from './credentials.service';
import type { CredentialWithSharings } from './credentials.types';
export declare class EECredentialsService extends CredentialsService {
    static isOwned(user: User, credentialId: string): Promise<{
        ownsCredential: boolean;
        credential?: CredentialsEntity;
    }>;
    static getSharing(user: User, credentialId: string, relations?: string[], { allowGlobalOwner }?: {
        allowGlobalOwner: boolean;
    }): Promise<SharedCredentials | null>;
    static getSharings(transaction: EntityManager, credentialId: string): Promise<SharedCredentials[]>;
    static pruneSharings(transaction: EntityManager, credentialId: string, userIds: string[]): Promise<DeleteResult>;
    static share(transaction: EntityManager, credential: CredentialsEntity, shareWithIds: string[]): Promise<SharedCredentials[]>;
    static addOwnerAndSharings(credential: CredentialsEntity & CredentialWithSharings): CredentialsEntity & CredentialWithSharings;
}
