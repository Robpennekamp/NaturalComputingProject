"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EECredentialsService = void 0;
const typeorm_1 = require("typeorm");
const Db = __importStar(require("../Db"));
const role_service_1 = require("../role/role.service");
const CredentialsEntity_1 = require("../databases/entities/CredentialsEntity");
const SharedCredentials_1 = require("../databases/entities/SharedCredentials");
const user_service_1 = require("../user/user.service");
const credentials_service_1 = require("./credentials.service");
class EECredentialsService extends credentials_service_1.CredentialsService {
    static async isOwned(user, credentialId) {
        const sharing = await this.getSharing(user, credentialId, ['credentials', 'role'], {
            allowGlobalOwner: false,
        });
        if (!sharing || sharing.role.name !== 'owner')
            return { ownsCredential: false };
        const { credentials: credential } = sharing;
        return { ownsCredential: true, credential };
    }
    static async getSharing(user, credentialId, relations = ['credentials'], { allowGlobalOwner } = { allowGlobalOwner: true }) {
        const where = { credentialsId: credentialId };
        if (!allowGlobalOwner || user.globalRole.name !== 'owner') {
            where.userId = user.id;
        }
        return Db.collections.SharedCredentials.findOne({
            where,
            relations,
        });
    }
    static async getSharings(transaction, credentialId) {
        var _a;
        const credential = await transaction.findOne(CredentialsEntity_1.CredentialsEntity, {
            where: { id: credentialId },
            relations: ['shared'],
        });
        return (_a = credential === null || credential === void 0 ? void 0 : credential.shared) !== null && _a !== void 0 ? _a : [];
    }
    static async pruneSharings(transaction, credentialId, userIds) {
        const conditions = {
            credentialsId: credentialId,
            userId: (0, typeorm_1.Not)((0, typeorm_1.In)(userIds)),
        };
        return transaction.delete(SharedCredentials_1.SharedCredentials, conditions);
    }
    static async share(transaction, credential, shareWithIds) {
        const [users, role] = await Promise.all([
            user_service_1.UserService.getByIds(transaction, shareWithIds),
            role_service_1.RoleService.trxGet(transaction, { scope: 'credential', name: 'user' }),
        ]);
        const newSharedCredentials = users
            .filter((user) => !user.isPending)
            .map((user) => Db.collections.SharedCredentials.create({
            credentialsId: credential.id,
            userId: user.id,
            roleId: role === null || role === void 0 ? void 0 : role.id,
        }));
        return transaction.save(newSharedCredentials);
    }
    static addOwnerAndSharings(credential) {
        var _a;
        credential.ownedBy = null;
        credential.sharedWith = [];
        (_a = credential.shared) === null || _a === void 0 ? void 0 : _a.forEach(({ user, role }) => {
            var _a;
            const { id, email, firstName, lastName } = user;
            if (role.name === 'owner') {
                credential.ownedBy = { id, email, firstName, lastName };
                return;
            }
            (_a = credential.sharedWith) === null || _a === void 0 ? void 0 : _a.push({ id, email, firstName, lastName });
        });
        delete credential.shared;
        return credential;
    }
}
exports.EECredentialsService = EECredentialsService;
//# sourceMappingURL=credentials.service.ee.js.map