"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EECredentialsController = void 0;
const express_1 = __importDefault(require("express"));
const n8n_workflow_1 = require("n8n-workflow");
const Db = __importStar(require("../Db"));
const ResponseHelper = __importStar(require("../ResponseHelper"));
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const credentials_service_ee_1 = require("./credentials.service.ee");
const typedi_1 = require("typedi");
const InternalHooks_1 = require("../InternalHooks");
exports.EECredentialsController = express_1.default.Router();
exports.EECredentialsController.use((req, res, next) => {
    if (!(0, UserManagementHelper_1.isSharingEnabled)()) {
        next('router');
        return;
    }
    next();
});
exports.EECredentialsController.get('/', ResponseHelper.send(async (req) => {
    try {
        const allCredentials = await credentials_service_ee_1.EECredentialsService.getAll(req.user, {
            relations: ['shared', 'shared.role', 'shared.user'],
        });
        return allCredentials.map((credential) => credentials_service_ee_1.EECredentialsService.addOwnerAndSharings(credential));
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.error('Request to list credentials failed', error);
        throw error;
    }
}));
exports.EECredentialsController.get('/:id(\\d+)', (req, res, next) => (req.params.id === 'new' ? next('router') : next()), ResponseHelper.send(async (req) => {
    var _a;
    const { id: credentialId } = req.params;
    const includeDecryptedData = req.query.includeData === 'true';
    let credential = (await credentials_service_ee_1.EECredentialsService.get({ id: credentialId }, { relations: ['shared', 'shared.role', 'shared.user'] }));
    if (!credential) {
        throw new ResponseHelper.NotFoundError('Could not load the credential. If you think this is an error, ask the owner to share it with you again');
    }
    const userSharing = (_a = credential.shared) === null || _a === void 0 ? void 0 : _a.find((shared) => shared.user.id === req.user.id);
    if (!userSharing && req.user.globalRole.name !== 'owner') {
        throw new ResponseHelper.UnauthorizedError('Forbidden.');
    }
    credential = credentials_service_ee_1.EECredentialsService.addOwnerAndSharings(credential);
    if (!includeDecryptedData || !userSharing || userSharing.role.name !== 'owner') {
        const { data: _, ...rest } = credential;
        return { ...rest };
    }
    const { data: _, ...rest } = credential;
    const key = await credentials_service_ee_1.EECredentialsService.getEncryptionKey();
    const decryptedData = credentials_service_ee_1.EECredentialsService.redact(await credentials_service_ee_1.EECredentialsService.decrypt(key, credential), credential);
    return { data: decryptedData, ...rest };
}));
exports.EECredentialsController.post('/test', ResponseHelper.send(async (req) => {
    const { credentials } = req.body;
    const encryptionKey = await credentials_service_ee_1.EECredentialsService.getEncryptionKey();
    const credentialId = credentials.id;
    const { ownsCredential } = await credentials_service_ee_1.EECredentialsService.isOwned(req.user, credentialId);
    const sharing = await credentials_service_ee_1.EECredentialsService.getSharing(req.user, credentialId);
    if (!ownsCredential) {
        if (!sharing) {
            throw new ResponseHelper.UnauthorizedError('Forbidden');
        }
        const decryptedData = await credentials_service_ee_1.EECredentialsService.decrypt(encryptionKey, sharing.credentials);
        Object.assign(credentials, { data: decryptedData });
    }
    const mergedCredentials = (0, n8n_workflow_1.deepCopy)(credentials);
    if (mergedCredentials.data && (sharing === null || sharing === void 0 ? void 0 : sharing.credentials)) {
        const decryptedData = await credentials_service_ee_1.EECredentialsService.decrypt(encryptionKey, sharing.credentials);
        mergedCredentials.data = credentials_service_ee_1.EECredentialsService.unredact(mergedCredentials.data, decryptedData);
    }
    return credentials_service_ee_1.EECredentialsService.test(req.user, encryptionKey, mergedCredentials);
}));
exports.EECredentialsController.put('/:credentialId/share', ResponseHelper.send(async (req) => {
    const { credentialId } = req.params;
    const { shareWithIds } = req.body;
    if (!Array.isArray(shareWithIds) ||
        !shareWithIds.every((userId) => typeof userId === 'string')) {
        throw new ResponseHelper.BadRequestError('Bad request');
    }
    const { ownsCredential, credential } = await credentials_service_ee_1.EECredentialsService.isOwned(req.user, credentialId);
    if (!ownsCredential || !credential) {
        throw new ResponseHelper.UnauthorizedError('Forbidden');
    }
    let amountRemoved = null;
    let newShareeIds = [];
    await Db.transaction(async (trx) => {
        const { affected } = await credentials_service_ee_1.EECredentialsService.pruneSharings(trx, credentialId, [
            req.user.id,
            ...shareWithIds,
        ]);
        if (affected)
            amountRemoved = affected;
        const sharings = await credentials_service_ee_1.EECredentialsService.getSharings(trx, credentialId);
        newShareeIds = (0, UserManagementHelper_1.rightDiff)([sharings, (sharing) => sharing.userId], [shareWithIds, (shareeId) => shareeId]);
        if (newShareeIds.length) {
            await credentials_service_ee_1.EECredentialsService.share(trx, credential, newShareeIds);
        }
    });
    void typedi_1.Container.get(InternalHooks_1.InternalHooks).onUserSharedCredentials({
        user: req.user,
        credential_name: credential.name,
        credential_type: credential.type,
        credential_id: credential.id,
        user_id_sharer: req.user.id,
        user_ids_sharees_added: newShareeIds,
        sharees_removed: amountRemoved,
    });
}));
//# sourceMappingURL=credentials.controller.ee.js.map