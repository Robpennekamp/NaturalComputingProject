"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.credentialsController = void 0;
const express_1 = __importDefault(require("express"));
const n8n_workflow_1 = require("n8n-workflow");
const GenericHelpers = __importStar(require("../GenericHelpers"));
const ResponseHelper = __importStar(require("../ResponseHelper"));
const config_1 = __importDefault(require("../config"));
const Logger_1 = require("../Logger");
const credentials_controller_ee_1 = require("./credentials.controller.ee");
const credentials_service_1 = require("./credentials.service");
const typedi_1 = require("typedi");
const InternalHooks_1 = require("../InternalHooks");
exports.credentialsController = express_1.default.Router();
exports.credentialsController.use((req, res, next) => {
    try {
        n8n_workflow_1.LoggerProxy.getInstance();
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.init((0, Logger_1.getLogger)());
    }
    next();
});
exports.credentialsController.use('/', credentials_controller_ee_1.EECredentialsController);
exports.credentialsController.get('/', ResponseHelper.send(async (req) => {
    return credentials_service_1.CredentialsService.getAll(req.user, { roles: ['owner'] });
}));
exports.credentialsController.get('/new', ResponseHelper.send(async (req) => {
    const { name: newName } = req.query;
    return {
        name: await GenericHelpers.generateUniqueName(newName !== null && newName !== void 0 ? newName : config_1.default.getEnv('credentials.defaultName'), 'credentials'),
    };
}));
exports.credentialsController.get('/:id(\\d+)', ResponseHelper.send(async (req) => {
    const { id: credentialId } = req.params;
    const includeDecryptedData = req.query.includeData === 'true';
    const sharing = await credentials_service_1.CredentialsService.getSharing(req.user, credentialId, ['credentials']);
    if (!sharing) {
        throw new ResponseHelper.NotFoundError(`Credential with ID "${credentialId}" could not be found.`);
    }
    const { credentials: credential } = sharing;
    const { data: _, ...rest } = credential;
    if (!includeDecryptedData) {
        return { ...rest };
    }
    const key = await credentials_service_1.CredentialsService.getEncryptionKey();
    const decryptedData = credentials_service_1.CredentialsService.redact(await credentials_service_1.CredentialsService.decrypt(key, credential), credential);
    return { data: decryptedData, ...rest };
}));
exports.credentialsController.post('/test', ResponseHelper.send(async (req) => {
    const { credentials } = req.body;
    const encryptionKey = await credentials_service_1.CredentialsService.getEncryptionKey();
    const sharing = await credentials_service_1.CredentialsService.getSharing(req.user, credentials.id);
    const mergedCredentials = (0, n8n_workflow_1.deepCopy)(credentials);
    if (mergedCredentials.data && (sharing === null || sharing === void 0 ? void 0 : sharing.credentials)) {
        const decryptedData = await credentials_service_1.CredentialsService.decrypt(encryptionKey, sharing.credentials);
        mergedCredentials.data = credentials_service_1.CredentialsService.unredact(mergedCredentials.data, decryptedData);
    }
    return credentials_service_1.CredentialsService.test(req.user, encryptionKey, mergedCredentials);
}));
exports.credentialsController.post('/', ResponseHelper.send(async (req) => {
    const newCredential = await credentials_service_1.CredentialsService.prepareCreateData(req.body);
    const key = await credentials_service_1.CredentialsService.getEncryptionKey();
    const encryptedData = credentials_service_1.CredentialsService.createEncryptedData(key, null, newCredential);
    const credential = await credentials_service_1.CredentialsService.save(newCredential, encryptedData, req.user);
    void typedi_1.Container.get(InternalHooks_1.InternalHooks).onUserCreatedCredentials({
        user: req.user,
        credential_name: newCredential.name,
        credential_type: credential.type,
        credential_id: credential.id,
        public_api: false,
    });
    return credential;
}));
exports.credentialsController.patch('/:id(\\d+)', ResponseHelper.send(async (req) => {
    const { id: credentialId } = req.params;
    const sharing = await credentials_service_1.CredentialsService.getSharing(req.user, credentialId);
    if (!sharing) {
        n8n_workflow_1.LoggerProxy.info('Attempt to update credential blocked due to lack of permissions', {
            credentialId,
            userId: req.user.id,
        });
        throw new ResponseHelper.NotFoundError('Credential to be updated not found. You can only update credentials owned by you');
    }
    const { credentials: credential } = sharing;
    const key = await credentials_service_1.CredentialsService.getEncryptionKey();
    const decryptedData = await credentials_service_1.CredentialsService.decrypt(key, credential);
    const preparedCredentialData = await credentials_service_1.CredentialsService.prepareUpdateData(req.body, decryptedData);
    const newCredentialData = credentials_service_1.CredentialsService.createEncryptedData(key, credentialId, preparedCredentialData);
    const responseData = await credentials_service_1.CredentialsService.update(credentialId, newCredentialData);
    if (responseData === null) {
        throw new ResponseHelper.NotFoundError(`Credential ID "${credentialId}" could not be found to be updated.`);
    }
    const { data: _, ...rest } = responseData;
    n8n_workflow_1.LoggerProxy.verbose('Credential updated', { credentialId });
    return { ...rest };
}));
exports.credentialsController.delete('/:id(\\d+)', ResponseHelper.send(async (req) => {
    const { id: credentialId } = req.params;
    const sharing = await credentials_service_1.CredentialsService.getSharing(req.user, credentialId);
    if (!sharing) {
        n8n_workflow_1.LoggerProxy.info('Attempt to delete credential blocked due to lack of permissions', {
            credentialId,
            userId: req.user.id,
        });
        throw new ResponseHelper.NotFoundError('Credential to be deleted not found. You can only removed credentials owned by you');
    }
    const { credentials: credential } = sharing;
    await credentials_service_1.CredentialsService.delete(credential);
    return true;
}));
//# sourceMappingURL=credentials.controller.js.map