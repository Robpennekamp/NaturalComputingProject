"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialTypes = void 0;
const n8n_core_1 = require("n8n-core");
const typedi_1 = require("typedi");
const constants_1 = require("./constants");
const LoadNodesAndCredentials_1 = require("./LoadNodesAndCredentials");
let CredentialTypes = class CredentialTypes {
    constructor(nodesAndCredentials) {
        this.nodesAndCredentials = nodesAndCredentials;
        nodesAndCredentials.credentialTypes = this;
    }
    recognizes(type) {
        return type in this.knownCredentials || type in this.loadedCredentials;
    }
    getByName(credentialType) {
        return this.getCredential(credentialType).type;
    }
    getNodeTypesToTestWith(type) {
        var _a, _b;
        return (_b = (_a = this.knownCredentials[type]) === null || _a === void 0 ? void 0 : _a.nodesToTestWith) !== null && _b !== void 0 ? _b : [];
    }
    getParentTypes(typeName) {
        const credentialType = this.getByName(typeName);
        if ((credentialType === null || credentialType === void 0 ? void 0 : credentialType.extends) === undefined)
            return [];
        const types = [];
        credentialType.extends.forEach((type) => {
            types.push(type);
            types.push(...this.getParentTypes(type));
        });
        return types;
    }
    getCredential(type) {
        const loadedCredentials = this.loadedCredentials;
        if (type in loadedCredentials) {
            return loadedCredentials[type];
        }
        const knownCredentials = this.knownCredentials;
        if (type in knownCredentials) {
            const { className, sourcePath } = knownCredentials[type];
            const loaded = (0, n8n_core_1.loadClassInIsolation)(sourcePath, className);
            loadedCredentials[type] = { sourcePath, type: loaded };
            return loadedCredentials[type];
        }
        throw new Error(`${constants_1.RESPONSE_ERROR_MESSAGES.NO_CREDENTIAL}: ${type}`);
    }
    get loadedCredentials() {
        return this.nodesAndCredentials.loaded.credentials;
    }
    get knownCredentials() {
        return this.nodesAndCredentials.known.credentials;
    }
};
CredentialTypes = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [LoadNodesAndCredentials_1.LoadNodesAndCredentials])
], CredentialTypes);
exports.CredentialTypes = CredentialTypes;
//# sourceMappingURL=CredentialTypes.js.map