"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateResponse = exports.validateMetadata = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const xmllint_wasm_1 = require("xmllint-wasm");
const saml_schema_assertion_2_0_xsd_1 = require("./schema/saml-schema-assertion-2.0.xsd");
const saml_schema_metadata_2_0_xsd_1 = require("./schema/saml-schema-metadata-2.0.xsd");
const saml_schema_protocol_2_0_xsd_1 = require("./schema/saml-schema-protocol-2.0.xsd");
const xenc_schema_xsd_1 = require("./schema/xenc-schema.xsd");
const xml_xsd_1 = require("./schema/xml.xsd");
const xmldsig_core_schema_xsd_1 = require("./schema/xmldsig-core-schema.xsd");
const xml = {
    fileName: 'xml.xsd',
    contents: xml_xsd_1.xsdXml,
};
const xmldsigCore = {
    fileName: 'xmldsig-core-schema.xsd',
    contents: xmldsig_core_schema_xsd_1.xsdXmldsigCore,
};
const xmlXenc = {
    fileName: 'xenc-schema.xsd',
    contents: xenc_schema_xsd_1.xsdXenc,
};
const xmlMetadata = {
    fileName: 'saml-schema-metadata-2.0.xsd',
    contents: saml_schema_metadata_2_0_xsd_1.xsdSamlSchemaMetadata20,
};
const xmlAssertion = {
    fileName: 'saml-schema-assertion-2.0.xsd',
    contents: saml_schema_assertion_2_0_xsd_1.xsdSamlSchemaAssertion20,
};
const xmlProtocol = {
    fileName: 'saml-schema-protocol-2.0.xsd',
    contents: saml_schema_protocol_2_0_xsd_1.xsdSamlSchemaProtocol20,
};
async function validateMetadata(metadata) {
    try {
        const validationResult = await (0, xmllint_wasm_1.validateXML)({
            xml: [
                {
                    fileName: 'metadata.xml',
                    contents: metadata,
                },
            ],
            extension: 'schema',
            schema: [xmlMetadata],
            preload: [xmlProtocol, xmlAssertion, xmldsigCore, xmlXenc, xml],
        });
        if (validationResult.valid) {
            n8n_workflow_1.LoggerProxy.debug('SAML Metadata is valid');
            return true;
        }
        else {
            n8n_workflow_1.LoggerProxy.warn('SAML Validate Metadata: Invalid metadata');
            n8n_workflow_1.LoggerProxy.warn(validationResult.errors.join('\n'));
        }
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.warn(error);
    }
    return false;
}
exports.validateMetadata = validateMetadata;
async function validateResponse(response) {
    try {
        const validationResult = await (0, xmllint_wasm_1.validateXML)({
            xml: [
                {
                    fileName: 'response.xml',
                    contents: response,
                },
            ],
            extension: 'schema',
            schema: [xmlProtocol],
            preload: [xmlMetadata, xmlAssertion, xmldsigCore, xmlXenc, xml],
        });
        if (validationResult.valid) {
            n8n_workflow_1.LoggerProxy.debug('SAML Response is valid');
            return true;
        }
        else {
            n8n_workflow_1.LoggerProxy.warn('SAML Validate Response: Failed');
            n8n_workflow_1.LoggerProxy.warn(validationResult.errors.join('\n'));
        }
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.warn(error);
    }
    return false;
}
exports.validateResponse = validateResponse;
//# sourceMappingURL=samlValidator.js.map