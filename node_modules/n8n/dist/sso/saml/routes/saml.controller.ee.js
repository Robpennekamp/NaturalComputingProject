"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SamlController = void 0;
const express_1 = __importDefault(require("express"));
const UserManagementHelper_1 = require("../../../UserManagement/UserManagementHelper");
const decorators_1 = require("../../../decorators");
const constants_1 = require("../constants");
const samlEnabledMiddleware_1 = require("../middleware/samlEnabledMiddleware");
const saml_service_ee_1 = require("../saml.service.ee");
const ResponseHelper_1 = require("../../../ResponseHelper");
const initSsoPost_1 = require("../views/initSsoPost");
const jwt_1 = require("../../../auth/jwt");
const class_validator_1 = require("class-validator");
const samlHelpers_1 = require("../samlHelpers");
const serviceProvider_ee_1 = require("../serviceProvider.ee");
const samlConnectionTestSuccess_1 = require("../views/samlConnectionTestSuccess");
const samlConnectionTestFailed_1 = require("../views/samlConnectionTestFailed");
const typedi_1 = __importDefault(require("typedi"));
const InternalHooks_1 = require("../../../InternalHooks");
let SamlController = class SamlController {
    constructor(samlService) {
        this.samlService = samlService;
    }
    async getServiceProviderMetadata(req, res) {
        return res
            .header('Content-Type', 'text/xml')
            .send(this.samlService.getServiceProviderInstance().getMetadata());
    }
    async configGet() {
        const prefs = this.samlService.samlPreferences;
        return {
            ...prefs,
            entityID: (0, serviceProvider_ee_1.getServiceProviderEntityId)(),
            returnUrl: (0, serviceProvider_ee_1.getServiceProviderReturnUrl)(),
        };
    }
    async configPost(req) {
        const validationResult = await (0, class_validator_1.validate)(req.body);
        if (validationResult.length === 0) {
            const result = await this.samlService.setSamlPreferences(req.body);
            return result;
        }
        else {
            throw new ResponseHelper_1.BadRequestError('Body is not a valid SamlPreferences object: ' +
                validationResult.map((e) => e.toString()).join(','));
        }
    }
    async toggleEnabledPost(req, res) {
        if (req.body.loginEnabled === undefined) {
            throw new ResponseHelper_1.BadRequestError('Body should contain a boolean "loginEnabled" property');
        }
        await this.samlService.setSamlPreferences({ loginEnabled: req.body.loginEnabled });
        return res.sendStatus(200);
    }
    async acsGet(req, res) {
        return this.acsHandler(req, res, 'redirect');
    }
    async acsPost(req, res) {
        return this.acsHandler(req, res, 'post');
    }
    async acsHandler(req, res, binding) {
        var _a;
        try {
            const loginResult = await this.samlService.handleSamlLogin(req, binding);
            if ((0, samlHelpers_1.isConnectionTestRequest)(req)) {
                if (loginResult.authenticatedUser) {
                    return res.send((0, samlConnectionTestSuccess_1.getSamlConnectionTestSuccessView)(loginResult.attributes));
                }
                else {
                    return res.send((0, samlConnectionTestFailed_1.getSamlConnectionTestFailedView)('', loginResult.attributes));
                }
            }
            if (loginResult.authenticatedUser) {
                void typedi_1.default.get(InternalHooks_1.InternalHooks).onUserLoginSuccess({
                    user: loginResult.authenticatedUser,
                    authenticationMethod: 'saml',
                });
                if ((0, samlHelpers_1.isSamlLicensedAndEnabled)()) {
                    await (0, jwt_1.issueCookie)(res, loginResult.authenticatedUser);
                    if (loginResult.onboardingRequired) {
                        return res.redirect((0, UserManagementHelper_1.getInstanceBaseUrl)() + constants_1.SamlUrls.samlOnboarding);
                    }
                    else {
                        return res.redirect((0, UserManagementHelper_1.getInstanceBaseUrl)() + constants_1.SamlUrls.defaultRedirect);
                    }
                }
                else {
                    return res.status(202).send(loginResult.attributes);
                }
            }
            void typedi_1.default.get(InternalHooks_1.InternalHooks).onUserLoginFailed({
                user: (_a = loginResult.attributes.email) !== null && _a !== void 0 ? _a : 'unknown',
                authenticationMethod: 'saml',
            });
            throw new ResponseHelper_1.AuthError('SAML Authentication failed');
        }
        catch (error) {
            if ((0, samlHelpers_1.isConnectionTestRequest)(req)) {
                return res.send((0, samlConnectionTestFailed_1.getSamlConnectionTestFailedView)(error.message));
            }
            void typedi_1.default.get(InternalHooks_1.InternalHooks).onUserLoginFailed({
                user: 'unknown',
                authenticationMethod: 'saml',
            });
            throw new ResponseHelper_1.AuthError('SAML Authentication failed: ' + error.message);
        }
    }
    async initSsoGet(req, res) {
        return this.handleInitSSO(res);
    }
    async configTestGet(req, res) {
        return this.handleInitSSO(res, (0, serviceProvider_ee_1.getServiceProviderConfigTestReturnUrl)());
    }
    async handleInitSSO(res, relayState) {
        const result = this.samlService.getLoginRequestUrl(relayState);
        if ((result === null || result === void 0 ? void 0 : result.binding) === 'redirect') {
            return result.context.context;
        }
        else if ((result === null || result === void 0 ? void 0 : result.binding) === 'post') {
            return res.send((0, initSsoPost_1.getInitSSOFormView)(result.context));
        }
        else {
            throw new ResponseHelper_1.AuthError('SAML redirect failed, please check your SAML configuration.');
        }
    }
};
__decorate([
    (0, decorators_1.NoAuthRequired)(),
    (0, decorators_1.Get)(constants_1.SamlUrls.metadata),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SamlController.prototype, "getServiceProviderMetadata", null);
__decorate([
    (0, decorators_1.Authorized)('any'),
    (0, decorators_1.Get)(constants_1.SamlUrls.config, { middlewares: [samlEnabledMiddleware_1.samlLicensedMiddleware] }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], SamlController.prototype, "configGet", null);
__decorate([
    (0, decorators_1.Authorized)(['global', 'owner']),
    (0, decorators_1.Post)(constants_1.SamlUrls.config, { middlewares: [samlEnabledMiddleware_1.samlLicensedMiddleware] }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], SamlController.prototype, "configPost", null);
__decorate([
    (0, decorators_1.Authorized)(['global', 'owner']),
    (0, decorators_1.Post)(constants_1.SamlUrls.configToggleEnabled, { middlewares: [samlEnabledMiddleware_1.samlLicensedMiddleware] }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SamlController.prototype, "toggleEnabledPost", null);
__decorate([
    (0, decorators_1.NoAuthRequired)(),
    (0, decorators_1.Get)(constants_1.SamlUrls.acs, { middlewares: [samlEnabledMiddleware_1.samlLicensedMiddleware] }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SamlController.prototype, "acsGet", null);
__decorate([
    (0, decorators_1.NoAuthRequired)(),
    (0, decorators_1.Post)(constants_1.SamlUrls.acs, { middlewares: [samlEnabledMiddleware_1.samlLicensedMiddleware] }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SamlController.prototype, "acsPost", null);
__decorate([
    (0, decorators_1.NoAuthRequired)(),
    (0, decorators_1.Get)(constants_1.SamlUrls.initSSO, { middlewares: [samlEnabledMiddleware_1.samlLicensedAndEnabledMiddleware] }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SamlController.prototype, "initSsoGet", null);
__decorate([
    (0, decorators_1.Authorized)(['global', 'owner']),
    (0, decorators_1.Get)(constants_1.SamlUrls.configTest, { middlewares: [samlEnabledMiddleware_1.samlLicensedMiddleware] }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SamlController.prototype, "configTestGet", null);
SamlController = __decorate([
    (0, decorators_1.RestController)('/sso/saml'),
    __metadata("design:paramtypes", [saml_service_ee_1.SamlService])
], SamlController);
exports.SamlController = SamlController;
//# sourceMappingURL=saml.controller.ee.js.map