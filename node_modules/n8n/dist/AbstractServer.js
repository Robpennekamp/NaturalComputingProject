"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractServer = void 0;
const typedi_1 = require("typedi");
const promises_1 = require("fs/promises");
const express_1 = __importDefault(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const body_parser_xml_1 = __importDefault(require("body-parser-xml"));
const compression_1 = __importDefault(require("compression"));
const parseurl_1 = __importDefault(require("parseurl"));
const n8n_workflow_1 = require("n8n-workflow");
const config_1 = __importDefault(require("./config"));
const constants_1 = require("./constants");
const ActiveWorkflowRunner_1 = require("./ActiveWorkflowRunner");
const Db = __importStar(require("./Db"));
const ExternalHooks_1 = require("./ExternalHooks");
const ResponseHelper_1 = require("./ResponseHelper");
const middlewares_1 = require("./middlewares");
const TestWebhooks_1 = require("./TestWebhooks");
const WaitingWebhooks_1 = require("./WaitingWebhooks");
const WebhookHelpers_1 = require("./WebhookHelpers");
const emptyBuffer = Buffer.alloc(0);
class AbstractServer {
    constructor() {
        this.instanceId = '';
        this.app = (0, express_1.default)();
        this.app.disable('x-powered-by');
        this.protocol = config_1.default.getEnv('protocol');
        this.sslKey = config_1.default.getEnv('ssl_key');
        this.sslCert = config_1.default.getEnv('ssl_cert');
        this.timezone = config_1.default.getEnv('generic.timezone');
        this.restEndpoint = config_1.default.getEnv('endpoints.rest');
        this.endpointWebhook = config_1.default.getEnv('endpoints.webhook');
        this.endpointWebhookTest = config_1.default.getEnv('endpoints.webhookTest');
        this.endpointWebhookWaiting = config_1.default.getEnv('endpoints.webhookWaiting');
        this.externalHooks = typedi_1.Container.get(ExternalHooks_1.ExternalHooks);
        this.activeWorkflowRunner = typedi_1.Container.get(ActiveWorkflowRunner_1.ActiveWorkflowRunner);
    }
    async setupErrorHandlers() {
        const { app } = this;
        const { Handlers: { requestHandler, errorHandler }, } = await Promise.resolve().then(() => __importStar(require('@sentry/node')));
        app.use(requestHandler());
        app.use(errorHandler());
    }
    async setupCommonMiddlewares() {
        const { app } = this;
        app.use((0, compression_1.default)());
        app.use((req, res, next) => {
            req.parsedUrl = (0, parseurl_1.default)(req);
            req.rawBody = emptyBuffer;
            next();
        });
        const payloadSizeMax = config_1.default.getEnv('endpoints.payloadSizeMax');
        app.use(body_parser_1.default.json({
            limit: `${payloadSizeMax}mb`,
            verify: (req, res, buf) => {
                req.rawBody = buf;
            },
        }));
        (0, body_parser_xml_1.default)(body_parser_1.default);
        app.use(body_parser_1.default.xml({
            limit: `${payloadSizeMax}mb`,
            xmlParseOptions: {
                normalize: true,
                normalizeTags: true,
                explicitArray: false,
            },
            verify: (req, res, buf) => {
                req.rawBody = buf;
            },
        }));
        app.use(body_parser_1.default.text({
            limit: `${payloadSizeMax}mb`,
            verify: (req, res, buf) => {
                req.rawBody = buf;
            },
        }));
        app.use(body_parser_1.default.urlencoded({
            limit: `${payloadSizeMax}mb`,
            extended: false,
            verify: (req, res, buf) => {
                req.rawBody = buf;
            },
        }));
    }
    setupDevMiddlewares() {
        this.app.use(middlewares_1.corsMiddleware);
    }
    setupPushServer() { }
    async setupHealthCheck() {
        this.app.get('/healthz', async (req, res) => {
            res.send({ status: 'ok' });
        });
        const { connectionState } = Db;
        this.app.use((req, res, next) => {
            if (connectionState.connected) {
                if (connectionState.migrated)
                    next();
                else
                    res.send('n8n is starting up. Please wait');
            }
            else
                (0, ResponseHelper_1.sendErrorResponse)(res, new ResponseHelper_1.ServiceUnavailableError('Database is not ready!'));
        });
        if (config_1.default.getEnv('executions.mode') === 'queue') {
            await this.setupRedisChecks();
        }
    }
    async setupRedisChecks() {
        const { default: Redis } = await Promise.resolve().then(() => __importStar(require('ioredis')));
        let lastTimer = 0;
        let cumulativeTimeout = 0;
        const { host, port, username, password, db } = config_1.default.getEnv('queue.bull.redis');
        const redisConnectionTimeoutLimit = config_1.default.getEnv('queue.bull.redis.timeoutThreshold');
        const redis = new Redis({
            host,
            port,
            db,
            username,
            password,
            retryStrategy: () => {
                const now = Date.now();
                if (now - lastTimer > 30000) {
                    lastTimer = now;
                    cumulativeTimeout = 0;
                }
                else {
                    cumulativeTimeout += now - lastTimer;
                    lastTimer = now;
                    if (cumulativeTimeout > redisConnectionTimeoutLimit) {
                        n8n_workflow_1.LoggerProxy.error(`Unable to connect to Redis after ${redisConnectionTimeoutLimit}. Exiting process.`);
                        process.exit(1);
                    }
                }
                return 500;
            },
        });
        redis.on('close', () => {
            n8n_workflow_1.LoggerProxy.warn('Redis unavailable - trying to reconnect...');
        });
        redis.on('error', (error) => {
            if (!String(error).includes('ECONNREFUSED')) {
                n8n_workflow_1.LoggerProxy.warn('Error with Redis: ', error);
            }
        });
    }
    setupWebhookEndpoint() {
        const endpoint = this.endpointWebhook;
        const activeWorkflowRunner = this.activeWorkflowRunner;
        this.app.all(`/${endpoint}/*`, async (req, res) => {
            const requestUrl = req.parsedUrl.pathname.slice(endpoint.length + 2);
            const method = req.method.toUpperCase();
            if (method === 'OPTIONS') {
                let allowedMethods;
                try {
                    allowedMethods = await activeWorkflowRunner.getWebhookMethods(requestUrl);
                    allowedMethods.push('OPTIONS');
                    res.append('Allow', allowedMethods);
                }
                catch (error) {
                    (0, ResponseHelper_1.sendErrorResponse)(res, error);
                    return;
                }
                res.header('Access-Control-Allow-Origin', '*');
                (0, ResponseHelper_1.sendSuccessResponse)(res, {}, true, 204);
                return;
            }
            if (!WebhookHelpers_1.WEBHOOK_METHODS.includes(method)) {
                (0, ResponseHelper_1.sendErrorResponse)(res, new Error(`The method ${method} is not supported.`));
                return;
            }
            let response;
            try {
                response = await activeWorkflowRunner.executeWebhook(method, requestUrl, req, res);
            }
            catch (error) {
                (0, ResponseHelper_1.sendErrorResponse)(res, error);
                return;
            }
            if (response.noWebhookResponse === true) {
                return;
            }
            (0, ResponseHelper_1.sendSuccessResponse)(res, response.data, true, response.responseCode, response.headers);
        });
    }
    setupWaitingWebhookEndpoint() {
        const endpoint = this.endpointWebhookWaiting;
        const waitingWebhooks = typedi_1.Container.get(WaitingWebhooks_1.WaitingWebhooks);
        this.app.all(`/${endpoint}/*`, async (req, res) => {
            const requestUrl = req.parsedUrl.pathname.slice(endpoint.length + 2);
            const method = req.method.toUpperCase();
            if (!WebhookHelpers_1.WEBHOOK_METHODS.includes(method)) {
                (0, ResponseHelper_1.sendErrorResponse)(res, new Error(`The method ${method} is not supported.`));
                return;
            }
            let response;
            try {
                response = await waitingWebhooks.executeWebhook(method, requestUrl, req, res);
            }
            catch (error) {
                (0, ResponseHelper_1.sendErrorResponse)(res, error);
                return;
            }
            if (response.noWebhookResponse === true) {
                return;
            }
            (0, ResponseHelper_1.sendSuccessResponse)(res, response.data, true, response.responseCode, response.headers);
        });
    }
    setupTestWebhookEndpoint() {
        const endpoint = this.endpointWebhookTest;
        const testWebhooks = typedi_1.Container.get(TestWebhooks_1.TestWebhooks);
        this.app.all(`/${endpoint}/*`, async (req, res) => {
            const requestUrl = req.parsedUrl.pathname.slice(endpoint.length + 2);
            const method = req.method.toUpperCase();
            if (method === 'OPTIONS') {
                let allowedMethods;
                try {
                    allowedMethods = await testWebhooks.getWebhookMethods(requestUrl);
                    allowedMethods.push('OPTIONS');
                    res.append('Allow', allowedMethods);
                }
                catch (error) {
                    (0, ResponseHelper_1.sendErrorResponse)(res, error);
                    return;
                }
                res.header('Access-Control-Allow-Origin', '*');
                (0, ResponseHelper_1.sendSuccessResponse)(res, {}, true, 204);
                return;
            }
            if (!WebhookHelpers_1.WEBHOOK_METHODS.includes(method)) {
                (0, ResponseHelper_1.sendErrorResponse)(res, new Error(`The method ${method} is not supported.`));
                return;
            }
            let response;
            try {
                response = await testWebhooks.callTestWebhook(method, requestUrl, req, res);
            }
            catch (error) {
                (0, ResponseHelper_1.sendErrorResponse)(res, error);
                return;
            }
            if (response.noWebhookResponse === true) {
                return;
            }
            (0, ResponseHelper_1.sendSuccessResponse)(res, response.data, true, response.responseCode, response.headers);
        });
        this.app.delete(`/${this.restEndpoint}/test-webhook/:id`, (0, ResponseHelper_1.send)(async (req) => testWebhooks.cancelTestWebhook(req.params.id)));
    }
    async init() {
        const { app, protocol, sslKey, sslCert } = this;
        if (protocol === 'https' && sslKey && sslCert) {
            const https = await Promise.resolve().then(() => __importStar(require('https')));
            this.server = https.createServer({
                key: await (0, promises_1.readFile)(this.sslKey, 'utf8'),
                cert: await (0, promises_1.readFile)(this.sslCert, 'utf8'),
            }, app);
        }
        else {
            const http = await Promise.resolve().then(() => __importStar(require('http')));
            this.server = http.createServer(app);
        }
        const PORT = config_1.default.getEnv('port');
        const ADDRESS = config_1.default.getEnv('listen_address');
        this.server.on('error', (error) => {
            if (error.code === 'EADDRINUSE') {
                console.log(`n8n's port ${PORT} is already in use. Do you have another instance of n8n running already?`);
                process.exit(1);
            }
        });
        await new Promise((resolve) => this.server.listen(PORT, ADDRESS, () => resolve()));
        await this.setupHealthCheck();
        console.log(`n8n ready on ${ADDRESS}, port ${PORT}`);
    }
    async start() {
        await this.setupErrorHandlers();
        this.setupPushServer();
        await this.setupCommonMiddlewares();
        if (constants_1.inDevelopment) {
            this.setupDevMiddlewares();
        }
        await this.configure();
        console.log(`Version: ${constants_1.N8N_VERSION}`);
        const defaultLocale = config_1.default.getEnv('defaultLocale');
        if (defaultLocale !== 'en') {
            console.log(`Locale: ${defaultLocale}`);
        }
        await this.externalHooks.run('n8n.ready', [this, config_1.default]);
    }
}
exports.AbstractServer = AbstractServer;
//# sourceMappingURL=AbstractServer.js.map