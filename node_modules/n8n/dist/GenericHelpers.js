"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_EXECUTIONS_GET_ALL_LIMIT = exports.createErrorExecution = exports.validateEntity = exports.generateUniqueName = exports.getSessionId = exports.getBaseUrl = void 0;
const class_validator_1 = require("class-validator");
const typeorm_1 = require("typeorm");
const config_1 = __importDefault(require("./config"));
const Db = __importStar(require("./Db"));
const ResponseHelper = __importStar(require("./ResponseHelper"));
function getBaseUrl() {
    const protocol = config_1.default.getEnv('protocol');
    const host = config_1.default.getEnv('host');
    const port = config_1.default.getEnv('port');
    const path = config_1.default.getEnv('path');
    if ((protocol === 'http' && port === 80) || (protocol === 'https' && port === 443)) {
        return `${protocol}://${host}${path}`;
    }
    return `${protocol}://${host}:${port}${path}`;
}
exports.getBaseUrl = getBaseUrl;
function getSessionId(req) {
    return req.headers.sessionid;
}
exports.getSessionId = getSessionId;
async function generateUniqueName(requestedName, entityType) {
    const findConditions = {
        select: ['name'],
        where: {
            name: (0, typeorm_1.Like)(`${requestedName}%`),
        },
    };
    const found = entityType === 'workflow'
        ? await Db.collections.Workflow.find(findConditions)
        : await Db.collections.Credentials.find(findConditions);
    if (found.length === 0) {
        return requestedName;
    }
    const maxSuffix = found.reduce((acc, { name }) => {
        const parts = name.split(`${requestedName} `);
        if (parts.length > 2)
            return acc;
        const suffix = Number(parts[1]);
        if (!isNaN(suffix) && Math.ceil(suffix) > acc) {
            acc = Math.ceil(suffix);
        }
        return acc;
    }, 0);
    if (maxSuffix === 0) {
        return `${requestedName} 2`;
    }
    return `${requestedName} ${maxSuffix + 1}`;
}
exports.generateUniqueName = generateUniqueName;
async function validateEntity(entity) {
    const errors = await (0, class_validator_1.validate)(entity);
    const errorMessages = errors
        .reduce((acc, cur) => {
        if (!cur.constraints)
            return acc;
        acc.push(...Object.values(cur.constraints));
        return acc;
    }, [])
        .join(' | ');
    if (errorMessages) {
        throw new ResponseHelper.BadRequestError(errorMessages);
    }
}
exports.validateEntity = validateEntity;
async function createErrorExecution(error, node, workflowData, workflow, mode) {
    var _a;
    const saveDataErrorExecutionDisabled = ((_a = workflowData === null || workflowData === void 0 ? void 0 : workflowData.settings) === null || _a === void 0 ? void 0 : _a.saveDataErrorExecution) === 'none';
    if (saveDataErrorExecutionDisabled)
        return;
    const executionData = {
        startData: {
            destinationNode: node.name,
            runNodeFilter: [node.name],
        },
        executionData: {
            contextData: {},
            nodeExecutionStack: [
                {
                    node,
                    data: {
                        main: [
                            [
                                {
                                    json: {},
                                    pairedItem: {
                                        item: 0,
                                    },
                                },
                            ],
                        ],
                    },
                    source: null,
                },
            ],
            waitingExecution: {},
            waitingExecutionSource: {},
        },
        resultData: {
            runData: {
                [node.name]: [
                    {
                        startTime: 0,
                        executionTime: 0,
                        error,
                        source: [],
                    },
                ],
            },
            error,
            lastNodeExecuted: node.name,
        },
    };
    const fullExecutionData = {
        data: executionData,
        mode,
        finished: false,
        startedAt: new Date(),
        workflowData,
        workflowId: workflow.id,
        stoppedAt: new Date(),
        status: 'error',
    };
    const execution = ResponseHelper.flattenExecutionData(fullExecutionData);
    await Db.collections.Execution.save(execution);
}
exports.createErrorExecution = createErrorExecution;
exports.DEFAULT_EXECUTIONS_GET_ALL_LIMIT = 20;
//# sourceMappingURL=GenericHelpers.js.map