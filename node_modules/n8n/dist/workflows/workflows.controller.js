"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.workflowsController = void 0;
const express_1 = __importDefault(require("express"));
const uuid_1 = require("uuid");
const n8n_workflow_1 = require("n8n-workflow");
const axios_1 = __importDefault(require("axios"));
const Db = __importStar(require("../Db"));
const GenericHelpers = __importStar(require("../GenericHelpers"));
const ResponseHelper = __importStar(require("../ResponseHelper"));
const WorkflowHelpers = __importStar(require("../WorkflowHelpers"));
const config_1 = __importDefault(require("../config"));
const TagHelpers = __importStar(require("../TagHelpers"));
const SharedWorkflow_1 = require("../databases/entities/SharedWorkflow");
const WorkflowEntity_1 = require("../databases/entities/WorkflowEntity");
const repositories_1 = require("../databases/repositories");
const GenericHelpers_1 = require("../GenericHelpers");
const ExternalHooks_1 = require("../ExternalHooks");
const Logger_1 = require("../Logger");
const WorkflowHelpers_1 = require("../WorkflowHelpers");
const workflows_controller_ee_1 = require("./workflows.controller.ee");
const workflows_services_1 = require("./workflows.services");
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const typeorm_1 = require("typeorm");
const typedi_1 = require("typedi");
const InternalHooks_1 = require("../InternalHooks");
exports.workflowsController = express_1.default.Router();
exports.workflowsController.use((req, res, next) => {
    try {
        n8n_workflow_1.LoggerProxy.getInstance();
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.init((0, Logger_1.getLogger)());
    }
    next();
});
exports.workflowsController.use('/', workflows_controller_ee_1.EEWorkflowController);
exports.workflowsController.post('/', ResponseHelper.send(async (req) => {
    delete req.body.id;
    const newWorkflow = new WorkflowEntity_1.WorkflowEntity();
    Object.assign(newWorkflow, req.body);
    newWorkflow.versionId = (0, uuid_1.v4)();
    await (0, GenericHelpers_1.validateEntity)(newWorkflow);
    await typedi_1.Container.get(ExternalHooks_1.ExternalHooks).run('workflow.create', [newWorkflow]);
    const { tags: tagIds } = req.body;
    if ((tagIds === null || tagIds === void 0 ? void 0 : tagIds.length) && !config_1.default.getEnv('workflowTagsDisabled')) {
        newWorkflow.tags = await Db.collections.Tag.find({
            select: ['id', 'name'],
            where: {
                id: (0, typeorm_1.In)(tagIds),
            },
        });
    }
    await WorkflowHelpers.replaceInvalidCredentials(newWorkflow);
    WorkflowHelpers.addNodeIds(newWorkflow);
    let savedWorkflow;
    await Db.transaction(async (transactionManager) => {
        savedWorkflow = await transactionManager.save(newWorkflow);
        const role = await typedi_1.Container.get(repositories_1.RoleRepository).findWorkflowOwnerRoleOrFail();
        const newSharedWorkflow = new SharedWorkflow_1.SharedWorkflow();
        Object.assign(newSharedWorkflow, {
            role,
            user: req.user,
            workflow: savedWorkflow,
        });
        await transactionManager.save(newSharedWorkflow);
    });
    if (!savedWorkflow) {
        n8n_workflow_1.LoggerProxy.error('Failed to create workflow', { userId: req.user.id });
        throw new ResponseHelper.InternalServerError('Failed to save workflow');
    }
    if (tagIds && !config_1.default.getEnv('workflowTagsDisabled') && savedWorkflow.tags) {
        savedWorkflow.tags = TagHelpers.sortByRequestOrder(savedWorkflow.tags, {
            requestOrder: tagIds,
        });
    }
    await typedi_1.Container.get(ExternalHooks_1.ExternalHooks).run('workflow.afterCreate', [savedWorkflow]);
    void typedi_1.Container.get(InternalHooks_1.InternalHooks).onWorkflowCreated(req.user, newWorkflow, false);
    return savedWorkflow;
}));
exports.workflowsController.get('/', ResponseHelper.send(async (req) => {
    return workflows_services_1.WorkflowsService.getMany(req.user, req.query.filter);
}));
exports.workflowsController.get('/new', ResponseHelper.send(async (req) => {
    var _a;
    const requestedName = req.query.name && req.query.name !== ''
        ? req.query.name
        : config_1.default.getEnv('workflows.defaultName');
    const name = await GenericHelpers.generateUniqueName(requestedName, 'workflow');
    const onboardingFlowEnabled = !config_1.default.getEnv('workflows.onboardingFlowDisabled') &&
        !((_a = req.user.settings) === null || _a === void 0 ? void 0 : _a.isOnboarded) &&
        (await (0, WorkflowHelpers_1.isBelowOnboardingThreshold)(req.user));
    return { name, onboardingFlowEnabled };
}));
exports.workflowsController.get('/from-url', ResponseHelper.send(async (req) => {
    if (req.query.url === undefined) {
        throw new ResponseHelper.BadRequestError('The parameter "url" is missing!');
    }
    if (!/^http[s]?:\/\/.*\.json$/i.exec(req.query.url)) {
        throw new ResponseHelper.BadRequestError('The parameter "url" is not valid! It does not seem to be a URL pointing to a n8n workflow JSON file.');
    }
    let workflowData;
    try {
        const { data } = await axios_1.default.get(req.query.url);
        workflowData = data;
    }
    catch (error) {
        throw new ResponseHelper.BadRequestError('The URL does not point to valid JSON file!');
    }
    if (workflowData === undefined ||
        workflowData.nodes === undefined ||
        !Array.isArray(workflowData.nodes) ||
        workflowData.connections === undefined ||
        typeof workflowData.connections !== 'object' ||
        Array.isArray(workflowData.connections)) {
        throw new ResponseHelper.BadRequestError('The data in the file does not seem to be a n8n workflow JSON file!');
    }
    return workflowData;
}));
exports.workflowsController.get('/:id(\\d+)', ResponseHelper.send(async (req) => {
    const { id: workflowId } = req.params;
    let relations = ['workflow', 'workflow.tags', 'role'];
    if (config_1.default.getEnv('workflowTagsDisabled')) {
        relations = relations.filter((relation) => relation !== 'workflow.tags');
    }
    const shared = await Db.collections.SharedWorkflow.findOne({
        relations,
        where: (0, UserManagementHelper_1.whereClause)({
            user: req.user,
            entityType: 'workflow',
            entityId: workflowId,
            roles: ['owner'],
        }),
    });
    if (!shared) {
        n8n_workflow_1.LoggerProxy.verbose('User attempted to access a workflow without permissions', {
            workflowId,
            userId: req.user.id,
        });
        throw new ResponseHelper.NotFoundError('Could not load the workflow - you can only access workflows owned by you');
    }
    return shared.workflow;
}));
exports.workflowsController.patch('/:id', ResponseHelper.send(async (req) => {
    const { id: workflowId } = req.params;
    const updateData = new WorkflowEntity_1.WorkflowEntity();
    const { tags, ...rest } = req.body;
    Object.assign(updateData, rest);
    const updatedWorkflow = await workflows_services_1.WorkflowsService.update(req.user, updateData, workflowId, tags, true, ['owner']);
    return updatedWorkflow;
}));
exports.workflowsController.delete('/:id', ResponseHelper.send(async (req) => {
    const { id: workflowId } = req.params;
    const workflow = await workflows_services_1.WorkflowsService.delete(req.user, workflowId);
    if (!workflow) {
        n8n_workflow_1.LoggerProxy.verbose('User attempted to delete a workflow without permissions', {
            workflowId,
            userId: req.user.id,
        });
        throw new ResponseHelper.BadRequestError('Could not delete the workflow - you can only remove workflows owned by you');
    }
    return true;
}));
exports.workflowsController.post('/run', ResponseHelper.send(async (req) => {
    return workflows_services_1.WorkflowsService.runManually(req.body, req.user, GenericHelpers.getSessionId(req));
}));
//# sourceMappingURL=workflows.controller.js.map