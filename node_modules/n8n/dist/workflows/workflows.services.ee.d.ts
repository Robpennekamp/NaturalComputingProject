import type { DeleteResult, EntityManager } from 'typeorm';
import type { ICredentialsDb } from '../Interfaces';
import { SharedWorkflow } from '../databases/entities/SharedWorkflow';
import type { Role } from '../databases/entities/Role';
import type { User } from '../databases/entities/User';
import { WorkflowEntity } from '../databases/entities/WorkflowEntity';
import { WorkflowsService } from './workflows.services';
import type { WorkflowWithSharingsAndCredentials, WorkflowForList } from './workflows.types';
export declare class EEWorkflowsService extends WorkflowsService {
    static getWorkflowIdsForUser(user: User): Promise<string[]>;
    static isOwned(user: User, workflowId: string): Promise<{
        ownsWorkflow: boolean;
        workflow?: WorkflowEntity;
    }>;
    static getSharings(transaction: EntityManager, workflowId: string): Promise<SharedWorkflow[]>;
    static pruneSharings(transaction: EntityManager, workflowId: string, userIds: string[]): Promise<DeleteResult>;
    static share(transaction: EntityManager, workflow: WorkflowEntity, shareWithIds: string[]): Promise<SharedWorkflow[]>;
    static addOwnerId(workflow: WorkflowForList, workflowOwnerRole: Role): void;
    static addOwnerAndSharings(workflow: WorkflowWithSharingsAndCredentials): void;
    static addCredentialsToWorkflow(workflow: WorkflowWithSharingsAndCredentials, currentUser: User): Promise<void>;
    static validateCredentialPermissionsToUser(workflow: WorkflowEntity, allowedCredentials: ICredentialsDb[]): void;
    static preventTampering(workflow: WorkflowEntity, workflowId: string, user: User): Promise<WorkflowEntity>;
}
