"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initErrorHandling = void 0;
const config_1 = __importDefault(require("./config"));
const n8n_workflow_1 = require("n8n-workflow");
let initialized = false;
const initErrorHandling = async () => {
    if (initialized)
        return;
    if (!config_1.default.getEnv('diagnostics.enabled')) {
        initialized = true;
        return;
    }
    Error.stackTraceLimit = 50;
    const dsn = config_1.default.getEnv('diagnostics.config.sentry.dsn');
    const { N8N_VERSION: release, ENVIRONMENT: environment } = process.env;
    const { init, captureException } = await Promise.resolve().then(() => __importStar(require('@sentry/node')));
    const { RewriteFrames } = await Promise.resolve().then(() => __importStar(require('@sentry/integrations')));
    init({
        dsn,
        release,
        environment,
        integrations: (integrations) => {
            integrations = integrations.filter(({ name }) => name !== 'OnUncaughtException');
            integrations.push(new RewriteFrames({ root: process.cwd() }));
            return integrations;
        },
    });
    process.on('uncaughtException', (error) => {
        var _a;
        n8n_workflow_1.ErrorReporterProxy.error(error);
        if (((_a = error.constructor) === null || _a === void 0 ? void 0 : _a.name) !== 'AxiosError')
            throw error;
    });
    n8n_workflow_1.ErrorReporterProxy.init({
        report: (error, options) => captureException(error, options),
    });
    initialized = true;
};
exports.initErrorHandling = initErrorHandling;
//# sourceMappingURL=ErrorReporting.js.map