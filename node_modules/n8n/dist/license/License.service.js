"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LicenseService = void 0;
const typedi_1 = require("typedi");
const License_1 = require("../License");
const Db = __importStar(require("../Db"));
class LicenseService {
    static async getActiveTriggerCount() {
        const totalTriggerCount = await Db.collections.Workflow.sum('triggerCount', { active: true });
        return totalTriggerCount !== null && totalTriggerCount !== void 0 ? totalTriggerCount : 0;
    }
    static async getLicenseData() {
        var _a;
        const triggerCount = await LicenseService.getActiveTriggerCount();
        const license = typedi_1.Container.get(License_1.License);
        const mainPlan = license.getMainPlan();
        return {
            usage: {
                executions: {
                    value: triggerCount,
                    limit: license.getTriggerLimit(),
                    warningThreshold: 0.8,
                },
            },
            license: {
                planId: (_a = mainPlan === null || mainPlan === void 0 ? void 0 : mainPlan.productId) !== null && _a !== void 0 ? _a : '',
                planName: license.getPlanName(),
            },
        };
    }
}
exports.LicenseService = LicenseService;
//# sourceMappingURL=License.service.js.map