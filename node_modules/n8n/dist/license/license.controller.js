"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.licenseController = void 0;
const express_1 = __importDefault(require("express"));
const n8n_workflow_1 = require("n8n-workflow");
const Logger_1 = require("../Logger");
const ResponseHelper = __importStar(require("../ResponseHelper"));
const License_service_1 = require("./License.service");
const License_1 = require("../License");
const users_service_1 = require("../PublicApi/v1/handlers/users/users.service");
const typedi_1 = require("typedi");
const InternalHooks_1 = require("../InternalHooks");
exports.licenseController = express_1.default.Router();
const OWNER_ROUTES = ['/activate', '/renew'];
exports.licenseController.use((req, res, next) => {
    try {
        n8n_workflow_1.LoggerProxy.getInstance();
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.init((0, Logger_1.getLogger)());
    }
    next();
});
exports.licenseController.use((req, res, next) => {
    if (OWNER_ROUTES.includes(req.path) && req.user) {
        if (!(0, users_service_1.isInstanceOwner)(req.user)) {
            n8n_workflow_1.LoggerProxy.info('Non-owner attempted to activate or renew a license', {
                userId: req.user.id,
            });
            ResponseHelper.sendErrorResponse(res, new ResponseHelper.UnauthorizedError('Only an instance owner may activate or renew a license'));
            return;
        }
    }
    next();
});
exports.licenseController.get('/', ResponseHelper.send(async () => {
    return License_service_1.LicenseService.getLicenseData();
}));
exports.licenseController.post('/activate', ResponseHelper.send(async (req) => {
    var _a, _b;
    const license = typedi_1.Container.get(License_1.License);
    try {
        await license.activate(req.body.activationKey);
    }
    catch (e) {
        const error = e;
        let message = 'Failed to activate license';
        switch ((_a = error.errorId) !== null && _a !== void 0 ? _a : 'UNSPECIFIED') {
            case 'SCHEMA_VALIDATION':
                message = 'Activation key is in the wrong format';
                break;
            case 'RESERVATION_EXHAUSTED':
                message =
                    'Activation key has been used too many times. Please contact sales@n8n.io if you would like to extend it';
                break;
            case 'RESERVATION_EXPIRED':
                message = 'Activation key has expired';
                break;
            case 'NOT_FOUND':
            case 'RESERVATION_CONFLICT':
                message = 'Activation key not found';
                break;
            default:
                (0, Logger_1.getLogger)().error(message, { stack: (_b = error.stack) !== null && _b !== void 0 ? _b : 'n/a' });
        }
        throw new ResponseHelper.BadRequestError(message);
    }
    return {
        managementToken: license.getManagementJwt(),
        ...(await License_service_1.LicenseService.getLicenseData()),
    };
}));
exports.licenseController.post('/renew', ResponseHelper.send(async () => {
    const license = typedi_1.Container.get(License_1.License);
    try {
        await license.renew();
    }
    catch (e) {
        const error = e;
        void typedi_1.Container.get(InternalHooks_1.InternalHooks).onLicenseRenewAttempt({ success: false });
        if (error instanceof Error) {
            throw new ResponseHelper.BadRequestError(error.message);
        }
    }
    void typedi_1.Container.get(InternalHooks_1.InternalHooks).onLicenseRenewAttempt({ success: true });
    return {
        managementToken: license.getManagementJwt(),
        ...(await License_service_1.LicenseService.getLicenseData()),
    };
}));
//# sourceMappingURL=license.controller.js.map