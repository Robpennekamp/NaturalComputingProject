"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowCredentials = void 0;
const Db = __importStar(require("./Db"));
async function WorkflowCredentials(nodes) {
    const returnCredentials = {};
    let node;
    let type;
    let nodeCredentials;
    let foundCredentials;
    for (node of nodes) {
        if (node.disabled === true || !node.credentials) {
            continue;
        }
        for (type of Object.keys(node.credentials)) {
            if (!returnCredentials[type]) {
                returnCredentials[type] = {};
            }
            nodeCredentials = node.credentials[type];
            if (!nodeCredentials.id) {
                throw new Error(`Credentials with name "${nodeCredentials.name}" for type "${type}" miss an ID.`);
            }
            if (!returnCredentials[type][nodeCredentials.id]) {
                foundCredentials = await Db.collections.Credentials.findOneBy({
                    id: nodeCredentials.id,
                    type,
                });
                if (!foundCredentials) {
                    throw new Error(`Could not find credentials for type "${type}" with ID "${nodeCredentials.id}".`);
                }
                returnCredentials[type][nodeCredentials.id] = foundCredentials;
            }
        }
    }
    return returnCredentials;
}
exports.WorkflowCredentials = WorkflowCredentials;
//# sourceMappingURL=WorkflowCredentials.js.map