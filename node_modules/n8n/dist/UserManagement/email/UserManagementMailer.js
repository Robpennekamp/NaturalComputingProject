"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserManagementMailer = void 0;
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const handlebars_1 = __importDefault(require("handlebars"));
const path_1 = require("path");
const typedi_1 = require("typedi");
const config_1 = __importDefault(require("../../config"));
const NodeMailer_1 = require("./NodeMailer");
const templates = {};
async function getTemplate(templateName, defaultFilename = `${templateName}.html`) {
    let template = templates[templateName];
    if (!template) {
        const templateOverride = config_1.default.getEnv(`userManagement.emails.templates.${templateName}`);
        let markup;
        if (templateOverride && (0, fs_1.existsSync)(templateOverride)) {
            markup = await (0, promises_1.readFile)(templateOverride, 'utf-8');
        }
        else {
            markup = await (0, promises_1.readFile)((0, path_1.join)(__dirname, `templates/${defaultFilename}`), 'utf-8');
        }
        template = handlebars_1.default.compile(markup);
        templates[templateName] = template;
    }
    return template;
}
let UserManagementMailer = class UserManagementMailer {
    constructor() {
        if (config_1.default.getEnv('userManagement.emails.mode') === 'smtp' &&
            config_1.default.getEnv('userManagement.emails.smtp.host') !== '') {
            this.mailer = new NodeMailer_1.NodeMailer();
        }
    }
    async verifyConnection() {
        if (!this.mailer)
            throw new Error('No mailer configured.');
        return this.mailer.verifyConnection();
    }
    async invite(inviteEmailData) {
        var _a;
        const template = await getTemplate('invite');
        const result = await ((_a = this.mailer) === null || _a === void 0 ? void 0 : _a.sendMail({
            emailRecipients: inviteEmailData.email,
            subject: 'You have been invited to n8n',
            body: template(inviteEmailData),
        }));
        return result !== null && result !== void 0 ? result : { emailSent: false };
    }
    async passwordReset(passwordResetData) {
        var _a;
        const template = await getTemplate('passwordReset', 'passwordReset.html');
        const result = await ((_a = this.mailer) === null || _a === void 0 ? void 0 : _a.sendMail({
            emailRecipients: passwordResetData.email,
            subject: 'n8n password reset',
            body: template(passwordResetData),
        }));
        return result !== null && result !== void 0 ? result : { emailSent: false };
    }
};
UserManagementMailer = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [])
], UserManagementMailer);
exports.UserManagementMailer = UserManagementMailer;
//# sourceMappingURL=UserManagementMailer.js.map