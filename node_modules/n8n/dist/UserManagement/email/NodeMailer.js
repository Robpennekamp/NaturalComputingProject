"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeMailer = void 0;
const nodemailer_1 = require("nodemailer");
const n8n_workflow_1 = require("n8n-workflow");
const config_1 = __importDefault(require("../../config"));
class NodeMailer {
    async init() {
        this.transport = (0, nodemailer_1.createTransport)({
            host: config_1.default.getEnv('userManagement.emails.smtp.host'),
            port: config_1.default.getEnv('userManagement.emails.smtp.port'),
            secure: config_1.default.getEnv('userManagement.emails.smtp.secure'),
            auth: {
                user: config_1.default.getEnv('userManagement.emails.smtp.auth.user'),
                pass: config_1.default.getEnv('userManagement.emails.smtp.auth.pass'),
            },
        });
    }
    async verifyConnection() {
        var _a;
        if (!this.transport) {
            await this.init();
        }
        const host = config_1.default.getEnv('userManagement.emails.smtp.host');
        const user = config_1.default.getEnv('userManagement.emails.smtp.auth.user');
        const pass = config_1.default.getEnv('userManagement.emails.smtp.auth.pass');
        try {
            await ((_a = this.transport) === null || _a === void 0 ? void 0 : _a.verify());
        }
        catch (error) {
            const message = [];
            if (!host)
                message.push('SMTP host not defined (N8N_SMTP_HOST).');
            if (!user)
                message.push('SMTP user not defined (N8N_SMTP_USER).');
            if (!pass)
                message.push('SMTP pass not defined (N8N_SMTP_PASS).');
            throw message.length ? new Error(message.join(' '), { cause: error }) : error;
        }
    }
    async sendMail(mailData) {
        var _a;
        if (!this.transport) {
            await this.init();
        }
        let sender = config_1.default.getEnv('userManagement.emails.smtp.sender');
        const user = config_1.default.getEnv('userManagement.emails.smtp.auth.user');
        if (!sender && user.includes('@')) {
            sender = user;
        }
        try {
            await ((_a = this.transport) === null || _a === void 0 ? void 0 : _a.sendMail({
                from: sender,
                to: mailData.emailRecipients,
                subject: mailData.subject,
                text: mailData.textOnly,
                html: mailData.body,
            }));
            n8n_workflow_1.LoggerProxy.verbose(`Email sent successfully to the following recipients: ${mailData.emailRecipients.toString()}`);
        }
        catch (error) {
            n8n_workflow_1.ErrorReporterProxy.error(error);
            n8n_workflow_1.LoggerProxy.error('Failed to send email', { recipients: mailData.emailRecipients, error });
            throw error;
        }
        return { emailSent: true };
    }
}
exports.NodeMailer = NodeMailer;
//# sourceMappingURL=NodeMailer.js.map