"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.whereClause = exports.rightDiff = exports.compareHash = exports.hashPassword = exports.getUserById = exports.addInviteLinkToUser = exports.withFeatureFlags = exports.sanitizeUser = exports.validatePassword = exports.generateUserInviteUrl = exports.getInstanceBaseUrl = exports.getInstanceOwner = exports.getRoleId = exports.isSharingEnabled = exports.isUserManagementEnabled = exports.isEmailSetUp = exports.getWorkflowOwner = void 0;
const typeorm_1 = require("typeorm");
const bcryptjs_1 = require("bcryptjs");
const typedi_1 = require("typedi");
const Db = __importStar(require("../Db"));
const ResponseHelper = __importStar(require("../ResponseHelper"));
const User_1 = require("../databases/entities/User");
const repositories_1 = require("../databases/repositories");
const config_1 = __importDefault(require("../config"));
const WebhookHelpers_1 = require("../WebhookHelpers");
const License_1 = require("../License");
async function getWorkflowOwner(workflowId) {
    var _a;
    const workflowOwnerRole = await typedi_1.Container.get(repositories_1.RoleRepository).findWorkflowOwnerRole();
    const sharedWorkflow = await Db.collections.SharedWorkflow.findOneOrFail({
        where: { workflowId, roleId: (_a = workflowOwnerRole === null || workflowOwnerRole === void 0 ? void 0 : workflowOwnerRole.id) !== null && _a !== void 0 ? _a : undefined },
        relations: ['user', 'user.globalRole'],
    });
    return sharedWorkflow.user;
}
exports.getWorkflowOwner = getWorkflowOwner;
function isEmailSetUp() {
    const smtp = config_1.default.getEnv('userManagement.emails.mode') === 'smtp';
    const host = !!config_1.default.getEnv('userManagement.emails.smtp.host');
    const user = !!config_1.default.getEnv('userManagement.emails.smtp.auth.user');
    const pass = !!config_1.default.getEnv('userManagement.emails.smtp.auth.pass');
    return smtp && host && user && pass;
}
exports.isEmailSetUp = isEmailSetUp;
function isUserManagementEnabled() {
    if (config_1.default.getEnv('userManagement.isInstanceOwnerSetUp')) {
        return true;
    }
    if (config_1.default.getEnv('deployment.type').startsWith('desktop_')) {
        return false;
    }
    return config_1.default.getEnv('userManagement.disabled') ? false : true;
}
exports.isUserManagementEnabled = isUserManagementEnabled;
function isSharingEnabled() {
    const license = typedi_1.Container.get(License_1.License);
    return isUserManagementEnabled() && license.isSharingEnabled();
}
exports.isSharingEnabled = isSharingEnabled;
async function getRoleId(scope, name) {
    return typedi_1.Container.get(repositories_1.RoleRepository)
        .findRoleOrFail(scope, name)
        .then((role) => role.id);
}
exports.getRoleId = getRoleId;
async function getInstanceOwner() {
    const ownerRoleId = await getRoleId('global', 'owner');
    const owner = await Db.collections.User.findOneOrFail({
        relations: ['globalRole'],
        where: {
            globalRoleId: ownerRoleId,
        },
    });
    return owner;
}
exports.getInstanceOwner = getInstanceOwner;
function getInstanceBaseUrl() {
    const n8nBaseUrl = config_1.default.getEnv('editorBaseUrl') || (0, WebhookHelpers_1.getWebhookBaseUrl)();
    return n8nBaseUrl.endsWith('/') ? n8nBaseUrl.slice(0, n8nBaseUrl.length - 1) : n8nBaseUrl;
}
exports.getInstanceBaseUrl = getInstanceBaseUrl;
function generateUserInviteUrl(inviterId, inviteeId) {
    return `${getInstanceBaseUrl()}/signup?inviterId=${inviterId}&inviteeId=${inviteeId}`;
}
exports.generateUserInviteUrl = generateUserInviteUrl;
function validatePassword(password) {
    if (!password) {
        throw new ResponseHelper.BadRequestError('Password is mandatory');
    }
    const hasInvalidLength = password.length < User_1.MIN_PASSWORD_LENGTH || password.length > User_1.MAX_PASSWORD_LENGTH;
    const hasNoNumber = !/\d/.test(password);
    const hasNoUppercase = !/[A-Z]/.test(password);
    if (hasInvalidLength || hasNoNumber || hasNoUppercase) {
        const message = [];
        if (hasInvalidLength) {
            message.push(`Password must be ${User_1.MIN_PASSWORD_LENGTH} to ${User_1.MAX_PASSWORD_LENGTH} characters long.`);
        }
        if (hasNoNumber) {
            message.push('Password must contain at least 1 number.');
        }
        if (hasNoUppercase) {
            message.push('Password must contain at least 1 uppercase letter.');
        }
        throw new ResponseHelper.BadRequestError(message.join(' '));
    }
    return password;
}
exports.validatePassword = validatePassword;
function sanitizeUser(user, withoutKeys) {
    const { password, resetPasswordToken, resetPasswordTokenExpiration, updatedAt, apiKey, authIdentities, ...rest } = user;
    if (withoutKeys) {
        withoutKeys.forEach((key) => {
            delete rest[key];
        });
    }
    const sanitizedUser = {
        ...rest,
        signInType: 'email',
    };
    const ldapIdentity = authIdentities === null || authIdentities === void 0 ? void 0 : authIdentities.find((i) => i.providerType === 'ldap');
    if (ldapIdentity) {
        sanitizedUser.signInType = 'ldap';
    }
    return sanitizedUser;
}
exports.sanitizeUser = sanitizeUser;
async function withFeatureFlags(postHog, user) {
    if (!postHog) {
        return user;
    }
    const timeoutPromise = new Promise((resolve) => {
        setTimeout(() => {
            resolve(user);
        }, 1500);
    });
    const fetchPromise = new Promise(async (resolve) => {
        user.featureFlags = await postHog.getFeatureFlags(user);
        resolve(user);
    });
    return Promise.race([fetchPromise, timeoutPromise]);
}
exports.withFeatureFlags = withFeatureFlags;
function addInviteLinkToUser(user, inviterId) {
    if (user.isPending) {
        user.inviteAcceptUrl = generateUserInviteUrl(inviterId, user.id);
    }
    return user;
}
exports.addInviteLinkToUser = addInviteLinkToUser;
async function getUserById(userId) {
    const user = await Db.collections.User.findOneOrFail({
        where: { id: userId },
        relations: ['globalRole'],
    });
    return user;
}
exports.getUserById = getUserById;
const hashPassword = async (validPassword) => (0, bcryptjs_1.hash)(validPassword, (0, bcryptjs_1.genSaltSync)(10));
exports.hashPassword = hashPassword;
async function compareHash(plaintext, hashed) {
    try {
        return await (0, bcryptjs_1.compare)(plaintext, hashed);
    }
    catch (error) {
        if (error instanceof Error && error.message.includes('Invalid salt version')) {
            error.message +=
                '. Comparison against unhashed string. Please check that the value compared against has been hashed.';
        }
        throw new Error(error);
    }
}
exports.compareHash = compareHash;
function rightDiff([arr1, keyExtractor1], [arr2, keyExtractor2]) {
    const keyMap = arr1.reduce((map, item) => {
        map[keyExtractor1(item)] = true;
        return map;
    }, {});
    return arr2.reduce((acc, item) => {
        if (!keyMap[keyExtractor2(item)]) {
            acc.push(item);
        }
        return acc;
    }, []);
}
exports.rightDiff = rightDiff;
function whereClause({ user, entityType, entityId = '', roles = [], }) {
    const where = entityId ? { [entityType]: { id: entityId } } : {};
    if (user.globalRole.name !== 'owner') {
        where.user = { id: user.id };
        if (roles === null || roles === void 0 ? void 0 : roles.length) {
            where.role = { name: (0, typeorm_1.In)(roles) };
        }
    }
    return where;
}
exports.whereClause = whereClause;
//# sourceMappingURL=UserManagementHelper.js.map