import type { CurrentUser, PublicUser, WhereClause } from '../Interfaces';
import type { User } from '../databases/entities/User';
import type { Role } from '../databases/entities/Role';
import type { PostHogClient } from '../posthog';
export declare function getWorkflowOwner(workflowId: string): Promise<User>;
export declare function isEmailSetUp(): boolean;
export declare function isUserManagementEnabled(): boolean;
export declare function isSharingEnabled(): boolean;
export declare function getRoleId(scope: Role['scope'], name: Role['name']): Promise<Role['id']>;
export declare function getInstanceOwner(): Promise<User>;
export declare function getInstanceBaseUrl(): string;
export declare function generateUserInviteUrl(inviterId: string, inviteeId: string): string;
export declare function validatePassword(password?: string): string;
export declare function sanitizeUser(user: User, withoutKeys?: string[]): PublicUser;
export declare function withFeatureFlags(postHog: PostHogClient | undefined, user: CurrentUser): Promise<CurrentUser>;
export declare function addInviteLinkToUser(user: PublicUser, inviterId: string): PublicUser;
export declare function getUserById(userId: string): Promise<User>;
export declare const hashPassword: (validPassword: string) => Promise<string>;
export declare function compareHash(plaintext: string, hashed: string): Promise<boolean | undefined>;
export declare function rightDiff<T1, T2>([arr1, keyExtractor1]: [T1[], (item: T1) => string], [arr2, keyExtractor2]: [T2[], (item: T2) => string]): T2[];
export declare function whereClause({ user, entityType, entityId, roles, }: {
    user: User;
    entityType: 'workflow' | 'credentials';
    entityId?: string;
    roles?: string[];
}): WhereClause;
