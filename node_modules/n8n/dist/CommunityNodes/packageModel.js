"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.persistInstalledPackageData = exports.removePackageFromDatabase = exports.getAllInstalledPackages = exports.isPackageInstalled = exports.findInstalledPackage = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const Db = __importStar(require("../Db"));
const InstalledNodes_1 = require("../databases/entities/InstalledNodes");
const InstalledPackages_1 = require("../databases/entities/InstalledPackages");
async function findInstalledPackage(packageName) {
    return Db.collections.InstalledPackages.findOne({
        where: { packageName },
        relations: ['installedNodes'],
    });
}
exports.findInstalledPackage = findInstalledPackage;
async function isPackageInstalled(packageName) {
    return Db.collections.InstalledPackages.exist({
        where: { packageName },
    });
}
exports.isPackageInstalled = isPackageInstalled;
async function getAllInstalledPackages() {
    return Db.collections.InstalledPackages.find({ relations: ['installedNodes'] });
}
exports.getAllInstalledPackages = getAllInstalledPackages;
async function removePackageFromDatabase(packageName) {
    return Db.collections.InstalledPackages.remove(packageName);
}
exports.removePackageFromDatabase = removePackageFromDatabase;
async function persistInstalledPackageData(packageLoader) {
    const { packageJson, nodeTypes, loadedNodes } = packageLoader;
    const { name: packageName, version: installedVersion, author } = packageJson;
    let installedPackage;
    try {
        await Db.transaction(async (transactionManager) => {
            const promises = [];
            const installedPackagePayload = Object.assign(new InstalledPackages_1.InstalledPackages(), {
                packageName,
                installedVersion,
                authorName: author === null || author === void 0 ? void 0 : author.name,
                authorEmail: author === null || author === void 0 ? void 0 : author.email,
            });
            installedPackage = await transactionManager.save(installedPackagePayload);
            installedPackage.installedNodes = [];
            promises.push(...loadedNodes.map(async (loadedNode) => {
                const installedNodePayload = Object.assign(new InstalledNodes_1.InstalledNodes(), {
                    name: nodeTypes[loadedNode.name].type.description.displayName,
                    type: loadedNode.name,
                    latestVersion: loadedNode.version,
                    package: packageName,
                });
                installedPackage.installedNodes.push(installedNodePayload);
                return transactionManager.save(installedNodePayload);
            }));
            return promises;
        });
        return installedPackage;
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.error('Failed to save installed packages and nodes', {
            error,
            packageName,
        });
        throw error;
    }
}
exports.persistInstalledPackageData = persistInstalledPackageData;
//# sourceMappingURL=packageModel.js.map