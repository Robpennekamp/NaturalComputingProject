"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const convict_1 = __importDefault(require("convict"));
const dotenv_1 = __importDefault(require("dotenv"));
const os_1 = require("os");
const fs_1 = require("fs");
const path_1 = require("path");
const schema_1 = require("./schema");
const constants_1 = require("../constants");
if (constants_1.inE2ETests) {
    process.env = {
        E2E_TESTS: 'true',
        N8N_USER_FOLDER: (0, fs_1.mkdtempSync)((0, path_1.join)((0, os_1.tmpdir)(), 'n8n-e2e-')),
        EXECUTIONS_PROCESS: 'main',
        N8N_DIAGNOSTICS_ENABLED: 'false',
        N8N_PUBLIC_API_DISABLED: 'true',
        EXTERNAL_FRONTEND_HOOKS_URLS: '',
        N8N_PERSONALIZATION_ENABLED: 'false',
        NODE_FUNCTION_ALLOW_EXTERNAL: 'node-fetch',
    };
}
else if (constants_1.inTest) {
    process.env.N8N_PUBLIC_API_DISABLED = 'true';
    process.env.N8N_PUBLIC_API_SWAGGERUI_DISABLED = 'true';
}
else {
    dotenv_1.default.config();
}
const config = (0, convict_1.default)(schema_1.schema, { args: [] });
config.getEnv = config.get;
if (!constants_1.inE2ETests && !constants_1.inTest) {
    const { N8N_CONFIG_FILES } = process.env;
    if (N8N_CONFIG_FILES !== undefined) {
        const configFiles = N8N_CONFIG_FILES.split(',');
        console.debug('Loading config overwrites', configFiles);
        config.loadFile(configFiles);
    }
    Object.entries(process.env).forEach(([envName, fileName]) => {
        var _a;
        if (envName.endsWith('_FILE') && fileName) {
            const configEnvName = envName.replace(/_FILE$/, '');
            const key = (_a = config._env[configEnvName]) === null || _a === void 0 ? void 0 : _a[0];
            if (key) {
                let value;
                try {
                    value = (0, fs_1.readFileSync)(fileName, 'utf8');
                }
                catch (error) {
                    if (error.code === 'ENOENT') {
                        throw new Error(`The file "${fileName}" could not be found.`);
                    }
                    throw error;
                }
                config.set(key, value);
            }
        }
    });
}
config.validate({
    allowed: 'strict',
});
exports.default = config;
//# sourceMappingURL=index.js.map