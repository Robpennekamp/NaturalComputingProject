export declare const schema: {
    database: {
        type: {
            doc: string;
            format: readonly ["sqlite", "mariadb", "mysqldb", "postgresdb"];
            default: string;
            env: string;
        };
        tablePrefix: {
            doc: string;
            format: string;
            default: string;
            env: string;
        };
        logging: {
            enabled: {
                doc: string;
                format: BooleanConstructor;
                default: boolean;
                env: string;
            };
            options: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            maxQueryExecutionTime: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
        };
        postgresdb: {
            database: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            host: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            password: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            port: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
            user: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            schema: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            ssl: {
                ca: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
                cert: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
                key: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
                rejectUnauthorized: {
                    doc: string;
                    format: string;
                    default: boolean;
                    env: string;
                };
            };
        };
        mysqldb: {
            database: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            host: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            password: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            port: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
            user: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
        };
        sqlite: {
            database: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            executeVacuumOnStartup: {
                doc: string;
                format: BooleanConstructor;
                default: boolean;
                env: string;
            };
        };
    };
    credentials: {
        overwrite: {
            data: {
                doc: string;
                format: string;
                default: string;
                env: string;
            };
            endpoint: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
        };
        defaultName: {
            doc: string;
            format: StringConstructor;
            default: string;
            env: string;
        };
    };
    workflows: {
        defaultName: {
            doc: string;
            format: StringConstructor;
            default: string;
            env: string;
        };
        onboardingFlowDisabled: {
            doc: string;
            format: string;
            default: boolean;
            env: string;
        };
        callerPolicyDefaultOption: {
            doc: string;
            format: readonly ["any", "none", "workflowsFromAList", "workflowsFromSameOwner"];
            default: string;
            env: string;
        };
    };
    executions: {
        process: {
            doc: string;
            format: readonly ["main", "own"];
            default: string;
            env: string;
        };
        mode: {
            doc: string;
            format: readonly ["regular", "queue"];
            default: string;
            env: string;
        };
        timeout: {
            doc: string;
            format: NumberConstructor;
            default: number;
            env: string;
        };
        maxTimeout: {
            doc: string;
            format: NumberConstructor;
            default: number;
            env: string;
        };
        saveDataOnError: {
            doc: string;
            format: readonly ["all", "none"];
            default: string;
            env: string;
        };
        saveDataOnSuccess: {
            doc: string;
            format: readonly ["all", "none"];
            default: string;
            env: string;
        };
        saveExecutionProgress: {
            doc: string;
            format: string;
            default: boolean;
            env: string;
        };
        saveDataManualExecutions: {
            doc: string;
            format: string;
            default: boolean;
            env: string;
        };
        pruneData: {
            doc: string;
            format: string;
            default: boolean;
            env: string;
        };
        pruneDataMaxAge: {
            doc: string;
            format: NumberConstructor;
            default: number;
            env: string;
        };
        pruneDataTimeout: {
            doc: string;
            format: NumberConstructor;
            default: number;
            env: string;
        };
        pruneDataMaxCount: {
            doc: string;
            format: NumberConstructor;
            default: number;
            env: string;
        };
    };
    queue: {
        health: {
            active: {
                doc: string;
                format: string;
                default: boolean;
                env: string;
            };
            port: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
        };
        bull: {
            prefix: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            redis: {
                db: {
                    doc: string;
                    format: NumberConstructor;
                    default: number;
                    env: string;
                };
                host: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
                password: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
                port: {
                    doc: string;
                    format: NumberConstructor;
                    default: number;
                    env: string;
                };
                timeoutThreshold: {
                    doc: string;
                    format: NumberConstructor;
                    default: number;
                    env: string;
                };
                username: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
            };
            queueRecoveryInterval: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
            gracefulShutdownTimeout: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
        };
    };
    generic: {
        timezone: {
            doc: string;
            format: string;
            default: string;
            env: string;
        };
    };
    path: {
        format: StringConstructor;
        default: string;
        arg: string;
        env: string;
        doc: string;
    };
    host: {
        format: StringConstructor;
        default: string;
        arg: string;
        env: string;
        doc: string;
    };
    port: {
        format: NumberConstructor;
        default: number;
        arg: string;
        env: string;
        doc: string;
    };
    listen_address: {
        format: StringConstructor;
        default: string;
        env: string;
        doc: string;
    };
    protocol: {
        format: readonly ["http", "https"];
        default: string;
        env: string;
        doc: string;
    };
    ssl_key: {
        format: StringConstructor;
        default: string;
        env: string;
        doc: string;
    };
    ssl_cert: {
        format: StringConstructor;
        default: string;
        env: string;
        doc: string;
    };
    editorBaseUrl: {
        format: StringConstructor;
        default: string;
        env: string;
        doc: string;
    };
    security: {
        audit: {
            daysAbandonedWorkflow: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
        };
        excludeEndpoints: {
            doc: string;
            format: StringConstructor;
            default: string;
            env: string;
        };
        basicAuth: {
            active: {
                format: string;
                default: boolean;
                env: string;
                doc: string;
            };
            user: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
            password: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
            hash: {
                format: string;
                default: boolean;
                env: string;
                doc: string;
            };
        };
        jwtAuth: {
            active: {
                format: string;
                default: boolean;
                env: string;
                doc: string;
            };
            jwtHeader: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
            jwtHeaderValuePrefix: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
            jwksUri: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
            jwtIssuer: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
            jwtNamespace: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
            jwtAllowedTenantKey: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
            jwtAllowedTenant: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
        };
    };
    endpoints: {
        payloadSizeMax: {
            format: NumberConstructor;
            default: number;
            env: string;
            doc: string;
        };
        metrics: {
            enable: {
                format: string;
                default: boolean;
                env: string;
                doc: string;
            };
            prefix: {
                format: StringConstructor;
                default: string;
                env: string;
                doc: string;
            };
            includeDefaultMetrics: {
                format: BooleanConstructor;
                default: boolean;
                env: string;
                doc: string;
            };
            includeWorkflowIdLabel: {
                format: BooleanConstructor;
                default: boolean;
                env: string;
                doc: string;
            };
            includeNodeTypeLabel: {
                format: BooleanConstructor;
                default: boolean;
                env: string;
                doc: string;
            };
            includeCredentialTypeLabel: {
                format: BooleanConstructor;
                default: boolean;
                env: string;
                doc: string;
            };
            includeApiEndpoints: {
                format: BooleanConstructor;
                default: boolean;
                env: string;
                doc: string;
            };
            includeApiPathLabel: {
                format: BooleanConstructor;
                default: boolean;
                env: string;
                doc: string;
            };
            includeApiMethodLabel: {
                format: BooleanConstructor;
                default: boolean;
                env: string;
                doc: string;
            };
            includeApiStatusCodeLabel: {
                format: BooleanConstructor;
                default: boolean;
                env: string;
                doc: string;
            };
        };
        rest: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
        webhook: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
        webhookWaiting: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
        webhookTest: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
        disableUi: {
            format: BooleanConstructor;
            default: boolean;
            env: string;
            doc: string;
        };
        disableProductionWebhooksOnMainProcess: {
            format: BooleanConstructor;
            default: boolean;
            env: string;
            doc: string;
        };
        skipWebhooksDeregistrationOnShutdown: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
            env: string;
        };
    };
    publicApi: {
        disabled: {
            format: BooleanConstructor;
            default: boolean;
            env: string;
            doc: string;
        };
        path: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
        swaggerUi: {
            disabled: {
                format: BooleanConstructor;
                default: boolean;
                env: string;
                doc: string;
            };
        };
    };
    workflowTagsDisabled: {
        format: BooleanConstructor;
        default: boolean;
        env: string;
        doc: string;
    };
    userManagement: {
        disabled: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
            env: string;
        };
        jwtSecret: {
            doc: string;
            format: StringConstructor;
            default: string;
            env: string;
        };
        isInstanceOwnerSetUp: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
        };
        skipInstanceOwnerSetup: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
        };
        emails: {
            mode: {
                doc: string;
                format: readonly ["", "smtp"];
                default: string;
                env: string;
            };
            smtp: {
                host: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
                port: {
                    doc: string;
                    format: NumberConstructor;
                    default: number;
                    env: string;
                };
                secure: {
                    doc: string;
                    format: BooleanConstructor;
                    default: boolean;
                    env: string;
                };
                auth: {
                    user: {
                        doc: string;
                        format: StringConstructor;
                        default: string;
                        env: string;
                    };
                    pass: {
                        doc: string;
                        format: StringConstructor;
                        default: string;
                        env: string;
                    };
                };
                sender: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
            };
            templates: {
                invite: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
                passwordReset: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
            };
        };
        authenticationMethod: {
            doc: string;
            format: readonly ["email", "ldap", "saml"];
            default: string;
        };
    };
    externalFrontendHooksUrls: {
        doc: string;
        format: StringConstructor;
        default: string;
        env: string;
    };
    externalHookFiles: {
        doc: string;
        format: StringConstructor;
        default: string;
        env: string;
    };
    nodes: {
        include: {
            doc: string;
            format: string;
            default: undefined;
            env: string;
        };
        exclude: {
            doc: string;
            format: string;
            default: undefined;
            env: string;
        };
        errorTriggerType: {
            doc: string;
            format: StringConstructor;
            default: string;
            env: string;
        };
        communityPackages: {
            enabled: {
                doc: string;
                format: BooleanConstructor;
                default: boolean;
                env: string;
            };
        };
        packagesMissing: {
            doc: string;
            format: StringConstructor;
            default: string;
        };
    };
    logs: {
        level: {
            doc: string;
            format: readonly ["error", "warn", "info", "verbose", "debug", "silent"];
            default: string;
            env: string;
        };
        output: {
            doc: string;
            format: StringConstructor;
            default: string;
            env: string;
        };
        file: {
            fileCountMax: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
            fileSizeMax: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
            location: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
        };
    };
    versionNotifications: {
        enabled: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
            env: string;
        };
        endpoint: {
            doc: string;
            format: StringConstructor;
            default: string;
            env: string;
        };
        infoUrl: {
            doc: string;
            format: StringConstructor;
            default: string;
            env: string;
        };
    };
    templates: {
        enabled: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
            env: string;
        };
        host: {
            doc: string;
            format: StringConstructor;
            default: string;
            env: string;
        };
    };
    push: {
        backend: {
            format: readonly ["sse", "websocket"];
            default: string;
            env: string;
            doc: string;
        };
    };
    binaryDataManager: {
        availableModes: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
        mode: {
            format: readonly ["default", "filesystem"];
            default: string;
            env: string;
            doc: string;
        };
        localStoragePath: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
        binaryDataTTL: {
            format: NumberConstructor;
            default: number;
            env: string;
            doc: string;
        };
        persistedBinaryDataTTL: {
            format: NumberConstructor;
            default: number;
            env: string;
            doc: string;
        };
    };
    deployment: {
        type: {
            format: StringConstructor;
            default: string;
            env: string;
        };
    };
    sso: {
        justInTimeProvisioning: {
            format: BooleanConstructor;
            default: boolean;
            doc: string;
        };
        redirectLoginToSso: {
            format: BooleanConstructor;
            default: boolean;
            doc: string;
        };
        saml: {
            loginEnabled: {
                format: BooleanConstructor;
                default: boolean;
                doc: string;
            };
            loginLabel: {
                format: StringConstructor;
                default: string;
            };
        };
        ldap: {
            loginEnabled: {
                format: BooleanConstructor;
                default: boolean;
            };
            loginLabel: {
                format: StringConstructor;
                default: string;
            };
        };
    };
    hiringBanner: {
        enabled: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
            env: string;
        };
    };
    personalization: {
        enabled: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
            env: string;
        };
    };
    userActivationSurvey: {
        enabled: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
            env: string;
        };
    };
    diagnostics: {
        enabled: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
            env: string;
        };
        config: {
            posthog: {
                apiKey: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
                apiHost: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
                disableSessionRecording: {
                    doc: string;
                    format: BooleanConstructor;
                    default: boolean;
                    env: string;
                };
            };
            sentry: {
                dsn: {
                    doc: string;
                    format: StringConstructor;
                    default: string;
                    env: string;
                };
            };
            frontend: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
            backend: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
        };
    };
    defaultLocale: {
        doc: string;
        format: StringConstructor;
        default: string;
        env: string;
    };
    onboardingCallPrompt: {
        enabled: {
            doc: string;
            format: BooleanConstructor;
            default: boolean;
            env: string;
        };
    };
    license: {
        serverUrl: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
        autoRenewEnabled: {
            format: BooleanConstructor;
            default: boolean;
            env: string;
            doc: string;
        };
        autoRenewOffset: {
            format: NumberConstructor;
            default: number;
            env: string;
            doc: string;
        };
        activationKey: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
        tenantId: {
            format: NumberConstructor;
            default: number;
            env: string;
            doc: string;
        };
        cert: {
            format: StringConstructor;
            default: string;
            env: string;
            doc: string;
        };
    };
    hideUsagePage: {
        format: BooleanConstructor;
        default: boolean;
        env: string;
        doc: string;
    };
    eventBus: {
        checkUnsentInterval: {
            doc: string;
            format: NumberConstructor;
            default: number;
            env: string;
        };
        logWriter: {
            keepLogCount: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
            maxFileSizeInKB: {
                doc: string;
                format: NumberConstructor;
                default: number;
                env: string;
            };
            logBaseName: {
                doc: string;
                format: StringConstructor;
                default: string;
                env: string;
            };
        };
    };
};
