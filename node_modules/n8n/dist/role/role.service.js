"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleService = void 0;
const typedi_1 = require("typedi");
const Role_1 = require("../databases/entities/Role");
const repositories_1 = require("../databases/repositories");
let RoleService = class RoleService {
    constructor(sharedWorkflowRepository) {
        this.sharedWorkflowRepository = sharedWorkflowRepository;
    }
    static async trxGet(transaction, role) {
        return transaction.findOneBy(Role_1.Role, role);
    }
    async getUserRoleForWorkflow(userId, workflowId) {
        const shared = await this.sharedWorkflowRepository.findOne({
            where: { workflowId, userId },
            relations: ['role'],
        });
        return shared === null || shared === void 0 ? void 0 : shared.role;
    }
};
RoleService = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [repositories_1.SharedWorkflowRepository])
], RoleService);
exports.RoleService = RoleService;
//# sourceMappingURL=role.service.js.map