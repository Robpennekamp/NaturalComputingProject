"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.audit = exports.isAsync = exports.ASYNC_MAP = exports.SYNC_MAP = void 0;
const Db = __importStar(require("../Db"));
const utils_1 = require("../utils");
const config_1 = __importDefault(require("../config"));
const constants_1 = require("../audit/constants");
const utils_2 = require("../audit/utils");
const credentials_risk_1 = require("../audit/risks/credentials.risk");
const database_risk_1 = require("../audit/risks/database.risk");
const nodes_risk_1 = require("../audit/risks/nodes.risk");
const filesystem_risk_1 = require("../audit/risks/filesystem.risk");
const instance_risk_1 = require("../audit/risks/instance.risk");
exports.SYNC_MAP = {
    database: database_risk_1.reportDatabaseRisk,
    filesystem: filesystem_risk_1.reportFilesystemRisk,
};
exports.ASYNC_MAP = {
    credentials: credentials_risk_1.reportCredentialsRisk,
    nodes: nodes_risk_1.reportNodesRisk,
    instance: instance_risk_1.reportInstanceRisk,
};
const isAsync = (c) => Object.keys(exports.ASYNC_MAP).includes(c);
exports.isAsync = isAsync;
async function audit(categories = constants_1.RISK_CATEGORIES, daysAbandonedWorkflow) {
    if (categories.length === 0)
        categories = constants_1.RISK_CATEGORIES;
    const daysFromEnv = config_1.default.getEnv('security.audit.daysAbandonedWorkflow');
    if (daysAbandonedWorkflow) {
        config_1.default.set('security.audit.daysAbandonedWorkflow', daysAbandonedWorkflow);
    }
    const workflows = await Db.collections.Workflow.find({
        select: ['id', 'name', 'active', 'nodes', 'connections'],
    });
    const [asyncCategories, syncCategories] = (0, utils_1.separate)(categories, exports.isAsync);
    const reports = [];
    if (asyncCategories.length > 0) {
        const promises = asyncCategories.map(async (c) => exports.ASYNC_MAP[c](workflows));
        const asyncReports = await Promise.all(promises);
        asyncReports.forEach((r) => r !== null && reports.push(r));
    }
    if (syncCategories.length > 0) {
        const syncReports = syncCategories.map((c) => exports.SYNC_MAP[c](workflows));
        syncReports.forEach((r) => r !== null && reports.push(r));
    }
    if (daysAbandonedWorkflow) {
        config_1.default.set('security.audit.daysAbandonedWorkflow', daysFromEnv);
    }
    if (reports.length === 0)
        return [];
    return reports.reduce((acc, cur) => {
        acc[(0, utils_2.toReportTitle)(cur.risk)] = cur;
        return acc;
    }, {});
}
exports.audit = audit;
//# sourceMappingURL=index.js.map