"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportNodesRisk = void 0;
const path = __importStar(require("path"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const LoadNodesAndCredentials_1 = require("../../LoadNodesAndCredentials");
const utils_1 = require("../../audit/utils");
const packageModel_1 = require("../../CommunityNodes/packageModel");
const constants_1 = require("../../audit/constants");
const typedi_1 = require("typedi");
async function getCommunityNodeDetails() {
    const installedPackages = await (0, packageModel_1.getAllInstalledPackages)();
    return installedPackages.reduce((acc, pkg) => {
        pkg.installedNodes.forEach((node) => acc.push({
            kind: 'community',
            nodeType: node.type,
            packageUrl: [constants_1.NPM_PACKAGE_URL, pkg.packageName].join('/'),
        }));
        return acc;
    }, []);
}
async function getCustomNodeDetails() {
    const customNodeTypes = [];
    const nodesAndCredentials = typedi_1.Container.get(LoadNodesAndCredentials_1.LoadNodesAndCredentials);
    for (const customDir of nodesAndCredentials.getCustomDirectories()) {
        const customNodeFiles = await (0, fast_glob_1.default)('**/*.node.js', { cwd: customDir, absolute: true });
        for (const nodeFile of customNodeFiles) {
            const [fileName] = path.parse(nodeFile).name.split('.');
            customNodeTypes.push({
                kind: 'custom',
                nodeType: ['CUSTOM', fileName].join('.'),
                filePath: nodeFile,
            });
        }
    }
    return customNodeTypes;
}
async function reportNodesRisk(workflows) {
    const officialRiskyNodes = (0, utils_1.getNodeTypes)(workflows, (node) => constants_1.OFFICIAL_RISKY_NODE_TYPES.has(node.type));
    const [communityNodes, customNodes] = await Promise.all([
        getCommunityNodeDetails(),
        getCustomNodeDetails(),
    ]);
    const issues = [officialRiskyNodes, communityNodes, customNodes];
    if (issues.every((i) => i.length === 0))
        return null;
    const report = {
        risk: constants_1.NODES_REPORT.RISK,
        sections: [],
    };
    const sentenceStart = (length) => (length > 1 ? 'These nodes are' : 'This node is');
    if (officialRiskyNodes.length > 0) {
        report.sections.push({
            title: constants_1.NODES_REPORT.SECTIONS.OFFICIAL_RISKY_NODES,
            description: [
                sentenceStart(officialRiskyNodes.length),
                "part of n8n's official nodes and may be used to fetch and run any arbitrary code in the host system. This may lead to exploits such as remote code execution.",
            ].join(' '),
            recommendation: `Consider reviewing the parameters in these nodes, replacing them with app nodes where possible, and not loading unneeded node types with the NODES_EXCLUDE environment variable. See: ${constants_1.ENV_VARS_DOCS_URL}`,
            location: officialRiskyNodes,
        });
    }
    if (communityNodes.length > 0) {
        report.sections.push({
            title: constants_1.NODES_REPORT.SECTIONS.COMMUNITY_NODES,
            description: [
                sentenceStart(communityNodes.length),
                `sourced from the n8n community. Community nodes are not vetted by the n8n team and have full access to the host system. See: ${constants_1.COMMUNITY_NODES_RISKS_URL}`,
            ].join(' '),
            recommendation: 'Consider reviewing the source code in any community nodes installed in this n8n instance, and uninstalling any community nodes no longer in use.',
            location: communityNodes,
        });
    }
    if (customNodes.length > 0) {
        report.sections.push({
            title: constants_1.NODES_REPORT.SECTIONS.CUSTOM_NODES,
            description: [
                sentenceStart(communityNodes.length),
                'unpublished and located in the host system. Custom nodes are not vetted by the n8n team and have full access to the host system.',
            ].join(' '),
            recommendation: 'Consider reviewing the source code in any custom node installed in this n8n instance, and removing any custom nodes no longer in use.',
            location: customNodes,
        });
    }
    return report;
}
exports.reportNodesRisk = reportNodesRisk;
//# sourceMappingURL=nodes.risk.js.map