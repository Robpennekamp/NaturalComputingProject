"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestWebhooks = void 0;
const typedi_1 = require("typedi");
const ActiveWebhooks_1 = require("./ActiveWebhooks");
const push_1 = require("./push");
const ResponseHelper = __importStar(require("./ResponseHelper"));
const WebhookHelpers = __importStar(require("./WebhookHelpers"));
const utils_1 = require("./utils");
const WEBHOOK_TEST_UNREGISTERED_HINT = "Click the 'Execute workflow' button on the canvas, then try again. (In test mode, the webhook only works for one call after you click this button)";
let TestWebhooks = class TestWebhooks {
    constructor(activeWebhooks, push) {
        this.activeWebhooks = activeWebhooks;
        this.push = push;
        this.testWebhookData = {};
        activeWebhooks.testWebhooks = true;
    }
    async callTestWebhook(httpMethod, path, request, response) {
        request.params = {};
        if (path.endsWith('/')) {
            path = path.slice(0, -1);
        }
        const { activeWebhooks, push, testWebhookData } = this;
        let webhookData = activeWebhooks.get(httpMethod, path);
        if (webhookData === undefined) {
            const pathElements = path.split('/');
            const webhookId = pathElements.shift();
            webhookData = activeWebhooks.get(httpMethod, pathElements.join('/'), webhookId);
            if (webhookData === undefined) {
                const methods = await this.getWebhookMethods(path);
                throw new ResponseHelper.NotFoundError((0, utils_1.webhookNotFoundErrorMessage)(path, httpMethod, methods), WEBHOOK_TEST_UNREGISTERED_HINT);
            }
            path = webhookData.path;
            path.split('/').forEach((ele, index) => {
                if (ele.startsWith(':')) {
                    request.params[ele.slice(1)] = pathElements[index];
                }
            });
        }
        const { workflowId } = webhookData;
        const webhookKey = `${activeWebhooks.getWebhookKey(webhookData.httpMethod, webhookData.path, webhookData.webhookId)}|${workflowId}`;
        if (testWebhookData[webhookKey] === undefined) {
            const methods = await this.getWebhookMethods(path);
            throw new ResponseHelper.NotFoundError((0, utils_1.webhookNotFoundErrorMessage)(path, httpMethod, methods), WEBHOOK_TEST_UNREGISTERED_HINT);
        }
        const { destinationNode, sessionId, workflow, workflowData, timeout } = testWebhookData[webhookKey];
        const workflowStartNode = workflow.getNode(webhookData.node);
        if (workflowStartNode === null) {
            throw new ResponseHelper.NotFoundError('Could not find node to process webhook.');
        }
        return new Promise(async (resolve, reject) => {
            try {
                const executionMode = 'manual';
                const executionId = await WebhookHelpers.executeWebhook(workflow, webhookData, workflowData, workflowStartNode, executionMode, sessionId, undefined, undefined, request, response, (error, data) => {
                    if (error !== null)
                        reject(error);
                    else
                        resolve(data);
                }, destinationNode);
                if (executionId === undefined)
                    return;
                if (sessionId !== undefined) {
                    push.send('testWebhookReceived', { workflowId, executionId }, sessionId);
                }
            }
            catch { }
            if (timeout)
                clearTimeout(timeout);
            delete testWebhookData[webhookKey];
            await activeWebhooks.removeWorkflow(workflow);
        });
    }
    async getWebhookMethods(path) {
        const webhookMethods = this.activeWebhooks.getWebhookMethods(path);
        if (!webhookMethods.length) {
            throw new ResponseHelper.NotFoundError((0, utils_1.webhookNotFoundErrorMessage)(path), WEBHOOK_TEST_UNREGISTERED_HINT);
        }
        return webhookMethods;
    }
    async needsWebhookData(workflowData, workflow, additionalData, mode, activation, sessionId, destinationNode) {
        const webhooks = WebhookHelpers.getWorkflowWebhooks(workflow, additionalData, destinationNode, true);
        if (!webhooks.find((webhook) => webhook.webhookDescription.restartWebhook !== true)) {
            return false;
        }
        if (workflow.id === undefined) {
            throw new Error('Webhooks can only be added for saved workflows as an id is needed!');
        }
        const timeout = setTimeout(() => {
            this.cancelTestWebhook(workflowData.id);
        }, 120000);
        const { activeWebhooks, testWebhookData } = this;
        let key;
        const activatedKey = [];
        for (const webhookData of webhooks) {
            key = `${activeWebhooks.getWebhookKey(webhookData.httpMethod, webhookData.path, webhookData.webhookId)}|${workflowData.id}`;
            activatedKey.push(key);
            testWebhookData[key] = {
                sessionId,
                timeout,
                workflow,
                workflowData,
                destinationNode,
            };
            try {
                await activeWebhooks.add(workflow, webhookData, mode, activation);
            }
            catch (error) {
                activatedKey.forEach((deleteKey) => delete testWebhookData[deleteKey]);
                await activeWebhooks.removeWorkflow(workflow);
                throw error;
            }
        }
        return true;
    }
    cancelTestWebhook(workflowId) {
        let foundWebhook = false;
        const { activeWebhooks, push, testWebhookData } = this;
        for (const webhookKey of Object.keys(testWebhookData)) {
            const { sessionId, timeout, workflow, workflowData } = testWebhookData[webhookKey];
            if (workflowData.id !== workflowId) {
                continue;
            }
            clearTimeout(timeout);
            if (sessionId !== undefined) {
                try {
                    push.send('testWebhookDeleted', { workflowId }, sessionId);
                }
                catch {
                }
            }
            delete testWebhookData[webhookKey];
            if (!foundWebhook) {
                activeWebhooks.removeWorkflow(workflow);
            }
            foundWebhook = true;
        }
        return foundWebhook;
    }
    async removeAll() {
        const workflows = Object.values(this.testWebhookData).map(({ workflow }) => workflow);
        return this.activeWebhooks.removeAll(workflows);
    }
};
TestWebhooks = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [ActiveWebhooks_1.ActiveWebhooks, push_1.Push])
], TestWebhooks);
exports.TestWebhooks = TestWebhooks;
//# sourceMappingURL=TestWebhooks.js.map