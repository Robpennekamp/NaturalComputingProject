import type { AuthenticationMethod, IRun, IWorkflowBase, WorkflowExecuteMode } from 'n8n-workflow';
import type { IDiagnosticInfo, IInternalHooksClass, ITelemetryUserDeletionData, IWorkflowDb, IWorkflowExecutionDataProcess } from './Interfaces';
import { Telemetry } from './telemetry';
import type { AuthProviderType } from './databases/entities/AuthIdentity';
import { RoleService } from './role/role.service';
import type { User } from './databases/entities/User';
import { NodeTypes } from './NodeTypes';
export declare class InternalHooks implements IInternalHooksClass {
    private telemetry;
    private nodeTypes;
    private roleService;
    private instanceId;
    constructor(telemetry: Telemetry, nodeTypes: NodeTypes, roleService: RoleService);
    init(instanceId: string): Promise<void>;
    onServerStarted(diagnosticInfo: IDiagnosticInfo, earliestWorkflowCreatedAt?: Date): Promise<unknown[]>;
    onFrontendSettingsAPI(sessionId?: string): Promise<void>;
    onPersonalizationSurveySubmitted(userId: string, answers: Record<string, string>): Promise<void>;
    onWorkflowCreated(user: User, workflow: IWorkflowBase, publicApi: boolean): Promise<void>;
    onWorkflowDeleted(user: User, workflowId: string, publicApi: boolean): Promise<void>;
    onWorkflowSaved(user: User, workflow: IWorkflowDb, publicApi: boolean): Promise<void>;
    onNodeBeforeExecute(executionId: string, workflow: IWorkflowBase, nodeName: string): Promise<void>;
    onNodePostExecute(executionId: string, workflow: IWorkflowBase, nodeName: string): Promise<void>;
    onWorkflowBeforeExecute(executionId: string, data: IWorkflowExecutionDataProcess): Promise<void>;
    onWorkflowCrashed(executionId: string, executionMode: WorkflowExecuteMode, workflowData?: IWorkflowBase): Promise<void>;
    onWorkflowPostExecute(executionId: string, workflow: IWorkflowBase, runData?: IRun, userId?: string): Promise<void>;
    onWorkflowSharingUpdate(workflowId: string, userId: string, userList: string[]): Promise<void>;
    onN8nStop(): Promise<void>;
    onUserDeletion(userDeletionData: {
        user: User;
        telemetryData: ITelemetryUserDeletionData;
        publicApi: boolean;
    }): Promise<void>;
    onUserInvite(userInviteData: {
        user: User;
        target_user_id: string[];
        public_api: boolean;
        email_sent: boolean;
    }): Promise<void>;
    onUserReinvite(userReinviteData: {
        user: User;
        target_user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedUser(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedAllUsers(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedExecution(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedAllExecutions(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedWorkflow(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedAllWorkflows(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserUpdate(userUpdateData: {
        user: User;
        fields_changed: string[];
    }): Promise<void>;
    onUserInviteEmailClick(userInviteClickData: {
        inviter: User;
        invitee: User;
    }): Promise<void>;
    onUserPasswordResetEmailClick(userPasswordResetData: {
        user: User;
    }): Promise<void>;
    onUserTransactionalEmail(userTransactionalEmailData: {
        user_id: string;
        message_type: 'Reset password' | 'New user invite' | 'Resend invite';
        public_api: boolean;
    }): Promise<void>;
    onUserInvokedApi(userInvokedApiData: {
        user_id: string;
        path: string;
        method: string;
        api_version: string;
    }): Promise<void>;
    onApiKeyDeleted(apiKeyDeletedData: {
        user: User;
        public_api: boolean;
    }): Promise<void>;
    onApiKeyCreated(apiKeyCreatedData: {
        user: User;
        public_api: boolean;
    }): Promise<void>;
    onUserPasswordResetRequestClick(userPasswordResetData: {
        user: User;
    }): Promise<void>;
    onInstanceOwnerSetup(instanceOwnerSetupData: {
        user_id: string;
    }): Promise<void>;
    onUserSignup(user: User, userSignupData: {
        user_type: AuthProviderType;
        was_disabled_ldap_user: boolean;
    }): Promise<void>;
    onEmailFailed(failedEmailData: {
        user: User;
        message_type: 'Reset password' | 'New user invite' | 'Resend invite';
        public_api: boolean;
    }): Promise<void>;
    onUserLoginSuccess(userLoginData: {
        user: User;
        authenticationMethod: AuthenticationMethod;
    }): Promise<void>;
    onUserLoginFailed(userLoginData: {
        user: string;
        authenticationMethod: AuthenticationMethod;
        reason?: string;
    }): Promise<void>;
    onUserCreatedCredentials(userCreatedCredentialsData: {
        user: User;
        credential_name: string;
        credential_type: string;
        credential_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserSharedCredentials(userSharedCredentialsData: {
        user: User;
        credential_name: string;
        credential_type: string;
        credential_id: string;
        user_id_sharer: string;
        user_ids_sharees_added: string[];
        sharees_removed: number | null;
    }): Promise<void>;
    onCommunityPackageInstallFinished(installationData: {
        user: User;
        input_string: string;
        package_name: string;
        success: boolean;
        package_version?: string;
        package_node_names?: string[];
        package_author?: string;
        package_author_email?: string;
        failure_reason?: string;
    }): Promise<void>;
    onCommunityPackageUpdateFinished(updateData: {
        user: User;
        package_name: string;
        package_version_current: string;
        package_version_new: string;
        package_node_names: string[];
        package_author?: string;
        package_author_email?: string;
    }): Promise<void>;
    onCommunityPackageDeleteFinished(deleteData: {
        user: User;
        package_name: string;
        package_version: string;
        package_node_names: string[];
        package_author?: string;
        package_author_email?: string;
    }): Promise<void>;
    onLdapSyncFinished(data: {
        type: string;
        succeeded: boolean;
        users_synced: number;
        error: string;
    }): Promise<void>;
    onLdapUsersDisabled(data: {
        reason: 'ldap_update' | 'ldap_feature_deactivated';
        users: number;
        user_ids: string[];
    }): Promise<void>;
    onUserUpdatedLdapSettings(data: {
        user_id: string;
        loginIdAttribute: string;
        firstNameAttribute: string;
        lastNameAttribute: string;
        emailAttribute: string;
        ldapIdAttribute: string;
        searchPageSize: number;
        searchTimeout: number;
        synchronizationEnabled: boolean;
        synchronizationInterval: number;
        loginLabel: string;
        loginEnabled: boolean;
    }): Promise<void>;
    onLdapLoginSyncFailed(data: {
        error: string;
    }): Promise<void>;
    userLoginFailedDueToLdapDisabled(data: {
        user_id: string;
    }): Promise<void>;
    onFirstProductionWorkflowSuccess(data: {
        user_id: string;
        workflow_id: string;
    }): Promise<void>;
    onFirstWorkflowDataLoad(data: {
        user_id: string;
        workflow_id: string;
        node_type: string;
        node_id: string;
        credential_type?: string;
        credential_id?: string;
    }): Promise<void>;
    onLicenseRenewAttempt(data: {
        success: boolean;
    }): Promise<void>;
    onAuditGeneratedViaCli(): Promise<void>;
    onVariableCreated(createData: {
        variable_type: string;
    }): Promise<void>;
}
