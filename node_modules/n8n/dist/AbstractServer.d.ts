/// <reference types="node" />
/// <reference types="node" />
import type { Server } from 'http';
import type { Url } from 'url';
import express from 'express';
import { ActiveWorkflowRunner } from './ActiveWorkflowRunner';
import type { IExternalHooksClass } from './Interfaces';
export declare abstract class AbstractServer {
    protected server: Server;
    protected app: express.Application;
    protected externalHooks: IExternalHooksClass;
    protected activeWorkflowRunner: ActiveWorkflowRunner;
    protected protocol: string;
    protected sslKey: string;
    protected sslCert: string;
    protected timezone: string;
    protected restEndpoint: string;
    protected endpointWebhook: string;
    protected endpointWebhookTest: string;
    protected endpointWebhookWaiting: string;
    protected instanceId: string;
    abstract configure(): Promise<void>;
    constructor();
    private setupErrorHandlers;
    private setupCommonMiddlewares;
    private setupDevMiddlewares;
    protected setupPushServer(): void;
    private setupHealthCheck;
    private setupRedisChecks;
    protected setupWebhookEndpoint(): void;
    protected setupWaitingWebhookEndpoint(): void;
    protected setupTestWebhookEndpoint(): void;
    init(): Promise<void>;
    start(): Promise<void>;
}
declare module 'http' {
    interface IncomingMessage {
        parsedUrl: Url;
    }
}
