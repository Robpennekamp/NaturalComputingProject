"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeTypes = void 0;
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const typedi_1 = require("typedi");
const constants_1 = require("./constants");
const LoadNodesAndCredentials_1 = require("./LoadNodesAndCredentials");
let NodeTypes = class NodeTypes {
    constructor(nodesAndCredentials) {
        this.nodesAndCredentials = nodesAndCredentials;
    }
    init() {
        this.applySpecialNodeParameters();
    }
    getWithSourcePath(nodeTypeName, version) {
        const nodeType = this.getNode(nodeTypeName);
        if (!nodeType) {
            throw new Error(`Unknown node type: ${nodeTypeName}`);
        }
        const { description } = n8n_workflow_1.NodeHelpers.getVersionedNodeType(nodeType.type, version);
        return { description: { ...description }, sourcePath: nodeType.sourcePath };
    }
    getByName(nodeType) {
        return this.getNode(nodeType).type;
    }
    getByNameAndVersion(nodeType, version) {
        return n8n_workflow_1.NodeHelpers.getVersionedNodeType(this.getNode(nodeType).type, version);
    }
    applySpecialNodeParameters() {
        for (const nodeTypeData of Object.values(this.loadedNodes)) {
            const nodeType = n8n_workflow_1.NodeHelpers.getVersionedNodeType(nodeTypeData.type);
            n8n_workflow_1.NodeHelpers.applySpecialNodeParameters(nodeType);
        }
    }
    getNode(type) {
        const loadedNodes = this.loadedNodes;
        if (type in loadedNodes) {
            return loadedNodes[type];
        }
        const knownNodes = this.knownNodes;
        if (type in knownNodes) {
            const { className, sourcePath } = knownNodes[type];
            const loaded = (0, n8n_core_1.loadClassInIsolation)(sourcePath, className);
            n8n_workflow_1.NodeHelpers.applySpecialNodeParameters(loaded);
            loadedNodes[type] = { sourcePath, type: loaded };
            return loadedNodes[type];
        }
        throw new Error(`${constants_1.RESPONSE_ERROR_MESSAGES.NO_NODE}: ${type}`);
    }
    get loadedNodes() {
        return this.nodesAndCredentials.loaded.nodes;
    }
    get knownNodes() {
        return this.nodesAndCredentials.known.nodes;
    }
};
NodeTypes = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [LoadNodesAndCredentials_1.LoadNodesAndCredentials])
], NodeTypes);
exports.NodeTypes = NodeTypes;
//# sourceMappingURL=NodeTypes.js.map