/// <reference types="node" />
import type { IDeferredPromise, IExecuteResponsePromiseData, IRun, ExecutionStatus } from 'n8n-workflow';
import type { ChildProcess } from 'child_process';
import type PCancelable from 'p-cancelable';
import type { IExecutionsCurrentSummary, IWorkflowExecutionDataProcess } from './Interfaces';
export declare class ActiveExecutions {
    private activeExecutions;
    add(executionData: IWorkflowExecutionDataProcess, process?: ChildProcess, executionId?: string): Promise<string>;
    attachWorkflowExecution(executionId: string, workflowExecution: PCancelable<IRun>): void;
    attachResponsePromise(executionId: string, responsePromise: IDeferredPromise<IExecuteResponsePromiseData>): void;
    resolveResponsePromise(executionId: string, response: IExecuteResponsePromiseData): void;
    remove(executionId: string, fullRunData?: IRun): void;
    stopExecution(executionId: string, timeout?: string): Promise<IRun | undefined>;
    getPostExecutePromise(executionId: string): Promise<IRun | undefined>;
    getActiveExecutions(): IExecutionsCurrentSummary[];
    setStatus(executionId: string, status: ExecutionStatus): Promise<void>;
    getStatus(executionId: string): ExecutionStatus;
}
