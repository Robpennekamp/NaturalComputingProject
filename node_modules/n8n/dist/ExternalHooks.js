"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalHooks = void 0;
const typedi_1 = require("typedi");
const Db = __importStar(require("./Db"));
const config_1 = __importDefault(require("./config"));
let ExternalHooks = class ExternalHooks {
    constructor() {
        this.externalHooks = {};
        this.initDidRun = false;
    }
    async init() {
        if (this.initDidRun) {
            return;
        }
        await this.loadHooksFiles();
        this.initDidRun = true;
    }
    async reload(externalHooks) {
        this.externalHooks = {};
        if (externalHooks === undefined) {
            await this.loadHooksFiles(true);
        }
        else {
            this.loadHooks(externalHooks);
        }
    }
    async loadHooksFiles(reload = false) {
        const externalHookFiles = config_1.default.getEnv('externalHookFiles').split(':');
        for (let hookFilePath of externalHookFiles) {
            hookFilePath = hookFilePath.trim();
            if (hookFilePath !== '') {
                try {
                    if (reload) {
                        delete require.cache[require.resolve(hookFilePath)];
                    }
                    const hookFile = require(hookFilePath);
                    this.loadHooks(hookFile);
                }
                catch (error) {
                    throw new Error(`Problem loading external hook file "${hookFilePath}": ${error.message}`, { cause: error });
                }
            }
        }
    }
    loadHooks(hookFileData) {
        for (const resource of Object.keys(hookFileData)) {
            for (const operation of Object.keys(hookFileData[resource])) {
                const hookString = `${resource}.${operation}`;
                if (this.externalHooks[hookString] === undefined) {
                    this.externalHooks[hookString] = [];
                }
                this.externalHooks[hookString].push.apply(this.externalHooks[hookString], hookFileData[resource][operation]);
            }
        }
    }
    async run(hookName, hookParameters) {
        const externalHookFunctions = {
            dbCollections: Db.collections,
        };
        if (this.externalHooks[hookName] === undefined) {
            return;
        }
        for (const externalHookFunction of this.externalHooks[hookName]) {
            await externalHookFunction.apply(externalHookFunctions, hookParameters);
        }
    }
    exists(hookName) {
        return !!this.externalHooks[hookName];
    }
};
ExternalHooks = __decorate([
    (0, typedi_1.Service)()
], ExternalHooks);
exports.ExternalHooks = ExternalHooks;
//# sourceMappingURL=ExternalHooks.js.map