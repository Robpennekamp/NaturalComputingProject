"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdapService = void 0;
const ldapts_1 = require("ldapts");
const helpers_1 = require("./helpers");
const constants_1 = require("./constants");
class LdapService {
    set config(config) {
        this._config = config;
        this.client = undefined;
    }
    async getClient() {
        if (this._config === undefined) {
            throw new Error('Service cannot be used without setting the property config');
        }
        if (this.client === undefined) {
            const url = (0, helpers_1.formatUrl)(this._config.connectionUrl, this._config.connectionPort, this._config.connectionSecurity);
            const ldapOptions = { url };
            const tlsOptions = {};
            if (this._config.connectionSecurity !== 'none') {
                Object.assign(tlsOptions, {
                    rejectUnauthorized: !this._config.allowUnauthorizedCerts,
                });
                if (this._config.connectionSecurity === 'tls') {
                    ldapOptions.tlsOptions = tlsOptions;
                }
            }
            this.client = new ldapts_1.Client(ldapOptions);
            if (this._config.connectionSecurity === 'startTls') {
                await this.client.startTLS(tlsOptions);
            }
        }
    }
    async bindAdmin() {
        await this.getClient();
        if (this.client) {
            await this.client.bind(this._config.bindingAdminDn, this._config.bindingAdminPassword);
        }
    }
    async searchWithAdminBinding(filter) {
        await this.bindAdmin();
        if (this.client) {
            const { searchEntries } = await this.client.search(this._config.baseDn, {
                attributes: (0, helpers_1.getMappingAttributes)(this._config),
                explicitBufferAttributes: constants_1.BINARY_AD_ATTRIBUTES,
                filter,
                timeLimit: this._config.searchTimeout,
                paged: { pageSize: this._config.searchPageSize },
                ...(this._config.searchPageSize === 0 && { paged: true }),
            });
            await this.client.unbind();
            return searchEntries;
        }
        return [];
    }
    async validUser(dn, password) {
        await this.getClient();
        if (this.client) {
            await this.client.bind(dn, password);
            await this.client.unbind();
        }
    }
    async testConnection() {
        await this.bindAdmin();
    }
}
exports.LdapService = LdapService;
//# sourceMappingURL=LdapService.ee.js.map