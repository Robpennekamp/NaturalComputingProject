import type { Entry as LdapUser } from 'ldapts';
import type { Role } from '../databases/entities/Role';
import { User } from '../databases/entities/User';
import { AuthIdentity } from '../databases/entities/AuthIdentity';
import type { AuthProviderSyncHistory } from '../databases/entities/AuthProviderSyncHistory';
import type { ConnectionSecurity, LdapConfig } from './types';
export declare const isLdapEnabled: () => boolean;
export declare const isLdapDisabled: () => boolean;
export declare const setLdapLoginLabel: (value: string) => void;
export declare function setLdapLoginEnabled(enabled: boolean): Promise<void>;
export declare const getLdapLoginLabel: () => string;
export declare const isLdapLoginEnabled: () => boolean;
export declare const randomPassword: () => string;
export declare const getLdapUserRole: () => Promise<Role>;
export declare const validateLdapConfigurationSchema: (ldapConfig: LdapConfig) => {
    valid: boolean;
    message: string;
};
export declare const encryptPassword: (password: string) => Promise<string>;
export declare const decryptPassword: (password: string) => Promise<string>;
export declare const getLdapConfig: () => Promise<LdapConfig>;
export declare const setGlobalLdapConfigVariables: (ldapConfig: LdapConfig) => Promise<void>;
export declare const resolveBinaryAttributes: (entries: LdapUser[]) => void;
export declare const updateLdapConfig: (ldapConfig: LdapConfig) => Promise<void>;
export declare const handleLdapInit: () => Promise<void>;
export declare const createFilter: (filter: string, userFilter: string) => string;
export declare const escapeFilter: (filter: string) => string;
export declare const findAndAuthenticateLdapUser: (loginId: string, password: string, loginIdAttribute: string, userFilter: string) => Promise<LdapUser | undefined>;
export declare const getAuthIdentityByLdapId: (idAttributeValue: string) => Promise<AuthIdentity | null>;
export declare const getUserByEmail: (email: string) => Promise<User | null>;
export declare const mapLdapAttributesToUser: (ldapUser: LdapUser, ldapConfig: LdapConfig) => [AuthIdentity['providerId'], Pick<User, 'email' | 'firstName' | 'lastName'>];
export declare const getLdapIds: () => Promise<string[]>;
export declare const getLdapUsers: () => Promise<User[]>;
export declare const mapLdapUserToDbUser: (ldapUser: LdapUser, ldapConfig: LdapConfig, role?: Role) => [string, User];
export declare const processUsers: (toCreateUsers: Array<[string, User]>, toUpdateUsers: Array<[string, User]>, toDisableUsers: string[]) => Promise<void>;
export declare const saveLdapSynchronization: (data: Omit<AuthProviderSyncHistory, 'id' | 'providerType'>) => Promise<void>;
export declare const getLdapSynchronizations: (page: number, perPage: number) => Promise<AuthProviderSyncHistory[]>;
export declare const formatUrl: (url: string, port: number, security: ConnectionSecurity) => string;
export declare const getMappingAttributes: (ldapConfig: LdapConfig) => string[];
export declare const createLdapAuthIdentity: (user: User, ldapId: string) => Promise<AuthIdentity>;
export declare const createLdapUserOnLocalDb: (role: Role, data: Partial<User>, ldapId: string) => Promise<{
    id?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    password: string;
    resetPasswordToken?: string | null | undefined;
    resetPasswordTokenExpiration?: number | null | undefined;
    personalizationAnswers?: import("../Interfaces").IPersonalizationSurveyAnswers | null | undefined;
    settings?: import("../Interfaces").IUserSettings | null | undefined;
    globalRole: Role;
    globalRoleId?: string | undefined;
    authIdentities?: AuthIdentity[] | undefined;
    sharedWorkflows?: import("../databases/entities/SharedWorkflow").SharedWorkflow[] | undefined;
    sharedCredentials?: import("../databases/entities/SharedCredentials").SharedCredentials[] | undefined;
    disabled?: boolean | undefined;
    preUpsertHook?: (() => void) | undefined;
    apiKey?: string | null | undefined;
    isPending?: boolean | undefined;
    computeIsPending?: (() => void) | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    setUpdateDate?: (() => void) | undefined;
} & User>;
export declare const updateLdapUserOnLocalDb: (identity: AuthIdentity, data: Partial<User>) => Promise<void>;
