"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CREDENTIAL_BLANKING_VALUE = exports.LICENSE_QUOTAS = exports.LICENSE_FEATURES = exports.SETTINGS_LICENSE_CERT_KEY = exports.WORKFLOW_REACTIVATE_MAX_TIMEOUT = exports.WORKFLOW_REACTIVATE_INITIAL_TIMEOUT = exports.UNKNOWN_FAILURE_REASON = exports.NPM_PACKAGE_STATUS_GOOD = exports.NPM_COMMAND_TOKENS = exports.AUTH_COOKIE_NAME = exports.RESPONSE_ERROR_MESSAGES = exports.STARTER_TEMPLATE_NAME = exports.NODE_PACKAGE_PREFIX = exports.IS_V1_RELEASE = exports.N8N_VERSION = exports.START_NODES = exports.getN8nPackageJson = exports.EDITOR_UI_DIST_DIR = exports.GENERATED_STATIC_DIR = exports.NODES_BASE_DIR = exports.TEMPLATES_DIR = exports.CLI_DIR = exports.CUSTOM_API_CALL_KEY = exports.CUSTOM_API_CALL_NAME = exports.inE2ETests = exports.inTest = exports.inDevelopment = exports.inProduction = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const semver_1 = require("semver");
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const { NODE_ENV, E2E_TESTS } = process.env;
exports.inProduction = NODE_ENV === 'production';
exports.inDevelopment = !NODE_ENV || NODE_ENV === 'development';
exports.inTest = NODE_ENV === 'test';
exports.inE2ETests = E2E_TESTS === 'true';
exports.CUSTOM_API_CALL_NAME = 'Custom API Call';
exports.CUSTOM_API_CALL_KEY = '__CUSTOM_API_CALL__';
exports.CLI_DIR = (0, path_1.resolve)(__dirname, '..');
exports.TEMPLATES_DIR = (0, path_1.join)(exports.CLI_DIR, 'templates');
exports.NODES_BASE_DIR = (0, path_1.dirname)(require.resolve('n8n-nodes-base'));
exports.GENERATED_STATIC_DIR = (0, path_1.join)(n8n_core_1.UserSettings.getUserHome(), '.cache/n8n/public');
exports.EDITOR_UI_DIST_DIR = (0, path_1.join)((0, path_1.dirname)(require.resolve('n8n-editor-ui')), 'dist');
function getN8nPackageJson() {
    return (0, n8n_workflow_1.jsonParse)((0, fs_1.readFileSync)((0, path_1.join)(exports.CLI_DIR, 'package.json'), 'utf8'));
}
exports.getN8nPackageJson = getN8nPackageJson;
exports.START_NODES = ['n8n-nodes-base.start', 'n8n-nodes-base.manualTrigger'];
exports.N8N_VERSION = getN8nPackageJson().version;
exports.IS_V1_RELEASE = (0, semver_1.major)(exports.N8N_VERSION) > 0;
exports.NODE_PACKAGE_PREFIX = 'n8n-nodes-';
exports.STARTER_TEMPLATE_NAME = `${exports.NODE_PACKAGE_PREFIX}starter`;
exports.RESPONSE_ERROR_MESSAGES = {
    NO_CREDENTIAL: 'Credential not found',
    NO_NODE: 'Node not found',
    NO_ENCRYPTION_KEY: n8n_core_1.RESPONSE_ERROR_MESSAGES.NO_ENCRYPTION_KEY,
    PACKAGE_NAME_NOT_PROVIDED: 'Package name is required',
    PACKAGE_NAME_NOT_VALID: `Package name is not valid - it must start with "${exports.NODE_PACKAGE_PREFIX}"`,
    PACKAGE_NOT_INSTALLED: 'This package is not installed - you must install it first',
    PACKAGE_FAILED_TO_INSTALL: 'Package could not be installed - check logs for details',
    PACKAGE_NOT_FOUND: 'Package not found in npm',
    PACKAGE_VERSION_NOT_FOUND: 'The specified package version was not found',
    PACKAGE_DOES_NOT_CONTAIN_NODES: 'The specified package does not contain any nodes',
    PACKAGE_LOADING_FAILED: 'The specified package could not be loaded',
    DISK_IS_FULL: 'There appears to be insufficient disk space',
};
exports.AUTH_COOKIE_NAME = 'n8n-auth';
exports.NPM_COMMAND_TOKENS = {
    NPM_PACKAGE_NOT_FOUND_ERROR: '404 Not Found',
    NPM_PACKAGE_VERSION_NOT_FOUND_ERROR: 'No matching version found for',
    NPM_NO_VERSION_AVAILABLE: 'No valid versions available',
    NPM_DISK_NO_SPACE: 'ENOSPC',
    NPM_DISK_INSUFFICIENT_SPACE: 'insufficient space',
};
exports.NPM_PACKAGE_STATUS_GOOD = 'OK';
exports.UNKNOWN_FAILURE_REASON = 'Unknown failure reason';
exports.WORKFLOW_REACTIVATE_INITIAL_TIMEOUT = 1000;
exports.WORKFLOW_REACTIVATE_MAX_TIMEOUT = 24 * 60 * 60 * 1000;
exports.SETTINGS_LICENSE_CERT_KEY = 'license.cert';
var LICENSE_FEATURES;
(function (LICENSE_FEATURES) {
    LICENSE_FEATURES["SHARING"] = "feat:sharing";
    LICENSE_FEATURES["LDAP"] = "feat:ldap";
    LICENSE_FEATURES["SAML"] = "feat:saml";
    LICENSE_FEATURES["LOG_STREAMING"] = "feat:logStreaming";
    LICENSE_FEATURES["ADVANCED_EXECUTION_FILTERS"] = "feat:advancedExecutionFilters";
    LICENSE_FEATURES["VARIABLES"] = "feat:variables";
    LICENSE_FEATURES["VERSION_CONTROL"] = "feat:versionControl";
})(LICENSE_FEATURES = exports.LICENSE_FEATURES || (exports.LICENSE_FEATURES = {}));
var LICENSE_QUOTAS;
(function (LICENSE_QUOTAS) {
    LICENSE_QUOTAS["TRIGGER_LIMIT"] = "quota:activeWorkflows";
    LICENSE_QUOTAS["VARIABLES_LIMIT"] = "quota:maxVariables";
})(LICENSE_QUOTAS = exports.LICENSE_QUOTAS || (exports.LICENSE_QUOTAS = {}));
exports.CREDENTIAL_BLANKING_VALUE = '__n8n_BLANK_VALUE_e5362baf-c777-4d57-a609-6eaf1f9e87f6';
//# sourceMappingURL=constants.js.map