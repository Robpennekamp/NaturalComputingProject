"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupPushHandler = exports.setupPushServer = exports.Push = void 0;
const http_1 = require("http");
const ws_1 = require("ws");
const url_1 = require("url");
const typedi_1 = require("typedi");
const config_1 = __importDefault(require("../config"));
const jwt_1 = require("../auth/jwt");
const constants_1 = require("../constants");
const sse_push_1 = require("./sse.push");
const websocket_push_1 = require("./websocket.push");
const useWebSockets = config_1.default.getEnv('push.backend') === 'websocket';
let Push = class Push {
    constructor() {
        this.backend = useWebSockets ? new websocket_push_1.WebSocketPush() : new sse_push_1.SSEPush();
    }
    handleRequest(req, res) {
        if (req.ws) {
            this.backend.add(req.query.sessionId, req.ws);
        }
        else if (!useWebSockets) {
            this.backend.add(req.query.sessionId, { req, res });
        }
        else {
            res.status(401).send('Unauthorized');
        }
    }
    send(type, data, sessionId = undefined) {
        this.backend.send(type, data, sessionId);
    }
};
Push = __decorate([
    (0, typedi_1.Service)()
], Push);
exports.Push = Push;
const setupPushServer = (restEndpoint, server, app) => {
    if (useWebSockets) {
        const wsServer = new ws_1.Server({ noServer: true });
        server.on('upgrade', (request, socket, head) => {
            if ((0, url_1.parse)(request.url).pathname === `/${restEndpoint}/push`) {
                wsServer.handleUpgrade(request, socket, head, (ws) => {
                    request.ws = ws;
                    const response = new http_1.ServerResponse(request);
                    response.writeHead = (statusCode) => {
                        if (statusCode > 200)
                            ws.close();
                        return response;
                    };
                    app.handle(request, response);
                });
            }
        });
    }
};
exports.setupPushServer = setupPushServer;
const setupPushHandler = (restEndpoint, app, isUserManagementEnabled) => {
    const endpoint = `/${restEndpoint}/push`;
    const pushValidationMiddleware = async (req, res, next) => {
        var _a, _b;
        const ws = req.ws;
        const { sessionId } = req.query;
        if (sessionId === undefined) {
            if (ws) {
                ws.send('The query parameter "sessionId" is missing!');
                ws.close(400);
            }
            else {
                next(new Error('The query parameter "sessionId" is missing!'));
            }
            return;
        }
        if (isUserManagementEnabled) {
            try {
                const authCookie = (_b = (_a = req.cookies) === null || _a === void 0 ? void 0 : _a[constants_1.AUTH_COOKIE_NAME]) !== null && _b !== void 0 ? _b : '';
                await (0, jwt_1.resolveJwt)(authCookie);
            }
            catch (error) {
                if (ws) {
                    ws.send(`Unauthorized: ${error.message}`);
                    ws.close(401);
                }
                else {
                    res.status(401).send('Unauthorized');
                }
                return;
            }
        }
        next();
    };
    const push = typedi_1.Container.get(Push);
    app.use(endpoint, pushValidationMiddleware, (req, res) => push.handleRequest(req, res));
};
exports.setupPushHandler = setupPushHandler;
//# sourceMappingURL=index.js.map