"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractPush = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const eventbus_1 = require("../eventbus");
class AbstractPush {
    constructor() {
        this.connections = {};
    }
    add(sessionId, connection) {
        const { connections } = this;
        n8n_workflow_1.LoggerProxy.debug('Add editor-UI session', { sessionId });
        eventbus_1.eventBus.emit('editorUiConnected', sessionId);
        const existingConnection = connections[sessionId];
        if (existingConnection) {
            this.close(existingConnection);
        }
        connections[sessionId] = connection;
    }
    remove(sessionId) {
        if (sessionId !== undefined) {
            n8n_workflow_1.LoggerProxy.debug('Remove editor-UI session', { sessionId });
            delete this.connections[sessionId];
        }
    }
    send(type, data, sessionId) {
        const { connections } = this;
        if (sessionId !== undefined && connections[sessionId] === undefined) {
            n8n_workflow_1.LoggerProxy.error(`The session "${sessionId}" is not registered.`, { sessionId });
            return;
        }
        n8n_workflow_1.LoggerProxy.debug(`Send data of type "${type}" to editor-UI`, { dataType: type, sessionId });
        const sendData = (0, n8n_workflow_1.jsonStringify)({ type, data }, { replaceCircularRefs: true });
        if (sessionId === undefined) {
            Object.values(connections).forEach((connection) => this.sendToOne(connection, sendData));
        }
        else {
            this.sendToOne(connections[sessionId], sendData);
        }
    }
}
exports.AbstractPush = AbstractPush;
//# sourceMappingURL=abstract.push.js.map