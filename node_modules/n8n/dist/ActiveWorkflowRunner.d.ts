import type { ExecutionError, IDeferredPromise, IExecuteResponsePromiseData, IGetExecutePollFunctions, IGetExecuteTriggerFunctions, INode, INodeExecutionData, IWorkflowBase, IWorkflowExecuteAdditionalData as IWorkflowExecuteAdditionalDataWorkflow, WebhookHttpMethod, WorkflowActivateMode, WorkflowExecuteMode } from 'n8n-workflow';
import { Workflow } from 'n8n-workflow';
import type express from 'express';
import type { IActivationError, IResponseCallbackData, IWorkflowDb } from './Interfaces';
import type { User } from './databases/entities/User';
import { ActiveExecutions } from './ActiveExecutions';
import { NodeTypes } from './NodeTypes';
import { ExternalHooks } from './ExternalHooks';
export declare class ActiveWorkflowRunner {
    private activeExecutions;
    private externalHooks;
    private nodeTypes;
    private activeWorkflows;
    private activationErrors;
    private queuedWorkflowActivations;
    constructor(activeExecutions: ActiveExecutions, externalHooks: ExternalHooks, nodeTypes: NodeTypes);
    init(): Promise<void>;
    removeAll(): Promise<void>;
    executeWebhook(httpMethod: WebhookHttpMethod, path: string, req: express.Request, res: express.Response): Promise<IResponseCallbackData>;
    getWebhookMethods(path: string): Promise<string[]>;
    getActiveWorkflows(user?: User): Promise<IWorkflowDb[]>;
    isActive(id: string): Promise<boolean>;
    getActivationError(id: string): IActivationError | undefined;
    addWorkflowWebhooks(workflow: Workflow, additionalData: IWorkflowExecuteAdditionalDataWorkflow, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): Promise<void>;
    removeWorkflowWebhooks(workflowId: string): Promise<void>;
    runWorkflow(workflowData: IWorkflowDb, node: INode, data: INodeExecutionData[][], additionalData: IWorkflowExecuteAdditionalDataWorkflow, mode: WorkflowExecuteMode, responsePromise?: IDeferredPromise<IExecuteResponsePromiseData>): Promise<string>;
    getExecutePollFunctions(workflowData: IWorkflowDb, additionalData: IWorkflowExecuteAdditionalDataWorkflow, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): IGetExecutePollFunctions;
    getExecuteTriggerFunctions(workflowData: IWorkflowDb, additionalData: IWorkflowExecuteAdditionalDataWorkflow, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): IGetExecuteTriggerFunctions;
    executeErrorWorkflow(error: ExecutionError, workflowData: IWorkflowBase, mode: WorkflowExecuteMode): void;
    add(workflowId: string, activation: WorkflowActivateMode, workflowData?: IWorkflowDb): Promise<void>;
    addQueuedWorkflowActivation(activationMode: WorkflowActivateMode, workflowData: IWorkflowDb): void;
    removeQueuedWorkflowActivation(workflowId: string): void;
    removeAllQueuedWorkflowActivations(): void;
    remove(workflowId: string): Promise<void>;
}
