import type { ExecutionError, IDeferredPromise, IExecuteResponsePromiseData, WorkflowExecuteMode, WorkflowHooks } from 'n8n-workflow';
import { ActiveExecutions } from './ActiveExecutions';
import type { IProcessMessageDataHook, IWorkflowExecutionDataProcess } from './Interfaces';
import type { JobQueue } from './Queue';
import { Push } from './push';
export declare class WorkflowRunner {
    activeExecutions: ActiveExecutions;
    push: Push;
    jobQueue: JobQueue;
    constructor();
    processHookMessage(workflowHooks: WorkflowHooks, hookData: IProcessMessageDataHook): void;
    processError(error: ExecutionError, startedAt: Date, executionMode: WorkflowExecuteMode, executionId: string, hooks?: WorkflowHooks): Promise<void>;
    run(data: IWorkflowExecutionDataProcess, loadStaticData?: boolean, realtime?: boolean, executionId?: string, responsePromise?: IDeferredPromise<IExecuteResponsePromiseData>): Promise<string>;
    runMainProcess(data: IWorkflowExecutionDataProcess, loadStaticData?: boolean, restartExecutionId?: string, responsePromise?: IDeferredPromise<IExecuteResponsePromiseData>): Promise<string>;
    enqueueExecution(data: IWorkflowExecutionDataProcess, loadStaticData?: boolean, realtime?: boolean, restartExecutionId?: string, responsePromise?: IDeferredPromise<IExecuteResponsePromiseData>): Promise<string>;
    runSubprocess(data: IWorkflowExecutionDataProcess, loadStaticData?: boolean, restartExecutionId?: string, responsePromise?: IDeferredPromise<IExecuteResponsePromiseData>): Promise<string>;
}
