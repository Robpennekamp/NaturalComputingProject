/// <reference types="./otpauth.d.ts" />
import*as c from"node:crypto";const v=s=>{const e=new ArrayBuffer(8),r=new Uint8Array(e);let t=s;for(let i=7;i>=0&&t!==0;i--)r[i]=t&255,t-=r[i],t/=256;return e};var T=void 0;const d=(()=>{if(typeof globalThis=="object")return globalThis;Object.defineProperty(Object.prototype,"__GLOBALTHIS__",{get(){return this},configurable:!0});try{if(typeof __GLOBALTHIS__!="undefined")return __GLOBALTHIS__}finally{delete Object.prototype.__GLOBALTHIS__}if(typeof self!="undefined")return self;if(typeof window!="undefined")return window;if(typeof global!="undefined")return global})(),U={SHA1:"SHA-1",SHA224:"SHA-224",SHA256:"SHA-256",SHA384:"SHA-384",SHA512:"SHA-512","SHA3-224":"SHA3-224","SHA3-256":"SHA3-256","SHA3-384":"SHA3-384","SHA3-512":"SHA3-512"},I=(s,e,r)=>{if(c!=null&&c.createHmac){const t=c.createHmac(s,d.Buffer.from(e));return t.update(d.Buffer.from(r)),t.digest().buffer}else{const t=U[s.toUpperCase()];if(typeof t=="undefined")throw new TypeError("Unknown hash function");const i=new T(t,"ARRAYBUFFER");return i.setHMACKey(e,"ARRAYBUFFER"),i.update(r),i.getHMAC("ARRAYBUFFER")}},w="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",E=s=>{let e=s.length;for(;s[e-1]==="=";)--e;const r=(e<s.length?s.substring(0,e):s).toUpperCase(),t=new ArrayBuffer(r.length*5/8|0),i=new Uint8Array(t);let n=0,o=0,a=0;for(let f=0;f<r.length;f++){const g=w.indexOf(r[f]);if(g===-1)throw new TypeError(`Invalid character found: ${r[f]}`);o=o<<5|g,n+=5,n>=8&&(n-=8,i[a++]=o>>>n)}return t},B=s=>{const e=new Uint8Array(s);let r=0,t=0,i="";for(let n=0;n<e.length;n++)for(t=t<<8|e[n],r+=8;r>=5;)i+=w[t>>>r-5&31],r-=5;return r>0&&(i+=w[t<<5-r&31]),i},C=s=>{const e=new ArrayBuffer(s.length/2),r=new Uint8Array(e);for(let t=0;t<s.length;t+=2)r[t/2]=parseInt(s.substring(t,t+2),16);return e},O=s=>{const e=new Uint8Array(s);let r="";for(let t=0;t<e.length;t++){const i=e[t].toString(16);i.length===1&&(r+="0"),r+=i}return r.toUpperCase()},R=s=>{const e=new ArrayBuffer(s.length),r=new Uint8Array(e);for(let t=0;t<s.length;t++)r[t]=s.charCodeAt(t)&255;return e},P=s=>{const e=new Uint8Array(s);let r="";for(let t=0;t<e.length;t++)r+=String.fromCharCode(e[t]);return r},y=d.TextEncoder?new d.TextEncoder("utf-8"):null,b=d.TextDecoder?new d.TextDecoder("utf-8"):null,L=s=>{if(!y)throw new Error("Encoding API not available");return y.encode(s).buffer},x=s=>{if(!b)throw new Error("Encoding API not available");return b.decode(s)},j=s=>{var e;if(c!=null&&c.randomBytes)return c.randomBytes(s).buffer;if(!((e=d.crypto)!=null&&e.getRandomValues))throw new Error("Cryptography API not available");return d.crypto.getRandomValues(new Uint8Array(s)).buffer};class h{constructor(){let{buffer:e,size:r=20}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.buffer=typeof e=="undefined"?j(r):e}static fromLatin1(e){return new h({buffer:R(e)})}static fromUTF8(e){return new h({buffer:L(e)})}static fromBase32(e){return new h({buffer:E(e)})}static fromHex(e){return new h({buffer:C(e)})}get latin1(){return Object.defineProperty(this,"latin1",{enumerable:!0,value:P(this.buffer)}),this.latin1}get utf8(){return Object.defineProperty(this,"utf8",{enumerable:!0,value:x(this.buffer)}),this.utf8}get base32(){return Object.defineProperty(this,"base32",{enumerable:!0,value:B(this.buffer)}),this.base32}get hex(){return Object.defineProperty(this,"hex",{enumerable:!0,value:O(this.buffer)}),this.hex}}const k=(s,e)=>{if(c!=null&&c.timingSafeEqual)return c.timingSafeEqual(d.Buffer.from(s),d.Buffer.from(e));{if(s.length!==e.length)throw new TypeError("Input strings must have the same length");let r=-1,t=0;for(;++r<s.length;)t|=s.charCodeAt(r)^e.charCodeAt(r);return t===0}};var F=Math.pow;let p=class l{static get defaults(){return{issuer:"",label:"OTPAuth",algorithm:"SHA1",digits:6,counter:0,window:1}}constructor(){let{issuer:e=l.defaults.issuer,label:r=l.defaults.label,secret:t=new h,algorithm:i=l.defaults.algorithm,digits:n=l.defaults.digits,counter:o=l.defaults.counter}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.issuer=e,this.label=r,this.secret=typeof t=="string"?h.fromBase32(t):t,this.algorithm=i.toUpperCase(),this.digits=n,this.counter=o}static generate(e){let{secret:r,algorithm:t=l.defaults.algorithm,digits:i=l.defaults.digits,counter:n=l.defaults.counter}=e;const o=new Uint8Array(I(t,r.buffer,v(n))),a=o[o.byteLength-1]&15;return(((o[a]&127)<<24|(o[a+1]&255)<<16|(o[a+2]&255)<<8|o[a+3]&255)%F(10,i)).toString().padStart(i,"0")}generate(){let{counter:e=this.counter++}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return l.generate({secret:this.secret,algorithm:this.algorithm,digits:this.digits,counter:e})}static validate(e){let{token:r,secret:t,algorithm:i,digits:n,counter:o=l.defaults.counter,window:a=l.defaults.window}=e;if(r.length!==n)return null;let f=null;for(let g=o-a;g<=o+a;++g){const m=l.generate({secret:t,algorithm:i,digits:n,counter:g});k(r,m)&&(f=g-o)}return f}validate(e){let{token:r,counter:t=this.counter,window:i}=e;return l.validate({token:r,secret:this.secret,algorithm:this.algorithm,digits:this.digits,counter:t,window:i})}toString(){const e=encodeURIComponent;return`otpauth://hotp/${this.issuer.length>0?`${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&`:`${e(this.label)}?`}secret=${e(this.secret.base32)}&algorithm=${e(this.algorithm)}&digits=${e(this.digits)}&counter=${e(this.counter)}`}};class u{static get defaults(){return{issuer:"",label:"OTPAuth",algorithm:"SHA1",digits:6,period:30,window:1}}constructor(){let{issuer:e=u.defaults.issuer,label:r=u.defaults.label,secret:t=new h,algorithm:i=u.defaults.algorithm,digits:n=u.defaults.digits,period:o=u.defaults.period}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.issuer=e,this.label=r,this.secret=typeof t=="string"?h.fromBase32(t):t,this.algorithm=i.toUpperCase(),this.digits=n,this.period=o}static generate(e){let{secret:r,algorithm:t,digits:i,period:n=u.defaults.period,timestamp:o=Date.now()}=e;return p.generate({secret:r,algorithm:t,digits:i,counter:Math.floor(o/1e3/n)})}generate(){let{timestamp:e=Date.now()}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return u.generate({secret:this.secret,algorithm:this.algorithm,digits:this.digits,period:this.period,timestamp:e})}static validate(e){let{token:r,secret:t,algorithm:i,digits:n,period:o=u.defaults.period,timestamp:a=Date.now(),window:f}=e;return p.validate({token:r,secret:t,algorithm:i,digits:n,counter:Math.floor(a/1e3/o),window:f})}validate(e){let{token:r,timestamp:t,window:i}=e;return u.validate({token:r,secret:this.secret,algorithm:this.algorithm,digits:this.digits,period:this.period,timestamp:t,window:i})}toString(){const e=encodeURIComponent;return`otpauth://totp/${this.issuer.length>0?`${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&`:`${e(this.label)}?`}secret=${e(this.secret.base32)}&algorithm=${e(this.algorithm)}&digits=${e(this.digits)}&period=${e(this.period)}`}}const M=/^otpauth:\/\/([ht]otp)\/(.+)\?([A-Z0-9.~_-]+=[^?&]*(?:&[A-Z0-9.~_-]+=[^?&]*)*)$/i,D=/^[2-7A-Z]+=*$/i,G=/^SHA(?:1|224|256|384|512|3-224|3-256|3-384|3-512)$/i,Y=/^[+-]?\d+$/,$=/^\+?[1-9]\d*$/;class Z{static parse(e){let r;try{r=e.match(M)}catch(f){}if(!Array.isArray(r))throw new URIError("Invalid URI format");const t=r[1].toLowerCase(),i=r[2].split(/(?::|%3A) *(.+)/i,2).map(decodeURIComponent),n=r[3].split("&").reduce((f,g)=>{const m=g.split(/=(.*)/,2).map(decodeURIComponent),S=m[0].toLowerCase(),H=m[1],A=f;return A[S]=H,A},{});let o;const a={};if(t==="hotp")if(o=p,typeof n.counter!="undefined"&&Y.test(n.counter))a.counter=parseInt(n.counter,10);else throw new TypeError("Missing or invalid 'counter' parameter");else if(t==="totp"){if(o=u,typeof n.period!="undefined")if($.test(n.period))a.period=parseInt(n.period,10);else throw new TypeError("Invalid 'period' parameter")}else throw new TypeError("Unknown OTP type");if(i.length===2?(a.label=i[1],a.issuer=i[0]):(a.label=i[0],typeof n.issuer!="undefined"&&(a.issuer=n.issuer)),typeof n.secret!="undefined"&&D.test(n.secret))a.secret=n.secret;else throw new TypeError("Missing or invalid 'secret' parameter");if(typeof n.algorithm!="undefined")if(G.test(n.algorithm))a.algorithm=n.algorithm;else throw new TypeError("Invalid 'algorithm' parameter");if(typeof n.digits!="undefined")if($.test(n.digits))a.digits=parseInt(n.digits,10);else throw new TypeError("Invalid 'digits' parameter");return new o(a)}static stringify(e){if(e instanceof p||e instanceof u)return e.toString();throw new TypeError("Invalid 'HOTP/TOTP' object")}}const V="9.1.2";export{p as HOTP,h as Secret,u as TOTP,Z as URI,V as version};
//# sourceMappingURL=otpauth.node.min.mjs.map
